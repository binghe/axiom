\documentclass[dvips]{book}
\newcommand{\VolumeName}{Volume BugList: Axiom Bugs}
\input{bookheader.tex}
\pagenumbering{arabic}
\mainmatter
\setcounter{chapter}{0} % Chapter 1
\chapter{Introduction}
\section{The Numbering Scheme}
\begin{verbatim}
bug 7336: 
todo 342:
wish 1012:
meh 5:
errors 10016:
warnings 20574:
typos 40363:
dup 50006:
nonextend 60077:
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7335: type resolution failure}
\begin{verbatim}
Infinite recursion in type checking. See resolveTTSpecial

2^(1/2)/x/(%i)^(1/2)

This happens during type resolution between
Fraction(Polynomial(AlgebraicNumber)) and Expression(Complex(Integer))

see https://groups.google.com/forum/#!topic/fricas-devel/czk7Y-m_uWk
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7334: coerce missing from EXPR(Quaternion (Complex (Float)))}
\begin{verbatim}

t1:Quaternion Complex Expression Integer:=quatern(1.1,1.2,1.3,1.4)
Function:  coerce : Quaternion(Complex(Float)) -> % is missing from domain: 
           Expression(Quaternion(Complex(Float)))
   Internal Error
   The function coerce with signature $(Quaternion (Complex (Float))) is 
      missing from domain Expression(Quaternion (Complex (Float)))

\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7333: elt: index out of range}
\begin{verbatim}

-- fix bug 7324
bmt:=zero(2,2)$Matrix(POLY PF 2)
determinant bmt

\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7332: cannot be coerced to mode (SUP(INT))}
\begin{verbatim}

-- regression test of bug 7298: coercion to SUP failure in factor
-- fixed by 20150126.02.wxh.patch

rh1:=(4*x^3+2*y^2+1)*(12*x^5-x^3*y+12)*(x+1)*(y^2+3)*(x^2-1)
rh2:=factor(rh1)

\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7331: raise an error but works interpreted}
\begin{verbatim}

f==n+->sum(sum(1/i,i=1..j),j=1..n)
f(3)

\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7330: does not modify emptybst}
\begin{verbatim}

emptybst := empty()$BSTREE(INT)
t1 := insert!(8,emptybst)
t1
emptybst

\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7329: fails}
\begin{verbatim}

lm := [3,5,7,11]
t := balancedBinaryTree(#lm, 0)
setleaves!(t,lm)
mapDown!(t,12,rem)

\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7328: delete! does not delete first table item}
\begin{verbatim}

Data := Record(monthsOld : Integer, gender : String)
al : AssociationList(String,Data) := table()
al."bob" := [407,"male"]$Data
al."judith" := [366,"female"]$Data
al
delete!(al,1)
al

\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7327: This truncates the list}
\begin{verbatim}

l := [1,4,2,-6,0,3,5,4,2,3]
reverse! l
l

\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7326: insert! does not modify the list}
\begin{verbatim}

)d op insert!

This modifies the list
l := [1,4,2,-6,0,3,5,4,2,3]
insert!(10,l,4)
l

But this does not
l := [1,4,2,-6,0,3,5,4,2,3]
insert!(2,l,1)
l

\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{book0 Jenks}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{todo 341: merge endpapers with text}
\begin{verbatim}

The books/endpaper.pamphlet should be added to the Jenks book

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{book5 Interpreter}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{bug 7322: )co dh )constructor DHMATRIX )functions identity}
\begin{verbatim}
)co dh )constructor DHMATRIX )functions identity

   Compiling AXIOM source code from dh.spad
   DHMATRIX abbreviates domain DenavitHartenbergMatrix 
   processing macro definition minrow ==> One 
   processing macro definition mincolumn ==> One 
   processing macro definition nx ==> ::(x(One,One),R) 
   processing macro definition ny ==> ::(x(2,One),R) 
   processing macro definition nz ==> ::(x(3,One),R) 
   processing macro definition ox ==> ::(x(One,2),R) 
   processing macro definition oy ==> ::(x(2,2),R) 
   processing macro definition oz ==> ::(x(3,2),R) 
   processing macro definition ax ==> ::(x(One,3),R) 
   processing macro definition ay ==> ::(x(2,3),R) 
   processing macro definition az ==> ::(x(3,3),R) 
   processing macro definition px ==> ::(x(One,4),R) 
   processing macro definition py ==> ::(x(2,4),R) 
   processing macro definition pz ==> ::(x(3,4),R) 
   processing macro definition row ==> Vector R 
   processing macro definition col ==> Vector R 
   processing macro definition radians ==> /(pi,180) 
   processing macro definition SIG ==> -- the constructor category 
   processing macro definition CODE ==> -- the constructor capsule 
------------------------------------------------------------------------
   initializing nrlib DHMATRIX for DenavitHartenbergMatrix 
   compiling into nrlib DHMATRIX 
****** Domain: R already in scope
   compiling exported identity : () -> $

Error: ERROR "Caught fatal error [memory may be damaged]"
Fast links are on: do (si::use-fast-links nil) for debugging
Signalled by |COMPILERDOITWITHSCREENEDLISPLIB|.
ERROR "Caught fatal error [memory may be damaged]"

Broken at APPLY.  Type :H for Help.
    1  Return to top level. 
BOOT>>

\end{verbatim}

\subsection{bug 7321: missing spaces in )show output}
\begin{verbatim}
)show INTABL
 InnerTable(Key: SetCategory,Entry: SetCategory,addDom)where
   addDom: TableAggregate(Key,Entry)with
        finiteAggregate is a domain constructor
 Abbreviation for InnerTable is INTABL 
 This constructor is not exposed in this frame.
 Issue )edit bookvol10.3.pamphlet to see algebra source code for INTABL 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 334: eliminate bcString2HyString}
\begin{verbatim}

eliminate bcString2HyString

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 333: eliminate bcFindString, replace with position}
\begin{verbatim}

eliminate bcFindString, replace with position

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 332: rename linkGen to bcGen in all source files}
\begin{verbatim}

rename linkGen to bcGen in all source files. linkGen is obsolete.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7250: print(typeOf(1)::OutputForm) Value Stack Overflow}
\begin{verbatim}

(1) -> typeOf(1)

   (1)  PositiveInteger
                                                                 Type: Domain
(2) -> typeOf(1)::OutputForm

   (2)  PositiveInteger()
                                                             Type: OutputForm
(3) -> print(typeOf(1)::OutputForm)
 
   >> System error:
   Value stack overflow.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7262: bad expression parse}
reported by Ralf Hemmecke)
\begin{verbatim}

^/2

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7265: interpreter does early retract to Taylor series}
\begin{verbatim}

Z ==> Integer
Q ==> Fraction Z
z:Symbol := 'z
L ==> UnivariateLaurentSeries(Q,z,0)
q:L := z::Variable(z)::L
t1:L := (1/((1-q)*(1-q^2)))
t2 := t1-1
recip t2
t3 := recip t2
t4:Union(L,"failed") := recip t2  -- bug in interpreter
t5:Union(L,"failed") := (recip t2)$L
t6:Union(L,"failed") := t3

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7269: hash does not work for Record}
\begin{verbatim}

(1) -> T:=Record(f1:Integer)

   (1)  Record(f1: Integer)
                                                                 Type: Domain
(2) -> hash(t)

   (2)  116
                                                          Type: SingleInteger
(3) -> t:=[0]@T

   (3)  [f1= 0]
                                                    Type: Record(f1: Integer)
(4) -> hash(t)
   There are 8 exposed and 1 unexposed library operations named hash 
      having 1 argument(s) but none was determined to be applicable. 
      Use HyperDoc Browse, or issue
                              )display op hash
      to learn more about the available operations. Perhaps 
      package-calling the operation or using coercions on the arguments
      will allow you to apply the operation.
 
   Cannot find a definition or applicable library operation named hash 
      with argument type(s) 
                             Record(f1: Integer)
      
      Perhaps you should use "@" to indicate the required return type, 
      or "$" to specify which version of the function you need.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7268: Typechecker gets confused by flow control}
\begin{verbatim}

Spad typechecker is supposed to track type tests, and 
allow operation which are safe due to dynamic tests. 
However, tis works for 'if' but fails for loops, as in:

a:R
b:R
c:=a exquo b
while c case R repeat
  a:=c
  c:=a exquo b

Spad compiler report type error on assignment to a.

But both of these work:

a:R
b:R
c:=a exquo b
if c case R then
  while c case R repeat
    a:=c
    c:=a exquo b

and 

a:R
b:R
c:=a exquo b
while c case R repeat
  if c case R then
    a:=c
    c:=a exquo b

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7272: )savesystem does not build a restorable session}
\begin{verbatim}

Raymond Rogers <raymond.rogers72@gmail.com> reports that

a:=4
)savesystem foo

./foo
a <=== should be 4 but is a Variable

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 336: getdatabase should handle special forms}
\begin{verbatim}

This code should not exist. Fix getdatabase to return the right answer.

    ((BOOT-EQUAL name '|Union|) '(|Union| (|:| |a| A) (|:| |b| B)))
    ((BOOT-EQUAL name '|UntaggedUnion|) '(|Union| A B))
    ((BOOT-EQUAL name '|Record|) '(|Record| (|:| |a| A) (|:| |b| B)))
    ((BOOT-EQUAL name '|Mapping|) '(|Mapping| T S))
    ((BOOT-EQUAL name '|Enumeration|) '(|Enumeration| |a| |b|))
    (t (GETDATABASE name 'CONSTRUCTORFORM))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7285: tracing of Kernel failed}
\begin{verbatim}

)trace Kernel )math
 
   Parameterized constructors traced:
      KERNEL
(22) -> sin(1)
1<enter Kernel.kernel,30 : 
 arg1= pi
 arg2= []
 arg3= 1
 1<enter Kernel.setPosition,26 : 
  arg1= %pi
  arg2= 1024
 1>exit  Kernel.setPosition,26  
   >> System error:
   1024 is not of type CHARACTER.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7282: Cannot convert from type Matrix(Integer)...}
\begin{verbatim}

K := Fraction Integer
g := matrix [[1,0,0,0], [0,-1,0,0], [0,0,-1,0], [0,0,0,-1]]
D := CliffordAlgebra(4, K, g)
D::InputForm
unparse %
parse(%)@InputForm
1::D

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7281: )show TYPE gives duplicate output}
\begin{verbatim}

)show TYPE
 Type  is a category constructor
 Abbreviation for Type is TYPE 
 This constructor is exposed in this frame.
 Issue )edit bookvol10.2.pamphlet to see algebra source code for TYPE 

------------------------------- Operations --------------------------------
 Type is a category constructor.
 Abbreviation for Type is TYPE 
 This constructor is exposed in this frame.
 Issue )edit bookvol10.2.pamphlet to see algebra source code for TYPE 

------------------------------- Operations --------------------------------

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7280: Enumeration fails}
\begin{verbatim}

Insn == Enumeration(New, Move, Line, Close)
Insn

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7279: subscripting "1"::Symbol fails}
\begin{verbatim}

subscript("s"::Symbol,["x"::Symbol::OutputForm])

   (1)  s
         x
                                                                 Type: Symbol
(2) -> subscript("1"::Symbol,["x"::Symbol::OutputForm])

 
   >> System error:
   The index, 4, is too large.

(reported by Ralf Hemmecke)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7284: outputFixed seems wrong}
\begin{verbatim}

outputFixed(0)
                                                                   Type: Void
(7) -> 0.0

   (7)  0.0
                                                                  Type: Float

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7283: printing of typeOf failed}
\begin{verbatim}

print(typeOf(1)::OutputForm)
 
   >> System error:
   Caught fatal error [memory may be damaged]

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7293: )trace EXPR )math}
\begin{verbatim}

)trace EXPR )math
 
   Parameterized constructors traced:
      EXPR
(1) -> exp(x)
1<enter Expression.coerce,360 : 
 arg1= x
...
                     arg1= x
                                                                                                                                                                                   180<enter Expression.coerce,360  
   >> System error:
   Bind stack overflow.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7292: )with API fails}
\begin{verbatim}

)with API
 
   >> System error:
   The function |with| is undefined.

(1) -> )library API
   )library cannot find the file API.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7291: cos(2/3@Float) parses wrong}
\begin{verbatim}

--S 8 of 51
cos(2/3@Float)
 
 
Daly Bug
   An expression involving @ Float actually evaluated to one of type 
      PositiveInteger . Perhaps you should use :: Float .
--R 
--R
--R   (8)  0.7858872607 7694800072
--R                                                                  Type: Float
--E 8

--S 9 of 51
cos((2/3)@Float)
 

   (8)  0.7858872607 7694800072
                                                                  Type: Float
--R 
--R
--R   (9)  0.7858872607 7694800072
--R                                                                  Type: Float
--E 9

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7290: )d op coerce fails}
\begin{verbatim}

)d op coerce

There are 195 exposed functions called coerce :
   [1] List(D2) -> D from D if D2 has FIELD and D has AFSPCAT(D2)
   [2] D -> List(D2) from D if D has AFSPCAT(D2) and D2 has FIELD
   [3] D1 -> D from D if D has ALGEBRA(D1) and D1 has COMRING
 
   >> System error:
   D2 is not of type SEQUENCE.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7303: Duplicate signature in )show ALIST }
\begin{verbatim}

parts : % -> List(Record(key: Key,entry: Entry))
occurs twice in )show ALIST

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 338: Convert to Float fails}
\begin{verbatim}

(1) -> eval(integrate(x*exp(-(x-u)^2/2)/(sqrt(2*%pi)),x=a..%plusInfinity),[a=1,u=0.5])

   (1)  - 0.25 erf(0.3535533905 932737622) + 0.6020653267 6429947778
                                                      Type: Expression(Float)
(2) -> eval(integrate(x*exp(-(x-u)^2/2)/(sqrt(2*%pi)),x=a..%plusInfinity),[a=1,u=0.5])::Float
 
   Cannot convert from type Expression(Float) to Float for value
   - 0.25 erf(0.3535533905 932737622) + 0.6020653267 6429947778

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7302: rich12b.input 457 failed}
\begin{verbatim}

The storage for STRING is exhausted.
Currently, 710 pages are allocated.
Use ALLOCATE to expand the space.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{book7 Hyperdoc}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7320: bookvol7.1 ugInOutFortranPage fails}
\begin{verbatim}

Attempting to format page crashes hyperdoc

Reference 
 -> Axiom Book 
  -> Input Files and Output Styles 
   -> Fortran Format

\end{chunk}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 331: in bookvol7.1 this is commented out}
\begin{verbatim}

todo 331: in bookvol7.1 this is commented out but appears to be implemented
          be sure to update bookvol11, search for "Do a summation"
          be sure to generate v5bcproduct.eps and uncomment the minipage
          in bookvol5

%\menulispdownlink{Compute a product}{(|bcProduct|)}\space{}

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7277: Hyperdoc fails to reconnect after failure}
\begin{verbatim}

Hyperdoc crash
)hd
Hyperdoc -> Referecne -> Language -> block

page: Not Connected to Axiom

Hyperdoc isn't connected to Axiom, therefore cannot execute
the button you pressed.

binding UNIX server socket: Address already in use
(HyperDoc) Warning: Not connected to AXIOM Server!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7308: Hyperdoc page Menuexlap fails to format}
\begin{verbatim}

bookvol5: bcLinearSolveMatrixInhomo

unknown itemType
(inputStrings ({\em Coefficient 1:}\space{2}  30 0 c1 P) ({\em Coefficient 2:}\space{2} 30 0 c2 P))

Hyperdoc ->
 Solve ->
  A System of Linear Equations ->
   In Matrix Form -> 
    Continue ->
     Not Zero ->
      FAIL
\end{verbatim}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{book8 Graphics}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{bug 7319: ignoring return values}
\begin{verbatim}

edin.c: In function `do_reading':
edin.c:632:11: warning: ignoring return value of `write', declared with attribute warn_unused_result [-Wunused-result]
      write(contNum, &in_buff[num_proc], num_read - num_proc);
           ^
edin.c:634:13: warning: ignoring return value of `write', declared with attribute warn_unused_result [-Wunused-result]
        write(contNum, "\n", 1);
             ^
edin.c:641:8: warning: ignoring return value of `write', declared with attribute warn_unused_result [-Wunused-result]
   write(contNum, "\n", 1);
        ^
edin.c:659:10: warning: ignoring return value of `write', declared with attribute warn_unused_result [-Wunused-result]
     write(contNum, "\n", 1);
          ^
edin.c: In function `send_line_to_child':
edin.c:718:8: warning: ignoring return value of `write', declared with attribute warn_unused_result [-Wunused-result]
   write(contNum, converted_buffer, converted_num);
        ^
edin.c: In function `send_function_to_child':
edin.c:1126:8: warning: ignoring return value of `write', declared with attribute warn_unused_result [-Wunused-result]
   write(contNum, buff, buff_pntr);
        ^
edin.c: In function `send_buff_to_child':
edin.c:1145:10: warning: ignoring return value of `write', declared with attribute warn_unused_result [-Wunused-result]
     write(chann, buff, buff_pntr);
          ^
fnct-key.c: In function `get_str':
fnct-key.c:406:9: warning: ignoring return value of `read', declared with attribute warn_unused_result [-Wunused-result]
     read(fd, &c, 1);
         ^
fnct-key.c:408:13: warning: ignoring return value of `read', declared with attribute warn_unused_result [-Wunused-result]
         read(fd, &c, 1);
             ^
fnct-key.c: In function `handle_function_key':
fnct-key.c:497:18: warning: ignoring return value of `write', declared with attribute warn_unused_result [-Wunused-result]
             write(fd, buff, buff_pntr);
                  ^
fnct-key.c:504:22: warning: ignoring return value of `write', declared with attribute warn_unused_result [-Wunused-result]
                 write(fd, buff, buff_pntr);
                      ^
sockio-c.c: In function `remote_stdio':
sockio-c.c:837:12: warning: ignoring return value of `fgets', declared with attribute warn_unused_result [-Wunused-result]
       fgets(buf,1024,stdin);
            ^
ar: creating libspad.a
edible.c: In function `main':
edible.c:550:7: warning: missing sentinel in function call [-Wformat=]
       execlp( program,program, 0);
       ^
edible.c:626:16: warning: ignoring return value of `write', declared with attribute warn_unused_result [-Wunused-result]
           write(1,out_buff, num_read);
                ^
edible.c:629:19: warning: ignoring return value of `write', declared with attribute warn_unused_result [-Wunused-result]
         else write(1,out_buff, num_read);
                   ^
edible.c:642:16: warning: ignoring return value of `write', declared with attribute warn_unused_result [-Wunused-result]
           write(contNum, in_buff, num_read);
                ^
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7245: graphs differ from CRC book}
\begin{verbatim}

v81crcp50-2.6.5.2 and v81crcp50-2.6.5.3 graphs differ from CRC
(see ps/v81crcp50-2.6.5.1-3.eps)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7242: calling title on an empty viewport shows no title}
\begin{verbatim}

)clear all
f(c,x,n) == c/x^n
lineColorDefault(green())
viewport1:=draw(f(0.01,x,1),x=-2..2,adaptive==true,unit==[1.0,1.0])
graph2121:=getGraph(viewport1,1)
lineColorDefault(blue())
viewport2:=draw(f(0.01,x,3),x=-2..2,adaptive==true,unit==[1.0,1.0])
graph2122:=getGraph(viewport2,1)
lineColorDefault(red())
viewport3:=draw(f(0.01,x,5),x=-2..2,adaptive==true,unit==[1.0,1.0])
graph2123:=getGraph(viewport3,1)
viewall:=viewport2D()$TwoDimensionalViewport
title(viewall,"p27-2.1.2.1-3")
putGraph(viewall,graph2122,1)
putGraph(viewall,graph2122,2)
putGraph(viewall,graph2123,3)
units(viewall,1,"on")
points(viewall,1,"off")
points(viewall,2,"off")
points(viewall,3,"off")
makeViewport2D(viewall,title=="test")
close(viewport1)
close(viewport2)
close(viewport3)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7244: graphs differ from CRC book}
\begin{verbatim}

v81crcp50-2.5.5.2 and v81crcp50-2.5.5.3 graphs differ from CRC
(see ps/v81crcp50-2.5.5.1-3.eps)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7243: graphs differ from CRC book}
\begin{verbatim}

v81crcp27-2.1.2.1-3.eps differs from CRC (see bookvol8.1)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7266: integration failure for 1/(sin(x)\texttt{\^}4+1)}
\begin{verbatim}

f:=1/(sin(x)^4+1)
a:=integrate(f,x)
b:=differentiate(a,x,1)
draw(b,x=0..4)
draw(f,x=0..4)

reported by Yanyang Xiao <xyy82148@sjtu.edu.cn> 30 Nov 2014

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7296: connect from VIEW2D is not graph specific}
\begin{verbatim}

The connect function in VIEW2D globally turns lines on or off.
This doesn't allow for overlaying lines on a set of points.

)clear all
FIN:=FiniteField(67,1)  -- declare a field p**n, p=67, n=1
f(x:INT,y:INT):FIN == (y^2-x^3-7)::FIN -- compute a finite point
m():LIST(POINT(DFLOAT)) ==
  lli:LIST(LIST(INT)) := []
  for x in 0..66 repeat
   for y in 0..66 repeat
    a:FIN:=f(x,y)
    if a = 0 then lli:=concat(lli,[[x,y]])
  ld:=lli::LIST(LIST(DFLOAT))
  lpd:=[point(p) for p in ld]
m()
line(x1:INT,y1:INT,x2:INT,y2:INT):EXPR(INT) ==
    -- y-y1 = m(x-x1) where m = (y2-y1)/x2-x1)
  (y2-y1)/(x2-x1)*(x-x1) + y1
line1:=draw(line(2,22,6,25),x=0..67)
line1graph:=getGraph(line1,1)
line2:=draw(line(30,26,47,39),x=0..67)
line2graph:=getGraph(line2,1)
ldo:=title("BitCoin Modular Points")
vp:=draw(m(),[ldo])$DRAWPT
putGraph(vp,line1graph,2)
putGraph(vp,line2graph,3)
axes(vp,1,"on")$VIEW2D -- turn on the axes
units(vp,1,"on")$VIEW2D -- turn on the units
connect(vp,2,"on")$VIEW2D -- turn on the lines
connect(vp,3,"on")$VIEW2D -- turn on the lines
connect(vp,1,"off")$VIEW2D -- turn off the lines
makeViewport2D(vp)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{book9 Compiler}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{book10.2 Algebra Categories}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{U}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7318: ULSCAT undefined variables}
\begin{verbatim}


   finalizing nrlib ULSCAT 
; (DEFUN |UnivariateLaurentSeriesCategory| ...) is being compiled.
;; The variable |UnivariateLaurentSeriesCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |UnivariateLaurentSeriesCategory;| ...) is being compiled.
;; The variable |UnivariateLaurentSeriesCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7316: UPOLYC undefined variable}
\begin{verbatim}


   finalizing nrlib UPOLYC 
; (DEFUN |UnivariatePolynomialCategory| ...) is being compiled.
;; The variable |UnivariatePolynomialCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |UnivariatePolynomialCategory;| ...) is being compiled.
;; The variable |UnivariatePolynomialCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7317: UPOLYC- not known that (Ring) is of mode...}
\begin{verbatim}


   finalizing nrlib UPOLYC- 
   Warnings: 
      [1] solveLinearPolynomialEquation: not known that (Ring) is of mode...
      [2] factorPolynomial: not known that (Ring) is of mode...
      [3] factor: not known that (IntegralDomain) is of mode...
      [4] elt: not known that (IntegralDomain) is of mode...

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7314: URAGG undefined variables}
\begin{verbatim}


   finalizing nrlib URAGG 
; (DEFUN |UnaryRecursiveAggregate| ...) is being compiled.
;; The variable |UnaryRecursiveAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |UnaryRecursiveAggregate;| ...) is being compiled.
;; The variable |UnaryRecursiveAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{book10.3 Algebra Domains}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{bug 7325: Won't Parse}
\begin{verbatim}
Won't parse: (:(K,Field),:(symb,List(Symbol)),
  PolynomialCategory(K,E,OrderedVariableList(symb)),
  DirectProductCategory(#(symb),NonNegativeInteger),
  ProjectiveSpaceCategory(K),:(PCS,LocalPowerSeriesCategory(K)),
  PlacesCategory(K,PCS),NIL,BlowUpMethodCategory)->Category
(SparseMultivariateTaylorSeries documentation) missing right brace--> 
"\\spad{coefficients(s)) gives a stream of coefficients of \\spad{s,} 
  for example, [coefficient(s,0), coefficient(s,1), ...]"
\end{verbatim}


\section{E}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7311: EQ undefined variable}
\begin{verbatim}

>compiling EQ.spad to EQ.nrlib
 
; (DEFUN |Equation;| ...) is being compiled.
;; The variable IDENTITY is undefined.


\end{verbatim}

\section{F}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7312: FDIV undefined variable}
\begin{verbatim}


>compiling FDIV.spad to FDIV.nrlib
 
--------constructor---------
; (DEFUN |FiniteDivisor;| ...) is being compiled.
;; The variable IDENTITY is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

\section{O}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7289: OrderedVariableList type coercion failed}
\begin{verbatim}

Ov := OrderedVariableList([SX, SY, SZ])

   (1)  OrderedVariableList([SX,SY,SZ])
                                                                 Type: Domain
(2) -> S::Ov

 
   >> Error detected within library code:
   index out of range

\end{verbatim}

\section{P}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7263: POLY(ANTISYM(INT,[x])) missing function}
\begin{verbatim}

3*x*dx
   Internal Error
   The function * with signature hashcode is missing from domain 
      Polynomial(AntiSymm (Integer) (x y z)) 

\end{verbatim}


\section{T}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7288: TexFormat radix escapes characters}
\begin{verbatim}

radix(10^100,32)::TEX

   (1)
   ["$$",

    "4#\I9#\L#\K#\I#\P9#\G#\R#\S#\T#\C5#\I#\F164#\P#\O5#\V72#\M#\E827226#\J#\S#
    \L#\A#\P462585#\Q7#\H00000000000000000000"
     ,
    "$$"]
                                                              Type: TexFormat

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7287: TexFormat is incorrect}
\begin{verbatim}

)set output fraction horizontal
(1) -> (1/2)::TEX

   (1)  ["$$","SLASH ","\left(","{1, \: 2} ","\right)","$$"]
                                                              Type: TexFormat

\end{verbatim}

\section{U}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7286: UPXS arithmetic fails}
\begin{verbatim}

a := series(z, z = 0)

   (1)  z
                       Type: UnivariatePuiseuxSeries(Expression(Integer),z,0)
(2) -> b := series(1, x = 0)

   (2)  1
                       Type: UnivariatePuiseuxSeries(Expression(Integer),x,0)
(3) -> a + b
 
   >> Error detected within library code:
   division by zero

\end{verbatim}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{book10.4 Algebra Packages}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{A}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7313: AXSERV undefined variables}
\begin{verbatim}

>compiling AXSERV.spad to AXSERV.nrlib
 
; (DEFUN |AXSERV;getCommand| ...) is being compiled.
;; The variable |tmpmathml| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |tmpalgebra| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |savemathml| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$texOutputStream| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |savealgebra| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |resultmathml| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |resultalgebra| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |AXSERV;getShow| ...) is being compiled.
;; The variable SAVESTREAM is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |AXSERV;lastType| ...) is being compiled.
;; The variable |first| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |stepSav| is undefined.
;; The compiler will assume this variable is a global.


\end{verbatim}

\section{N}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7309: NAGE04 undefined variable}
\begin{verbatim}


>compiling NAGE04.spad to NAGE04.nrlib
 
; (DEFUN |NAGE04;e04dgf;I2DfIDfB2Df4IMIUR;1| ...) is being compiled.
;; The variable OBJFUN is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NAGE04;e04fdf;4IMIUR;2| ...) is being compiled.
;; The variable LSFUN1 is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NAGE04;e04gcf;4IMIUR;3| ...) is being compiled.
;; The variable LSFUN2 is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NAGE04;e04jaf;4I3MIUR;4| ...) is being compiled.
;; The variable FUNCT1 is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NAGE04;e04naf;8IDf6M3B2IMMIUR;6| ...) is being compiled.
;; The variable QPHESS is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NAGE04;e04ucf;6I3M2IBDfI2DfB4DfB5I3Df5IM4MIUUR;7| ...) is being compiled.
;; The variable CONFUN is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7310: NAGD02 undefined variables}
\begin{verbatim}


>compiling NAGD02.spad to NAGD02.nrlib
 
; (DEFUN |NAGD02;d02bbf;Df3IDfMDfIUUR;1| ...) is being compiled.
;; The variable FCN is undefined.
;; The compiler will assume this variable is a global.
;; The variable OUTPUT is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NAGD02;d02bhf;Df2I2DfMDfIUUR;2| ...) is being compiled.
;; The variable G is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NAGD02;d02ejf;Df2ISIDfMDfIUUUUR;4| ...) is being compiled.
;; The variable PEDERV is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NAGD02;d02gbf;2DfIDf3I4M2IUUR;6| ...) is being compiled.
;; The variable FCNF is undefined.
;; The compiler will assume this variable is a global.
;; The variable FCNG is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NAGD02;d02kef;M2IDf2I2DfM2IUUR;7| ...) is being compiled.
;; The variable COEFFN is undefined.
;; The compiler will assume this variable is a global.
;; The variable BDYVAL is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NAGD02;d02raf;4IDf6I2MDfIUUR;9| ...) is being compiled.
;; The variable JACOBF is undefined.
;; The compiler will assume this variable is a global.
;; The variable JACEPS is undefined.
;; The compiler will assume this variable is a global.
;; The variable JACOBG is undefined.
;; The compiler will assume this variable is a global.
;; The variable JACGEP is undefined.
;; The compiler will assume this variable is a global.


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7273: SOLVERAD wester algebra radicalSolve bug}
\begin{verbatim}

--S 26 of 63
radicalSolve(x**3 + x**2 - 7 = 0, x)
 

   (26)
   [
     x =
                            +------------------+2
                            |  +----+       +-+
                +---+       |9\|1295  + 187\|3
           (- 9\|- 3  + 9)  |------------------
                           3|         +-+
                           \|      54\|3
         + 
                            +------------------+
                            |  +----+       +-+
                +---+       |9\|1295  + 187\|3
           (- 3\|- 3  - 3)  |------------------ - 2
                           3|         +-+
                           \|      54\|3
      /
                        +------------------+
                        |  +----+       +-+
            +---+       |9\|1295  + 187\|3
         (9\|- 3  + 9)  |------------------
                       3|         +-+
                       \|      54\|3
     ,

     x =
                            +------------------+2
                            |  +----+       +-+
                +---+       |9\|1295  + 187\|3
           (- 9\|- 3  - 9)  |------------------
                           3|         +-+
                           \|      54\|3
         + 
                            +------------------+
                            |  +----+       +-+
                +---+       |9\|1295  + 187\|3
           (- 3\|- 3  + 3)  |------------------ + 2
                           3|         +-+
                           \|      54\|3
      /
                        +------------------+
                        |  +----+       +-+
            +---+       |9\|1295  + 187\|3
         (9\|- 3  - 9)  |------------------
                       3|         +-+
                       \|      54\|3
     ,
          +------------------+2     +------------------+
          |  +----+       +-+       |  +----+       +-+
          |9\|1295  + 187\|3        |9\|1295  + 187\|3
       9  |------------------  - 3  |------------------ + 1
         3|         +-+            3|         +-+
         \|      54\|3             \|      54\|3
    x= ----------------------------------------------------]
                         +------------------+
                         |  +----+       +-+
                         |9\|1295  + 187\|3
                      9  |------------------
                        3|         +-+
                        \|      54\|3
                                    Type: List(Equation(Expression(Integer)))
--R 
--R
--R   (26)
--R                       +--------------+2                  +--------------+
--R                       |   +----+                         |   +----+
--R                       |   |1295                          |   |1295
--R                       |9  |---- + 187                    |9  |---- + 187
--R           +---+       |  \|  3               +---+       |  \|  3
--R       (- \|- 3  + 1) 3|--------------  + (- \|- 3  - 1) 3|-------------- - 2
--R                      \|       2                         \|       2
--R   [x= ----------------------------------------------------------------------,
--R                                          +--------------+
--R                                          |   +----+
--R                                          |   |1295
--R                                          |9  |---- + 187
--R                              +---+       |  \|  3
--R                           (3\|- 3  + 3) 3|--------------
--R                                         \|       2
--R                       +--------------+2                  +--------------+
--R                       |   +----+                         |   +----+
--R                       |   |1295                          |   |1295
--R                       |9  |---- + 187                    |9  |---- + 187
--R           +---+       |  \|  3               +---+       |  \|  3
--R       (- \|- 3  - 1) 3|--------------  + (- \|- 3  + 1) 3|-------------- + 2
--R                      \|       2                         \|       2
--R    x= ----------------------------------------------------------------------,
--R                                          +--------------+
--R                                          |   +----+
--R                                          |   |1295
--R                                          |9  |---- + 187
--R                              +---+       |  \|  3
--R                           (3\|- 3  - 3) 3|--------------
--R                                         \|       2
--R        +--------------+2    +--------------+
--R        |   +----+           |   +----+
--R        |   |1295            |   |1295
--R        |9  |---- + 187      |9  |---- + 187
--R        |  \|  3             |  \|  3
--R       3|--------------   - 3|--------------  + 1
--R       \|       2           \|       2
--R    x= ------------------------------------------]
--R                      +--------------+
--R                      |   +----+
--R                      |   |1295
--R                      |9  |---- + 187
--R                      |  \|  3
--R                   3 3|--------------
--R                     \|       2
--R                                       Type: List Equation Expression Integer
--E 26

--S 27 of 63
reduce(*, map(e +-> lhs(e) - rhs(e), %))
 

            3     2       +-+ +----+       3       2
         (9x  + 9x  - 63)\|3 \|1295  + 561x  + 561x  - 3927
   (27)  --------------------------------------------------
                         +-+ +----+       +-+2
                       9\|3 \|1295  + 187\|3
                                                    Type: Expression(Integer)
--R 
--R
--R          3    2
--R   (27)  x  + x  - 7
--R                                                     Type: Expression Integer
--E 27

\end{verbatim}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{book10.5 Algebra Numerics}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Build System}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7278: make complains on TESTSET=notests}
\begin{verbatim}

reported by "leonbaum" <notifications@github.com>

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{CATS}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7246: kamke tests missing }
\begin{verbatim}

kamke1 seems to be missing ode97
kamke2 missing 104, 105
kamke6 missing 332
kamke7 missing 357, 359, 360, 362 and many others
kamke7 repeats 776 with different equations

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Testing}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7240: in richtrig800-899 there is an occasional failure}
\begin{verbatim}

--S 349 of 526
a0864:= integrate(t0864,x)
--R 
--R 
--R   >> Error detected within library code:
--R   (1 . failed) cannot be coerced to mode (SparseUnivariatePolynomial (Integer))
--R
--R   Continuing to read the file...
--R
--E 349

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7238: en.regress failures}
\begin{verbatim}

int/input/en.regress

MISMATCH
expected:"     ,"
     got:"     4503599627370496 4503599627370496 576460752303423488   576460752303423488"
MISMATCH
expected:"        1152921504606846976"
     got:"    [----------------,----------------,------------------,- ------------------],"
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7241: missing algebra}
\begin{verbatim}

 in li.input.pamphlet, chunks 2, 6, 34, 38, 42 could be integrated
 and were not.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Documentation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 330: fix the inheritance graph for these}
\begin{verbatim}

todo 330: fix the inheritance graph for these 

"AHYP" [color="#4488FF",href="bookvol10.2.pdf#nameddest=AHYP"]
"AHYP" -> "Category"

"ATTREG" [color="#4488FF",href="bookvol10.2.pdf#nameddest=ATTREG"]
"ATTREG"  -> "Category"

/* nobody seems to go to bastype by itself */
/* we combine these two to minimize edges in the graph */
/* note that koerce is duplicated */
"BASTYPE/KOERCE" [color="blue",href="bookvol10.2.pdf#nameddest=BASTYPE"]
"BASTYPE/KOERCE" -> "Category"

"KOERCE" [color="#4488FF",href="bookvol10.2.pdf#nameddest=KOERCE"]
"KOERCE"  -> "Category"

"BASTYPE-" [color="#88FF44",href="bookvol10.3.pdf#nameddest=BASTYPE"]
"BASTYPE-" -> "Domain"

"CFCAT" [color="#4488FF",href="bookvol10.2.pdf#nameddest=CFCAT"]
"CFCAT"  -> "Category"

"ELTAB" [color="#4488FF",href="bookvol10.2.pdf#nameddest=ELTAB"]
"ELTAB"  -> "Category"

"ESCONT1" [color="#FF4488",href="bookvol10.4.pdf#nameddest=ESCONT1"]
"ESCONT1" -> "Package"
/*"ESCONT1" -> "DFLOAT"*/
/*"ESCONT1" -> "BOOLEAN"*/

"GRDEF" [color="#FF4488",href="bookvol10.4.pdf#nameddest=GRDEF"]
"GRDEF" -> "Package"
/*"GRDEF" -> "BOOLEAN"*/

"INTBIT" [color="#FF4488",href="bookvol10.4.pdf#nameddest=INTBIT"]
"INTBIT" -> "Package"
/*"INTBIT" -> "INT"*/

"KONVERT" [color="#4488FF",href="bookvol10.2.pdf#nameddest=KONVERT"]
"KONVERT"  -> "Category"

"MAGCDOC" [color="#4488FF",href="bookvol10.2.pdf#nameddest=MAGCDOC"]
"MAGCDOC" -> "Category"

"MSYSCMD" [color="#FF4488",href="bookvol10.4.pdf#nameddest=MSYSCMD"]
"MSYSCMD" -> "Package"

"ODEIFTBL" [color="#88FF44",href="bookvol10.3.pdf#nameddest=ODEIFTBL"]
"ODEIFTBL" -> "Domain"

"OM" [color="#4488FF",href="bookvol10.2.pdf#nameddest=OM"]
"OM"  -> "Category"

"OMCONN" [color="#88FF44",href="bookvol10.3.pdf#nameddest=OMCONN"]
"OMCONN" -> "Domain"

"OMDEV" [color="#88FF44",href="bookvol10.3.pdf#nameddest=OMDEV"]
"OMDEV" -> "Domain"

"PRIMCAT" [color="#4488FF",href="bookvol10.2.pdf#nameddest=PRIMCAT"]
"PRIMCAT"  -> "Category"

"PRINT" [color="#FF4488",href="bookvol10.4.pdf#nameddest=PRINT"]
"PRINT" -> "Package"

"PTRANFN" [color="#4488FF",href="bookvol10.2.pdf#nameddest=PTRANFN"]
"PTRANFN"  -> "Category"

"RFDIST" [color="#FF4488",href="bookvol10.4.pdf#nameddest=RFDIST"]
"RFDIST" -> "Package"
/*"RFDIST" -> {"INT"; "PI"; "NNI"; "BOOLEAN"; "SINT"}*/

"RIDIST" [color="#FF4488",href="bookvol10.4.pdf#nameddest=RIDIST"]
"RIDIST" -> "Package"
/*"RIDIST" -> {"SINT"; "NNI"; "INT"}*/

"SPFCAT" [color="#4488FF",href="bookvol10.2.pdf#nameddest=SPFCAT"]
"SPFCAT"  -> "Category"

"TYPE" [color="#4488FF",href="bookvol10.2.pdf#nameddest=TYPE"]
"TYPE"  -> "Category"

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Unclassified}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warning 20573: rec has no value}
\begin{verbatim}


   finalizing nrlib CWMMT 
   Warnings: 
      [1] test6:  rec has no value
      [2] test7:  rec has no value
      [3] test8:  rec has no value
      [4] test9:  rec has no value
      [5] test10:  rec has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7249: radicalSolve(z\texttt{\^}7=1, z)}
\begin{verbatim}

Obviously, all the roots of the equation z^7 = 1 can be expressed in
radicals, and Mathematica can easily produce the explicit expressions
in terms of radicals.

Solve[z^7 == 1, z]

{{z -> 1}, {z -> -(-1)^(1/7)}, {z -> (-1)^(2/7)}, {z -> -(-1)^(3/7)},
{{z -> {z -> (-1)^(4/7)}, {z -> -(-1)^(5/7)}, {z -> (-1)^(6/7)}}

To save the space, below the only example is given.

FunctionExpand[ComplexExpand[-(-1)^(1/7)]]

(1/2)*((1/3)*((1/2)*(-1 + I*Sqrt[7]) + ((-1 + I*Sqrt[3])*((1/2)*(-1 +
I*Sqrt[7]) + (1/2)*(-1 - I*Sqrt[7])*((1/2)*(-1 + I*Sqrt[3]) +
(1/4)*(-1 + I*Sqrt[3])^2)))/(2*(6 + (3/4)*(-1 + I*Sqrt[3])*(-1 +
I*Sqrt[7]) + (1/2)*(-1 - I*Sqrt[7])*(1 + (3/4)*(-1 +
I*Sqrt[3])^2))^(1/3)) + (1/4)*(-1 + I*Sqrt[3])^2*(6 + (3/4)*(-1 +
I*Sqrt[3])*(-1 + I*Sqrt[7]) + (1/2)*(-1 - I*Sqrt[7])*(1 + (3/4)*(-1 +
I*Sqrt[3])^2))^(1/3)) +(1/3)*((1/2)*(1 + I*Sqrt[7]) - ((-1 +
I*Sqrt[3])^2*((1/2)*(-1 -I*Sqrt[7]) + (1/2)*(-1 +
I*Sqrt[7])*((1/2)*(-1 + I*Sqrt[3]) + (1/4)*(-1 + I*Sqrt[3])^2)))/(4*(6
+ (3/4)*(-1 + I*Sqrt[3])*(-1 - I*Sqrt[7]) + (1/2)*(-1 + I*Sqrt[7])*(1
+ (3/4)*(-1 + I*Sqrt[3])^2))^(1/3)) -(1/2)*(-1 + I*Sqrt[3])*(6 +
(3/4)*(-1 + I*Sqrt[3])*(-1 - I*Sqrt[7]) + (1/2)*(-1 + I*Sqrt[7])*(1 +
(3/4)*(-1 + I*Sqrt[3])^2))^(1/3))) + (1/2)*((1/3)*((1/2)*(-1 +
I*Sqrt[7]) + ((-1 + I*Sqrt[3])*((1/2)*(-1 + I*Sqrt[7]) + (1/2)*(-1 -
I*Sqrt[7])*((1/2)*(-1 + I*Sqrt[3]) + (1/4)*(-1 + I*Sqrt[3])^2)))/(2*(6
+ (3/4)*(-1 + I*Sqrt[3])*(-1 + I*Sqrt[7]) + (1/2)*(-1 - I*Sqrt[7])*(1
+ (3/4)*(-1 + I*Sqrt[3])^2))^(1/3)) +(1/4)*(-1 + I*Sqrt[3])^2*(6 +
(3/4)*(-1 + I*Sqrt[3])*(-1 + I*Sqrt[7]) + (1/2)*(-1 - I*Sqrt[7])*(1 +
(3/4)*(-1 + I*Sqrt[3])^2))^(1/3)) + (1/3)*((1/2)*(-1 - I*Sqrt[7])
+((-1 + I*Sqrt[3])^2*((1/2)*(-1 - I*Sqrt[7]) + (1/2)*(-1 +
I*Sqrt[7])*((1/2)*(-1 + I*Sqrt[3]) + (1/4)*(-1 + I*Sqrt[3])^2)))/(4*(6
+ (3/4)*(-1 + I*Sqrt[3])*(-1 - I*Sqrt[7]) + (1/2)*(-1 + I*Sqrt[7])*(1
+ (3/4)*(-1 + I*Sqrt[3])^2))^(1/3)) +(1/2)*(-1 + I*Sqrt[3])*(6 +
(3/4)*(-1 + I*Sqrt[3])*(-1 - I*Sqrt[7]) + (1/2)*(-1 + I*Sqrt[7])*(1 +
(3/4)*(-1 + I*Sqrt[3])^2))^(1/3)))
          

According to the AXIOM Book

AXIOM Book>  Use radicalSolve if you want your solutions expressed in
AXIOM Book>  terms of radicals.

However, already for z^7 = 1 this is not so,

-> radicalSolve(z^7=1, z)

   [z= 1]

and the problem exists for 11, 13, 14, 15, 17, 19 etc

-> for i in 1..20 repeat print([i,#radicalSolve(z^i=1,z)])

   [1,1]
   [2,2]
   [3,3]
   [4,4]
   [5,5]
   [6,6]
   [7,1]   <-- not good
   [8,8]
   [9,9]
   [10,10]
   [11,1]  <-- not good
   [12,12]
   [13,1]  <-- not good
   [14,2]  <-- not good
   [15,7]  <-- not good
   [16,16]
   [17,1]  <-- not good
   [18,18]
   [19,1]  <-- not good
   [20,20]

Subject: Re: [Q] radicalSolve fails to find all roots ?

These are NOT bugs! But the following may be! Consider the equation 
z^n==1 for n = 7:

(1) -> radicalSolve(z^7=2)

   (1)
       7+-+      +---+7+-+    2%pi    7+-+    2%pi
   [z= \|2 , z= \|- 1 \|2 sin(----) + \|2 cos(----),
                                7               7
        +---+7+-+    4%pi    7+-+    4%pi
    z= \|- 1 \|2 sin(----) + \|2 cos(----),
                       7               7
        +---+7+-+    6%pi    7+-+    6%pi
    z= \|- 1 \|2 sin(----) + \|2 cos(----),
                       7               7
        +---+7+-+    8%pi    7+-+    8%pi
    z= \|- 1 \|2 sin(----) + \|2 cos(----),
                       7               7
        +---+7+-+    10%pi    7+-+    10%pi
    z= \|- 1 \|2 sin(-----) + \|2 cos(-----),
                       7                7
        +---+7+-+    12%pi    7+-+    12%pi
    z= \|- 1 \|2 sin(-----) + \|2 cos(-----)]
                       7                7
                     Type: List Equation Expression Integer

-------------- comments

Of course, these are correct solutions by Euler's Formula. A bit
surprising that radicalSolve invokes these for z^7=2 and not for
z^7=1; when n is 7, these trignometric values are not embeddable in a
tower of "solvable" extensions. That is, these are not solutions
expressible in terms of radicals (of *real* numbers) and arithmetic
alone. Put another way, the regular 7-gon is not constructible by
compass and ruler alone. From:

http://mathworld.wolfram.com/ConstructiblePolygon.html
http://mathworld.wolfram.com/TrigonometryAngles.html

A necessary and sufficient condition that a regular n-gon be
constructible is that phi(n) be a power of 2, where phi(n) is the
totient function (Krzek 2001, p. 34).

n =  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17 18 19 20
phi= 1  1  2  2  4  2  6  4  6   4  10   4  12   6   8   8  16  6 18  8
bad=                   x     x       x       x   x              x  x
Vladimir's "not good" values are =

n =                    7            11      13  14  15      17    19

So if you compare the constructible regular n-gons, you can see why
Axiom's results are reasonable: radicalSolve only finds solutions that
are expressible in terms of radicals and arithmetic operations. It did
not find those for n = 15 and 17 probably (I am guessing) because at
the time of implementation, these constructions were not known (at
least to the programmer). On the other hand, for n = 9, 18, the
solutions are expressible in radicals only if radicals of *complex*
numbers are allowed and Axiom found those (perhaps it shouldn't?). The
expansion for (-1)^(1/7) that Vladimir gave involves radicals of
complex numbers, as theory predicts.


When Axiom cannot find solutions, it is (presumably) a PROOF that the
other solutions are NOT solvable by radicals (using *real* numbers),
or at least, there is no known proof that it is solvable at the time
of implementation=2E (That is why I am surprised at the above result
for z^7=2).

In other words, rather than viewing the answer for z^7=1 as a bug, we should
view the answers for z^7=2, z^7=3 (and may be even z^9=1, z^18=1) as bugs!

Still, the package should be upgraded.

-------------------

(1) -> radicalSolve(z^9=1,z)

   (1)
                                             +------------+
                                             |   +---+
        +------------+       +---+ +-+       |- \|- 3  - 1
        |   +---+          (\|- 1 \|3  - 1) 3|------------
        |- \|- 3  - 1                       \|      2
   [z= 3|------------ , z= -------------------------------,
       \|      2                          2
                           +------------+
                           |   +---+
           +---+ +-+       |- \|- 3  - 1      +----------+
       (- \|- 1 \|3  - 1) 3|------------      | +---+
                          \|      2           |\|- 3  - 1
    z= ---------------------------------, z= 3|---------- ,
                       2                     \|     2
                         +----------+                        +----------+=

                         | +---+                             | +---+
         +---+ +-+       |\|- 3  - 1         +---+ +-+       |\|- 3  - 1
       (\|- 1 \|3  - 1) 3|----------     (- \|- 1 \|3  - 1) 3|----------
                        \|     2                            \|     2
    z= -----------------------------, z= ----------------------------=
---,
                     2                                  2
          +---+          +---+
       - \|- 3  - 1     \|- 3  - 1
    z= ------------, z= ----------, z= 1]
             2               2
                      Type: List Equation Expression Integer
                                       =

(2) -> radicalSolve(z^7=3)

   (2)
       7+-+      +---+7+-+    2%pi    7+-+    2%pi
   [z= \|3 , z= \|- 1 \|3 sin(----) + \|3 cos(----),
                                7               7
        +---+7+-+    4%pi    7+-+    4%pi
    z= \|- 1 \|3 sin(----) + \|3 cos(----),
                       7               7
        +---+7+-+    6%pi    7+-+    6%pi
    z= \|- 1 \|3 sin(----) + \|3 cos(----),
                       7               7
        +---+7+-+    8%pi    7+-+    8%pi
    z= \|- 1 \|3 sin(----) + \|3 cos(----),
                       7               7
        +---+7+-+    10%pi    7+-+    10%pi
    z= \|- 1 \|3 sin(-----) + \|3 cos(-----),
                       7                7
        +---+7+-+    12%pi    7+-+    12%pi
    z= \|- 1 \|3 sin(-----) + \|3 cos(-----)]
                       7                7
                   Type: List Equation Expression Integer
                                       =

(3) -> radicalSolve(z^7=1.)
                                                     7
   WARNING (genufact): No known algorithm to factor ?  - 1.0
     , trying square-free.

   (3)
                                       +-----+
   [z= 1.0, z= 0.7818314824 6802980871\|- 1.0  + 0.6234898018 5873353=
053,
                               +-----+
    z= 0.9749279121 8182360702\|- 1.0  - 0.2225209339 5631440428,
                               +-----+
    z= 0.4338837391 1755812048\|- 1.0  - 0.9009688679 0241912624,
                                 +-----+
    z= - 0.4338837391 1755812046\|- 1.0  - 0.9009688679 0241912625,
                                 +-----+
    z= - 0.9749279121 8182360702\|- 1.0  - 0.2225209339 563144043,
                                 +-----+
    z= - 0.7818314824 6802980872\|- 1.0  + 0.6234898018 5873353052]
                   Type: List Equation Expression Float
                                                   =

(4) -> radicalSolve(z^6+z^5+z^4+z^3+z^2+z+1=0)

   (4)  []
                  Type: List Equation Expression Integer

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7248: differentiation bug in D(1,z)}
\begin{verbatim}

(94) -> D(sin(z)^2+cos(z)^2, z)

   (94)  0

(98) -> D(simplify(sin(z)^2+cos(z)^2), z)

   (98)  0


BUT


(95) -> D(1, z)

   There are 5 exposed and 0 unexposed library operations named D
      having 2 argument(s) but none was determined to be applicable.
      Use HyperDoc Browse, or issue
                                )display op D
      to learn more about the available operations. Perhaps
      package-calling the operation or using coercions on the arguments
      will allow you to apply the operation.

   Cannot find a definition or applicable library operation named D
      with argument type(s)
                               PositiveInteger
                                 Variable z

      Perhaps you should use "@" to indicate the required return type,
      or "$" to specify which version of the function you need.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7142: exp\texttt{\^}log(x) Cannot take first of an empty list}
\begin{verbatim}

WS> ElementaryFunctionCategory(): Category == with
WS>     log : $ -> $       ++ log(x) returns the natural logarithm of x.
WS>     exp : $ -> $       ++ exp(x) returns %e to the power x.
WS>     "**": ($, $) -> $  ++ x**y returns x to the power y.
WS>  add
WS>    if $ has Monoid then
WS>      x ** y == exp(y * log x)

The error apparently comes from EXPR where the implementation is
  x**y == exp(y * log(x))

so exp^log(x) is computed as
 
  exp(log(x) * log(exp))

which should be ok, but then the system handles log exp and tries to
simplify it to the identity map, and not finding the argument.

(3) -> exp^log(x)

   >> System error:
   Cannot take first of an empty list

(1) -> integrate(%i^log(z), z)

            log(%i)log(z)
        z %e
   (1)  -----------------
           log(%i) + 1
                                Type: Union(Expression(Complex(Integer)),...)
(2) -> integrate(f^log(z), z)

            log(f)log(z)
        z %e
   (2)  ----------------
           log(f) + 1
                                         Type: Union(Expression(Integer),...)
(3) -> integrate(sin^log(z), z)

            log(sin)log(z)
        z %e
   (3)  ------------------
           log(sin) + 1
                                         Type: Union(Expression(Integer),...)
(4) -> integrate(tan^log(z), z)

            log(tan)log(z)
        z %e
   (4)  ------------------
           log(tan) + 1
                                         Type: Union(Expression(Integer),...)
(5) -> integrate(sqrt^log(z), z)

            log(sqrt)log(z)
        z %e
   (5)  -------------------
           log(sqrt) + 1
                                         Type: Union(Expression(Integer),...)
(6) -> integrate(atan^log(z), z)

            log(atan)log(z)
        z %e
   (6)  -------------------
           log(atan) + 1
                                         Type: Union(Expression(Integer),...)
(7) -> integrate(asinh^log(z), z)

            log(asinh)log(z)
        z %e
   (7)  --------------------
           log(asinh) + 1
                                         Type: Union(Expression(Integer),...)
(8) -> integrate(exp^log(z), z)
 
   >> System error:
   Cannot take first of an empty list

(8) -> integrate(log^log(z), z)
 
   >> System error:
   Cannot take first of an empty list

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7259: in taylor expansion}
\begin{verbatim}

x:=taylor 'x
y:=taylor 'y
sinh(x)*cosh(y)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{wish 1011: sum(1/(k+a), k=1..n) by Gosper's method}
\begin{verbatim}

(1) -> sum(1/(k+a), k=1..n)

         n
        --+     1
   (1)  >     -----
        --+   k + a
        k= 1
                                         Type: Union(Expression(Integer),...)

but evaluating by Gosper's method should give

digamm(n+a+1)-digamma(a+1)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7258: acosh(0.0) invalid argument to acosh}
\begin{verbatim}

(1) -> acosh(0.0)
 
   >> Error detected within library code:
   invalid argument to acosh

(1) -> acosh(0)::Complex Float

   (1)  0.6776263578 0344027125 E -20 + 1.5707963267 948966192 %i
                                                         Type: Complex(Float)
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7257: normalize(subst(asin(z),z=-1)) division by zero}
\begin{verbatim}

(1) -> normalize(subst(asin(z),z=-1))
 
   >> Error detected within library code:
   catdef: division by zero

(1) -> asin(-1)

          %pi
   (1)  - ---
           2
                                                    Type: Expression(Integer)
(2) -> subst(asin(z),z=-1)

   (2)  asin(- 1)
                                                    Type: Expression(Integer)
(3) -> normalize %
 
   >> Error detected within library code:
   catdef: division by zero

(3) -> normalize %%(1)

          %pi
   (3)  - ---
           2
                                                    Type: Expression(Integer)
(4) -> normalize(asin(- 1))

          %pi
   (4)  - ---
           2
                                                    Type: Expression(Integer)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7256: acot(-1) values differ}
\begin{verbatim}

(1) -> normalize(acot(-1))

        3%pi
   (1)  ----
          4
                                                    Type: Expression(Integer)
(2) -> normalize(subst(acot(z),z=-1))

          %pi
   (2)  - ---
           4
                                                    Type: Expression(Integer)
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7254: f==n+->sum(sum(1/i,i=1..j),j=1..n) complains}
\begin{verbatim}

f==n+->sum(sum(1/i,i=1..j),j=1..n)
                                                                   Type: Void
(2) -> f(1)
   There are 6 exposed and 2 unexposed library operations named sum 
      having 2 argument(s) but none was determined to be applicable. 
      Use HyperDoc Browse, or issue
                               )display op sum
      to learn more about the available operations. Perhaps 
      package-calling the operation or using coercions on the arguments
      will allow you to apply the operation.
   Cannot find a definition or applicable library operation named sum 
      with argument type(s) 
          Union(Fraction(Polynomial(Integer)),Expression(Integer))
                       SegmentBinding(PositiveInteger)
      
      Perhaps you should use "@" to indicate the required return type, 
      or "$" to specify which version of the function you need.
   AXIOM will attempt to step through and interpret the code.

   (2)  1
                                                    Type: Expression(Integer)
(3) -> 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7253: There are no library operations named 'when'}
\begin{verbatim}

(1) -> ch : Integer -> UnivariatePolynomial(x,FRAC(INT))
                                                                   Type: Void
(2) -> ch(0) == 1
                                                                   Type: Void
(3) -> ch(1) == x
                                                                   Type: Void
(4) -> ch(n) == 2 * x * ch(n-1) - ch(n-2) when n > 1
                                                                   Type: Void
(5) -> ch(2)
   There are no library operations named when 
      Use HyperDoc Browse or issue
                                )what op when
      to learn if there is any operation containing " when " in its 
      name.
   Cannot find a definition or applicable library operation named when 
      with argument type(s) 
                                   Integer
      
      Perhaps you should use "@" to indicate the required return type, 
      or "$" to specify which version of the function you need.
   AXIOM will attempt to step through and interpret the code.
   Compiling function ch with type Integer -> UnivariatePolynomial(x,
      Fraction(Integer)) 
   There are no library operations named when 
      Use HyperDoc Browse or issue
                                )what op when
      to learn if there is any operation containing " when " in its 
      name.
 
   Cannot find a definition or applicable library operation named when 
      with argument type(s) 
                                   Integer
      
      Perhaps you should use "@" to indicate the required return type, 
      or "$" to specify which version of the function you need.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7252: argument(-\%i)}
\begin{verbatim}

 > AXIOM ->         complexForm(log(%i) - log(-%i))
 > 
 >                  0

could you please file this as a bug on issuetracker? The problem is in the
operation "argument":

(8) -> argument(%i)

        %pi
   (8)  ---
         2
                                                     Type: Expression Integer
(9) -> argument(-%i)

        %pi
   (9)  ---
         2
                                                     Type: Expression Integer

the latter should be -pi/2, of course. The problem is in gaussian.spad,
COMPCAT:

       if R has TranscendentalFunctionCategory then
         half := recip(2::R)::R

         if R has RealNumberSystem then
           atan2loc(y: R, x: R): R ==
               pi1 := pi()$R
               pi2 := pi1 * half
               x = 0 => if y >= 0 then pi2 else -pi2

               -- Atan in (-pi/2,pi/2]
               theta := atan(y * recip(x)::R)
               while theta <= -pi2 repeat theta := theta + pi1
               while theta >   pi2 repeat theta := theta - pi1

               x >= 0 => theta      -- I or IV

               if y >= 0 then
                   theta + pi1      -- II
               else
                   theta - pi1      -- III

           argument x == atan2loc(imag x, real x)

         else
           -- Not ordered so dictate two quadrants
           argument x ==
             zero? real x => pi()$R * half
             atan(imag(x) * recip(real x)::R)

so the problem occurs if R does not have "RealNumberSystem":

(15) -> argument(-%i*1.0)

   (15)  - 1.5707963267 948966192

since Float does have RNS, but INT does not. I'm not quite sure what the
condition should be. OrderedSet?

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7251: integrate(1/(1+z\texttt{\^}4), z=0..1) :: Complex Float}
\begin{verbatim}

integrate(1/(1+z^4), z=0..1) :: Complex Float

   (1)  - 0.2437477471 9968052418
                                                         Type: Complex(Float)
(2) -> integrate(1/(1+z^4), z=0..1)

   (2)
        +-+     +-+         +-+       +-+          +-+         1
       \|2 log(\|2  + 2) - \|2 log(- \|2  + 2) - 2\|2 atan(--------)
                                                            +-+
                                                           \|2  - 1
     + 
           +-+         1
       - 2\|2 atan(--------)
                    +-+
                   \|2  + 1
  /
     8
                  Type: Union(f1: OrderedCompletion(Expression(Integer)),...)

should be

(4) -> integrate(1/(1+z^4),z=0..1)

   (4)
           +-+                   1
       - 4\|2 atan(----------------------------)
                        +----------+
                    +-+ |   +-+         +-+
                   \|2 \|- \|2  + 2  + \|2  - 1
     + 
           +-+                  1                 +-+     +-+
       - 4\|2 atan(--------------------------) + \|2 log(\|2  + 2)
                        +--------+
                    +-+ | +-+         +-+
                   \|2 \|\|2  + 2  + \|2  + 1
     + 
          +-+       +-+          +-+         1         +-+         1
       - \|2 log(- \|2  + 2) + 4\|2 atan(--------) + 4\|2 atan(--------)
                                          +-+                   +-+
                                         \|2  - 1              \|2  + 1
  /
     8
                  Type: Union(f1: OrderedCompletion(Expression(Integer)),...)

(5) -> integrate(1/(1+z^4),z=0..1)::Complex Float

   (5)  0.8669729873_3991103758
                                                         Type: Complex(Float)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7261: wrong integral}
reported by Thomas Baruchel \verb|<baruchel@gmx.com>|
\begin{verbatim}

t1:=(16*x^14-125*x^10+150*x^6+375*x^2)/(256*x^16+480*x^12+1025*x^8+750*x^4+625)
integrate(t1,x)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7267: src/input/liu \texttt{\^} is not always **}
\begin{verbatim}

This makes it clear that the exponential operation semantics is different
for the use of ``\verb|^|'' and ``\verb|**|'' in some cases.

Does exponential operation ``\verb|^|'' and ``\verb|**|'' of a differential
operator, say L, means repeating multiplications of L in Axiom ? If
so, it seems the following code produced an unexpected result:

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7270: integral confused by branches}
\begin{verbatim}

(1) -> integrate(x*(asin(sin(x)))^3,x)

         5
        x
   (1)  --
         5
                                         Type: Union(Expression(Integer),...)
(2) -> (%pi/2)*integrate((asin(sin(x)))^3,x=0..%pi)

           5
        %pi
   (2)  ----
          8
                                                    Type: Expression(Integer)
(3) -> integrate((asin(sin(x)))^3,x=0..%pi)

           4
        %pi
   (3)  ----
          4
                  Type: Union(f1: OrderedCompletion(Expression(Integer)),...)
(4) -> integrate((asin(sin(x)))^3,x=0..%pi/2)

           4
        %pi
   (4)  ----
         64
                  Type: Union(f1: OrderedCompletion(Expression(Integer)),...)
(5) -> integrate(x^3,x=0..%pi/2)

           4
        %pi
   (5)  ----
         64
                  Type: Union(f1: OrderedCompletion(Expression(Integer)),...)
(6) -> numeric %

   (6)  1.5220170474 062880818
                                                                  Type: Float
(7) -> integrate(x^3,x)

        1  4
   (7)  - x
        4
                                          Type: Polynomial(Fraction(Integer))
(8) -> numeric(%pi^4/4)

   (8)  24.3522727585 00609309
                                                                  Type: Float

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7275: typos in axbook}
\begin{verbatim}

(reported by Doug Stewart <doug.dastew@gmail.com>)

section-0.3.xhtml

 "but integer division isn't quite so obvious, For example, if one types:
  23
  Type: Fraction Integer
  a fractional result is obtained. The function used to display fractions
  attempts to produce the most readable answer. In the example:

probably should read 2/3

Also

 "4.6
  Type: Float
  Although Axiom can convert this back to a fraction it might not be
  the same fraction you started with as due to rounding errors. For example,
  the following conversion appears to be without error but others might not:

  235
  Type: Fraction Integer

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7276: The axbook does not display correctly in Chrome}
\begin{verbatim}

(reported by Doug Stewart <doug.dastew@gmail.com>)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7306: bad counter in )regress function}
\begin{verbatim}

There are 27 stanzas in src/input/intalgorithm.input.pamphlet
All 27 stanzas pass regression tests but...

regression result passed 25 of 25 stanzas file intalgorithm

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7305: series should simplify}
\begin{verbatim}

-> series(sin(x),x=0)

            1  3    1   5     1   7      1    9       1     11      12
   (1)  x - - x  + --- x  - ---- x  + ------ x  - -------- x   + O(x  )
            6      120      5040      362880      39916800

(2) -> %/x

        1      1  3     1   5     1    7      1     9       1      11      12
   (2)  - x - -- x  + ---- x  - ----- x  + ------- x  - --------- x   + O(x  )
        x     6x      120x      5040x      362880x      39916800x

(3) -> %-1

              1      1  3     1   5     1    7      1     9      11
   (3)  - 1 + - x - -- x  + ---- x  - ----- x  + ------- x  + O(x  )
              x     6x      120x      5040x      362880x

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 340: exponential-linear}
\begin{verbatim}

t1:=(1.6)^x + 122.35*x - 5054.4
                                     Type: Expression(Float)
solve(t1,x) fails

see: Corl93.pdf On the Lambert W Function
see: Kalm01.pdf A Generalized Logarithm for Exponential-Linear Equations

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 339: missing side conditions}
\begin{verbatim}

integrate((x-b)^(-1),x)

   (1)  log(x - b)
                                         Type: Union(Expression(Integer),...)

should show the side-condition x > b or should be log(abs(x-b))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 337: erf does not evaluate}
\begin{verbatim}

(2) -> - 0.25* erf(0.3535533905932737622) + 0.60206532676429947778

   (2)  - 0.25 erf(0.3535533905 932737622) + 0.6020653267 6429947778
                                                      Type: Expression(Float)
(3) -> erf(0.3535533905932737622)

   (3)  erf(0.3535533905 932737622)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7301: rich12c.input 310 failed}
\begin{verbatim}

Error detected within library code: index out of range

Regression computation shows prior correct output

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7300: outputDomainConstructor failure}
\begin{verbatim}

outputDomainConstructor(Integer)$Lisp
 
>> System error:
Caught fatal error [memory may be damaged]

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7295: guessRat : (1 . arbitrary) cannot be coerced}
\begin{verbatim}

t1:=guessRat(q)([1,q,q^2], [])
--R 
--R 
--R   >> Error detected within library code:
--R   (1 . arbitrary) cannot be coerced to mode (NonNegativeInteger)
--R
--R   Continuing to read the file...
--R

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7294: GuessOption: displayAsGF not set}
\begin{verbatim}

--S 7 of 102
t1:=[0,1,0,1,1,0,0,0,0,0,0,0,0,0,0]
--R 
--R
--R   (1)  [0,1,0,1,1,0,0,0,0,0,0,0,0,0,0]
--R                                               Type: List(NonNegativeInteger)
--E 7

--S 8 of 102
t2:=first guessADE first(t1,10)
--R 
--R 
--R   >> Error detected within library code:
--R   GuessOption: displayAsGF not set
--R
--R   Continuing to read the file...
--R
--E 8

\end{verbatim}


















% TPDHERE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20572: IDPAM}
\begin{verbatim}


   finalizing nrlib IDPAM 
   Warnings: 
      [1] +:  res has no value
      [2] +:  endcell has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20571: INBFF}
\begin{verbatim}

>compiling INBFF.spad to INBFF.nrlib
 
   Warnings: 
      [1] dAndcExp:  erg has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20570: DFLOAT}
\begin{verbatim}

>compiling DFLOAT.spad to DFLOAT.nrlib
 
   Warnings: 
      [1] mantissa:  MANTISSA has no value
      [2] exponent:  EXPONENT has no value
      [3] hash: signature of lhs not unique: (Integer)$ chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20569: LIST}
\begin{verbatim}

>compiling LIST.spad to LIST.nrlib
 
   Warnings: 
      [1] setIntersection:  u has no value
      [2] setDifference:  lu has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20568: MFLOAT}
\begin{verbatim}

>compiling MFLOAT.spad to MFLOAT.nrlib
 
   Warnings: 
      [1] normalise:  man has no value
      [2] changeBase:  newMan has no value
      [3] changeBase:  newExp has no value
      [4] changeBase:  f has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60076: AFFSP}
\begin{verbatim}

>compiling AFFSP.spad to AFFSP.nrlib

--------------non extending category----------------------
.. AffineSpace(#1,#2) of cat 
(|AffineSpaceCategory| |#2|)   has no 
(|ListAggregate| |#2|)    finalizing nrlib AFFSP 


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60075: BSTREE}
\begin{verbatim}

>compiling BSTREE.spad to BSTREE.nrlib
--------------non extending category----------------------
.. BinarySearchTree(#1) of cat 
(|Join| (|BinaryTreeCategory| |#1|) (CATEGORY |domain| (ATTRIBUTE |shallowlyMutable|) (ATTRIBUTE |finiteAggregate|) (SIGNATURE |binarySearchTree| ($ (|List| |#1|))) (SIGNATURE |insert!| ($ |#1| $)) (SIGNATURE |insertRoot!| ($ |#1| $)) (SIGNATURE |split| ((|Record| (|:| |less| $) (|:| |greater| $)) |#1| $))))    has no  binaryTree : #1 -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60074: BTOURN}
\begin{verbatim}

>compiling BTOURN.spad to BTOURN.nrlib
 
--------------non extending category----------------------
.. BinaryTournament(#1) of cat 
(|Join| (|BinaryTreeCategory| |#1|) (CATEGORY |domain| (ATTRIBUTE |shallowlyMutable|) (SIGNATURE |binaryTournament| ($ (|List| |#1|))) (SIGNATURE |insert!| ($ |#1| $))))    has no  binaryTree : #1 -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60073: BBTREE}
\begin{verbatim}

>compiling BBTREE.spad to BBTREE.nrlib
 
--------------non extending category----------------------
.. BalancedBinaryTree(#1) of cat 
(|Join| (|BinaryTreeCategory| |#1|) (CATEGORY |domain| (ATTRIBUTE |finiteAggregate|) (ATTRIBUTE |shallowlyMutable|) (SIGNATURE |balancedBinaryTree| ($ (|NonNegativeInteger|) |#1|)) (SIGNATURE |setleaves!| ($ $ (|List| |#1|))) (SIGNATURE |mapUp!| (|#1| $ (|Mapping| |#1| |#1| |#1|))) (SIGNATURE |mapUp!| ($ $ $ (|Mapping| |#1| |#1| |#1| |#1| |#1|))) (SIGNATURE |mapDown!| ($ $ |#1| (|Mapping| |#1| |#1| |#1|))) (SIGNATURE |mapDown!| ($ $ |#1| (|Mapping| (|List| |#1|) |#1| |#1| |#1|)))))    has no  binaryTree : #1 -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60072: D01GBFA}
\begin{verbatim}

>compiling D01GBFA.spad to D01GBFA.nrlib

--------------non extending category----------------------
.. d01gbfAnnaType of cat 
(|NumericalIntegrationCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D01GBFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60071: D02EJFA}
\begin{verbatim}

>compiling D02EJFA.spad to D02EJFA.nrlib
--------------non extending category----------------------
.. d02ejfAnnaType of cat 
(|OrdinaryDifferentialEquationsSolverCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D02EJFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60070: D03FAFA}
\begin{verbatim}

>compiling D03FAFA.spad to D03FAFA.nrlib
--------------non extending category----------------------
.. d03fafAnnaType of cat 
(|PartialDifferentialEquationsSolverCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D03FAFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60069: D01FCFA}
\begin{verbatim}

>compiling D01FCFA.spad to D01FCFA.nrlib
 
--------------non extending category----------------------
.. d01fcfAnnaType of cat 
(|NumericalIntegrationCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D01FCFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60068: LPOLY}
\begin{verbatim}

>compiling LPOLY.spad to LPOLY.nrlib
--------------non extending category----------------------
.. LiePolynomial(#1,#2) of cat 
(|Join| (|FreeLieAlgebra| |#1| |#2|) (|FreeModuleCat| |#2| (|LyndonWord| |#1|)) (CATEGORY |domain| (SIGNATURE |LiePolyIfCan| ((|Union| $ "failed") (|XDistributedPolynomial| |#1| |#2|))) (SIGNATURE |construct| ($ (|LyndonWord| |#1|) (|LyndonWord| |#1|))) (SIGNATURE |construct| ($ (|LyndonWord| |#1|) $)) (SIGNATURE |construct| ($ $ (|LyndonWord| |#1|)))))    has no  ?*? : (LyndonWord(#1),#2) -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60067: DBASE}
\begin{verbatim}

>compiling DBASE.spad to DBASE.nrlib
--------------non extending category----------------------
.. Database(#1) of cat 
(|Join| (|SetCategory|) (CATEGORY |domain| (SIGNATURE |elt| ($ $ (|QueryEquation|))) (SIGNATURE |elt| ((|DataList| (|String|)) $ (|Symbol|))) (SIGNATURE + ($ $ $)) (SIGNATURE - ($ $ $)) (SIGNATURE |coerce| ($ (|List| |#1|))) (SIGNATURE |display| ((|Void|) $)) (SIGNATURE |fullDisplay| ((|Void|) $)) (SIGNATURE |fullDisplay| ((|Void|) $ (|PositiveInteger|) (|PositiveInteger|)))))   has no 
(|ListAggregate| |#1|)    finalizing nrlib DBASE 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60066: DHMATRIX}
\begin{verbatim}

>compiling DHMATRIX.spad to DHMATRIX.nrlib
 
--------------non extending category----------------------
.. DenavitHartenbergMatrix(#1) of cat 
(|Join| (|MatrixCategory| |#1| (|Vector| |#1|) (|Vector| |#1|)) (CATEGORY |domain| (SIGNATURE * ((|Point| |#1|) $ (|Point| |#1|))) (SIGNATURE |identity| ($)) (SIGNATURE |rotatex| ($ |#1|)) (SIGNATURE |rotatey| ($ |#1|)) (SIGNATURE |rotatez| ($ |#1|)) (SIGNATURE |scale| ($ |#1| |#1| |#1|)) (SIGNATURE |translate| ($ |#1| |#1| |#1|))))    has no  diagonalMatrix : Vector(#1) -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60065: D02BBFA}
\begin{verbatim}

>compiling D02BBFA.spad to D02BBFA.nrlib
--------------non extending category----------------------
.. d02bbfAnnaType of cat 
(|OrdinaryDifferentialEquationsSolverCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D02BBFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60064: D02BHFA}
\begin{verbatim}

>compiling D02BHFA.spad to D02BHFA.nrlib
 
--------------non extending category----------------------
.. d02bhfAnnaType of cat 
(|OrdinaryDifferentialEquationsSolverCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D02BHFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60063: D02CJFA}
\begin{verbatim}

>compiling D02CJFA.spad to D02CJFA.nrlib
 
--------------non extending category----------------------
.. d02cjfAnnaType of cat 
(|OrdinaryDifferentialEquationsSolverCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D02CJFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60062: FNLA}
\begin{verbatim}

>compiling FNLA.spad to FNLA.nrlib
 
--------------non extending category----------------------
.. FreeNilpotentLie(#1,#2,#3) of cat 
(|Join| (|NonAssociativeAlgebra| |#3|) (CATEGORY |domain| (SIGNATURE |dimension| ((|NonNegativeInteger|))) (SIGNATURE |deepExpand| ((|OutputForm|) $)) (SIGNATURE |shallowExpand| ((|OutputForm|) $)) (SIGNATURE |generator| ($ (|NonNegativeInteger|)))))   has no 
(|IndexedDirectProductCategory| |#3| (|OrdSetInts|))    finalizing nrlib FNLA 
   Processing FreeNilpotentLie for Browser database:

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60061: POINT}
\begin{verbatim}

>compiling POINT.spad to POINT.nrlib
--------------non extending category----------------------
.. Point(#1) of cat 
(|PointCategory| |#1|)    has no  vector : List(#1) -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60060: STRING}
\begin{verbatim}

>compiling STRING.spad to STRING.nrlib
 
--------------non extending category----------------------
.. String of cat 
(|StringCategory|)    has no  hash : % -> Integer 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60059: BINARY}
\begin{verbatim}

>compiling BINARY.spad to BINARY.nrlib
--------------non extending category----------------------
.. BinaryExpansion of cat 
(|Join| (|QuotientFieldCategory| (|Integer|)) (CATEGORY |domain| (SIGNATURE |coerce| ((|Fraction| (|Integer|)) $)) (SIGNATURE |coerce| ((|RadixExpansion| 2) $)) (SIGNATURE |fractionPart| ((|Fraction| (|Integer|)) $)) (SIGNATURE |binary| ($ (|Fraction| (|Integer|))))))    has no  wholeRagits : % -> List(Integer) 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60058: DECIMAL}
\begin{verbatim}

>compiling DECIMAL.spad to DECIMAL.nrlib
--------------non extending category----------------------
.. DecimalExpansion of cat 
(|Join| (|QuotientFieldCategory| (|Integer|)) (CATEGORY |domain| (SIGNATURE |coerce| ((|Fraction| (|Integer|)) $)) (SIGNATURE |coerce| ((|RadixExpansion| 10) $)) (SIGNATURE |fractionPart| ((|Fraction| (|Integer|)) $)) (SIGNATURE |decimal| ($ (|Fraction| (|Integer|))))))    has no  wholeRagits : % -> List(Integer) 
   finalizing nrlib DECIMAL 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60057: E04DGFA}
\begin{verbatim}

>compiling E04DGFA.spad to E04DGFA.nrlib
--------------non extending category----------------------
.. e04dgfAnnaType of cat 
(|NumericalOptimizationCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib E04DGFA 
   Processing e04dgfAnnaType for Browser database:

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60056: E04FDFA}
\begin{verbatim}

>compiling E04FDFA.spad to E04FDFA.nrlib
--------------non extending category----------------------
.. e04fdfAnnaType of cat 
(|NumericalOptimizationCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib E04FDFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60055: E04GCFA}
\begin{verbatim}

>compiling E04GCFA.spad to E04GCFA.nrlib
--------------non extending category----------------------
.. e04gcfAnnaType of cat 
(|NumericalOptimizationCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib E04GCFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60054: E04JAFA}
\begin{verbatim}

>compiling E04JAFA.spad to E04JAFA.nrlib
--------------non extending category----------------------
.. e04jafAnnaType of cat 
(|NumericalOptimizationCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib E04JAFA 
   Processing e04jafAnnaType for Browser database:

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60053: E04UCFA}
\begin{verbatim}

>compiling E04UCFA.spad to E04UCFA.nrlib
--------------non extending category----------------------
.. e04ucfAnnaType of cat 
(|NumericalOptimizationCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib E04UCFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60052: FRAC}
\begin{verbatim}

>compiling FRAC.spad to FRAC.nrlib
 
--------------non extending category----------------------
.. Fraction(#1) of cat 
(|Join| (|QuotientFieldCategory| |#1|) (CATEGORY |package| (IF (|has| |#1| (|IntegerNumberSystem|)) (IF (|has| |#1| (|OpenMath|)) (ATTRIBUTE (|OpenMath|)) |noBranch|) |noBranch|) (IF (|has| |#1| (ATTRIBUTE |canonical|)) (IF (|has| |#1| (|GcdDomain|)) (IF (|has| |#1| (ATTRIBUTE |canonicalUnitNormal|)) (ATTRIBUTE |canonical|) |noBranch|) |noBranch|) |noBranch|)))   has no 
(IF (|has| |#1| (|OrderedRing|)) (ATTRIBUTE (|OrderedRing|)) |noBranch|)    finalizing nrlib FRAC 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60051: FTEM}
\begin{verbatim}

>compiling FTEM.spad to FTEM.nrlib
 
--------------non extending category----------------------
.. FortranTemplate of cat 
(|Join| (|FileCategory| (|FileName|) (|String|)) (CATEGORY |package| (SIGNATURE |processTemplate| ((|FileName|) (|FileName|) (|FileName|))) (SIGNATURE |processTemplate| ((|FileName|) (|FileName|))) (SIGNATURE |fortranLiteralLine| ((|Void|) (|String|))) (SIGNATURE |fortranLiteral| ((|Void|) (|String|))) (SIGNATURE |fortranCarriageReturn| ((|Void|)))))    has no  writeLine! : (%,String) -> String 


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60050: GMODPOL}
\begin{verbatim}

>compiling GMODPOL.spad to GMODPOL.nrlib

(|Module| |#6|)    extends 
(|BiModule| |#6| |#6|)    but not 
(|BiModule| |#2| |#2|) --------------non extending category----------------------
.. GeneralModulePolynomial(#1,#2,#3,#4,#5,#6) of cat 
(|Join| (|Module| |#6|) (|Module| |#2|) (CATEGORY |domain| (SIGNATURE |leadingCoefficient| (|#2| $)) (SIGNATURE |leadingMonomial| ((|ModuleMonomial| |#3| |#4| |#5|) $)) (SIGNATURE |leadingExponent| (|#4| $)) (SIGNATURE |leadingIndex| (|#3| $)) (SIGNATURE |reductum| ($ $)) (SIGNATURE |monomial| ($ |#2| (|ModuleMonomial| |#3| |#4| |#5|))) (SIGNATURE |unitVector| ($ |#3|)) (SIGNATURE |build| ($ |#2| |#3| |#4|)) (SIGNATURE |multMonom| ($ |#2| |#4| $)) (SIGNATURE * ($ |#6| $))))   has no 
(|IndexedDirectProductCategory| |#2| (|ModuleMonomial| |#3| |#4| |#5|))    finalizing nrlib GMODPOL 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60049: HEXADEC}
\begin{verbatim}

>compiling HEXADEC.spad to HEXADEC.nrlib
 
--------------non extending category----------------------
.. HexadecimalExpansion of cat 
(|Join| (|QuotientFieldCategory| (|Integer|)) (CATEGORY |domain| (SIGNATURE |coerce| ((|Fraction| (|Integer|)) $)) (SIGNATURE |coerce| ((|RadixExpansion| 16) $)) (SIGNATURE |fractionPart| ((|Fraction| (|Integer|)) $)) (SIGNATURE |hex| ($ (|Fraction| (|Integer|))))))    has no  wholeRagits : % -> List(Integer) 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60048: MINT}
\begin{verbatim}

>compiling MINT.spad to MINT.nrlib

(|RealConstant|)    extends 
(|ConvertibleTo| (|DoubleFloat|))    but not 
(|ConvertibleTo| (|String|)) --------------non extending category----------------------
.. MachineInteger of cat 
(|Join| (|FortranMachineTypeCategory|) (|IntegerNumberSystem|) (CATEGORY |domain| (SIGNATURE |maxint| ((|PositiveInteger|) (|PositiveInteger|))) (SIGNATURE |maxint| ((|PositiveInteger|))) (SIGNATURE |coerce| ((|Expression| $) (|Expression| (|Integer|))))))   has no 
(|ConvertibleTo| (|String|))    finalizing nrlib MINT 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60047: NSUP}
\begin{verbatim}

>compiling NSUP.spad to NSUP.nrlib
 
--------------non extending category----------------------
.. NewSparseUnivariatePolynomial(#1) of cat 
(|Join| (|UnivariatePolynomialCategory| |#1|) (|CoercibleTo| (|SparseUnivariatePolynomial| |#1|)) (|RetractableTo| (|SparseUnivariatePolynomial| |#1|)) (CATEGORY |domain| (SIGNATURE |fmecg| ($ $ (|NonNegativeInteger|) |#1| $)) (SIGNATURE |monicModulo| ($ $ $)) (SIGNATURE |lazyResidueClass| ((|Record| (|:| |polnum| $) (|:| |polden| |#1|) (|:| |power| (|NonNegativeInteger|))) $ $)) (SIGNATURE |lazyPseudoRemainder| ($ $ $)) (SIGNATURE |lazyPseudoDivide| ((|Record| (|:| |coef| |#1|) (|:| |gap| (|NonNegativeInteger|)) (|:| |quotient| $) (|:| |remainder| $)) $ $)) (SIGNATURE |lazyPseudoQuotient| ($ $ $)) (IF (|has| |#1| (|IntegralDomain|)) (PROGN (SIGNATURE |subResultantsChain| ((|List| $) $ $)) (SIGNATURE |lastSubResultant| ($ $ $)) (SIGNATURE |extendedSubResultantGcd| ((|Record| (|:| |gcd| $) (|:| |coef1| $) (|:| |coef2| $)) $ $)) (SIGNATURE |halfExtendedSubResultantGcd1| ((|Record| (|:| |gcd| $) (|:| |coef1| $)) $ $)) (SIGNATURE |halfExtendedSubResultantGcd2| ((|Record| (|:| |gcd| $) (|:| |coef2| $)) $ $)) (SIGNATURE |extendedResultant| ((|Record| (|:| |resultant| |#1|) (|:| |coef1| $) (|:| |coef2| $)) $ $)) (SIGNATURE |halfExtendedResultant1| ((|Record| (|:| |resultant| |#1|) (|:| |coef1| $)) $ $)) (SIGNATURE |halfExtendedResultant2| ((|Record| (|:| |resultant| |#1|) (|:| |coef2| $)) $ $))) |noBranch|)))    has no  outputForm : (%,OutputForm) -> OutputForm 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60046: SMTS}
\begin{verbatim}

>compiling SMTS.spad to SMTS.nrlib
 
--------------non extending category----------------------
.. SparseMultivariateTaylorSeries(#1,#2,#3) of cat 
(|Join| (|MultivariateTaylorSeriesCategory| |#1| |#2|) (CATEGORY |domain| (SIGNATURE |coefficient| (|#3| $ (|NonNegativeInteger|))) (SIGNATURE |coerce| ($ |#2|)) (SIGNATURE |coerce| ($ |#3|)) (SIGNATURE * ($ |#3| $)) (SIGNATURE |csubst| ((|Mapping| (|Stream| |#3|) |#3|) (|List| |#2|) (|List| (|Stream| |#3|)))) (IF (|has| |#1| (|Algebra| (|Fraction| (|Integer|)))) (PROGN (SIGNATURE |integrate| ($ $ |#2| |#1|)) (SIGNATURE |fintegrate| ($ (|Mapping| $) |#2| |#1|))) |noBranch|)))    has no  coefficients : % -> Stream(#3) 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60045: SUP}
\begin{verbatim}

>compiling SUP.spad to SUP.nrlib
 
--------------non extending category----------------------
.. SparseUnivariatePolynomial(#1) of cat 
(|Join| (|UnivariatePolynomialCategory| |#1|) (CATEGORY |domain| (SIGNATURE |outputForm| ((|OutputForm|) $ (|OutputForm|))) (SIGNATURE |fmecg| ($ $ (|NonNegativeInteger|) |#1| $))))   has no 
(IF (|has| |#1| (|IntegralDomain|)) (IF (|has| (|NonNegativeInteger|) (|CancellationAbelianMonoid|)) (SIGNATURE |fmecg| ($ $ (|NonNegativeInteger|) |#1| $)) |noBranch|) |noBranch|)    finalizing nrlib SUP 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60044: SUPEXPR}
\begin{verbatim}

>compiling SUPEXPR.spad to SUPEXPR.nrlib
--------------non extending category----------------------
.. SparseUnivariatePolynomialExpressions(#1) of cat 
(|Join| (|UnivariatePolynomialCategory| |#1|) (CATEGORY |package| (IF (|has| |#1| (|TranscendentalFunctionCategory|)) (ATTRIBUTE (|TranscendentalFunctionCategory|)) |noBranch|)))    has no  outputForm : (%,OutputForm) -> OutputForm 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60043: UP}
\begin{verbatim}

>compiling UP.spad to UP.nrlib
 
--------------non extending category----------------------
.. UnivariatePolynomial(#1,#2) of cat 
(|Join| (|UnivariatePolynomialCategory| |#2|) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|Variable| |#1|))) (SIGNATURE |fmecg| ($ $ (|NonNegativeInteger|) |#2| $))))    has no  outputForm : (%,OutputForm) -> OutputForm 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60042: EXPUPXS}
\begin{verbatim}

>compiling EXPUPXS.spad to EXPUPXS.nrlib

--------------non extending category----------------------
.. ExponentialOfUnivariatePuiseuxSeries(#1,#2,#3) of cat 
(|Join| (|UnivariatePuiseuxSeriesCategory| |#1|) (|OrderedAbelianMonoid|) (CATEGORY |domain| (SIGNATURE |exponential| ($ (|UnivariatePuiseuxSeries| |#1| |#2| |#3|))) (SIGNATURE |exponent| ((|UnivariatePuiseuxSeries| |#1| |#2| |#3|) $)) (SIGNATURE |exponentialOrder| ((|Fraction| (|Integer|)) $))))   has no 
(|UnivariatePuiseuxSeriesConstructorCategory| |#1| (|UnivariateLaurentSeries| |#1| |#2| |#3|))    finalizing nrlib EXPUPXS 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60041: BSD}
\begin{verbatim}

>compiling BSD.spad to BSD.nrlib
--------------non extending category----------------------
.. BasicStochasticDifferential of cat 
(|Join| (|OrderedSet|) (CATEGORY |domain| (ATTRIBUTE (|ConvertibleTo| (|Symbol|))) (SIGNATURE |convertIfCan| ((|Union| $ "failed") (|Symbol|))) (SIGNATURE |convert| ($ (|Symbol|))) (SIGNATURE |introduce!| ((|Union| $ "failed") (|Symbol|) (|Symbol|))) (SIGNATURE |d| ((|Union| $ (|Integer|)) (|Symbol|))) (SIGNATURE |copyBSD| ((|List| $))) (SIGNATURE |copyIto| ((|Table| (|Symbol|) $))) (SIGNATURE |getSmgl| ((|Union| (|Symbol|) "failed") $))))   has no 
(|ConvertibleTo| (|InputForm|))    finalizing nrlib BSD 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60040: ANTISYM}
\begin{verbatim}

>compiling ANTISYM.spad to ANTISYM.nrlib

--------------non extending category----------------------
.. AntiSymm(#1,#2) of cat 
(|Join| (|LeftAlgebra| |#1|) (|RetractableTo| |#1|) (CATEGORY |domain| (SIGNATURE |leadingCoefficient| (|#1| $)) (SIGNATURE |leadingBasisTerm| ($ $)) (SIGNATURE |reductum| ($ $)) (SIGNATURE |coefficient| (|#1| $ $)) (SIGNATURE |generator| ($ (|NonNegativeInteger|))) (SIGNATURE |exp| ($ (|List| (|Integer|)))) (SIGNATURE |homogeneous?| ((|Boolean|) $)) (SIGNATURE |retractable?| ((|Boolean|) $)) (SIGNATURE |degree| ((|NonNegativeInteger|) $)) (SIGNATURE |map| ($ (|Mapping| |#1| |#1|) $))))   has no 
(|BiModule| |#1| |#1|)    finalizing nrlib ANTISYM 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60039: FEXPR}
\begin{verbatim}

>compiling FEXPR.spad to FEXPR.nrlib
 
--------------non extending category----------------------
.. FortranExpression(#1,#2,#3) of cat 
(|Join| (|ExpressionSpace|) (|Algebra| |#3|) (|RetractableTo| |#3|) (|PartialDifferentialRing| (|Symbol|)) (CATEGORY |domain| (SIGNATURE |retract| ($ (|Expression| |#3|))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Expression| |#3|))) (SIGNATURE |retract| ($ (|Symbol|))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Symbol|))) (SIGNATURE |coerce| ((|Expression| |#3|) $)) (IF (|has| |#3| (|RetractableTo| (|Integer|))) (PROGN (SIGNATURE |retract| ($ (|Expression| (|Integer|)))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Expression| (|Integer|)))) (SIGNATURE |retract| ($ (|Fraction| (|Polynomial| (|Integer|))))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Fraction| (|Polynomial| (|Integer|))))) (SIGNATURE |retract| ($ (|Polynomial| (|Integer|)))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Polynomial| (|Integer|))))) |noBranch|) (IF (|has| |#3| (|RetractableTo| (|Float|))) (PROGN (SIGNATURE |retract| ($ (|Expression| (|Float|)))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Expression| (|Float|)))) (SIGNATURE |retract| ($ (|Fraction| (|Polynomial| (|Float|))))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Fraction| (|Polynomial| (|Float|))))) (SIGNATURE |retract| ($ (|Polynomial| (|Float|)))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Polynomial| (|Float|))))) |noBranch|) (SIGNATURE |abs| ($ $)) (SIGNATURE |sqrt| ($ $)) (SIGNATURE |exp| ($ $)) (SIGNATURE |log| ($ $)) (SIGNATURE |log10| ($ $)) (SIGNATURE |sin| ($ $)) (SIGNATURE |cos| ($ $)) (SIGNATURE |tan| ($ $)) (SIGNATURE |asin| ($ $)) (SIGNATURE |acos| ($ $)) (SIGNATURE |atan| ($ $)) (SIGNATURE |sinh| ($ $)) (SIGNATURE |cosh| ($ $)) (SIGNATURE |tanh| ($ $)) (SIGNATURE |pi| ($)) (SIGNATURE |variables| ((|List| (|Symbol|)) $)) (SIGNATURE |useNagFunctions| ((|Boolean|))) (SIGNATURE |useNagFunctions| ((|Boolean|) (|Boolean|)))))   has no 
(|FunctionSpace| |#3|)    finalizing nrlib FEXPR 


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60038: GDMP}
\begin{verbatim}

>compiling GDMP.spad to GDMP.nrlib
 
--------------non extending category----------------------
.. GeneralDistributedMultivariatePolynomial(#1,#2,#3) of cat 
(|Join| (|PolynomialCategory| |#2| |#3| (|OrderedVariableList| |#1|)) (CATEGORY |domain| (SIGNATURE |reorder| ($ $ (|List| (|Integer|))))))   has no 
(IF (|has| |#2| (|IntegralDomain|)) (IF (|has| |#3| (|CancellationAbelianMonoid|)) (SIGNATURE |fmecg| ($ $ |#3| |#2| $)) |noBranch|) |noBranch|)    finalizing nrlib GDMP 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60037: HACKPI}
\begin{verbatim}

>compiling HACKPI.spad to HACKPI.nrlib
 
--------------non extending category----------------------
.. Pi of cat 
(|Join| (|Field|) (|CharacteristicZero|) (|RetractableTo| (|Integer|)) (|RetractableTo| (|Fraction| (|Integer|))) (|RealConstant|) (|CoercibleTo| (|DoubleFloat|)) (|CoercibleTo| (|Float|)) (|ConvertibleTo| (|Fraction| (|SparseUnivariatePolynomial| (|Integer|)))) (|ConvertibleTo| (|InputForm|)) (CATEGORY |domain| (SIGNATURE |pi| ($))))   has no 
(|QuotientFieldCategory| (|SparseUnivariatePolynomial| (|Integer|)))    finalizing nrlib HACKPI 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60036: LIB}
\begin{verbatim}

>compiling LIB.spad to LIB.nrlib
 
--------------non extending category----------------------
.. Library of cat 
(|Join| (|TableAggregate| (|String|) (|Any|)) (CATEGORY |domain| (SIGNATURE |library| ($ (|FileName|))) (SIGNATURE |pack!| ($ $)) (SIGNATURE |elt| ((|Any|) $ (|Symbol|))) (SIGNATURE |setelt| ((|Any|) $ (|Symbol|) (|Any|))) (SIGNATURE |close!| ($ $))))   has no 
(|FileCategory| (|FileName|) (|Record| (|:| |key| (|String|)) (|:| |entry| (|Any|))))    finalizing nrlib LIB 


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60035: LODO}
\begin{verbatim}

>compiling LODO.spad to LODO.nrlib
 
--------------non extending category----------------------
.. LinearOrdinaryDifferentialOperator(#1,#2) of cat 
(|LinearOrdinaryDifferentialOperatorCategory| |#1|)    has no  outputForm : (%,OutputForm) -> OutputForm 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60034: M3D}
\begin{verbatim}

>compiling M3D.spad to M3D.nrlib
 
--------------non extending category----------------------
.. ThreeDimensionalMatrix(#1) of cat 
(|Join| (|HomogeneousAggregate| |#1|) (CATEGORY |domain| (IF (|has| |#1| (|Ring|)) (PROGN (SIGNATURE |zeroMatrix| ($ (|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|))) (SIGNATURE |identityMatrix| ($ (|NonNegativeInteger|))) (SIGNATURE |plus| ($ $ $))) |noBranch|) (SIGNATURE |construct| ($ (|List| (|List| (|List| |#1|))))) (SIGNATURE |elt| (|#1| $ (|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|))) (SIGNATURE |setelt!| (|#1| $ (|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|) |#1|)) (SIGNATURE |coerce| ($ (|PrimitiveArray| (|PrimitiveArray| (|PrimitiveArray| |#1|))))) (SIGNATURE |coerce| ((|PrimitiveArray| (|PrimitiveArray| (|PrimitiveArray| |#1|))) $)) (SIGNATURE |matrixConcat3D| ($ (|Symbol|) $ $)) (SIGNATURE |matrixDimensions| ((|Vector| (|NonNegativeInteger|)) $))))   has no 
(|OneDimensionalArrayAggregate| (|PrimitiveArray| (|PrimitiveArray| |#1|)))    finalizing nrlib M3D 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60033: NSDPS}
\begin{verbatim}

>compiling NSDPS.spad to NSDPS.nrlib
 
--------------non extending category----------------------
.. NeitherSparseOrDensePowerSeries(#1) of cat 
(|Join| (|LocalPowerSeriesCategory| |#1|) (|LazyStreamAggregate| (|Record| (|:| |k| (|Integer|)) (|:| |c| |#1|))) (CATEGORY |domain| (SIGNATURE |findTerm| ((|Record| (|:| |k| (|Integer|)) (|:| |c| |#1|)) $ (|Integer|)))))   has no 
(ATTRIBUTE |shallowlyMutable|)    finalizing nrlib NSDPS 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60032: RESULT}
\begin{verbatim}

>compiling RESULT.spad to RESULT.nrlib
 
--------------non extending category----------------------
.. Result of cat 
(|Join| (|TableAggregate| (|Symbol|) (|Any|)) (CATEGORY |package| (SIGNATURE |showScalarValues| ((|Boolean|) (|Boolean|))) (SIGNATURE |showArrayValues| ((|Boolean|) (|Boolean|))) (ATTRIBUTE |finiteAggregate|)))   has no 
(ATTRIBUTE |finiteAggregate|)    finalizing nrlib RESULT 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60031: RMATRIX}
\begin{verbatim}

>compiling RMATRIX.spad to RMATRIX.nrlib
 
--------------non extending category----------------------
.. RectangularMatrix(#1,#2,#3) of cat 
(|Join| (|RectangularMatrixCategory| |#1| |#2| |#3| (|DirectProduct| |#2| |#3|) (|DirectProduct| |#1| |#3|)) (|CoercibleTo| (|Matrix| |#3|)) (CATEGORY |domain| (IF (|has| |#3| (|Field|)) (ATTRIBUTE (|VectorSpace| |#3|)) |noBranch|) (IF (|has| |#3| (|ConvertibleTo| (|InputForm|))) (ATTRIBUTE (|ConvertibleTo| (|InputForm|))) |noBranch|) (SIGNATURE |rectangularMatrix| ($ (|Matrix| |#3|))) (SIGNATURE |coerce| ((|Matrix| |#3|) $))))   has no 
(|MatrixCategory| |#3| (|Vector| |#3|) (|Vector| |#3|))    finalizing nrlib RMATRIX 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60030: ROMAN}
\begin{verbatim}

>compiling ROMAN.spad to ROMAN.nrlib

(|RealConstant|)    extends 
(|ConvertibleTo| (|DoubleFloat|))    but not 
(|ConvertibleTo| (|String|)) --------------non extending category----------------------
.. RomanNumeral of cat 
(|Join| (|IntegerNumberSystem|) (CATEGORY |domain| (ATTRIBUTE |canonical|) (ATTRIBUTE |canonicalsClosed|) (ATTRIBUTE |noetherian|) (SIGNATURE |convert| ($ (|Symbol|))) (SIGNATURE |roman| ($ (|Symbol|))) (SIGNATURE |roman| ($ (|Integer|)))))   has no 
(|ConvertibleTo| (|String|))    finalizing nrlib ROMAN 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60029: ROUTINE}
\begin{verbatim}

>compiling ROUTINE.spad to ROUTINE.nrlib
 
--------------non extending category----------------------
.. RoutinesTable of cat 
(|Join| (|TableAggregate| (|Symbol|) (|Any|)) (CATEGORY |domain| (SIGNATURE |concat| ($ $ $)) (SIGNATURE |routines| ($)) (SIGNATURE |selectIntegrationRoutines| ($ $)) (SIGNATURE |selectOptimizationRoutines| ($ $)) (SIGNATURE |selectPDERoutines| ($ $)) (SIGNATURE |selectODEIVPRoutines| ($ $)) (SIGNATURE |selectFiniteRoutines| ($ $)) (SIGNATURE |selectSumOfSquaresRoutines| ($ $)) (SIGNATURE |selectNonFiniteRoutines| ($ $)) (SIGNATURE |selectMultiDimensionalRoutines| ($ $)) (SIGNATURE |changeThreshhold| ($ $ (|Symbol|) (|Float|))) (SIGNATURE |changeMeasure| ($ $ (|Symbol|) (|Float|))) (SIGNATURE |getMeasure| ((|Float|) $ (|Symbol|))) (SIGNATURE |getExplanations| ((|List| (|String|)) $ (|String|))) (SIGNATURE |deleteRoutine!| ($ $ (|Symbol|))) (SIGNATURE |showTheRoutinesTable| ($)) (SIGNATURE |recoverAfterFail| ((|Union| (|String|) "failed") $ (|String|) (|Integer|))) (ATTRIBUTE |finiteAggregate|)))    has no  showScalarValues : Boolean -> Boolean 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60028: SQMATRIX}
\begin{verbatim}

>compiling SQMATRIX.spad to SQMATRIX.nrlib
--------------non extending category----------------------
.. SquareMatrix(#1,#2) of cat 
(|Join| (|SquareMatrixCategory| |#1| |#2| (|DirectProduct| |#1| |#2|) (|DirectProduct| |#1| |#2|)) (|CoercibleTo| (|Matrix| |#2|)) (CATEGORY |domain| (SIGNATURE |transpose| ($ $)) (SIGNATURE |squareMatrix| ($ (|Matrix| |#2|))) (SIGNATURE |coerce| ((|Matrix| |#2|) $)) (IF (|has| |#2| (ATTRIBUTE (|commutative| "*"))) (ATTRIBUTE |central|) |noBranch|) (IF (|has| |#2| (ATTRIBUTE (|commutative| "*"))) (IF (|has| |#2| (ATTRIBUTE |unitsKnown|)) (ATTRIBUTE |unitsKnown|) |noBranch|) |noBranch|) (IF (|has| |#2| (|ConvertibleTo| (|InputForm|))) (ATTRIBUTE (|ConvertibleTo| (|InputForm|))) |noBranch|)))   has no 
(|MatrixCategory| |#2| (|Vector| |#2|) (|Vector| |#2|))    finalizing nrlib SQMATRIX 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60027: ALGSC}
\begin{verbatim}

>compiling ALGSC.spad to ALGSC.nrlib
 
--------------non extending category----------------------
.. AlgebraGivenByStructuralConstants(#1,#2,#3,#4) of cat 
(|Join| (|FramedNonAssociativeAlgebra| |#1|) (|LeftModule| (|SquareMatrix| |#2| |#1|)) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|Vector| |#1|)))))   has no 
(|DirectProductCategory| |#2| |#1|)    finalizing nrlib ALGSC 
   Processing AlgebraGivenByStructuralConstants for Browser database:

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60026: AN}
\begin{verbatim}

>compiling AN.spad to AN.nrlib

(|RealConstant|)    extends 
(|ConvertibleTo| (|DoubleFloat|))    but not 
(|ConvertibleTo| (|Complex| (|Float|))) --------------non extending category----------------------
.. AlgebraicNumber of cat 
(|Join| (|ExpressionSpace|) (|AlgebraicallyClosedField|) (|RetractableTo| (|Integer|)) (|RetractableTo| (|Fraction| (|Integer|))) (|LinearlyExplicitRingOver| (|Integer|)) (|RealConstant|) (|LinearlyExplicitRingOver| (|Fraction| (|Integer|))) (|CharacteristicZero|) (|ConvertibleTo| (|Complex| (|Float|))) (|DifferentialRing|) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)))) (SIGNATURE |numer| ((|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)) $)) (SIGNATURE |denom| ((|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)) $)) (SIGNATURE |reduce| ($ $)) (SIGNATURE |norm| ((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $) (|Kernel| $))) (SIGNATURE |norm| ((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $) (|List| (|Kernel| $)))) (SIGNATURE |norm| ($ $ (|Kernel| $))) (SIGNATURE |norm| ($ $ (|List| (|Kernel| $))))))    has no  trueEqual : (%,%) -> Boolean 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60025: D03EEFA}
\begin{verbatim}

>compiling D03EEFA.spad to D03EEFA.nrlib
 
--------------non extending category----------------------
.. d03eefAnnaType of cat 
(|PartialDifferentialEquationsSolverCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D03EEFA 
   Processing d03eefAnnaType for Browser database:
--------constructor---------

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60024: D01AGNT}
\begin{verbatim}

>compiling D01AGNT.spad to D01AGNT.nrlib
 
--------------non extending category----------------------
.. d01AgentsPackage of cat 
(CATEGORY |package| (SIGNATURE |rangeIsFinite| ((|Union| (|:| |finite| "The range is finite") (|:| |lowerInfinite| "The bottom of range is infinite") (|:| |upperInfinite| "The top of range is infinite") (|:| |bothInfinite| "Both top and bottom points are infinite") (|:| |notEvaluated| "Range not yet evaluated")) (|Record| (|:| |var| (|Symbol|)) (|:| |fn| (|Expression| (|DoubleFloat|))) (|:| |range| (|Segment| (|OrderedCompletion| (|DoubleFloat|)))) (|:| |abserr| (|DoubleFloat|)) (|:| |relerr| (|DoubleFloat|))))) (SIGNATURE |functionIsContinuousAtEndPoints| ((|Union| (|:| |continuous| "Continuous at the end points") (|:| |lowerSingular| "There is a singularity at the lower end point") (|:| |upperSingular| "There is a singularity at the upper end point") (|:| |bothSingular| "There are singularities at both end points") (|:| |notEvaluated| "End point continuity not yet evaluated")) (|Record| (|:| |var| (|Symbol|)) (|:| |fn| (|Expression| (|DoubleFloat|))) (|:| |range| (|Segment| (|OrderedCompletion| (|DoubleFloat|)))) (|:| |abserr| (|DoubleFloat|)) (|:| |relerr| (|DoubleFloat|))))) (SIGNATURE |getlo| ((|DoubleFloat|) (|Segment| (|OrderedCompletion| (|DoubleFloat|))))) (SIGNATURE |gethi| ((|DoubleFloat|) (|Segment| (|OrderedCompletion| (|DoubleFloat|))))) (SIGNATURE |functionIsOscillatory| ((|Float|) (|Record| (|:| |var| (|Symbol|)) (|:| |fn| (|Expression| (|DoubleFloat|))) (|:| |range| (|Segment| (|OrderedCompletion| (|DoubleFloat|)))) (|:| |abserr| (|DoubleFloat|)) (|:| |relerr| (|DoubleFloat|))))) (SIGNATURE |problemPoints| ((|List| (|DoubleFloat|)) (|Expression| (|DoubleFloat|)) (|Symbol|) (|Segment| (|OrderedCompletion| (|DoubleFloat|))))) (SIGNATURE |singularitiesOf| ((|Stream| (|DoubleFloat|)) (|Record| (|:| |var| (|Symbol|)) (|:| |fn| (|Expression| (|DoubleFloat|))) (|:| |range| (|Segment| (|OrderedCompletion| (|DoubleFloat|)))) (|:| |abserr| (|DoubleFloat|)) (|:| |relerr| (|DoubleFloat|))))) (SIGNATURE |df2st| ((|String|) (|DoubleFloat|))) (SIGNATURE |ldf2lst| ((|List| (|String|)) (|List| (|DoubleFloat|)))) (SIGNATURE |sdf2lst| ((|List| (|String|)) (|Stream| (|DoubleFloat|)))) (SIGNATURE |commaSeparate| ((|String|) (|List| (|String|)))) (SIGNATURE |changeName| ((|Result|) (|Symbol|) (|Symbol|) (|Result|))))    has no  functionIsFracPolynomial? : Record(var: Symbol,fn: Expression(DoubleFloat),range: Segment(OrderedCompletion(DoubleFloat)),abserr: DoubleFloat,relerr: DoubleFloat) -> Boolean 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60023: DERHAM}
\begin{verbatim}

>compiling DERHAM.spad to DERHAM.nrlib
 
--------------non extending category----------------------
.. DeRhamComplex(#1,#2) of cat 
(|Join| (|LeftAlgebra| (|Expression| |#1|)) (|RetractableTo| (|Expression| |#1|)) (CATEGORY |domain| (SIGNATURE |leadingCoefficient| ((|Expression| |#1|) $)) (SIGNATURE |leadingBasisTerm| ($ $)) (SIGNATURE |reductum| ($ $)) (SIGNATURE |coefficient| ((|Expression| |#1|) $ $)) (SIGNATURE |generator| ($ (|NonNegativeInteger|))) (SIGNATURE |homogeneous?| ((|Boolean|) $)) (SIGNATURE |retractable?| ((|Boolean|) $)) (SIGNATURE |degree| ((|Integer|) $)) (SIGNATURE |map| ($ (|Mapping| (|Expression| |#1|) (|Expression| |#1|)) $)) (SIGNATURE |totalDifferential| ($ (|Expression| |#1|))) (SIGNATURE |exteriorDifferential| ($ $))))    has no  exp : List(Integer) -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60022: D01TRNS}
\begin{verbatim}

>compiling D01TRNS.spad to D01TRNS.nrlib

--------------non extending category----------------------
.. d01TransformFunctionType of cat 
(|NumericalIntegrationCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D01TRNS 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60021: E04NAFA}
\begin{verbatim}

>compiling E04NAFA.spad to E04NAFA.nrlib
--------------non extending category----------------------
.. e04nafAnnaType of cat 
(|NumericalOptimizationCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib E04NAFA 
   Processing e04nafAnnaType for Browser database:

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60020: EXPEXPAN}
\begin{verbatim}

>compiling EXPEXPAN.spad to EXPEXPAN.nrlib
 
--------------non extending category----------------------
.. ExponentialExpansion(#1,#2,#3,#4) of cat 
(|Join| (|QuotientFieldCategory| (|UnivariatePuiseuxSeriesWithExponentialSingularity| |#1| |#2| |#3| |#4|)) (|RetractableTo| (|UnivariatePuiseuxSeries| |#2| |#3| |#4|)) (CATEGORY |domain| (SIGNATURE |limitPlus| ((|Union| (|OrderedCompletion| |#2|) "failed") $)) (SIGNATURE |coerce| ($ (|UnivariatePuiseuxSeries| |#2| |#3| |#4|)))))   has no 
(IF (|has| (|UnivariatePuiseuxSeriesWithExponentialSingularity| |#1| |#2| |#3| |#4|) (|IntegerNumberSystem|)) (IF (|has| (|UnivariatePuiseuxSeriesWithExponentialSingularity| |#1| |#2| |#3| |#4|) (|OpenMath|)) (ATTRIBUTE (|OpenMath|)) |noBranch|) |noBranch|)    finalizing nrlib EXPEXPAN 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60019: GCNAALG}
\begin{verbatim}

>compiling GCNAALG.spad to GCNAALG.nrlib

(|Module| (|Fraction| (|Polynomial| |#1|)))    extends 
(|LeftModule| (|Fraction| (|Polynomial| |#1|)))    but not 
(|LeftModule| (|SquareMatrix| |#2| (|Fraction| (|Polynomial| |#1|))))    finalizing nrlib GCNAALG 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60018: IAN}
\begin{verbatim}

>compiling IAN.spad to IAN.nrlib
 
--------------non extending category----------------------
.. InnerAlgebraicNumber of cat 
(|Join| (|ExpressionSpace|) (|AlgebraicallyClosedField|) (|RetractableTo| (|Integer|)) (|RetractableTo| (|Fraction| (|Integer|))) (|LinearlyExplicitRingOver| (|Integer|)) (|RealConstant|) (|LinearlyExplicitRingOver| (|Fraction| (|Integer|))) (|CharacteristicZero|) (|ConvertibleTo| (|Complex| (|Float|))) (|DifferentialRing|) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)))) (SIGNATURE |numer| ((|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)) $)) (SIGNATURE |denom| ((|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)) $)) (SIGNATURE |reduce| ($ $)) (SIGNATURE |trueEqual| ((|Boolean|) $ $)) (SIGNATURE |norm| ((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $) (|Kernel| $))) (SIGNATURE |norm| ((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $) (|List| (|Kernel| $)))) (SIGNATURE |norm| ($ $ (|Kernel| $))) (SIGNATURE |norm| ($ $ (|List| (|Kernel| $))))))   has no 
(|FunctionSpace| (|Integer|))    finalizing nrlib IAN 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60017: LSQM}
\begin{verbatim}

>compiling LSQM.spad to LSQM.nrlib
 
--------------non extending category----------------------
.. LieSquareMatrix(#1,#2) of cat 
(|Join| (|SquareMatrixCategory| |#1| |#2| (|DirectProduct| |#1| |#2|) (|DirectProduct| |#1| |#2|)) (|CoercibleTo| (|Matrix| |#2|)) (|FramedNonAssociativeAlgebra| |#2|))   has no 
(|CoercibleTo| (|SquareMatrix| |#1| |#2|))    finalizing nrlib LSQM 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60016: MCMPLX}
\begin{verbatim}

>compiling MCMPLX.spad to MCMPLX.nrlib
 
--------------non extending category----------------------
.. MachineComplex of cat 
(|Join| (|FortranMachineTypeCategory|) (|ComplexCategory| (|MachineFloat|)) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|Complex| (|Float|)))) (SIGNATURE |coerce| ($ (|Complex| (|Integer|)))) (SIGNATURE |coerce| ($ (|Complex| (|MachineFloat|)))) (SIGNATURE |coerce| ($ (|Complex| (|MachineInteger|)))) (SIGNATURE |coerce| ((|Complex| (|Float|)) $))))   has no 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60015: MYUP}
\begin{verbatim}

>compiling MYUP.spad to MYUP.nrlib
 
--------------non extending category----------------------
.. MyUnivariatePolynomial(#1,#2) of cat 
(|Join| (|UnivariatePolynomialCategory| |#2|) (CATEGORY |domain| (ATTRIBUTE (|RetractableTo| (|Symbol|))) (SIGNATURE |coerce| ($ (|Variable| |#1|))) (SIGNATURE |fmecg| ($ $ (|NonNegativeInteger|) |#2| $)) (IF (|has| |#2| (SIGNATURE |univariate| ((|SparseUnivariatePolynomial| |#2|) |#2| (|Symbol|)))) (SIGNATURE |coerce| ($ |#2|)) |noBranch|) (SIGNATURE |coerce| ($ (|Polynomial| |#2|)))))    has no  outputForm : (%,OutputForm) -> OutputForm 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60014: MYEXPR}
\begin{verbatim}

>compiling MYEXPR.spad to MYEXPR.nrlib
 
--------------non extending category----------------------
.. MyExpression(#1,#2) of cat 
(|Join| (|FunctionSpace| |#2|) (|IntegralDomain|) (|RetractableTo| (|MyUnivariatePolynomial| |#1| |#2|)) (|RetractableTo| (|Symbol|)) (|RetractableTo| (|Integer|)) (|CombinatorialOpsCategory|) (|PartialDifferentialRing| (|Symbol|)) (CATEGORY |domain| (SIGNATURE * ($ $ $)) (SIGNATURE / ($ $ $)) (SIGNATURE ** ($ $ $)) (SIGNATURE |numerator| ($ $)) (SIGNATURE |denominator| ($ $)) (SIGNATURE |ground?| ((|Boolean|) $)) (SIGNATURE |coerce| ($ (|Fraction| (|MyUnivariatePolynomial| |#1| |#2|)))) (SIGNATURE |retract| ((|Fraction| (|MyUnivariatePolynomial| |#1| |#2|)) $))))   has no 
(IF (|has| |#2| (|IntegralDomain|)) (PROGN (ATTRIBUTE (|AlgebraicallyClosedFunctionSpace| |#2|)) (ATTRIBUTE (|TranscendentalFunctionCategory|)) (ATTRIBUTE (|CombinatorialOpsCategory|)) (ATTRIBUTE (|LiouvillianFunctionCategory|)) (ATTRIBUTE (|SpecialFunctionCategory|)) (SIGNATURE |reduce| ($ $)) (SIGNATURE |number?| ((|Boolean|) $)) (SIGNATURE |simplifyPower| ($ $ (|Integer|))) (IF (|has| |#2| (|GcdDomain|)) (PROGN (SIGNATURE |factorPolynomial| ((|Factored| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $))) (SIGNATURE |squareFreePolynomial| ((|Factored| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $)))) |noBranch|) (IF (|has| |#2| (|RetractableTo| (|Integer|))) (ATTRIBUTE (|RetractableTo| (|AlgebraicNumber|))) |noBranch|)) |noBranch|)    finalizing nrlib MYEXPR 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60013: MYEXPR}
\begin{verbatim}

>compiling MYEXPR.spad to MYEXPR.nrlib
 
--------------non extending category----------------------
.. MyUnivariatePolynomial(#1,#2) of cat 
(|Join| (|UnivariatePolynomialCategory| |#2|) (CATEGORY |domain| (ATTRIBUTE (|RetractableTo| (|Symbol|))) (SIGNATURE |coerce| ($ (|Variable| |#1|))) (SIGNATURE |fmecg| ($ $ (|NonNegativeInteger|) |#2| $)) (IF (|has| |#2| (SIGNATURE |univariate| ((|SparseUnivariatePolynomial| |#2|) |#2| (|Symbol|)))) (SIGNATURE |coerce| ($ |#2|)) |noBranch|) (SIGNATURE |coerce| ($ (|Polynomial| |#2|)))))    has no  outputForm : (%,OutputForm) -> OutputForm 
 
--------------non extending category----------------------
.. MyExpression(#1,#2) of cat 
(|Join| (|FunctionSpace| |#2|) (|IntegralDomain|) (|RetractableTo| (|MyUnivariatePolynomial| |#1| |#2|)) (|RetractableTo| (|Symbol|)) (|RetractableTo| (|Integer|)) (|CombinatorialOpsCategory|) (|PartialDifferentialRing| (|Symbol|)) (CATEGORY |domain| (SIGNATURE * ($ $ $)) (SIGNATURE / ($ $ $)) (SIGNATURE ** ($ $ $)) (SIGNATURE |numerator| ($ $)) (SIGNATURE |denominator| ($ $)) (SIGNATURE |ground?| ((|Boolean|) $)) (SIGNATURE |coerce| ($ (|Fraction| (|MyUnivariatePolynomial| |#1| |#2|)))) (SIGNATURE |retract| ((|Fraction| (|MyUnivariatePolynomial| |#1| |#2|)) $))))   has no 
(IF (|has| |#2| (|IntegralDomain|)) (PROGN (ATTRIBUTE (|AlgebraicallyClosedFunctionSpace| |#2|)) (ATTRIBUTE (|TranscendentalFunctionCategory|)) (ATTRIBUTE (|CombinatorialOpsCategory|)) (ATTRIBUTE (|LiouvillianFunctionCategory|)) (ATTRIBUTE (|SpecialFunctionCategory|)) (SIGNATURE |reduce| ($ $)) (SIGNATURE |number?| ((|Boolean|) $)) (SIGNATURE |simplifyPower| ($ $ (|Integer|))) (IF (|has| |#2| (|GcdDomain|)) (PROGN (SIGNATURE |factorPolynomial| ((|Factored| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $))) (SIGNATURE |squareFreePolynomial| ((|Factored| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $)))) |noBranch|) (IF (|has| |#2| (|RetractableTo| (|Integer|))) (ATTRIBUTE (|RetractableTo| (|AlgebraicNumber|))) |noBranch|)) |noBranch|)    finalizing nrlib MYEXPR 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60012: SD}
\begin{verbatim}

>compiling SD.spad to SD.nrlib
 
--------------non extending category----------------------
.. StochasticDifferential(#1) of cat 
(|Join| (|Rng|) (|Module| (|Expression| |#1|)) (CATEGORY |domain| (ATTRIBUTE (|RetractableTo| (|BasicStochasticDifferential|))) (SIGNATURE |alterQuadVar!| ((|Union| $ "failed") (|BasicStochasticDifferential|) (|BasicStochasticDifferential|) $)) (SIGNATURE |alterDrift!| ((|Union| $ "failed") (|BasicStochasticDifferential|) $)) (SIGNATURE |drift| ($ $)) (SIGNATURE |freeOf?| ((|Boolean|) $ (|BasicStochasticDifferential|))) (SIGNATURE |coefficient| ((|Expression| |#1|) $ (|BasicStochasticDifferential|))) (SIGNATURE |listSD| ((|List| (|BasicStochasticDifferential|)) $)) (SIGNATURE |equation| ((|Union| (|Equation| $) "failed") $ |#1|)) (SIGNATURE |equation| ((|Union| (|Equation| $) "failed") |#1| $)) (SIGNATURE |copyDrift| ((|Table| $ $))) (SIGNATURE |copyQuadVar| ((|Table| $ $))) (SIGNATURE / ($ $ (|Expression| |#1|))) (SIGNATURE ** ($ $ (|PositiveInteger|))) (SIGNATURE ^ ($ $ (|PositiveInteger|))) (SIGNATURE |statusIto| ((|OutputForm|))) (SIGNATURE |uncorrelated?| ((|Boolean|) $ $)) (SIGNATURE |uncorrelated?| ((|Boolean|) (|List| $) (|List| $))) (SIGNATURE |uncorrelated?| ((|Boolean|) (|List| (|List| $))))))   has no 
(|PolynomialCategory| (|Expression| |#1|) (|IndexedExponents| (|BasicStochasticDifferential|)) (|BasicStochasticDifferential|))    finalizing nrlib SD 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60011: SUTS}
\begin{verbatim}

>compiling SUTS.spad to SUTS.nrlib

(|UnivariateTaylorSeriesCategory| |#1|)    extends 
(|UnivariatePowerSeriesCategory| |#1| (|NonNegativeInteger|))    but not 
(|UnivariatePowerSeriesCategory| |#1| (|Integer|)) --------------non extending category----------------------
.. SparseUnivariateTaylorSeries(#1,#2,#3) of cat 
(|Join| (|UnivariateTaylorSeriesCategory| |#1|) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|UnivariatePolynomial| |#2| |#1|))) (SIGNATURE |univariatePolynomial| ((|UnivariatePolynomial| |#2| |#1|) $ (|NonNegativeInteger|))) (SIGNATURE |coerce| ($ (|Variable| |#2|))) (SIGNATURE |differentiate| ($ $ (|Variable| |#2|))) (IF (|has| |#1| (|Algebra| (|Fraction| (|Integer|)))) (SIGNATURE |integrate| ($ $ (|Variable| |#2|))) |noBranch|)))   has no 
(|UnivariatePowerSeriesCategory| |#1| (|Integer|))    finalizing nrlib SUTS 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60010: UPXSSING}
\begin{verbatim}

>compiling UPXSSING.spad to UPXSSING.nrlib
 
--------------non extending category----------------------
.. UnivariatePuiseuxSeriesWithExponentialSingularity(#1,#2,#3,#4) of cat 
(|Join| (|FiniteAbelianMonoidRing| (|UnivariatePuiseuxSeries| |#2| |#3| |#4|) (|ExponentialOfUnivariatePuiseuxSeries| |#2| |#3| |#4|)) (|IntegralDomain|) (CATEGORY |domain| (SIGNATURE |limitPlus| ((|Union| (|OrderedCompletion| |#2|) "failed") $)) (SIGNATURE |dominantTerm| ((|Union| (|Record| (|:| |%term| (|Record| (|:| |%coef| (|UnivariatePuiseuxSeries| |#2| |#3| |#4|)) (|:| |%expon| (|ExponentialOfUnivariatePuiseuxSeries| |#2| |#3| |#4|)) (|:| |%expTerms| (|List| (|Record| (|:| |k| (|Fraction| (|Integer|))) (|:| |c| |#2|)))))) (|:| |%type| (|String|))) "failed") $))))   has no 
(IF (|has| (|UnivariatePuiseuxSeries| |#2| |#3| |#4|) (|IntegralDomain|)) (IF (|has| (|ExponentialOfUnivariatePuiseuxSeries| |#2| |#3| |#4|) (|CancellationAbelianMonoid|)) (SIGNATURE |fmecg| ($ $ (|ExponentialOfUnivariatePuiseuxSeries| |#2| |#3| |#4|) (|UnivariatePuiseuxSeries| |#2| |#3| |#4|) $)) |noBranch|) |noBranch|)    finalizing nrlib UPXSSING 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60009: ESCONT}
\begin{verbatim}

>compiling ESCONT.spad to ESCONT.nrlib
 
--------------non extending category----------------------
.. ExpertSystemContinuityPackage of cat 
(CATEGORY |package| (SIGNATURE |getlo| ((|DoubleFloat|) (|Segment| (|OrderedCompletion| (|DoubleFloat|))))) (SIGNATURE |gethi| ((|DoubleFloat|) (|Segment| (|OrderedCompletion| (|DoubleFloat|))))) (SIGNATURE |functionIsFracPolynomial?| ((|Boolean|) (|Record| (|:| |var| (|Symbol|)) (|:| |fn| (|Expression| (|DoubleFloat|))) (|:| |range| (|Segment| (|OrderedCompletion| (|DoubleFloat|)))) (|:| |abserr| (|DoubleFloat|)) (|:| |relerr| (|DoubleFloat|))))) (SIGNATURE |problemPoints| ((|List| (|DoubleFloat|)) (|Expression| (|DoubleFloat|)) (|Symbol|) (|Segment| (|OrderedCompletion| (|DoubleFloat|))))) (SIGNATURE |zerosOf| ((|Stream| (|DoubleFloat|)) (|Expression| (|DoubleFloat|)) (|List| (|Symbol|)) (|Segment| (|OrderedCompletion| (|DoubleFloat|))))) (SIGNATURE |singularitiesOf| ((|Stream| (|DoubleFloat|)) (|Expression| (|DoubleFloat|)) (|List| (|Symbol|)) (|Segment| (|OrderedCompletion| (|DoubleFloat|))))) (SIGNATURE |singularitiesOf| ((|Stream| (|DoubleFloat|)) (|Vector| (|Expression| (|DoubleFloat|))) (|List| (|Symbol|)) (|Segment| (|OrderedCompletion| (|DoubleFloat|))))) (SIGNATURE |polynomialZeros| ((|List| (|DoubleFloat|)) (|Polynomial| (|Fraction| (|Integer|))) (|Symbol|) (|Segment| (|OrderedCompletion| (|DoubleFloat|))))) (SIGNATURE |df2st| ((|String|) (|DoubleFloat|))) (SIGNATURE |ldf2lst| ((|List| (|String|)) (|List| (|DoubleFloat|)))) (SIGNATURE |sdf2lst| ((|List| (|String|)) (|Stream| (|DoubleFloat|)))))    has no  f2df : Float -> DoubleFloat 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60008: GSERIES}
\begin{verbatim}

>compiling GSERIES.spad to GSERIES.nrlib

--------------non extending category----------------------
.. GeneralUnivariatePowerSeries(#1,#2,#3) of cat 
(|Join| (|UnivariatePuiseuxSeriesCategory| |#1|) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|Variable| |#2|))) (SIGNATURE |coerce| ($ (|UnivariatePuiseuxSeries| |#1| |#2| |#3|))) (SIGNATURE |differentiate| ($ $ (|Variable| |#2|))) (IF (|has| |#1| (|Algebra| (|Fraction| (|Integer|)))) (SIGNATURE |integrate| ($ $ (|Variable| |#2|))) |noBranch|)))   has no 
(|UnivariatePuiseuxSeriesConstructorCategory| |#1| (|UnivariateLaurentSeries| |#1| |#2| |#3|))    finalizing nrlib GSERIES 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60007: RGCHAIN}
\begin{verbatim}

>compiling RGCHAIN.spad to RGCHAIN.nrlib

--------------non extending category----------------------
.. RegularChain(#1,#2) of cat 
(|Join| (|RegularTriangularSetCategory| |#1| (|IndexedExponents| (|OrderedVariableList| |#2|)) (|OrderedVariableList| |#2|) (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#2|))) (CATEGORY |domain| (SIGNATURE |zeroSetSplit| ((|List| $) (|List| (|NewSparseMultivariatePolynomial| |#1| (|OrderedVariableList| |#2|))) (|Boolean|) (|Boolean|)))))    has no  internalAugment : (NewSparseMultivariatePolynomial(#1,OrderedVariableList(#2)),%,Boolean,Boolean,Boolean,Boolean,Boolean) -> List(%) 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60006: SULS}
\begin{verbatim}

>compiling SULS.spad to SULS.nrlib
 
--------------non extending category----------------------
.. SparseUnivariateLaurentSeries(#1,#2,#3) of cat 
(|Join| (|UnivariateLaurentSeriesConstructorCategory| |#1| (|SparseUnivariateTaylorSeries| |#1| |#2| |#3|)) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|Variable| |#2|))) (SIGNATURE |differentiate| ($ $ (|Variable| |#2|))) (IF (|has| |#1| (|Algebra| (|Fraction| (|Integer|)))) (SIGNATURE |integrate| ($ $ (|Variable| |#2|))) |noBranch|)))    has no  makeSeries : (Reference(OrderedCompletion(Integer)),Stream(Record(k: Integer,c: #1))) -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60005: UTS}
\begin{verbatim}

>compiling UTS.spad to UTS.nrlib
 
--------------non extending category----------------------
.. UnivariateTaylorSeries(#1,#2,#3) of cat 
(|Join| (|UnivariateTaylorSeriesCategory| |#1|) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|UnivariatePolynomial| |#2| |#1|))) (SIGNATURE |univariatePolynomial| ((|UnivariatePolynomial| |#2| |#1|) $ (|NonNegativeInteger|))) (SIGNATURE |coerce| ($ (|Variable| |#2|))) (SIGNATURE |differentiate| ($ $ (|Variable| |#2|))) (SIGNATURE |lagrange| ($ $)) (SIGNATURE |lambert| ($ $)) (SIGNATURE |oddlambert| ($ $)) (SIGNATURE |evenlambert| ($ $)) (SIGNATURE |generalLambert| ($ $ (|Integer|) (|Integer|))) (SIGNATURE |revert| ($ $)) (SIGNATURE |multisect| ($ (|Integer|) (|Integer|) $)) (SIGNATURE |invmultisect| ($ (|Integer|) (|Integer|) $)) (IF (|has| |#1| (|Algebra| (|Fraction| (|Integer|)))) (SIGNATURE |integrate| ($ $ (|Variable| |#2|))) |noBranch|)))    has no  ?*? : (%,Integer) -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60004: UTSZ}
\begin{verbatim}

>compiling UTSZ.spad to UTSZ.nrlib
 
--------------non extending category----------------------
.. UnivariateTaylorSeriesCZero(#1,#2) of cat 
(|Join| (|UnivariateTaylorSeriesCategory| |#1|) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|UnivariatePolynomial| |#2| |#1|))) (SIGNATURE |univariatePolynomial| ((|UnivariatePolynomial| |#2| |#1|) $ (|NonNegativeInteger|))) (SIGNATURE |coerce| ($ (|Variable| |#2|))) (SIGNATURE |differentiate| ($ $ (|Variable| |#2|))) (SIGNATURE |lagrange| ($ $)) (SIGNATURE |lambert| ($ $)) (SIGNATURE |oddlambert| ($ $)) (SIGNATURE |evenlambert| ($ $)) (SIGNATURE |generalLambert| ($ $ (|Integer|) (|Integer|))) (SIGNATURE |revert| ($ $)) (SIGNATURE |multisect| ($ (|Integer|) (|Integer|) $)) (SIGNATURE |invmultisect| ($ (|Integer|) (|Integer|) $)) (IF (|has| |#1| (|Algebra| (|Fraction| (|Integer|)))) (SIGNATURE |integrate| ($ $ (|Variable| |#2|))) |noBranch|)))    has no  ?*? : (%,Integer) -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60003: INFCLSPT}
\begin{verbatim}

>compiling INFCLSPT.spad to INFCLSPT.nrlib
 
--------------non extending category----------------------
.. InfinitlyClosePoint(#1,#2,#3,#4,#5,#6,#7,#8,#9) of cat 
(|Join| (|InfinitlyClosePointCategory| |#1| |#2| |#3| |#4| |#5| |#6| |#7| |#8| |#9|) (CATEGORY |domain| (SIGNATURE |fullOut| ((|OutputForm|) $)) (SIGNATURE |fullOutput| ((|Boolean|) (|Boolean|))) (SIGNATURE |fullOutput| ((|Boolean|)))))   has no 
(|RecordCategory| (|:| |point| |#5|) (|:| |curve| (|DistributedMultivariatePolynomial| (|construct| X Y) |#1|)) (|:| |localPoint| (|AffinePlane| |#1|)) (|:| |mult| (|NonNegativeInteger|)) (|:| |chrt| |#9|) (|:| |subMultiplicity| (|NonNegativeInteger|)) (|:| |excpDiv| |#8|) (|:| |localParam| (|List| |#6|)) (|:| |actualExtension| |#1|) (|:| |symbName| (|Symbol|)))    finalizing nrlib INFCLSPT 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60002: GUESSUP}
\begin{verbatim}

>compiling GUESSUP.spad to GUESSUP.nrlib
 
--------------non extending category----------------------
.. GuessUnivariatePolynomial(#1) of cat 
(CATEGORY |package| (SIGNATURE |guess| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))))) (SIGNATURE |guess| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|)))) (SIGNATURE |guess| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|Mapping| (|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|)))) (|List| (|Symbol|)))) (SIGNATURE |guess| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|Mapping| (|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|)))) (|List| (|Symbol|)) (|List| (|GuessOption|)))) (SIGNATURE |guessExpRat| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))))) (SIGNATURE |guessExpRat| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|)))) (SIGNATURE |guessBinRat| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))))) (SIGNATURE |guessBinRat| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|)))) (SIGNATURE |guessExpRat| ((|Mapping| (|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|))) (|Symbol|))) (SIGNATURE |guessBinRat| ((|Mapping| (|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|))) (|Symbol|))) (SIGNATURE |guessHP| ((|Mapping| (|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|))) (|Mapping| HPSPEC (|List| (|GuessOption|))))) (SIGNATURE |guessADE| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))))) (SIGNATURE |guessADE| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|)))) (SIGNATURE |guessAlg| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))))) (SIGNATURE |guessAlg| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|)))) (SIGNATURE |guessHolo| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))))) (SIGNATURE |guessHolo| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|)))) (SIGNATURE |guessPade| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|)))) (SIGNATURE |guessPade| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))))) (SIGNATURE |guessRec| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))))) (SIGNATURE |guessRec| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|)))) (SIGNATURE |guessPRec| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|)))) (SIGNATURE |guessPRec| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))))) (SIGNATURE |guessRat| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|)))) (SIGNATURE |guessRat| ((|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))))) (SIGNATURE |diffHP| (HPSPEC (|List| (|GuessOption|)))) (SIGNATURE |shiftHP| (HPSPEC (|List| (|GuessOption|)))) (SIGNATURE |shiftHP| ((|Mapping| HPSPEC (|List| (|GuessOption|))) (|Symbol|))) (SIGNATURE |diffHP| ((|Mapping| HPSPEC (|List| (|GuessOption|))) (|Symbol|))) (SIGNATURE |guessRec| ((|Mapping| (|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|))) (|Symbol|))) (SIGNATURE |guessPRec| ((|Mapping| (|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|))) (|Symbol|))) (SIGNATURE |guessRat| ((|Mapping| (|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|))) (|Symbol|))) (SIGNATURE |guessADE| ((|Mapping| (|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|))) (|Symbol|))))   has no 
(IF (|has| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|))) (|RetractableTo| (|Symbol|))) (IF (|has| (|MyUnivariatePolynomial| |#1| (|Integer|)) (|RetractableTo| (|Symbol|))) (PROGN (SIGNATURE |guessExpRat| ((|Mapping| (|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|))) (|Symbol|))) (SIGNATURE |guessBinRat| ((|Mapping| (|List| (|Record| (|:| |function| (|MyExpression| |#1| (|Integer|))) (|:| |order| (|NonNegativeInteger|)))) (|List| (|Fraction| (|MyUnivariatePolynomial| |#1| (|Integer|)))) (|List| (|GuessOption|))) (|Symbol|)))) |noBranch|) |noBranch|)    finalizing nrlib GUESSUP 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60001: NNI}
\begin{verbatim}

>compiling NNI.spad to NNI.nrlib
 
--------------non extending category----------------------
.. NonNegativeInteger of cat 
(|Join| (|OrderedAbelianMonoidSup|) (|Monoid|) (CATEGORY |domain| (SIGNATURE |quo| ($ $ $)) (SIGNATURE |rem| ($ $ $)) (SIGNATURE |gcd| ($ $ $)) (SIGNATURE |divide| ((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $)) (SIGNATURE |exquo| ((|Union| $ "failed") $ $)) (SIGNATURE |shift| ($ $ (|Integer|))) (SIGNATURE |random| ($ $)) (ATTRIBUTE (|commutative| "*"))))   has no 
(|IntegerNumberSystem|)    finalizing nrlib NNI 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 60000: PI}
\begin{verbatim}

>compiling PI.spad to PI.nrlib
 
--------------non extending category----------------------
.. PositiveInteger of cat 
(|Join| (|AbelianSemiGroup|) (|OrderedSet|) (|Monoid|) (CATEGORY |domain| (SIGNATURE |gcd| ($ $ $)) (ATTRIBUTE (|commutative| "*"))))   has no 
(|OrderedAbelianMonoidSup|)    finalizing nrlib PI 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{dup 50004: duplication definition}
\begin{verbatim}

Warning: RPOLCAT-;exactQuo has a duplicate definition in this file
Warning: RPOLCAT-;ZToR has a duplicate definition in this file
Warning: RPOLCAT-;PZToPR has a duplicate definition in this file

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{dup 50003: duplication definition}
\begin{verbatim}

Warning: PFO;cmult has a duplicate definition in this file

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{dup 50002: duplication definition}
\begin{verbatim}

Warning: REGSET;decompose has a duplicate definition in this file

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{dup 50000: duplication definition}
\begin{verbatim}

Warning: PSETCAT-;exactQuo has a duplicate definition in this file

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40356: RFDIST}
\begin{verbatim}

>compiling RFDIST.spad to RFDIST.nrlib

--->bookvol10.4.pamphlet-->RandomFloatDistributions(constructor): Not documented!!!!
--->bookvol10.4.pamphlet-->RandomFloatDistributions(): Missing Description
------------------------------------------------------------------------


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40354: BLMETCT}
\begin{verbatim}

>compiling BLMETCT.spad to BLMETCT.nrlib

--->bookvol10.2.pamphlet-->BlowUpMethodCategory((coerce (% (List (Integer))))): Not documented!!!!
--->bookvol10.2.pamphlet-->BlowUpMethodCategory((excepCoord ((Integer) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->BlowUpMethodCategory((chartCoord ((Integer) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->BlowUpMethodCategory((transCoord ((Integer) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->BlowUpMethodCategory((createHN (% (Integer) (Integer) (Integer) (Integer) (Integer) (Boolean) (Union left center right vertical horizontal)))): Not documented!!!!
--->bookvol10.2.pamphlet-->BlowUpMethodCategory((ramifMult ((Integer) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->BlowUpMethodCategory((infClsPt? ((Boolean) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->BlowUpMethodCategory((quotValuation ((Integer) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->BlowUpMethodCategory((type ((Union left center right vertical horizontal) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->BlowUpMethodCategory(constructor): Not documented!!!!
--->bookvol10.2.pamphlet-->BlowUpMethodCategory(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40349: NONE}
\begin{verbatim}

>compiling NONE.spad to NONE.nrlib

--->bookvol10.3.pamphlet-->None(constructor): Mismatch: left pren matches right brace
"\\spadtype{None} implements a type with no objects. It is mainly used in technical situations where such a thing is needed (\\spadignore{e.g.} the interpreter and some of the internal \\spadtype{Expression} code)."


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40348: NUMINT}
\begin{verbatim}

>compiling NUMINT.spad to NUMINT.nrlib

--------(measure ((Record (: measure (Float)) (: explanations (String)) (: extra (Result))) (RoutinesTable) NIAE))---------

--------(measure ((Record (: measure (Float)) (: explanations (String)) (: extra (Result))) (RoutinesTable) MDNIAE))---------


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40343: SETCATD}
\begin{verbatim}

>compiling SETCATD.spad to SETCATD.nrlib

--->bookvol10.2.pamphlet-->SetCategoryWithDegree((degree ((PositiveInteger) %))): Not documented!!!!


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40337: AFSPCAT}
\begin{verbatim}

>compiling AFSPCAT.spad to AFSPCAT.nrlib

--->bookvol10.2.pamphlet-->AffineSpaceCategory((origin (%))): Not documented!!!!

--->bookvol10.2.pamphlet-->AffineSpaceCategory((definingField (K %))): Not documented!!!!
--->bookvol10.2.pamphlet-->AffineSpaceCategory((coerce ((List K) %))): Not documented!!!!


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40328: PlacesCategory}
\begin{verbatim}

--->bookvol10.2.pamphlet-->PlacesCategory((+ ((Divisor %) % %))): Not documented!!!!
--->bookvol10.2.pamphlet-->PlacesCategory((+ ((Divisor %) (Divisor %) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->PlacesCategory((+ ((Divisor %) % (Divisor %)))): Not documented!!!!
--->bookvol10.2.pamphlet-->PlacesCategory((- ((Divisor %) % %))): Not documented!!!!
--->bookvol10.2.pamphlet-->PlacesCategory((- ((Divisor %) (Divisor %) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->PlacesCategory((- ((Divisor %) % (Divisor %)))): Not documented!!!!
--->bookvol10.2.pamphlet-->PlacesCategory((- ((Divisor %) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->PlacesCategory((* ((Divisor %) (Integer) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->PlacesCategory((reduce ((Divisor %) (List %)))): Not documented!!!!
--->bookvol10.2.pamphlet-->PlacesCategory((create (% (List K)))): Not documented!!!!
--->bookvol10.2.pamphlet-->PlacesCategory((create (% (Symbol)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40327: PRSPCAT}
\begin{verbatim}

>compiling PRSPCAT.spad to PRSPCAT.nrlib

--->bookvol10.2.pamphlet-->ProjectiveSpaceCategory((lastNonNul (INT %))): Not documented!!!!

--->bookvol10.2.pamphlet-->ProjectiveSpaceCategory((definingField (K %))): Not documented!!!!


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40324: IFAMON}
\begin{verbatim}

>compiling IFAMON.spad to IFAMON.nrlib
 
.. InnerFreeAbelianMonoid(#1,#2,#3) of cat 
(|FreeAbelianMonoidCategory| |#1| |#2|)    has no  outputForm : (%,((OutputForm,OutputForm) -> OutputForm),((OutputForm,OutputForm) -> OutputForm),Integer) -> OutputForm 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40321a: BSTREE}
\begin{verbatim}

>compiling BSTREE.spad to BSTREE.nrlib
--------------non extending category----------------------
.. BinarySearchTree(#1) of cat 
(|Join| (|BinaryTreeCategory| |#1|) (CATEGORY |domain| (ATTRIBUTE |shallowlyMutable|) (ATTRIBUTE |finiteAggregate|) (SIGNATURE |binarySearchTree| ($ (|List| |#1|))) (SIGNATURE |insert!| ($ |#1| $)) (SIGNATURE |insertRoot!| ($ |#1| $)) (SIGNATURE |split| ((|Record| (|:| |less| $) (|:| |greater| $)) |#1| $))))    has no  binaryTree : #1 -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40317: FACTFUNC}
\begin{verbatim}

>compiling FACTFUNC.spad to FACTFUNC.nrlib

--------(nthRoot ((Record (: exponent N) (: coef M) (: radicand (List M))) (Factored M) N))---------
--------(log ((List (Record (: coef N) (: logand M))) (Factored M)))---------

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40301: DIRRING}
\begin{verbatim}

>compiling DIRRING.spad to DIRRING.nrlib

--->bookvol10.3.pamphlet-->DirichletRing((coerce (% FUN))): Not documented!!!!
--->bookvol10.3.pamphlet-->DirichletRing((coerce (FUN %))): Not documented!!!!
--->bookvol10.3.pamphlet-->DirichletRing((coerce (% (Stream Coef)))): Not documented!!!!
--->bookvol10.3.pamphlet-->DirichletRing((coerce ((Stream Coef) %))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40300: DIV}
\begin{verbatim}

>compiling DIV.spad to DIV.nrlib
--->bookvol10.3.pamphlet-->Divisor((head (PT %))): Not documented!!!!
--->bookvol10.3.pamphlet-->Divisor((reductum (% %))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40299: D01GBFA}
\begin{verbatim}

>compiling D01GBFA.spad to D01GBFA.nrlib

--------------non extending category----------------------
.. d01gbfAnnaType of cat 
(|NumericalIntegrationCategory|)   has no 
(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D01GBFA 
   Processing d01gbfAnnaType for Browser database:


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40294: LIECAT}
\begin{verbatim}

>compiling LIECAT.spad to LIECAT.nrlib

--->-->LieAlgebra&(): Spurious comments: \indented{1}{\axiom{JacobiIdentity} means that} \axiom{[x,[y,z]]+[y,[z,x]]+[z,[x,y]] = 0} holds.

--------constructor---------
--->bookvol10.2.pamphlet-->LieAlgebra(): Spurious comments: \indented{1}{\axiom{JacobiIdentity} means that} \axiom{[x,[y,z]]+[y,[z,x]]+[z,[x,y]] = 0} holds.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40288: PACPERC}
\begin{verbatim}

>compiling PACPERC.spad to PACPERC.nrlib

--->bookvol10.2.pamphlet-->PseudoAlgebraicClosureOfPerfectFieldCategory((definingPolynomial ((SUP %)))): Not documented!!!!
--->bookvol10.2.pamphlet-->PseudoAlgebraicClosureOfPerfectFieldCategory((definingPolynomial ((SUP %) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->PseudoAlgebraicClosureOfPerfectFieldCategory((lift ((SUP %) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->PseudoAlgebraicClosureOfPerfectFieldCategory((lift ((SUP %) % %))): Not documented!!!!
--->bookvol10.2.pamphlet-->PseudoAlgebraicClosureOfPerfectFieldCategory((reduce (% (SUP %)))): Not documented!!!!
--------(distinguishedRootsOf ((List %) (SparseUnivariatePolynomial %) %))---------
--->bookvol10.2.pamphlet-->PseudoAlgebraicClosureOfPerfectFieldCategory((ground? ((Boolean) %))): Not documented!!!!

--->bookvol10.2.pamphlet-->PseudoAlgebraicClosureOfPerfectFieldCategory((vectorise ((Vector %) % %))): Not documented!!!!
--->bookvol10.2.pamphlet-->PseudoAlgebraicClosureOfPerfectFieldCategory((conjugate (% %))): Not documented!!!!
--->bookvol10.2.pamphlet-->PseudoAlgebraicClosureOfPerfectFieldCategory((newElement (% (SUP %) % (Symbol)))): Not documented!!!!
--->bookvol10.2.pamphlet-->PseudoAlgebraicClosureOfPerfectFieldCategory((newElement (% (SUP %) (Symbol)))): Not documented!!!!
--->bookvol10.2.pamphlet-->PseudoAlgebraicClosureOfPerfectFieldCategory((setTower! ((Void) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->PseudoAlgebraicClosureOfPerfectFieldCategory((fullOutput ((OutputForm) %))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40265a: LOCPOWC}
\begin{verbatim}

>compiling LOCPOWC.spad to LOCPOWC.nrlib

--->bookvol10.2.pamphlet-->LocalPowerSeriesCategory((findCoef (K % (Integer)))): Not documented!!!!
--->bookvol10.2.pamphlet-->LocalPowerSeriesCategory((coerce (% SER))): Not documented!!!!
--->bookvol10.2.pamphlet-->LocalPowerSeriesCategory((coerce (SER %))): Not documented!!!!

--->bookvol10.2.pamphlet-->LocalPowerSeriesCategory((orderIfNegative ((Union (Integer) failed) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->LocalPowerSeriesCategory((removeFirstZeroes (% %))): Not documented!!!!
--->bookvol10.2.pamphlet-->LocalPowerSeriesCategory((sbt (% % %))): Not documented!!!!

--->bookvol10.2.pamphlet-->LocalPowerSeriesCategory(constructor): Not documented!!!!
--->bookvol10.2.pamphlet-->LocalPowerSeriesCategory(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40248a: LOP}
\begin{verbatim}

>compiling LOP.spad to LOP.nrlib

--->bookvol10.4.pamphlet-->LinesOpPack((rowEchWoZeroLinesWOVectorise ((Matrix K) (Matrix K)))): Not documented!!!!
--->bookvol10.4.pamphlet-->LinesOpPack((rowEchWoZeroLines ((Matrix K) (Matrix K)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40246: PERMAN}
\begin{verbatim}

>compiling PERMAN.spad to PERMAN.nrlib
 
--->bookvol10.4.pamphlet-->Permanent((commutative (attribute *))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40242: ASP24}
\begin{verbatim}

>compiling ASP24.spad to ASP24.nrlib
 
--->bookvol10.3.pamphlet-->Asp24((coerce ($ FEXPR))): (coerce ($ FEXPR)) has varying indentation levels


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40241: AXSERV}
\begin{verbatim}

>compiling AXSERV.spad to AXSERV.nrlib
 
--->bookvol10.4.pamphlet-->AxiomServer((axServer ((Void) (Integer) (Mapping (Void) (SExpression))))): Not documented!!!!
--->bookvol10.4.pamphlet-->AxiomServer((multiServ ((Void) (SExpression)))): Not documented!!!!
--->bookvol10.4.pamphlet-->AxiomServer((getDatabase ((String) (String) (String)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40224: FFSQFR}
\begin{verbatim}

>compiling FFSQFR.spad to FFSQFR.nrlib

--->bookvol10.4.pamphlet-->FiniteFieldSquareFreeDecomposition((Musser ((Factored PolK) PolK))): Not documented!!!!
--->bookvol10.4.pamphlet-->FiniteFieldSquareFreeDecomposition((Yun ((Factored PolK) PolK))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40212a: GOSPER}
\begin{verbatim}

>compiling GOSPER.spad to GOSPER.nrlib

--->bookvol10.4.pamphlet-->GosperSummationMethod((coerce (% P))): Not documented!!!!
--->bookvol10.4.pamphlet-->GosperSummationMethod((numer (P %))): Not documented!!!!
--->bookvol10.4.pamphlet-->GosperSummationMethod((denom (P %))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40211: GRIMAGE}
\begin{verbatim}

>compiling GRIMAGE.spad to GRIMAGE.nrlib

--->bookvol10.3.pamphlet-->GraphImage((figureUnits (UNITSF (L (L P))))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40205: INTERGB}
\begin{verbatim}

>compiling INTERGB.spad to INTERGB.nrlib

--->bookvol10.4.pamphlet-->InterfaceGroebnerPackage((groebner ((List R) (List R)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40202: LISYSER}
\begin{verbatim}

>compiling LISYSER.spad to LISYSER.nrlib

--->bookvol10.4.pamphlet-->LinearSystemFromPowerSeriesPackage((finiteSeries2LinSysWOVectorise ((Matrix K) (List PCS) INT))): Not documented!!!!

--->bookvol10.4.pamphlet-->LinearSystemFromPowerSeriesPackage((finiteSeries2Vector ((List K) PCS INT))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40193: PARAMP}
\begin{verbatim}

>compiling PARAMP.spad to PARAMP.nrlib

--->bookvol10.4.pamphlet-->ParametrizationPackage((parametrize (PCS PolyRing (List PCS)))): Not documented!!!!
--------(parametrize (PCS PolyRing Plc))---------
--------(parametrize (PCS PolyRing PolyRing Plc))---------
--------(parametrize (PCS PolyRing Plc (Integer)))---------

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40192: PFORP}
\begin{verbatim}

>compiling PFORP.spad to PFORP.nrlib

--->bookvol10.4.pamphlet-->PackageForPoly((mapExponents (PolyRing (Mapping E E) PolyRing))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForPoly((degree (NNI PolyRing (Integer)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForPoly((univariate ((SparseUnivariatePolynomial R) PolyRing))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForPoly((totalDegree (NNI PolyRing))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForPoly((subs1stVar (PolyRing PolyRing PolyRing))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForPoly((subs2ndVar (PolyRing PolyRing PolyRing))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForPoly((subsInVar (PolyRing PolyRing PolyRing (Integer)))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForPoly((listVariable ((List PolyRing)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForPoly((monomials ((List PolyRing) PolyRing))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40189: POLYCATQ}
\begin{verbatim}

>compiling POLYCATQ.spad to POLYCATQ.nrlib

--->bookvol10.4.pamphlet-->PolynomialCategoryQuotientFunctions((coerce (% P))): Not documented!!!!
--->bookvol10.4.pamphlet-->PolynomialCategoryQuotientFunctions((numer (P %))): Not documented!!!!
--->bookvol10.4.pamphlet-->PolynomialCategoryQuotientFunctions((denom (P %))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40188: POLYLIFT}
\begin{verbatim}

>compiling POLYLIFT.spad to POLYLIFT.nrlib

--->bookvol10.4.pamphlet-->PolynomialCategoryLifting((+ (% % %))): Not documented!!!!
--->bookvol10.4.pamphlet-->PolynomialCategoryLifting((* (% % %))): Not documented!!!!
--->bookvol10.4.pamphlet-->PolynomialCategoryLifting((** (% % (NonNegativeInteger)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40184: RINTERP}
\begin{verbatim}

>compiling RINTERP.spad to RINTERP.nrlib

--->bookvol10.4.pamphlet-->RationalInterpolation((interpolate ((Fraction (Polynomial F)) (List F) (List F) (NonNegativeInteger) (NonNegativeInteger)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40180: SOLVEFOR}
\begin{verbatim}

>compiling SOLVEFOR.spad to SOLVEFOR.nrlib
 
--->bookvol10.4.pamphlet-->PolynomialSolveByFormulas((** (% % (Fraction (Integer))))): Not documented!!!!


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40166: FACTRN}
\begin{verbatim}

>compiling FACTRN.spad to FACTRN.nrlib

--->bookvol10.4.pamphlet-->FactorisationOverPseudoAlgebraicClosureOfRationalNumber((factor ((Factored UP) UP K))): Not documented!!!!
--->bookvol10.4.pamphlet-->FactorisationOverPseudoAlgebraicClosureOfRationalNumber((factorSqFree ((Factored UP) UP K))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40165: FFFACTSE}
\begin{verbatim}

>compiling FFFACTSE.spad to FFFACTSE.nrlib

--->bookvol10.4.pamphlet-->FiniteFieldFactorizationWithSizeParseBySideEffect((factorSquareFree ((List PolK) PolK))): Not documented!!!!
--->bookvol10.4.pamphlet-->FiniteFieldFactorizationWithSizeParseBySideEffect((factorCantorZassenhaus ((List PolK) PolK (NonNegativeInteger)))): Not documented!!!!
--->bookvol10.4.pamphlet-->FiniteFieldFactorizationWithSizeParseBySideEffect((factor ((Factored PolK) PolK))): Not documented!!!!
--->bookvol10.4.pamphlet-->FiniteFieldFactorizationWithSizeParseBySideEffect((factorUsingYun ((Factored PolK) PolK))): Not documented!!!!
--->bookvol10.4.pamphlet-->FiniteFieldFactorizationWithSizeParseBySideEffect((factorUsingMusser ((Factored PolK) PolK))): Not documented!!!!
--->bookvol10.4.pamphlet-->FiniteFieldFactorizationWithSizeParseBySideEffect((irreducible? ((Boolean) PolK))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40163: INTFRSP}
\begin{verbatim}

>compiling INTFRSP.spad to INTFRSP.nrlib

--->bookvol10.4.pamphlet-->InterpolateFormsPackage((basisOfInterpolateForms ((List (Vector K)) DIVISOR (List PolyRing)))): Not documented!!!!
--->bookvol10.4.pamphlet-->InterpolateFormsPackage((basisOfInterpolateFormsForFact ((List (Vector K)) DIVISOR (List PolyRing)))): Not documented!!!!
--->bookvol10.4.pamphlet-->InterpolateFormsPackage((interpolateFormsForFact ((List PolyRing) DIVISOR (List PolyRing)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40161: NPOLYGON}
\begin{verbatim}

>compiling NPOLYGON.spad to NPOLYGON.nrlib

--->bookvol10.4.pamphlet-->NewtonPolygon((newtonPolygon ((List (List PolyRing)) PolyRing (Integer) (Integer) (Union left center right vertical horizontal)))): Not documented!!!!
--->bookvol10.4.pamphlet-->NewtonPolygon((multiplicity ((NonNegativeInteger) (List (List PolyRing))))): Not documented!!!!
--->bookvol10.4.pamphlet-->NewtonPolygon((negAndPosEdge ((List (List PolyRing)) PolyRing (List (List PolyRing))))): Not documented!!!!
--->bookvol10.4.pamphlet-->NewtonPolygon((slope (recSlope PolyRing PolyRing))): Not documented!!!!
--->bookvol10.4.pamphlet-->NewtonPolygon((slope (recSlope (List PolyRing)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40158: AFALGGRO}
\begin{verbatim}

>compiling AFALGGRO.spad to AFALGGRO.nrlib

--->bookvol10.4.pamphlet-->AffineAlgebraicSetComputeWithGroebnerBasis((affineAlgSet ((Union (List ProjPt) failed Infinite (Integer)) (List PolyRing)))): Not documented!!!!
--->bookvol10.4.pamphlet-->AffineAlgebraicSetComputeWithGroebnerBasis((affineSingularPoints ((Union (List ProjPt) failed Infinite (Integer)) PolyRing))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40157: AFALGRES}
\begin{verbatim}

>compiling AFALGRES.spad to AFALGRES.nrlib

--->bookvol10.4.pamphlet-->AffineAlgebraicSetComputeWithResultant((affineSingularPoints ((Union (List ProjPt) failed Infinite (Integer)) PolyRing))): Not documented!!!!
--->bookvol10.4.pamphlet-->AffineAlgebraicSetComputeWithResultant((affineSingularPoints ((Union (List ProjPt) failed Infinite (Integer)) UPUP))): Not documented!!!!
--->bookvol10.4.pamphlet-->AffineAlgebraicSetComputeWithResultant((affineAlgSetLocal ((Union (List ProjPt) failed Infinite (Integer)) (List UPUP)))): Not documented!!!!
--->bookvol10.4.pamphlet-->AffineAlgebraicSetComputeWithResultant((affineAlgSet ((Union (List ProjPt) failed Infinite (Integer)) (List PolyRing)))): Not documented!!!!
--->bookvol10.4.pamphlet-->AffineAlgebraicSetComputeWithResultant((polyRing2UPUP (UPUP PolyRing))): Not documented!!!!
--->bookvol10.4.pamphlet-->AffineAlgebraicSetComputeWithResultant((allPairsAmong ((List (List UPUP)) (List UPUP)))): Not documented!!!!
--->bookvol10.4.pamphlet-->AffineAlgebraicSetComputeWithResultant((affineRationalPoints ((Union (List ProjPt) failed Infinite (Integer)) PolyRing (PositiveInteger)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40134b: BlowUpPackage}
\begin{verbatim}

--->bookvol10.4.pamphlet-->BlowUpPackage((newtonPolySlope ((List (List NNI)) BlUpRing))): Not documented!!!!
--->bookvol10.4.pamphlet-->BlowUpPackage((polyRingToBlUpRing (BlUpRing PolyRing BLMET))): Not documented!!!!
--->bookvol10.4.pamphlet-->BlowUpPackage((biringToPolyRing (PolyRing BlUpRing BLMET))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40126b: Float}
\begin{verbatim}

--->bookvol10.3.pamphlet-->Float(constructor): Not documented!!!!
--->bookvol10.3.pamphlet-->Float(): Missing Description


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40120a: INFCLCT}
\begin{verbatim}

>compiling INFCLCT.spad to INFCLCT.nrlib

--->bookvol10.2.pamphlet-->InfinitlyClosePointCategory((create (% ProjPt PolyRing))): Not documented!!!!
--->bookvol10.2.pamphlet-->InfinitlyClosePointCategory((setpoint! (ProjPt % ProjPt))): Not documented!!!!
--->bookvol10.2.pamphlet-->InfinitlyClosePointCategory((setcurve! (BlUpRing % BlUpRing))): Not documented!!!!
--->bookvol10.2.pamphlet-->InfinitlyClosePointCategory((setlocalPoint! (AFP % AFP))): Not documented!!!!
--->bookvol10.2.pamphlet-->InfinitlyClosePointCategory((setsubmult! ((NonNegativeInteger) % (NonNegativeInteger)))): Not documented!!!!
--->bookvol10.2.pamphlet-->InfinitlyClosePointCategory((setmult! ((NonNegativeInteger) % (NonNegativeInteger)))): Not documented!!!!
--->bookvol10.2.pamphlet-->InfinitlyClosePointCategory((setchart! (BLMET % BLMET))): Not documented!!!!
--->bookvol10.2.pamphlet-->InfinitlyClosePointCategory((setexcpDiv! (DIVISOR % DIVISOR))): Not documented!!!!
--->bookvol10.2.pamphlet-->InfinitlyClosePointCategory((setlocalParam! ((List PCS) % (List PCS)))): Not documented!!!!
--->bookvol10.2.pamphlet-->InfinitlyClosePointCategory((setsymbName! ((Symbol) % (Symbol)))): Not documented!!!!
--->bookvol10.2.pamphlet-->InfinitlyClosePointCategory((subMultV ((NonNegativeInteger) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->InfinitlyClosePointCategory((localParamV ((List PCS) %))): Not documented!!!!
--->bookvol10.2.pamphlet-->InfinitlyClosePointCategory((symbNameV ((Symbol) %))): Not documented!!!!

--->bookvol10.2.pamphlet-->InfinitlyClosePointCategory((actualExtensionV (K %))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40115: NAGD02}
\begin{verbatim}

>compiling NAGD02.spad to NAGD02.nrlib
 
--->bookvol10.4.pamphlet-->NagOrdinaryDifferentialEquationsPackage((d02kef ((Result) (Matrix (DoubleFloat)) (Integer) (Integer) (DoubleFloat) (Integer) (Integer) (DoubleFloat) (DoubleFloat) (Matrix (DoubleFloat)) (Integer) (Integer) (Union (: fn (FileName)) (: fp (Asp10 COEFFN))) (Union (: fn (FileName)) (: fp (Asp80 BDYVAL)))))): Missing close parenthesis on first line: d02kef(xpoint,m,k,tol,maxfun,match,elam,delam,
"d02kef(xpoint,m,k,tol,maxfun,match,elam,delam, \\indented{7}{hmax,maxit,ifail,coeffn,bdyval)} finds a specified eigenvalue of a regular singular second- order Sturm-Liouville system on a finite or infinite range, using a Pruefer transformation and a shooting method. It also reports values of the eigenfunction and its derivatives. Provision is made for discontinuities in the coefficient functions or their derivatives. See \\downlink{Manual Page}{manpageXXd02kef}. ASP domains \\spad{Asp12} and \\spad{Asp33} are used to supply default subroutines for the MONIT and REPORT arguments via their \\axiomOp{outputAsFortran} operation."

--->bookvol10.4.pamphlet-->NagOrdinaryDifferentialEquationsPackage((d02kef ((Result) (Matrix (DoubleFloat)) (Integer) (Integer) (DoubleFloat) (Integer) (Integer) (DoubleFloat) (DoubleFloat) (Matrix (DoubleFloat)) (Integer) (Integer) (Union (: fn (FileName)) (: fp (Asp10 COEFFN))) (Union (: fn (FileName)) (: fp (Asp80 BDYVAL))) (FileName) (FileName)))): Missing close parenthesis on first line: d02kef(xpoint,m,k,tol,maxfun,match,elam,delam,
"d02kef(xpoint,m,k,tol,maxfun,match,elam,delam, \\indented{7}{hmax,maxit,ifail,coeffn,bdyval,monit,report)} finds a specified eigenvalue of a regular singular second- order Sturm-Liouville system on a finite or infinite range, using a Pruefer transformation and a shooting method. It also reports values of the eigenfunction and its derivatives. Provision is made for discontinuities in the coefficient functions or their derivatives. See \\downlink{Manual Page}{manpageXXd02kef}. Files \\spad{monit} and \\spad{report} will be used to define the subroutines for the MONIT and REPORT arguments. See \\downlink{Manual Page}{manpageXXd02gbf}."

--->bookvol10.4.pamphlet-->NagOrdinaryDifferentialEquationsPackage((d02raf ((Result) (Integer) (Integer) (Integer) (Integer) (DoubleFloat) (Integer) (Integer) (Integer) (Integer) (Integer) (Integer) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (DoubleFloat) (Integer) (Union (: fn (FileName)) (: fp (Asp41 FCN JACOBF JACEPS))) (Union (: fn (FileName)) (: fp (Asp42 G JACOBG JACGEP)))))): Missing close parenthesis on first line: d02raf(n,mnp,numbeg,nummix,tol,init,iy,ijac,lwork,
"d02raf(n,mnp,numbeg,nummix,tol,init,iy,ijac,lwork, \\indented{7}{liwork,np,x,y,deleps,ifail,fcn,g)} solves the two-point boundary-value problem with general boundary conditions for a system of ordinary differential equations, using a deferred correction technique and Newton iteration. See \\downlink{Manual Page}{manpageXXd02raf}."

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40114: NAGD03}
\begin{verbatim}

>compiling NAGD03.spad to NAGD03.nrlib
 
--->bookvol10.4.pamphlet-->NagPartialDifferentialEquationsPackage((d03faf ((Result) (DoubleFloat) (DoubleFloat) (Integer) (Integer) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (DoubleFloat) (DoubleFloat) (Integer) (Integer) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (DoubleFloat) (DoubleFloat) (Integer) (Integer) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (DoubleFloat) (Integer) (Integer) (Integer) (ThreeDimensionalMatrix (DoubleFloat)) (Integer)))): Missing close parenthesis on first line: d03faf(xs,xf,l,lbdcnd,bdxs,bdxf,ys,yf,m,mbdcnd,bdys,bdyf,zs,
"d03faf(xs,xf,l,lbdcnd,bdxs,bdxf,ys,yf,m,mbdcnd,bdys,bdyf,zs, \\indented{7}{zf,n,nbdcnd,bdzs,bdzf,lambda,ldimf,mdimf,lwrk,f,ifail)} solves the Helmholtz equation in Cartesian co-ordinates in three dimensions using the standard seven-point finite difference approximation. This routine is designed to be particularly efficient on vector processors. See \\downlink{Manual Page}{manpageXXd03faf}."

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40112: NAGE04}
\begin{verbatim}

>compiling NAGE04.spad to NAGE04.nrlib
 
--->bookvol10.4.pamphlet-->NagOptimisationPackage((e04mbf ((Result) (Integer) (Integer) (Integer) (Integer) (Integer) (Integer) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (Boolean) (Integer) (Integer) (Matrix (DoubleFloat)) (Integer)))): Missing close parenthesis on first line: e04mbf(itmax,msglvl,n,nclin,nctotl,nrowa,a,bl,bu,
"e04mbf(itmax,msglvl,n,nclin,nctotl,nrowa,a,bl,bu, \\indented{7}{cvec,linobj,liwork,lwork,x,ifail)} is an easy-to-use routine for solving linear programming problems, or for finding a feasible point for such problems. It is not intended for large sparse problems. See \\downlink{Manual Page}{manpageXXe04mbf}."

--->bookvol10.4.pamphlet-->NagOptimisationPackage((e04naf ((Result) (Integer) (Integer) (Integer) (Integer) (Integer) (Integer) (Integer) (Integer) (DoubleFloat) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (Boolean) (Boolean) (Boolean) (Integer) (Integer) (Matrix (DoubleFloat)) (Matrix (Integer)) (Integer) (Union (: fn (FileName)) (: fp (Asp20 QPHESS)))))): Missing close parenthesis on first line: e04naf(itmax,msglvl,n,nclin,nctotl,nrowa,nrowh,ncolh,bigbnd,a,bl,
"e04naf(itmax,msglvl,n,nclin,nctotl,nrowa,nrowh,ncolh,bigbnd,a,bl, bu,cvec,featol,hess,cold,lpp,orthog,liwork,lwork,x,istate,ifail,qphess) is a comprehensive programming (QP) or linear programming (LP) problems. It is not intended for large sparse problems. See \\downlink{Manual Page}{manpageXXe04naf}."

--->bookvol10.4.pamphlet-->NagOptimisationPackage((e04ucf ((Result) (Integer) (Integer) (Integer) (Integer) (Integer) (Integer) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (Integer) (Integer) (Boolean) (DoubleFloat) (Integer) (DoubleFloat) (DoubleFloat) (Boolean) (DoubleFloat) (DoubleFloat) (DoubleFloat) (DoubleFloat) (Boolean) (Integer) (Integer) (Integer) (Integer) (Integer) (DoubleFloat) (DoubleFloat) (DoubleFloat) (Integer) (Integer) (Integer) (Integer) (Integer) (Matrix (Integer)) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (Integer) (Union (: fn (FileName)) (: fp (Asp55 CONFUN))) (Union (: fn (FileName)) (: fp (Asp49 OBJFUN)))))): Missing close parenthesis on first line: e04ucf(n,nclin,ncnln,nrowa,nrowj,nrowr,a,bl,bu,liwork,lwork,sta,
"e04ucf(n,nclin,ncnln,nrowa,nrowj,nrowr,a,bl,bu,liwork,lwork,sta, \\indented{7}{cra,der,fea,fun,hes,infb,infs,linf,lint,list,maji,majp,mini,} \\indented{7}{minp,mon,nonf,opt,ste,stao,stac,stoo,stoc,ve,istate,cjac,} \\indented{7}{clamda,r,x,ifail,confun,objfun)} is designed to minimize an arbitrary smooth function subject to constraints on the variables, linear constraints. (E04UCF may be used for unconstrained, bound-constrained and linearly constrained optimization.) The user must provide subroutines that define the objective and constraint functions and as many of their first partial derivatives as possible. Unspecified derivatives are approximated by finite differences. All matrices are treated as dense, and hence E04UCF is not intended for large sparse problems. See \\downlink{Manual Page}{manpageXXe04ucf}."

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 70111: NSDPS}
\begin{verbatim}

>compiling NSDPS.spad to NSDPS.nrlib
 
--->bookvol10.3.pamphlet-->NeitherSparseOrDensePowerSeries((findTerm (TERM % (Integer)))): Not documented!!!!
--------constructor---------

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40107: PACOFF}
\begin{verbatim}

>compiling PACOFF.spad to PACOFF.nrlib
 
--->bookvol10.3.pamphlet-->PseudoAlgebraicClosureOfFiniteField((fullOutput ((OutputForm) %))): Not documented!!!!


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40106: PACRAT}
\begin{verbatim}

>compiling PACRAT.spad to PACRAT.nrlib

--->bookvol10.3.pamphlet-->PseudoAlgebraicClosureOfRationalNumber((fullOutput ((OutputForm) %))): Not documented!!!!
--->bookvol10.3.pamphlet-->PseudoAlgebraicClosureOfRationalNumber((newElement (% (SUP %) (SUP %) PI % (Symbol)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40096: SAOS}
\begin{verbatim}

>compiling SAOS.spad to SAOS.nrlib

--->bookvol10.3.pamphlet-->SingletonAsOrderedSet((create (%))): Not documented!!!!
--->bookvol10.3.pamphlet-->SingletonAsOrderedSet((convert ((Symbol) %))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40082a: DTP}
\begin{verbatim}

>compiling DTP.spad to DTP.nrlib
 
--->bookvol10.4.pamphlet-->DesingTreePackage((blowUp ((List InfClsPoint) InfClsPoint))): Not documented!!!!

--->bookvol10.4.pamphlet-->DesingTreePackage((blowUpWithExcpDiv ((Void) DesTree))): Not documented!!!!

--->bookvol10.4.pamphlet-->DesingTreePackage((inBetweenExcpDiv (DIVISOR DesTree))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{nonextend 40081: D01TRNS}
\begin{verbatim}

>compiling D01TRNS.spad to D01TRNS.nrlib

--->bookvol10.3.pamphlet-->d01TransformFunctionType(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40078: EXPRODE}
\begin{verbatim}

>compiling EXPRODE.spad to EXPRODE.nrlib
 
--->bookvol10.4.pamphlet-->ExpressionSpaceODESolver((seriesSolve ((Any) (List F) (List OP) EQ (List EQ)))): Missing close parenthesis on first line: seriesSolve([eq1,...,eqn], [y1,...,yn],
"seriesSolve([eq1,...,eqn], [y1,...,yn], \\spad{x} = \\spad{a,[y1} a = b1,..., \\spad{yn} a = bn]) is equivalent to \\spad{seriesSolve([eq1=0,...,eqn=0], [y1,...,yn], \\spad{x} = a, \\spad{[y1} a = b1,..., \\spad{yn} a = bn])}."

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40069: MYUP}
\begin{verbatim}

>compiling MYUP.spad to MYUP.nrlib

--------(fmecg (% % (NonNegativeInteger) R %))---------
--->bookvol10.3.pamphlet-->MyUnivariatePolynomial((coerce (% R))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyUnivariatePolynomial((coerce (% (Polynomial R)))): Not documented!!!!


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40068: MYEXPR}
\begin{verbatim}

>compiling MYEXPR.spad to MYEXPR.nrlib
 
--->bookvol10.3.pamphlet-->MyExpression((* (% % %))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyExpression((/ (% % %))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyExpression((** (% % %))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyExpression((numerator (% %))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyExpression((denominator (% %))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyExpression((ground? ((Boolean) %))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyExpression((coerce (% (Fraction UP)))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyExpression((retract ((Fraction UP) %))): Not documented!!!!


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40067: MYEXPR}
\begin{verbatim}

>compiling MYEXPR.spad to MYEXPR.nrlib

--------(fmecg (% % (NonNegativeInteger) R %))---------
--->bookvol10.3.pamphlet-->MyUnivariatePolynomial((coerce (% R))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyUnivariatePolynomial((coerce (% (Polynomial R)))): Not documented!!!!

--->bookvol10.3.pamphlet-->MyExpression((* (% % %))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyExpression((/ (% % %))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyExpression((** (% % %))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyExpression((numerator (% %))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyExpression((denominator (% %))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyExpression((ground? ((Boolean) %))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyExpression((coerce (% (Fraction UP)))): Not documented!!!!
--->bookvol10.3.pamphlet-->MyExpression((retract ((Fraction UP) %))): Not documented!!!!

--->bookvol10.4.pamphlet-->NagMatrixOperationsPackage((f01bsf ((Result) (Integer) (Integer) (Integer) (Matrix (Integer)) (Matrix (Integer)) (Matrix (Integer)) (Matrix (Integer)) (Boolean) (DoubleFloat) (Boolean) (Matrix (Integer)) (Matrix (DoubleFloat)) (Integer)))): Missing close parenthesis on first line: f01bsf(n,nz,licn,ivect,jvect,icn,ikeep,grow,
"f01bsf(n,nz,licn,ivect,jvect,icn,ikeep,grow, \\indented{7}{eta,abort,idisp,avals,ifail)} factorizes a real sparse matrix using the pivotal sequence previously obtained by F01BRF when a matrix of the same sparsity pattern was factorized. See \\downlink{Manual Page}{manpageXXf01bsf}."

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40066: NAGF02}
\begin{verbatim}

>compiling NAGF02.spad to NAGF02.nrlib
 
--->bookvol10.4.pamphlet-->NagEigenPackage((f02fjf ((Result) (Integer) (Integer) (DoubleFloat) (Integer) (Integer) (Integer) (Integer) (Integer) (Integer) (Integer) (Matrix (DoubleFloat)) (Integer) (Union (: fn (FileName)) (: fp (Asp27 DOT))) (Union (: fn (FileName)) (: fp (Asp28 IMAGE)))))): Missing close parenthesis on first line: f02fjf(n,k,tol,novecs,nrx,lwork,lrwork,
"f02fjf(n,k,tol,novecs,nrx,lwork,lrwork, \\indented{7}{liwork,m,noits,x,ifail,dot,image)} finds eigenvalues of a real sparse symmetric or generalized symmetric eigenvalue problem. See \\downlink{Manual Page}{manpageXXf02fjf}."

--->bookvol10.4.pamphlet-->NagEigenPackage((f02fjf ((Result) (Integer) (Integer) (DoubleFloat) (Integer) (Integer) (Integer) (Integer) (Integer) (Integer) (Integer) (Matrix (DoubleFloat)) (Integer) (Union (: fn (FileName)) (: fp (Asp27 DOT))) (Union (: fn (FileName)) (: fp (Asp28 IMAGE))) (FileName)))): Missing close parenthesis on first line: f02fjf(n,k,tol,novecs,nrx,lwork,lrwork,
"f02fjf(n,k,tol,novecs,nrx,lwork,lrwork, \\indented{7}{liwork,m,noits,x,ifail,dot,image,monit)} finds eigenvalues of a real sparse symmetric or generalized symmetric eigenvalue problem. See \\downlink{Manual Page}{manpageXXf02fjf}."

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40065: NAGF04}
\begin{verbatim}

>compiling NAGF04.spad to NAGF04.nrlib
 
--->bookvol10.4.pamphlet-->NagLinearEquationSolvingPackage((f04maf ((Result) (Integer) (Integer) (Matrix (DoubleFloat)) (Integer) (Matrix (Integer)) (Integer) (Matrix (Integer)) (Matrix (DoubleFloat)) (Matrix (Integer)) (Matrix (Integer)) (Matrix (DoubleFloat)) (Matrix (DoubleFloat)) (Matrix (Integer)) (Integer)))): Missing close parenthesis on first line: f04maf(n,nz,avals,licn,irn,lirn,icn,wkeep,ikeep,
"f04maf(n,nz,avals,licn,irn,lirn,icn,wkeep,ikeep, \\indented{7}{inform,b,acc,noits,ifail)} \\spad{e} a sparse symmetric positive-definite system of linear equations, Ax=b, using a pre-conditioned conjugate gradient method, where A has been factorized by F01MAF. See \\downlink{Manual Page}{manpageXXf04maf}."
--------(f04mbf ((Result) (Integer) (Matrix (DoubleFloat)) (Boolean) (DoubleFloat) (Integer) (Integer) (Integer) (Integer) (DoubleFloat) (Integer) (Union (: fn (FileName)) (: fp (Asp28 APROD))) (Union (: fn (FileName)) (: fp (Asp34 MSOLVE)))))---------

--->bookvol10.4.pamphlet-->NagLinearEquationSolvingPackage((f04qaf ((Result) (Integer) (Integer) (DoubleFloat) (DoubleFloat) (DoubleFloat) (DoubleFloat) (Integer) (Integer) (Integer) (Integer) (Matrix (DoubleFloat)) (Integer) (Union (: fn (FileName)) (: fp (Asp30 APROD)))))): Missing close parenthesis on first line: f04qaf(m,n,damp,atol,btol,conlim,itnlim,msglvl,
"f04qaf(m,n,damp,atol,btol,conlim,itnlim,msglvl, \\indented{7}{lrwork,liwork,b,ifail,aprod)} solves sparse unsymmetric equations, sparse linear least- squares problems and sparse damped linear least-squares problems, using a Lanczos algorithm. See \\downlink{Manual Page}{manpageXXf04qaf}."

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40064: OMEXPR}
\begin{verbatim}

>compiling OMEXPR.spad to OMEXPR.nrlib
 
--->bookvol10.4.pamphlet-->ExpressionToOpenMath((OMwrite ((String) (Expression R)))): Not documented!!!!
--->bookvol10.4.pamphlet-->ExpressionToOpenMath((OMwrite ((String) (Expression R) (Boolean)))): Not documented!!!!
--->bookvol10.4.pamphlet-->ExpressionToOpenMath((OMwrite ((Void) (OpenMathDevice) (Expression R)))): Not documented!!!!
--->bookvol10.4.pamphlet-->ExpressionToOpenMath((OMwrite ((Void) (OpenMathDevice) (Expression R) (Boolean)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40058: TRMANIP}
\begin{verbatim}

>compiling TRMANIP.spad to TRMANIP.nrlib
 
--->bookvol10.4.pamphlet-->TranscendentalManipulations((expand (F F))): \item appears outside a \begin-\end
--->bookvol10.4.pamphlet-->TranscendentalManipulations((expand (F F))): \item appears outside a \begin-\end
--->bookvol10.4.pamphlet-->TranscendentalManipulations((expand (F F))): \item appears outside a \begin-\end
"\\spad{expand(f)} performs the following expansions on f:\\begin{items} \\item 1. logs of products are expanded into sums of logs, \\item 2. trigonometric and hyperbolic trigonometric functions of sums are expanded into sums of products of trigonometric and hyperbolic trigonometric functions. \\item 3. formal powers of the form \\spad{(a/b)**c} are expanded into \\spad{a**c * b**(-c)}. \\end{items}"

--->bookvol10.4.pamphlet-->TranscendentalManipulations((simplify (F F))): \item appears outside a \begin-\end
--->bookvol10.4.pamphlet-->TranscendentalManipulations((simplify (F F))): \item appears outside a \begin-\end
--->bookvol10.4.pamphlet-->TranscendentalManipulations((simplify (F F))): \item appears outside a \begin-\end
--->bookvol10.4.pamphlet-->TranscendentalManipulations((simplify (F F))): \item appears outside a \begin-\end
"\\spad{simplify(f)} performs the following simplifications on f:\\begin{items} \\item 1. rewrites trigs and hyperbolic trigs in terms of \\spad{sin} ,\\spad{cos}, \\spad{sinh}, \\spad{cosh}. \\item 2. rewrites \\spad{sin**2} and \\spad{sinh**2} in terms of \\spad{cos} and \\spad{cosh}, \\item 3. rewrites \\spad{exp(a)*exp(b)} as \\spad{exp(a+b)}. \\item 4. rewrites \\spad{(a**(1/n))**m * (a**(1/s))**t} as a single power of a single radical of \\spad{a}. \\end{items}"

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40057: UPXSSING}
\begin{verbatim}

>compiling UPXSSING.spad to UPXSSING.nrlib
 
--------------non extending category----------------------
.. UnivariatePuiseuxSeriesWithExponentialSingularity(#1,#2,#3,#4) of cat 
(|Join| (|FiniteAbelianMonoidRing| (|UnivariatePuiseuxSeries| |#2| |#3| |#4|) (|ExponentialOfUnivariatePuiseuxSeries| |#2| |#3| |#4|)) (|IntegralDomain|) (CATEGORY |domain| (SIGNATURE |limitPlus| ((|Union| (|OrderedCompletion| |#2|) "failed") $)) (SIGNATURE |dominantTerm| ((|Union| (|Record| (|:| |%term| (|Record| (|:| |%coef| (|UnivariatePuiseuxSeries| |#2| |#3| |#4|)) (|:| |%expon| (|ExponentialOfUnivariatePuiseuxSeries| |#2| |#3| |#4|)) (|:| |%expTerms| (|List| (|Record| (|:| |k| (|Fraction| (|Integer|))) (|:| |c| |#2|)))))) (|:| |%type| (|String|))) "failed") $))))   has no 
(IF (|has| (|UnivariatePuiseuxSeries| |#2| |#3| |#4|) (|IntegralDomain|)) (IF (|has| (|ExponentialOfUnivariatePuiseuxSeries| |#2| |#3| |#4|) (|CancellationAbelianMonoid|)) (SIGNATURE |fmecg| ($ $ (|ExponentialOfUnivariatePuiseuxSeries| |#2| |#3| |#4|) (|UnivariatePuiseuxSeries| |#2| |#3| |#4|) $)) |noBranch|) |noBranch|)    finalizing nrlib UPXSSING 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40056: UTSSOL}
\begin{verbatim}

>compiling UTSSOL.spad to UTSSOL.nrlib

--->bookvol10.4.pamphlet-->TaylorSolve((seriesSolve (UTSF (Mapping UTSSUPF UTSSUPF) (List F)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40050: EXPRSOL}
\begin{verbatim}

>compiling EXPRSOL.spad to EXPRSOL.nrlib
 
--->bookvol10.4.pamphlet-->ExpressionSolve((seriesSolve (UTSF F OP SY (List F)))): Not documented!!!!
--->bookvol10.4.pamphlet-->ExpressionSolve((replaceDiffs (F F OP (Symbol)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40049: FACTEXT}
\begin{verbatim}

>compiling FACTEXT.spad to FACTEXT.nrlib
 
--->bookvol10.4.pamphlet-->FactorisationOverPseudoAlgebraicClosureOfAlgExtOfRationalNumber((factor ((Factored UP) UP K))): Not documented!!!!
--->bookvol10.4.pamphlet-->FactorisationOverPseudoAlgebraicClosureOfAlgExtOfRationalNumber((factorSqFree ((Factored UP) UP K))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40047: GSERIES}
\begin{verbatim}

>compiling GSERIES.spad to GSERIES.nrlib

--------------non extending category----------------------
.. GeneralUnivariatePowerSeries(#1,#2,#3) of cat 
(|Join| (|UnivariatePuiseuxSeriesCategory| |#1|) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|Variable| |#2|))) (SIGNATURE |coerce| ($ (|UnivariatePuiseuxSeries| |#1| |#2| |#3|))) (SIGNATURE |differentiate| ($ $ (|Variable| |#2|))) (IF (|has| |#1| (|Algebra| (|Fraction| (|Integer|)))) (SIGNATURE |integrate| ($ $ (|Variable| |#2|))) |noBranch|)))   has no 
(|UnivariatePuiseuxSeriesConstructorCategory| |#1| (|UnivariateLaurentSeries| |#1| |#2| |#3|))    finalizing nrlib GSERIES 


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40046: REGSET}
\begin{verbatim}

>compiling REGSET.spad to REGSET.nrlib
 
Warning: REGSET;decompose has a duplicate definition in this file


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40044: RSDCMPK}
\begin{verbatim}

>compiling RSDCMPK.spad to RSDCMPK.nrlib
 
--->bookvol10.4.pamphlet-->RegularSetDecompositionPackage((KrullNumber (N LP Split))): Not documented!!!!
--->bookvol10.4.pamphlet-->RegularSetDecompositionPackage((numberOfVariables (N LP Split))): Not documented!!!!
--->bookvol10.4.pamphlet-->RegularSetDecompositionPackage((algebraicDecompose ((Record (: done Split) (: todo (List LpWT))) P TS B))): Not documented!!!!
--->bookvol10.4.pamphlet-->RegularSetDecompositionPackage((transcendentalDecompose ((Record (: done Split) (: todo (List LpWT))) P TS N))): Not documented!!!!
--->bookvol10.4.pamphlet-->RegularSetDecompositionPackage((transcendentalDecompose ((Record (: done Split) (: todo (List LpWT))) P TS))): Not documented!!!!
--->bookvol10.4.pamphlet-->RegularSetDecompositionPackage((internalDecompose ((Record (: done Split) (: todo (List LpWT))) P TS N B))): Not documented!!!!
--->bookvol10.4.pamphlet-->RegularSetDecompositionPackage((internalDecompose ((Record (: done Split) (: todo (List LpWT))) P TS N))): Not documented!!!!
--->bookvol10.4.pamphlet-->RegularSetDecompositionPackage((internalDecompose ((Record (: done Split) (: todo (List LpWT))) P TS))): Not documented!!!!
--->bookvol10.4.pamphlet-->RegularSetDecompositionPackage((decompose (Split LP Split B B))): Not documented!!!!
--->bookvol10.4.pamphlet-->RegularSetDecompositionPackage((decompose (Split LP Split B B B B B))): Not documented!!!!
--->bookvol10.4.pamphlet-->RegularSetDecompositionPackage((upDateBranches ((List LpWT) LP Split (List LpWT) Wip N))): Not documented!!!!
--->bookvol10.4.pamphlet-->RegularSetDecompositionPackage((convert ((String) (Record (: val (List P)) (: tower TS))))): Not documented!!!!
--->bookvol10.4.pamphlet-->RegularSetDecompositionPackage((printInfo ((Void) (List (Record (: val (List P)) (: tower TS))) N))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40040: UFPS1}
\begin{verbatim}

>compiling UFPS1.spad to UFPS1.nrlib
 
--->bookvol10.4.pamphlet-->UnivariateFormalPowerSeriesFunctions((hadamard (UFPS UFPS UFPS))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40037a: GPAFF}
\begin{verbatim}

>compiling GPAFF.spad to GPAFF.nrlib
 
--->bookvol10.4.pamphlet-->GeneralPackageForAlgebraicFunctionField((reset ((Void)))): Not documented!!!!
--->bookvol10.4.pamphlet-->GeneralPackageForAlgebraicFunctionField((setCurve (PolyRing PolyRing))): Not documented!!!!
--->bookvol10.4.pamphlet-->GeneralPackageForAlgebraicFunctionField((homogenize (PolyRing PolyRing (Integer)))): Not documented!!!!

--->bookvol10.4.pamphlet-->GeneralPackageForAlgebraicFunctionField((genusNeg (INT))): Not documented!!!!

--->bookvol10.4.pamphlet-->GeneralPackageForAlgebraicFunctionField((findOrderOfDivisor ((Record (: ord (Integer)) (: num PolyRing) (: den PolyRing) (: upTo (Integer))) DIVISOR (Integer) (Integer)))): Not documented!!!!

--->bookvol10.4.pamphlet-->GeneralPackageForAlgebraicFunctionField((interpolateFormsForFact ((List PolyRing) DIVISOR (List PolyRing)))): Not documented!!!!

--->bookvol10.4.pamphlet-->GeneralPackageForAlgebraicFunctionField((placesAbove ((List Plc) ProjPt))): Not documented!!!!

--->bookvol10.4.pamphlet-->GeneralPackageForAlgebraicFunctionField((rationalPoints ((List ProjPt)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40036: PACEXT}
\begin{verbatim}

>compiling PACEXT.spad to PACEXT.nrlib
 
--->bookvol10.3.pamphlet-->PseudoAlgebraicClosureOfAlgExtOfRationalNumber((fullOutput ((OutputForm) %))): Not documented!!!!
--->bookvol10.3.pamphlet-->PseudoAlgebraicClosureOfAlgExtOfRationalNumber((retractToGrn (K %))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40035: RECOP}
\begin{verbatim}

>compiling RECOP.spad to RECOP.nrlib
 
--->bookvol10.4.pamphlet-->RecurrenceOperator((numberOfValuesNeeded ((Integer) (Integer) (BasicOperator) (Symbol) F))): Not documented!!!!
--->bookvol10.4.pamphlet-->RecurrenceOperator((getShiftRec ((Union (Integer) failed) (BasicOperator) (Kernel F) (Symbol)))): Not documented!!!!
--->bookvol10.4.pamphlet-->RecurrenceOperator((shiftInfoRec ((Record (: max (Union (Integer) failed)) (: ord (Union (Integer) failed)) (: ker (Kernel F))) (BasicOperator) (Symbol) F))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40034: SFRGCD}
\begin{verbatim}

>compiling SFRGCD.spad to SFRGCD.nrlib
 
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((startTableGcd! ((Void) S S S))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((stopTableGcd! ((Void)))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((startTableInvSet! ((Void) S S S))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((stopTableInvSet! ((Void)))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((stosePrepareSubResAlgo ((List LpWT) P P TS))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((stoseInternalLastSubResultant ((List PWT) P P TS B B))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((stoseInternalLastSubResultant ((List PWT) (List LpWT) V B))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((stoseIntegralLastSubResultant ((List PWT) P P TS))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((stoseLastSubResultant ((List PWT) P P TS))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((stoseInvertible? (B P TS))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((stoseInvertible?sqfreg ((List BWT) P TS))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((stoseInvertibleSetsqfreg (Split P TS))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((stoseInvertible?reg ((List BWT) P TS))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((stoseInvertibleSetreg (Split P TS))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((stoseInvertible? ((List BWT) P TS))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((stoseInvertibleSet (Split P TS))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularTriangularSetGcdPackage((stoseSquareFreePart ((List PWT) P TS))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40033: SRDCMPK}
\begin{verbatim}

>compiling SRDCMPK.spad to SRDCMPK.nrlib
 
--->bookvol10.4.pamphlet-->SquareFreeRegularSetDecompositionPackage((KrullNumber (N LP Split))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularSetDecompositionPackage((numberOfVariables (N LP Split))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularSetDecompositionPackage((algebraicDecompose ((Record (: done Split) (: todo (List LpWT))) P TS))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularSetDecompositionPackage((transcendentalDecompose ((Record (: done Split) (: todo (List LpWT))) P TS N))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularSetDecompositionPackage((transcendentalDecompose ((Record (: done Split) (: todo (List LpWT))) P TS))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularSetDecompositionPackage((internalDecompose ((Record (: done Split) (: todo (List LpWT))) P TS N B))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularSetDecompositionPackage((internalDecompose ((Record (: done Split) (: todo (List LpWT))) P TS N))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularSetDecompositionPackage((internalDecompose ((Record (: done Split) (: todo (List LpWT))) P TS))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularSetDecompositionPackage((decompose (Split LP Split B B))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularSetDecompositionPackage((decompose (Split LP Split B B B B B))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularSetDecompositionPackage((upDateBranches ((List LpWT) LP Split (List LpWT) Wip N))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularSetDecompositionPackage((convert ((String) (Record (: val (List P)) (: tower TS))))): Not documented!!!!
--->bookvol10.4.pamphlet-->SquareFreeRegularSetDecompositionPackage((printInfo ((Void) (List (Record (: val (List P)) (: tower TS))) N))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40031: GUESS}
\begin{verbatim}

>compiling GUESS.spad to GUESS.nrlib
 
--->bookvol10.4.pamphlet-->Guess((* (% % %))): Not documented!!!!
--->bookvol10.4.pamphlet-->Guess((/ (% % %))): Not documented!!!!
--->bookvol10.4.pamphlet-->Guess((** (% % %))): Not documented!!!!
--->bookvol10.4.pamphlet-->Guess((numerator (% %))): Not documented!!!!
--->bookvol10.4.pamphlet-->Guess((denominator (% %))): Not documented!!!!
--->bookvol10.4.pamphlet-->Guess((ground? ((Boolean) %))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40029a: PAFF}
\begin{verbatim}

>compiling PAFF.spad to PAFF.nrlib
 
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((homogenize (PolyRing PolyRing (Integer)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((interpolateFormsForFact ((List PolyRing) DIVISOR (List PolyRing)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((fullDesTree ((Void)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((fullInfClsPt ((Void)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((setCurve (PolyRing PolyRing))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((projectivePoint (ProjPt (List K)))): Not documented!!!!
--------(pointDominateBy (ProjPt Plc))---------
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((placesAbove ((List Plc) ProjPt))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((setSingularPoints ((List ProjPt) (List ProjPt)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((goppaCode ((Matrix K) DIVISOR DIVISOR))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((goppaCode ((Matrix K) DIVISOR (List Plc)))): Not documented!!!!
--------(rationalPlaces ((List Plc)))---------
--------(theCurve (PolyRing))---------
--------(genus (NNI))---------
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((genusNeg ((Integer)))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((rationalPoints ((List ProjPt)))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((lBasis ((List FRACPOLY) DIVISOR NNI))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((findOrderOfDivisor ((Record (: ord (Integer)) (: num PolyRing) (: den PolyRing) (: upTo (Integer))) DIVISOR (Integer) (Integer)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{typos 40028a: PAFFF}
\begin{verbatim}

>compiling PAFFFF.spad to PAFFFF.nrlib
 
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((homogenize (PolyRing PolyRing (Integer)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((fullDesTree ((Void)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((fullInfClsPt ((Void)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((setCurve (PolyRing PolyRing))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((translateToOrigin (PolyRing2 PolyRing ProjPt))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((goppaCode ((Matrix K) DIVISOR DIVISOR))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((goppaCode ((Matrix K) DIVISOR (List Plc)))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((placesAbove ((List Plc) ProjPt))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((projectivePoint (ProjPt (List DK)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((setSingularPoints ((List ProjPt) (List ProjPt)))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((genusNeg ((Integer)))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((rationalPoints ((List ProjPt)))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((lBasis ((List FracPoly) DIVISOR NNI))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((homogenize (PolyRing PolyRing (Integer)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((interpolateFormsForFact ((List PolyRing) DIVISOR (List PolyRing)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((fullDesTree ((Void)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((fullInfClsPt ((Void)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((setCurve (PolyRing PolyRing))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((projectivePoint (ProjPt (List K)))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((placesAbove ((List Plc) ProjPt))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((setSingularPoints ((List ProjPt) (List ProjPt)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((goppaCode ((Matrix K) DIVISOR DIVISOR))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((goppaCode ((Matrix K) DIVISOR (List Plc)))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((genusNeg ((Integer)))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((rationalPoints ((List ProjPt)))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((lBasis ((List FRACPOLY) DIVISOR NNI))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionField((findOrderOfDivisor ((Record (: ord (Integer)) (: num PolyRing) (: den PolyRing) (: upTo (Integer))) DIVISOR (Integer) (Integer)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((interpolateFormsForFact ((List PolyRing2) DIVISOR (List PolyRing)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((homogenize (PolyRing PolyRing (Integer)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((fullDesTree ((Void)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((fullInfClsPt ((Void)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((setCurve (PolyRing PolyRing))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((translateToOrigin (PolyRing2 PolyRing ProjPt))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((goppaCode ((Matrix K) DIVISOR DIVISOR))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((goppaCode ((Matrix K) DIVISOR (List Plc)))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((placesAbove ((List Plc) ProjPt))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((projectivePoint (ProjPt (List DK)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((setSingularPoints ((List ProjPt) (List ProjPt)))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((genusNeg ((Integer)))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((rationalPoints ((List ProjPt)))): Not documented!!!!

   PAFFFF abbreviates package 
      PackageForAlgebraicFunctionFieldOverFiniteField 

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((lBasis ((List FracPoly) DIVISOR NNI))): Not documented!!!!

--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((findOrderOfDivisor ((Record (: ord (Integer)) (: num PolyRing) (: den PolyRing) (: upTo (Integer))) DIVISOR (Integer) (Integer)))): Not documented!!!!
--->bookvol10.4.pamphlet-->PackageForAlgebraicFunctionFieldOverFiniteField((interpolateFormsForFact ((List PolyRing2) DIVISOR (List PolyRing)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20566: MAPPKG1}
\begin{verbatim}

>compiling MAPPKG1.spad to MAPPKG1.nrlib
 
   Warnings: 
      [1] Use: import (MappingPackageInternalHacks1 A)
      [2] fixedPoint: :A -- should replace by pretend
      [3] **:  a1 has no value
      [4] recur:  n1 has no value
      [5] recur:  a2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20565: MAPPKG2}
\begin{verbatim}

>compiling MAPPKG2.spad to MAPPKG2.nrlib
 
   Warnings: 
      [1] Use: import (MappingPackageInternalHacks2 A C)
      [2] const:  a1 has no value
      [3] constant:  a1 has no value
      [4] diag:  a1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20564: MAPPKG3}
\begin{verbatim}

>compiling MAPPKG3.spad to MAPPKG3.nrlib
 
   Warnings: 
      [1] Use: import (MappingPackageInternalHacks3 A B C)
      [2] curryRight:  a has no value
      [3] curryLeft:  b has no value
      [4] constantRight:  a has no value
      [5] constantLeft:  b has no value
      [6] twist:  a has no value
      [7] twist:  b has no value
      [8] *:  a has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20563: MKBCFUNC}
\begin{verbatim}

>compiling MKBCFUNC.spad to MKBCFUNC.nrlib
 
   Warnings: 
      [1] binaryFunction:  d1 has no value
      [2] binaryFunction:  d2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20562: MKUCFUNC}
\begin{verbatim}

>compiling MKUCFUNC.spad to MKUCFUNC.nrlib
 
   Warnings: 
      [1] unaryFunction:  d1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20561: NIPROB}
\begin{verbatim}

>compiling NIPROB.spad to NIPROB.nrlib
 
   Warnings: 
      [1] coerce:  nia has no value
      [2] coerce:  mdnia has no value
      [3] retract:  nia has no value
      [4] retract:  mdnia has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20560: OPTPROB}
\begin{verbatim}

>compiling OPTPROB.spad to OPTPROB.nrlib
 
   Warnings: 
      [1] coerce:  noa has no value
      [2] coerce:  lsa has no value
      [3] retract:  noa has no value
      [4] retract:  lsa has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20559: PATTERN1}
\begin{verbatim}

>compiling PATTERN1.spad to PATTERN1.nrlib

   Warnings: 
      [1] predicate:  d1 has no value
      [2] satisfy?:  var has no value
      [3] satisfy?:  pred has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20558: ASP29}
\begin{verbatim}

>compiling ASP29.spad to ASP29.nrlib
 
   Warnings: 
      [1]  ISTATE has no value
      [2]  NEXTIT has no value
      [3]  NEVALS has no value
      [4]  NVECS has no value
      [5]  K has no value
      [6]  F has no value
      [7]  D has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20557: BEZIER}
\begin{verbatim}

>compiling BEZIER.spad to BEZIER.nrlib
 
   Warnings: 
      [1] linearBezier:  t has no value
      [2] quadraticBezier:  t has no value
      [3] cubicBezier:  t has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20556: FCOMP}
\begin{verbatim}

>compiling FCOMP.spad to FCOMP.nrlib
 
   Warnings: 
      [1] elt:  y has no value
      [2] eval:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20555: IDPAG}
\begin{verbatim}

>compiling IDPAG.spad to IDPAG.nrlib
 
   Warnings: 
      [1] -:  res has no value
      [2] -:  endcell has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20554: IDPAM}
\begin{verbatim}

>compiling IDPAM.spad to IDPAM.nrlib
 
   Warnings: 
      [1] +:  res has no value
      [2] +:  endcell has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20553: INCRMAPS}
\begin{verbatim}

>compiling INCRMAPS.spad to INCRMAPS.nrlib
 
   Warnings: 
      [1] increment:  x has no value
      [2] incrementBy:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20552: MONADWU}
\begin{verbatim}

>compiling MONADWU.spad to MONADWU.nrlib
 
   Warnings: 
      [1] rightPower: signature of lhs not unique: SS(NonNegativeInteger) chosen
      [2] leftPower: signature of lhs not unique: SS(NonNegativeInteger) chosen
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20551: PATMATCH}
\begin{verbatim}

>compiling PATMATCH.spad to PATMATCH.nrlib
 
   Warnings: 
      [1] ist: not known that (SetCategory) is of mode (CATEGORY package (SIGNATURE is? ((Boolean) Subject Pat)) (SIGNATURE is? ((Boolean) (List Subject) Pat)) (SIGNATURE Is ((PatternMatchListResult Base Subject (List Subject)) (List Subject) Pat)) (IF (has Subject (RetractableTo (Symbol))) (SIGNATURE Is ((List (Equation Subject)) Subject Pat)) (IF (has Subject (Ring)) (SIGNATURE Is ((List (Equation (Polynomial Subject))) Subject Pat)) (SIGNATURE Is ((PatternMatchResult Base Subject) Subject Pat)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20550: AUTOMOR}
\begin{verbatim}

>compiling AUTOMOR.spad to AUTOMOR.nrlib
 
   Warnings: 
      [1] inv:  r1 has no value
      [2] inv:  i2 has no value
      [3] **: signature of lhs not unique: $$(Integer) chosen
      [4] **:  r1 has no value
      [5] **:  i2 has no value
      [6] morphism:  i2 has no value
      [7] morphism:  r1 has no value
      [8] *:  u1 has no value
      [9] *:  v1 has no value
      [10] *:  i2 has no value
      [11] *:  r1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20549: CHARPOL}
\begin{verbatim}

>compiling CHARPOL.spad to CHARPOL.nrlib
 
   Warnings: 
      [1] characteristicPolynomial: :(PositiveInteger) -- should replace by pretend

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20548: ELAGG}
\begin{verbatim}

>compiling ELAGG.spad to ELAGG.nrlib
 
   Warnings: 
      [1] remove!:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20547: ES2}
\begin{verbatim}

>compiling ES2.spad to ES2.nrlib
 
   Warnings: 
      [1] map:  IN has no value
      [2] map:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20546: MKCHSET}
\begin{verbatim}

>compiling MKCHSET.spad to MKCHSET.nrlib
 
   Warnings: 
      [1] coerce:  x has no value
      [2] <:  x1 has no value
      [3] =:  x1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20545: IFAMON}
\begin{verbatim}

>compiling IFAMON.spad to IFAMON.nrlib
 
   Warnings: 
      [1] *:  x has no value
      [2] coerce:  y has no value
      [3] coerce:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20544: CARD}
\begin{verbatim}

>compiling CARD.spad to CARD.nrlib
 
   Warnings: 
      [1] **: signature of lhs not unique: $$$ chosen
      [2] **: :(NonNegativeInteger) -- should replace by pretend

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20543: FACTFUNC}
\begin{verbatim}

>compiling FACTFUNC.spad to FACTFUNC.nrlib
 
   Warnings: 
      [1] nthRoot:  radi has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20541: AMR}
\begin{verbatim}

>compiling AMR.spad to AMR.nrlib
 
   Warnings: 
      [1] *:  x1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20540: DEGRED}
\begin{verbatim}

>compiling DEGRED.spad to DEGRED.nrlib
 
   Warnings: 
      [1] reduce: :(PositiveInteger) -- should replace by pretend

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20539: DLP}
\begin{verbatim}

>compiling DLP.spad to DLP.nrlib
 
   Warnings: 
      [1] shanksDiscLogAlgorithm:  found has no value
      [2] shanksDiscLogAlgorithm:  disclog has no value
      [3] shanksDiscLogAlgorithm: pretend(Integer) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20538: FAGROUP}
\begin{verbatim}

>compiling FAGROUP.spad to FAGROUP.nrlib
 
   Warnings: 
      [1] <:  exp has no value
      [2] <:  gen has no value


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20537: FIELD}
\begin{verbatim}

>compiling FIELD.spad to FIELD.nrlib
 
   Warnings: 
      [1] squareFree: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE / (S S S)) (SIGNATURE inv (S S)) (SIGNATURE prime? ((Boolean) S)) (SIGNATURE squareFree ((Factored S) S)) (SIGNATURE factor ((Factored S) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE gcd (S (List S))) (SIGNATURE gcd (S S S)) (SIGNATURE associates? ((Boolean) S S)) (SIGNATURE unitCanonical (S S)) (SIGNATURE unitNormal ((Record (: unit S) (: canonical S) (: associate S)) S)) (SIGNATURE exquo ((Union S failed) S S)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20536: FLAGG}
\begin{verbatim}

>compiling FLAGG.spad to FLAGG.nrlib
 
   Warnings: 
      [1] sorted?:  x has no value
      [2] sorted?:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20535: FLINEXP}
\begin{verbatim}

>compiling FLINEXP.spad to FLINEXP.nrlib
 
   Warnings: 
      [1] reducedSystem: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20534: MAPPKG4}
\begin{verbatim}

>compiling MAPPKG4.spad to MAPPKG4.nrlib
 
   Warnings: 
      [1] +:  c has no value
      [2] -:  c has no value
      [3] *:  c has no value
      [4] /:  c has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20533: OMLO}
\begin{verbatim}

>compiling OMLO.spad to OMLO.nrlib

   Warnings: 
      [1] op: :$ -- should replace by @
      [2] po: :P -- should replace by pretend
      [3] *: :P -- should replace by pretend
      [4] coerce: :P -- should replace by pretend

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20532: PRODUCT}
\begin{verbatim}

>compiling PRODUCT.spad to PRODUCT.nrlib

   Warnings: 
      [1] count:  n has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20531: ARR2CAT}
\begin{verbatim}

>compiling ARR2CAT.spad to ARR2CAT.nrlib
 
   Warnings: 
      [1] count:  num has no value
      [2] count:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20530: ASP34}
\begin{verbatim}

>compiling ASP34.spad to ASP34.nrlib
 
   Warnings: 
      [1]  IFLAG has no value
      [2]  N has no value
      [3]  X has no value
      [4]  Y has no value
      [5]  LRWORK has no value
      [6]  LIWORK has no value
      [7]  RWORK has no value
      [8]  IWORK has no value
      [9] coerce:  I has no value
      [10] coerce:  J has no value
      [11] coerce:  W1 has no value
      [12] coerce:  W2 has no value
      [13] coerce:  MS has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20529: BFUNCT}
\begin{verbatim}

>compiling BFUNCT.spad to BFUNCT.nrlib
 
   Warnings: 
      [1] bf:  x1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20528: BTREE}
\begin{verbatim}

>compiling BTREE.spad to BTREE.nrlib
 
   Warnings: 
      [1] empty: pretend$ -- should replace by @
      [2] node: :Rep -- should replace by pretend
      [3] setvalue!: :Rep -- should replace by pretend
      [4] setleft!: :Rep -- should replace by pretend
      [5] setright!: :(List (Tree S)) -- should replace by pretend

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20527: CRAPACK}
\begin{verbatim}

>compiling CRAPACK.spad to CRAPACK.nrlib
 
   Warnings: 
      [1] chineseRemainder:  a has no value
      [2] chineseRemainder:  d has no value
      [3] chineseRemainder:  b has no value
      [4] chineseRemainder:  c has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20526: DIRRING}
\begin{verbatim}

>compiling DIRRING.spad to DIRRING.nrlib
 
   Warnings: 
      [1] per: pretend$ -- should replace by @
      [2] rep: pretendRep -- should replace by @
      [3] coerce:  n has no value
      [4] One:  n has no value
      [5] +:  n has no value
      [6] -:  n has no value
      [7] *:  n has no value
      [8] *:  a has no value
      [9] *:  b has no value
      [10] recip:  n has no value
      [11] multiplicative?: not known that (IntegralDomain) is of mode (CATEGORY domain (IF (has Coef (CommutativeRing)) (ATTRIBUTE (IntegralDomain)) noBranch) (IF (has Coef (CommutativeRing)) (ATTRIBUTE (Algebra Coef)) noBranch) (SIGNATURE coerce ($ (Mapping Coef (PositiveInteger)))) (SIGNATURE coerce ((Mapping Coef (PositiveInteger)) $)) (SIGNATURE coerce ($ (Stream Coef))) (SIGNATURE coerce ((Stream Coef) $)) (SIGNATURE zeta ($) constant) (SIGNATURE multiplicative? ((Boolean) $ (PositiveInteger))) (SIGNATURE additive? ((Boolean) $ (PositiveInteger))))
      [12] multiplicative?:  r has no value
      [13] multiplicative?:  s has no value
      [14] additive?:  r has no value
      [15] additive?:  s has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20525: DIV}
\begin{verbatim}

>compiling DIV.spad to DIV.nrlib
 
   Warnings: 
      [1] reductum: pretendRep -- should replace by @
      [2] head: pretendRep -- should replace by @
      [3] coefficient:  r has no value
      [4] collect:  inList? has no value
      [5] collect:  t has no value
      [6] +: pretendRep -- should replace by @
      [7] *: pretendRep -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20524: D01GBFA}
\begin{verbatim}

>compiling D01GBFA.spad to D01GBFA.nrlib
 
   Warnings: 
      [1] numericalIntegration:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20523: FAMR}
\begin{verbatim}

>compiling FAMR.spad to FAMR.nrlib
 
   Warnings: 
      [1] pomopo!:  x1 has no value
      [2] /:  x1 has no value
      [3] exquo: signature of lhs not unique: (Union S failed)SR chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20522: FM1}
\begin{verbatim}

>compiling FM1.spad to FM1.nrlib
 
   Warnings: 
      [1] listOfTerms: :(List (Record (: k S) (: c R))) -- should replace by pretend

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20521: FMONOID}
\begin{verbatim}

>compiling FMONOID.spad to FMONOID.nrlib
 
   Warnings: 
      [1] overlap:  l has no value
      [2] divide:  l has no value
      [3] hclf:  h has no value
      [4] lquo:  gen has no value
      [5] lquo:  exp has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20520: IPADIC}
\begin{verbatim}

>compiling IPADIC.spad to IPADIC.nrlib

   Warnings: 
      [1] padic: pretend$ -- should replace by @
      [2] =:  st has no value
      [3] intToPAdic:  digit has no value
      [4] intToPAdic:  carry has no value
      [5] intPlusPAdic:  digit has no value
      [6] intPlusPAdic:  carry has no value
      [7] intMinusPAdic:  digit has no value
      [8] intMinusPAdic:  carry has no value
      [9] plusAux:  digit has no value
      [10] plusAux:  carry has no value
      [11] minusAux:  digit has no value
      [12] minusAux:  carry has no value
      [13] intMult:  digit has no value
      [14] intMult:  carry has no value
      [15] timesAux:  digit has no value
      [16] timesAux:  carry has no value
      [17] coerce: pretend(Integer) -- should replace by @
      [18] coerce:  l has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20519: LIST2MAP}
\begin{verbatim}

>compiling LIST2MAP.spad to LIST2MAP.nrlib
 
   Warnings: 
      [1] match:  z1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20518: LMOPS}
\begin{verbatim}

>compiling LMOPS.spad to LMOPS.nrlib
 
   Warnings: 
      [1] mapExpon:  ans has no value
      [2] outputForm: The conditional modes (List (OutputForm)) and $ conflict

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20517: MESH}
\begin{verbatim}

>compiling MESH.spad to MESH.nrlib
 
   Warnings: 
      [1] ptFunc:  z1 has no value
      [2] ptFunc:  z2 has no value
      [3] meshFun2Var:  z1 has no value
      [4] meshFun2Var:  x2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20516: MOEBIUS}
\begin{verbatim}

>compiling MOEBIUS.spad to MOEBIUS.nrlib
 
   Warnings: 
      [1] recip: signature of lhs not unique: $$ chosen
      [2] proportional?:  f1 has no value
      [3] proportional?:  g1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20515: MRING}
\begin{verbatim}

>compiling MRING.spad to MRING.nrlib
 
   Warnings: 
      [1] index:  ans has no value
      [2] retractIfCan:  coef has no value
      [3] retractIfCan:  monom has no value
      [4] recip:  monom has no value
      [5] recip:  coef has no value
      [6] coerce:  coef has no value
      [7] coerce:  monom has no value
      [8] =:  coef has no value
      [9] =:  monom has no value
      [10] sortAndAdd:  m has no value
      [11] sortAndAdd:  res has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20514: ODR}
\begin{verbatim}

>compiling ODR.spad to ODR.nrlib
 
   Warnings: 
      [1] not known that (IntegralDomain) is of mode (CATEGORY domain (IF (has R (Field)) (ATTRIBUTE (Field)) noBranch) (SIGNATURE coerce ($ R)) (SIGNATURE coerce (R $)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20513: ORDCOMP}
\begin{verbatim}

>compiling ORDCOMP.spad to ORDCOMP.nrlib
 
   Warnings: 
      [1] retract:  fin has no value
      [2] retractIfCan:  fin has no value
      [3] coerce:  fin has no value
      [4] coerce:  inf has no value
      [5] whatInfinity:  inf has no value
      [6] =:  inf has no value
      [7] =:  fin has no value
      [8] *:  inf has no value
      [9] *:  fin has no value
      [10] -:  inf has no value
      [11] -:  fin has no value
      [12] +:  inf has no value
      [13] +:  fin has no value
      [14] recip:  fin has no value
      [15] <:  inf has no value
      [16] <:  fin has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20512: PARTPERM}
\begin{verbatim}

>compiling PARTPERM.spad to PARTPERM.nrlib
 
   Warnings: 
      [1] partitions:  l1 has no value
      [2] shuffle:  l1 has no value
      [3] shuffle:  l2 has no value
      [4] shufflein:  l1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20511: PENDTREE}
\begin{verbatim}

>compiling PENDTREE.spad to PENDTREE.nrlib
 
   Warnings: 
      [1] ptree: pretend$ -- should replace by @
      [2] ptree: :Rep -- should replace by pretend
      [3] ptree: :$ -- should replace by @
      [4] =: :Rep -- should replace by pretend

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20510: PLOTTOOL}
\begin{verbatim}

>compiling PLOTTOOL.spad to PLOTTOOL.nrlib
 
   Warnings: 
      [1] xRange:  u1 has no value
      [2] xRange:  v1 has no value
      [3] yRange:  u1 has no value
      [4] yRange:  v1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20509: PFR}
\begin{verbatim}

>compiling PFR.spad to PFR.nrlib
 
   Warnings: 
      [1] LessThan: :(Boolean) -- should replace by pretend
      [2] multiplyFracTerms: :Rep -- should replace by pretend
      [3] multiplyFracTerms:  c has no value
      [4] compactFraction: :(NonNegativeInteger) -- should replace by pretend
      [5] compactFraction:  s has no value
      [6] compactFraction:  bf has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20508: PMDOWN}
\begin{verbatim}

>compiling PMDOWN.spad to PMDOWN.nrlib
 
   Warnings: 
      [1] fixPredicate:  a1 has no value
      [2] patternMatch:  a1 has no value
      [3] patternMatch: not known that (SetCategory) is of mode (CATEGORY package (SIGNATURE fixPredicate ((Mapping (Boolean) A) (Mapping (Boolean) B))) (SIGNATURE patternMatch ((PatternMatchResult S B) A (Pattern S) (PatternMatchResult S B))))
      [4] fixPredicates:  l1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20507: PMINS}
\begin{verbatim}

>compiling PMINS.spad to PMINS.nrlib
 
   Warnings: 
      [1] patternMatchInner:  i1 has no value
      [2] patternMatchInner:  i2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20506: PMLSAGG}
\begin{verbatim}

>compiling PMLSAGG.spad to PMLSAGG.nrlib
 
   Warnings: 
      [1] match: not known that (SetCategory) is of mode (CATEGORY package (SIGNATURE patternMatch ((PatternMatchListResult S R L) L (Pattern S) (PatternMatchListResult S R L))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20505: PMTOOLS}
\begin{verbatim}

>compiling PMTOOLS.spad to PMTOOLS.nrlib
 
   Warnings: 
      [1] patternMatchTimes:  l1 has no value
      [2] patternMatch:  p1 has no value
      [3] patternMatch:  z2 has no value
      [4] patternMatch:  z1 has no value
      [5] patternMatch:  p2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20504: PRTITION}
\begin{verbatim}

>compiling PRTITION.spad to PRTITION.nrlib
 
   Warnings: 
      [1] coerce: signature of lhs not unique: (List (Integer))$ chosen
      [2] partition:  i2 has no value
      [3] partition:  i1 has no value
      [4] conjugate: pretendRep -- should replace by @
      [5] coerce: pretendRep -- should replace by @
      [6] pdct: pretendRep -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20503: PSCAT}
\begin{verbatim}

>compiling PSCAT.spad to PSCAT.nrlib
 
   Warnings: 
      [1] *:  r1 has no value
      [2] -:  r1 has no value
      [3] /:  r1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20502: SCACHE}
\begin{verbatim}

>compiling SCACHE.spad to SCACHE.nrlib
 
   Warnings: 
      [1] enterInCache:  pos has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20500: STTAYLOR}
\begin{verbatim}

>compiling STTAYLOR.spad to STTAYLOR.nrlib
 
   Warnings: 
      [1] +:  z has no value
      [2] -:  z has no value
      [3] *:  z has no value
      [4] exquo:  z has no value
      [5] /:  z has no value
      [6] nnintegers:  y has no value
      [7] integers:  y has no value
      [8] oddintegers:  y has no value
      [9] int:  y has no value
      [10] eval:  y has no value
      [11] eval:  z has no value
      [12] lagrange:  y has no value
      [13] generalLambert:  x has no value
      [14] generalLambert:  y has no value
      [15] comps:  y has no value
      [16] nlde:  y has no value
      [17] smult:  y has no value
      [18] powern:  order has no value
      [19] powern:  y has no value
      [20] power:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20499: TABLBUMP}
\begin{verbatim}

>compiling TABLBUMP.spad to TABLBUMP.nrlib
 
   Warnings: 
      [1] bumptab1:  s1 has no value
      [2] bumptab1:  s2 has no value
      [3] lex:  s1 has no value
      [4] lex:  s2 has no value
      [5] slex:  s1 has no value
      [6] slex:  s2 has no value
      [7] inverse:  s1 has no value
      [8] inverse:  s2 has no value
      [9] untab:  s2 has no value
      [10] untab:  s1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20498: UDPO}
\begin{verbatim}

>compiling UDPO.spad to UDPO.nrlib
 
   Warnings: 
      [1] more?:  y has no value
      [2] more?:  z has no value
      [3] largest:  y has no value
      [4] largest:  z has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20497: UNISEG}
\begin{verbatim}

>compiling UNISEG.spad to UNISEG.nrlib
 
   Warnings: 
      [1] expand:  x has no value


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20496: XPR}
\begin{verbatim}

>compiling XPR.spad to XPR.nrlib
 
   Warnings: 
      [1] quasiRegular?:  k has no value
      [2] *:  k has no value
      [3] *:  c has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20495: AFFSP}
\begin{verbatim}

>compiling AFFSP.spad to AFFSP.nrlib
 
   Warnings: 
      [1] removeConjugate:  conjrem has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20494: COMBINAT}
\begin{verbatim}

>compiling COMBINAT.spad to COMBINAT.nrlib
 
   Warnings: 
      [1] binomial:  s has no value
      [2] binomial:  b has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20493: D01FCFA}
\begin{verbatim}

>compiling D01FCFA.spad to D01FCFA.nrlib
 
   Warnings: 
      [1] numericalIntegration:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20492: IFARRAY}
\begin{verbatim}

>compiling IFARRAY.spad to IFARRAY.nrlib
 
   Warnings: 
      [1] remove!:  k has no value
      [2] select!:  k has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20491: INTHEORY}
\begin{verbatim}

>compiling INTHEORY.spad to INTHEORY.nrlib
 
   Warnings: 
      [1] fibonacci:  f2 has no value
      [2] jacobi:  j has no value
      [3] eulerPhi: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE bernoulli ((Fraction (Integer)) (Integer))) (SIGNATURE chineseRemainder ((Integer) (Integer) (Integer) (Integer) (Integer))) (SIGNATURE divisors ((List (Integer)) (Integer))) (SIGNATURE euler ((Integer) (Integer))) (SIGNATURE eulerPhi ((Integer) (Integer))) (SIGNATURE fibonacci ((Integer) (Integer))) (SIGNATURE harmonic ((Fraction (Integer)) (Integer))) (SIGNATURE jacobi ((Integer) (Integer) (Integer))) (SIGNATURE legendre ((Integer) (Integer) (Integer))) (SIGNATURE moebiusMu ((Integer) (Integer))) (SIGNATURE numberOfDivisors ((Integer) (Integer))) (SIGNATURE sumOfDivisors ((Integer) (Integer))) (SIGNATURE sumOfKthPowerDivisors ((Integer) (Integer) (NonNegativeInteger))))
      [4] divisors:  i1 has no value
      [5] divisors:  i2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20490: LWORD}
\begin{verbatim}

>compiling LWORD.spad to LWORD.nrlib
 
   Warnings: 
      [1] factor1:  d has no value
      [2] LyndonWordsList1: :(Integer) -- should replace by pretend
      [3] LyndonWordsList1:  lbase1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20489: MATCAT}
\begin{verbatim}

>compiling MATCAT.spad to MATCAT.nrlib
 
   Warnings: 
      [1] matrix:  rows has no value
      [2] -:  r1 has no value
      [3] *:  r1 has no value
      [4] columnSpace:  basis has no value
      [5] PfChar:  g has no value
      [6] /:  r1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20488: PLOT3D}
\begin{verbatim}

>compiling PLOT3D.spad to PLOT3D.nrlib
 
   Warnings: 
      [1] select:  fp has no value
      [2] rangeRefine:  c has no value
      [3] rangeRefine:  q has no value
      [4] rangeRefine:  NUMFUNEVALS has no value
      [5] refine:  curves has no value
      [6] plot:  curves has no value
      [7] plot:  z has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20487: POLYVEC}
\begin{verbatim}

>compiling POLYVEC.spad to POLYVEC.nrlib
 
   Warnings: 
      [1] extendedgcd:  swapped has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20486: PR}
\begin{verbatim}

>compiling PR.spad to PR.nrlib
 
   Warnings: 
      [1] times!:  endcell has no value
      [2] times!:  res has no value
      [3] times:  x1 has no value
      [4] addm!:  newcell has no value
      [5] addm!:  res has no value
      [6] addm!:  endcell has no value
      [7] **: pretend(NonNegativeInteger) -- should replace by @
      [8] ^: pretend(NonNegativeInteger) -- should replace by @
      [9] unitNormal:  lcf has no value
      [10] unitCanonical:  lcf has no value
      [11] fmecg:  rout has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20485: PROJSP}
\begin{verbatim}

>compiling PROJSP.spad to PROJSP.nrlib
 
   Warnings: 
      [1] definingField: pretendRep -- should replace by @
      [2] coerce: pretendRep -- should replace by @
      [3] list: pretendRep -- should replace by @
      [4] pointValue: pretendRep -- should replace by @
      [5] removeConjugate:  conjrem has no value
      [6] lastNonNull: pretendRep -- should replace by @
      [7] lastNonNull: pretend(Integer) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20484: STREAM}
\begin{verbatim}

>compiling STREAM.spad to STREAM.nrlib
 
   Warnings: 
      [1] pretendS -- should replace by @
      [2] showAllElements: not known that (LazyStreamAggregate S) is of mode (CATEGORY domain (SIGNATURE repeating? ((Boolean) (List S) $)))
      [3] remove: signature of lhs not unique: $(Mapping (Boolean) S)$ chosen
      [4] lazyEval: :(Mapping $) -- should replace by pretend
      [5] expand!:  d has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20483: VECTCAT}
\begin{verbatim}

>compiling VECTCAT.spad to VECTCAT.nrlib

   Warnings: 
      [1] -:  x has no value
      [2] *:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20482: XRPOLY}
\begin{verbatim}

>compiling XRPOLY.spad to XRPOLY.nrlib
 
   Warnings: 
      [1] unexpand:  z has no value
      [2] unexpand:  y has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20481: IMATRIX}
\begin{verbatim}

>compiling IMATRIX.spad to IMATRIX.nrlib
 
   Warnings: 
      [1] determinant: not known that (CommutativeRing) is of mode (CATEGORY R (ATTRIBUTE (commutative *)))
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20479: ASSOCEQ}
\begin{verbatim}

>compiling ASSOCEQ.spad to ASSOCEQ.nrlib
 
   Warnings: 
      [1] uncouplingMatrices:  z1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20478: CARTEN}
\begin{verbatim}

>compiling CARTEN.spad to CARTEN.nrlib
 
   Warnings: 
      [1] index2int:  n has no value
      [2] permsign!:  nTrans has no value
      [3] elt:  n has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20477: CLIF}
\begin{verbatim}

>compiling CLIF.spad to CLIF.nrlib
 
   Warnings: 
      [1] addMonomProd:  c has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20476: CLIP}
\begin{verbatim}

>compiling CLIP.spad to CLIP.nrlib
 
   Warnings: 
      [1] iClipParametric:  x has no value
      [2] iClipParametric:  y has no value
      [3] iClipParametric:  z has no value
      [4] discardAndSplit:  ans has no value
      [5] clip:  x has no value
      [6] clip:  y has no value
      [7] clip:  yMax has no value
      [8] clip:  yMin has no value
      [9] clipWithRanges:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20475: COORDSYS}
\begin{verbatim}

>compiling COORDSYS.spad to COORDSYS.nrlib
 
   Warnings: 
      [1] elliptic:  x has no value
      [2] prolateSpheroidal:  x has no value
      [3] oblateSpheroidal:  x has no value
      [4] bipolar:  x has no value
      [5] toroidal:  x has no value
      [6] conical:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20474: DHMATRIX}
\begin{verbatim}

>compiling DHMATRIX.spad to DHMATRIX.nrlib
 
   Warnings: 
      [1] *: signature of lhs not unique: (Point R)$(Point R) chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20473: DIOSP}
\begin{verbatim}

>compiling DIOSP.spad to DIOSP.nrlib
 
   Warnings: 
      [1] dioSolve:  c has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20472: DIRPCAT}
\begin{verbatim}

>compiling DIRPCAT.spad to DIRPCAT.nrlib
 
   Warnings: 
      [1] reducedSystem: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE coerce (S (Integer))) (SIGNATURE coerce ((OutputForm) S)) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE coerce (S R)) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE size ((NonNegativeInteger))) (SIGNATURE / (S S R)) (SIGNATURE dimension ((CardinalNumber))) (SIGNATURE coerce ((Vector R) S)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20471: D02CJFA}
\begin{verbatim}

>compiling D02CJFA.spad to D02CJFA.nrlib
 
   Warnings: 
      [1] ODESolve:  i has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20470: FAXF}
\begin{verbatim}

>compiling FAXF.spad to FAXF.nrlib
 
   Warnings: 
      [1] extensionDegree: signature of lhs not unique: (PositiveInteger) chosen
      [2] minimalPolynomial: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE size ((NonNegativeInteger))) (SIGNATURE charthRoot (S S)) (SIGNATURE linearAssociatedLog ((Union (SparseUnivariatePolynomial F) failed) S S)) (SIGNATURE linearAssociatedLog ((SparseUnivariatePolynomial F) S)) (SIGNATURE linearAssociatedOrder ((SparseUnivariatePolynomial F) S)) (SIGNATURE linearAssociatedExp (S S (SparseUnivariatePolynomial F))) (SIGNATURE normal? ((Boolean) S)) (SIGNATURE createNormalElement (S)) (SIGNATURE trace (S S (PositiveInteger))) (SIGNATURE norm (S S (PositiveInteger))) (SIGNATURE minimalPolynomial ((SparseUnivariatePolynomial S) S (PositiveInteger))) (SIGNATURE trace (F S)) (SIGNATURE norm (F S)) (SIGNATURE degree ((PositiveInteger) S)) (SIGNATURE extensionDegree ((PositiveInteger))) (SIGNATURE minimalPolynomial ((SparseUnivariatePolynomial F) S)) (SIGNATURE represents (S (Vector F))) (SIGNATURE coordinates ((Matrix F) (Vector S))) (SIGNATURE coordinates ((Vector F) S)) (SIGNATURE transcendenceDegree ((NonNegativeInteger))) (SIGNATURE extensionDegree ((OnePointCompletion (PositiveInteger)))) (SIGNATURE degree ((OnePointCompletion (PositiveInteger)) S)) (SIGNATURE transcendent? ((Boolean) S)) (SIGNATURE algebraic? ((Boolean) S)) (SIGNATURE dimension ((CardinalNumber))))
      [3] degree: signature of lhs not unique: (PositiveInteger)S chosen
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20469: FFPOLY2}
\begin{verbatim}

>compiling FFPOLY2.spad to FFPOLY2.nrlib
 
   Warnings: 
      [1] rootOfIrreduciblePoly:  basispointer has no value
      [2] rootOfIrreduciblePoly:  beta has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20468: FNLA}
\begin{verbatim}

>compiling FNLA.spad to FNLA.nrlib
 
   Warnings: 
      [1] have:  hi has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20466: HB}
\begin{verbatim}

>compiling HB.spad to HB.nrlib
 
   Warnings: 
      [1] lfunc:  sum has no value
      [2] generate:  newNumComms has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20464: IRSN}
\begin{verbatim}

>compiling IRSN.spad to IRSN.nrlib
 
   Warnings: 
      [1] aIdInverse: :(NonNegativeInteger) -- should replace by @
      [2] signum:  s has no value
      [3] signum:  z has no value
      [4] testPermutation:  n has no value
      [5] testPermutation:  ok has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20463: LOP}
\begin{verbatim}

>compiling LOP.spad to LOP.nrlib
 
   Warnings: 
      [1] rowEchWoZeroLines: pretend(NonNegativeInteger) -- should replace by @
      [2] rowEchWoZeroLinesWOVectorise: pretend(NonNegativeInteger) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20462: MHROWRED}
\begin{verbatim}

>compiling MHROWRED.spad to MHROWRED.nrlib
 
   Warnings: 
      [1] nonzero?:  s has no value
      [2] non0:  allZero has no value
      [3] non0:  ans has no value
      [4] mkMat:  STEP has no value
      [5] mkMat:  i has no value
      [6] diagSubMatrix:  IN has no value
      [7] diagSubMatrix:  r has no value
      [8] diagSubMatrix:  STEP has no value
      [9] diagSubMatrix:  z has no value
      [10] vconc:  s has no value
      [11] rowEchelonLocal:  pivord has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20461: NUMQUAD}
\begin{verbatim}

>compiling NUMQUAD.spad to NUMQUAD.nrlib
 
   Warnings: 
      [1] romberg:  change has no value
      [2] simpson:  change has no value
      [3] trapezoidal:  change has no value
      [4] rombergo:  change has no value
      [5] simpsono:  change has no value
      [6] trapezoidalo:  change has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20460: ODESYS}
\begin{verbatim}

>compiling ODESYS.spad to ODESYS.nrlib
 
   Warnings: 
      [1] solve:  f1 has no value
      [2] triangulate:  f1 has no value
      [3] backsolve:  part has no value
      [4] solveInField:  l1 has no value
      [5] solveInField:  f2 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20459: ODETOOLS}
\begin{verbatim}

>compiling ODETOOLS.spad to ODETOOLS.nrlib
 
   Warnings: 
      [1] wronskianMatrix:  f1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20458: PERMAN}
\begin{verbatim}

>compiling PERMAN.spad to PERMAN.nrlib
 
   Warnings: 
      [1] permanent3:  a has no value
      [2] permanent: :(Integer) -- should replace by pretend
      [3] permanent: :(PositiveInteger) -- should replace by pretend
      [4] permanent:  a has no value
      [5] permanent2: :(Integer) -- should replace by pretend
      [6] permanent2: :(PositiveInteger) -- should replace by pretend
      [7] permanent2: :(NonNegativeInteger) -- should replace by pretend
      [8] permanent2:  a has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20457: PFECAT}
\begin{verbatim}

>compiling PFECAT.spad to PFECAT.nrlib
 
   Warnings: 
      [1] gcdPolynomial: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))))
      [2] charthRoot: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))))
      [3] solveLinearPolynomialEquation: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20456: PSEUDLIN}
\begin{verbatim}

>compiling PSEUDLIN.spad to PSEUDLIN.nrlib
 
   Warnings: 
      [1] changeBase:  k1 has no value
      [2] normalForm0:  B has no value
      [3] normalForm0:  Binv has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20455: REP2}
\begin{verbatim}

>compiling REP2.spad to REP2.nrlib
 
   Warnings: 
      [1] cyclicSubmodule:  basis has no value
      [2] standardBasisOfCyclicSubmodule:  standardBasis has no value
      [3] splitInternal:  submoduleRepresentation has no value
      [4] splitInternal:  factormoduleRepresentation has no value
      [5] areEquivalent?:  x0 has no value
      [6] areEquivalent?:  x1 has no value
      [7] areEquivalent?:  foundResult has no value
      [8] areEquivalent?:  result has no value
      [9] areEquivalent?:  transitionM has no value
      [10] isAbsolutelyIrreducible?:  result has no value
      [11] meatAxe: :(PositiveInteger) -- should replace by pretend
      [12] meatAxe:  x has no value
      [13] meatAxe:  foundResult has no value
      [14] meatAxe:  result has no value
      [15] meatAxe: signature of lhs not unique: (List (List (Matrix R)))(List (Matrix R))(Boolean) chosen
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20454: SETMN}
\begin{verbatim}

>compiling SETMN.spad to SETMN.nrlib
 
   Warnings: 
      [1] elements:  l has no value
      [2] replaceKthElement:  found has no value
      [3] replaceKthElement:  i has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20453: STRING}
\begin{verbatim}

>compiling STRING.spad to STRING.nrlib
 
   Warnings: 
      [1] OMwrite: pretend(String) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20452: ASP1}
\begin{verbatim}

>compiling ASP1.spad to ASP1.nrlib
 
   Warnings: 
      [1]  X has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20451: ASP10}
\begin{verbatim}

>compiling ASP10.spad to ASP10.nrlib
 
   Warnings: 
      [1]  P has no value
      [2]  Q has no value
      [3]  DQDL has no value
      [4]  X has no value
      [5]  ELAM has no value
      [6]  JINT has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20450: ASP24}
\begin{verbatim}

>compiling ASP24.spad to ASP24.nrlib
 
   Warnings: 
      [1]  N has no value
      [2]  XC has no value
      [3]  FC has no value
      [4] coerce:  FC has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20449: ASP4}
\begin{verbatim}

>compiling ASP4.spad to ASP4.nrlib
 
   Warnings: 
      [1]  NDIM has no value
      [2]  X has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20448: ASP50}
\begin{verbatim}

>compiling ASP50.spad to ASP50.nrlib
 
   Warnings: 
      [1]  M has no value
      [2]  N has no value
      [3]  XC has no value
      [4]  FVECC has no value
      [5]  I has no value
      [6] coerce:  FVECC has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20447: ASP6}
\begin{verbatim}

>compiling ASP6.spad to ASP6.nrlib
 
   Warnings: 
      [1]  N has no value
      [2]  X has no value
      [3]  FVEC has no value
      [4]  IFLAG has no value
      [5] coerce:  FVEC has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20446: ASP73}
\begin{verbatim}

>compiling ASP73.spad to ASP73.nrlib
 
   Warnings: 
      [1]  X has no value
      [2]  Y has no value
      [3]  ALPHA has no value
      [4]  BETA has no value
      [5]  GAMMA has no value
      [6]  DELTA has no value
      [7]  EPSOLN has no value
      [8]  PHI has no value
      [9]  PSI has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20445: AXSERV}
\begin{verbatim}

>compiling AXSERV.spad to AXSERV.nrlib
 
   Warnings: 
      [1] getFile:  contentType has no value
      [2] getContentType:  contentType has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20444: BALFACT}
\begin{verbatim}

>compiling BALFACT.spad to BALFACT.nrlib
 
   Warnings: 
      [1] balancedFactorisation:  z1 has no value
      [2] balancedFactorisation: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE balancedFactorisation ((Factored UP) UP UP)) (SIGNATURE balancedFactorisation ((Factored UP) UP (List UP))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20443: BOUNDZRO}
\begin{verbatim}

>compiling BOUNDZRO.spad to BOUNDZRO.nrlib
 
   Warnings: 
      [1] bringDown: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE integerBound ((Integer) UP)))
      [2] integerBound:  z1 has no value
      [3] qbound:  bound has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20442: CDEN}
\begin{verbatim}

>compiling CDEN.spad to CDEN.nrlib
 
   Warnings: 
      [1] clearDenominator:  x has no value
      [2] splitDenominator:  x has no value
      [3] commonDenominator:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20441: CHVAR}
\begin{verbatim}

>compiling CHVAR.spad to CHVAR.nrlib
 
   Warnings: 
      [1] eval:  s has no value
      [2] eval: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE mkIntegral ((Record (: coef (Fraction UP)) (: poly UPUP)) UPUP)) (SIGNATURE radPoly ((Union (Record (: radicand (Fraction UP)) (: deg (NonNegativeInteger))) failed) UPUP)) (SIGNATURE rootPoly ((Record (: exponent (NonNegativeInteger)) (: coef (Fraction UP)) (: radicand UP)) (Fraction UP) (NonNegativeInteger))) (SIGNATURE goodPoint (F UPUP UPUP)) (SIGNATURE eval (UPUP UPUP (Fraction UP) (Fraction UP))) (SIGNATURE chvar ((Record (: func UPUP) (: poly UPUP) (: c1 (Fraction UP)) (: c2 (Fraction UP)) (: deg (NonNegativeInteger))) UPUP UPUP)))
      [3] chvar:  s has no value
      [4] rootPoly: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE mkIntegral ((Record (: coef (Fraction UP)) (: poly UPUP)) UPUP)) (SIGNATURE radPoly ((Union (Record (: radicand (Fraction UP)) (: deg (NonNegativeInteger))) failed) UPUP)) (SIGNATURE rootPoly ((Record (: exponent (NonNegativeInteger)) (: coef (Fraction UP)) (: radicand UP)) (Fraction UP) (NonNegativeInteger))) (SIGNATURE goodPoint (F UPUP UPUP)) (SIGNATURE eval (UPUP UPUP (Fraction UP) (Fraction UP))) (SIGNATURE chvar ((Record (: func UPUP) (: poly UPUP) (: c1 (Fraction UP)) (: c2 (Fraction UP)) (: deg (NonNegativeInteger))) UPUP UPUP)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20440: CONTFRAC}
\begin{verbatim}

>compiling CONTFRAC.spad to CONTFRAC.nrlib
 
   Warnings: 
      [1] =:  whole has no value
      [2] =:  den has no value
      [3] partialNumerators:  x1 has no value
      [4] partialDenominators:  x1 has no value
      [5] partialQuotients:  whole has no value
      [6] extend:  fract has no value
      [7] complete:  fract has no value
      [8] iGenApproximants:  num has no value
      [9] iGenApproximants:  den has no value
      [10] iGenConvergents:  num has no value
      [11] iGenConvergents:  den has no value
      [12] +:  x has no value
      [13] +:  y has no value
      [14] -:  x has no value
      [15] -:  y has no value
      [16] *:  x has no value
      [17] *:  y has no value
      [18] /:  x has no value
      [19] /:  y has no value
      [20] recip:  x has no value
      [21] coerce:  l has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20439: DDFACT}
\begin{verbatim}

>compiling DDFACT.spad to DDFACT.nrlib
 
   Warnings: 
      [1] notSqFr: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored FP) FP)) (SIGNATURE factorSquareFree ((Factored FP) FP)) (SIGNATURE distdfact ((Record (: cont F) (: factors (List (Record (: irr FP) (: pow (Integer)))))) FP (Boolean))) (SIGNATURE separateDegrees ((List (Record (: deg (NonNegativeInteger)) (: prod FP))) FP)) (SIGNATURE separateFactors ((List FP) (List (Record (: deg (NonNegativeInteger)) (: prod FP))))) (SIGNATURE exptMod (FP FP (NonNegativeInteger) FP)) (SIGNATURE trace2PowMod (FP FP (NonNegativeInteger) FP)) (SIGNATURE tracePowMod (FP FP (NonNegativeInteger) FP)) (SIGNATURE irreducible? ((Boolean) FP)))
      [2] exptMod: :FP -- should replace by pretend
      [3] ddffact1:  ddfact has no value
      [4] separateFactors:  n1 has no value
      [5] separateFactors:  ris has no value
      [6] separateFactors:  newaux has no value
      [7] distdfact:  factlist has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20438: DIRPROD}
\begin{verbatim}

>compiling DIRPROD.spad to DIRPROD.nrlib
 
   Warnings: 
      [1] same?:  x has no value
      [2] Zero: pretend$ -- should replace by @
      [3] One: pretend$ -- should replace by @
      [4] *:  x has no value
      [5] *:  STEP has no value
      [6] *:  i has no value
      [7] *: pretend$ -- should replace by @
      [8] subtractIfCan: pretend$ -- should replace by @
      [9] recip: pretend$ -- should replace by @
      [10] unitVector: pretend$ -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20437: DISPLAY}
\begin{verbatim}

>compiling DISPLAY.spad to DISPLAY.nrlib
 
   Warnings: 
      [1] sayLength:  sum has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20436: DPOLCAT}
\begin{verbatim}

>compiling DPOLCAT.spad to DPOLCAT.nrlib
 
   Warnings: 
      [1] makeVariable:  n has no value
      [2] degree:  d has no value
      [3] weights:  ws has no value
      [4] initial: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE coerce (A A)) (SIGNATURE coerce (A (Fraction (Integer)))) (SIGNATURE eval (A A (List S) (List R))) (SIGNATURE eval (A A S R)) (SIGNATURE eval (A A (List S) (List A))) (SIGNATURE eval (A A S A)) (SIGNATURE makeVariable ((Mapping A (NonNegativeInteger)) A)) (SIGNATURE separant (A A)) (SIGNATURE initial (A A)) (SIGNATURE leader (V A)) (SIGNATURE isobaric? ((Boolean) A)) (SIGNATURE weight ((NonNegativeInteger) A S)) (SIGNATURE weights ((List (NonNegativeInteger)) A S)) (SIGNATURE weight ((NonNegativeInteger) A)) (SIGNATURE weights ((List (NonNegativeInteger)) A)) (SIGNATURE degree ((NonNegativeInteger) A S)) (SIGNATURE order ((NonNegativeInteger) A)) (SIGNATURE order ((NonNegativeInteger) A S)) (SIGNATURE differentialVariables ((List S) A)) (SIGNATURE makeVariable ((Mapping A (NonNegativeInteger)) S)) (SIGNATURE retractIfCan ((Union S failed) A)) (SIGNATURE coerce (A S)) (SIGNATURE differentiate (A A (Mapping R R))) (SIGNATURE differentiate (A A (Mapping R R) (NonNegativeInteger))) (SIGNATURE differentiate (A A (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE differentiate (A A (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (A A (List (Symbol)))) (SIGNATURE differentiate (A A (Symbol))) (SIGNATURE differentiate (A A (NonNegativeInteger))) (SIGNATURE differentiate (A A)) (SIGNATURE degree ((List (NonNegativeInteger)) A (List V))) (SIGNATURE degree ((NonNegativeInteger) A V)) (SIGNATURE retractIfCan ((Union V failed) A)) (SIGNATURE coerce (A V)) (SIGNATURE eval (A A (List V) (List A))) (SIGNATURE eval (A A V A)) (SIGNATURE eval (A A (List V) (List R))) (SIGNATURE eval (A A V R)) (SIGNATURE eval (A A (List A) (List A))) (SIGNATURE eval (A A A A)) (SIGNATURE eval (A A (Equation A))) (SIGNATURE eval (A A (List (Equation A)))) (SIGNATURE degree (E A)) (SIGNATURE retractIfCan ((Union (Integer) failed) A)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) A)) (SIGNATURE coerce (A R)) (SIGNATURE retractIfCan ((Union R failed) A)) (SIGNATURE differentiate (A A (List V) (List (NonNegativeInteger)))) (SIGNATURE differentiate (A A V (NonNegativeInteger))) (SIGNATURE differentiate (A A (List V))) (SIGNATURE differentiate (A A V)) (SIGNATURE coerce (A (Integer))) (SIGNATURE coerce ((OutputForm) A)))
      [5] eval:  IN has no value
      [6] eval:  s has no value
      [7] eval:  e has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20435: DSTREE}
\begin{verbatim}

>compiling DSTREE.spad to DSTREE.nrlib
 
   Warnings: 
      [1] tree: :(Record (: value S) (: args (List $))) -- should replace by @
      [2] tree: :$ -- should replace by pretend
      [3] value: :(Record (: value S) (: args (List $))) -- should replace by pretend
      [4] children: :(Record (: value S) (: args (List $))) -- should replace by pretend
      [5] children: :(List $) -- should replace by @
      [6] setchildren!: :(Record (: value S) (: args (List $))) -- should replace by pretend
      [7] setchildren!: pretend$ -- should replace by @
      [8] setvalue!: :(Record (: value S) (: args (List $))) -- should replace by pretend
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20434: D01AMFA}
\begin{verbatim}

>compiling D01AMFA.spad to D01AMFA.nrlib
 
   Warnings: 
      [1] numericalIntegration:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20433: D01APFA}
\begin{verbatim}

>compiling D01APFA.spad to D01APFA.nrlib
 
   Warnings: 
      [1] numericalIntegration:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20432: D01AQFA}
\begin{verbatim}

>compiling D01AQFA.spad to D01AQFA.nrlib
 
   Warnings: 
      [1] numericalIntegration:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20431: EQ}
\begin{verbatim}

>compiling EQ.spad to EQ.nrlib
 
   Warnings: 
      [1] factorAndSplit: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE factorAndSplit ((List $) $)))
      [2] factorAndSplit: not known that (IntegralDomain) is of mode (CATEGORY S (SIGNATURE factor ((Factored S) S)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20430: MDDFACT}
\begin{verbatim}

>compiling MDDFACT.spad to MDDFACT.nrlib
 
   Semantic Errors: 
      [1] ddfactor:  degree is BOTH a variable and a literal
      [2] ddfact:  degree is BOTH a variable and a literal
      [3] ddFact:  degree is BOTH a variable and a literal
      [4] sepfact:  degree is BOTH a variable and a literal
      [5] separateFactors:  degree is BOTH a variable and a literal
      [6] sepFact1:  degree is BOTH a variable and a literal
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20429: MMAP}
\begin{verbatim}

>compiling MMAP.spad to MMAP.nrlib
 
   Warnings: 
      [1] map:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20428: MODMON}
\begin{verbatim}

>compiling MODMON.spad to MODMON.nrlib

   Warnings: 
      [1] :(NonNegativeInteger) -- should replace by pretend
      [2] lift: pretendRep -- should replace by @
      [3] not known that (SetCategory) is of mode (CATEGORY domain (SIGNATURE frobenius ($ $)))
      [4] not known that (Ring) is of mode (CATEGORY domain (SIGNATURE frobenius ($ $)))
      [5] not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE frobenius ($ $)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20427: MONOTOOL}
\begin{verbatim}

>compiling MONOTOOL.spad to MONOTOOL.nrlib
 
   Warnings: 
      [1] splitSquarefree: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE split ((Record (: normal UP) (: special UP)) UP (Mapping UP UP))) (SIGNATURE splitSquarefree ((Record (: normal (Factored UP)) (: special (Factored UP))) UP (Mapping UP UP))) (SIGNATURE normalDenom (UP (Fraction UP) (Mapping UP UP))) (SIGNATURE decompose ((Record (: poly UP) (: normal (Fraction UP)) (: special (Fraction UP))) (Fraction UP) (Mapping UP UP))))
      [2] splitSquarefree:  s has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20426: MPCPF}
\begin{verbatim}

>compiling MPCPF.spad to MPCPF.nrlib
 
   Warnings: 
      [1] factor: not known that (SIGNATURE variable ((Union $ failed) (Symbol))) is of mode (CATEGORY domain (SIGNATURE new ($)) (SIGNATURE new ($ $)) (SIGNATURE resetNew ((Void))) (SIGNATURE coerce ($ (String))) (SIGNATURE name ($ $)) (SIGNATURE scripted? ((Boolean) $)) (SIGNATURE scripts ((Record (: sub (List (OutputForm))) (: sup (List (OutputForm))) (: presup (List (OutputForm))) (: presub (List (OutputForm))) (: args (List (OutputForm)))) $)) (SIGNATURE script ($ $ (List (List (OutputForm))))) (SIGNATURE script ($ $ (Record (: sub (List (OutputForm))) (: sup (List (OutputForm))) (: presup (List (OutputForm))) (: presub (List (OutputForm))) (: args (List (OutputForm)))))) (SIGNATURE subscript ($ $ (List (OutputForm)))) (SIGNATURE superscript ($ $ (List (OutputForm)))) (SIGNATURE argscript ($ $ (List (OutputForm)))) (SIGNATURE elt ($ $ (List (OutputForm)))) (SIGNATURE string ((String) $)) (SIGNATURE list ((List $) $)) (SIGNATURE sample ($) constant))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20425: MPC2}
\begin{verbatim}

>compiling MPC2.spad to MPC2.nrlib
 
   Warnings: 
      [1] map: not known that (Ring) is of mode (CATEGORY package (SIGNATURE map (PS (Mapping S R) PR)) (SIGNATURE reshape (PS (List S) PR)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20424: MPC3}
\begin{verbatim}

>compiling MPC3.spad to MPC3.nrlib
 
   Warnings: 
      [1] map: not known that (Ring) is of mode (CATEGORY package (SIGNATURE map (PR2 (Mapping Vars2 Vars1) PR1)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20423: MPRFF}
\begin{verbatim}

>compiling MPRFF.spad to MPRFF.nrlib
 
   Warnings: 
      [1] factor: not known that (PolynomialCategory (Fraction (Integer)) (IndexedExponents (Symbol)) (Symbol)) is of mode (CATEGORY domain (IF (has R (Algebra (Fraction (Integer)))) (SIGNATURE integrate ($ $ (Symbol))) noBranch))
      [2] factor: pretend(Factored (Polynomial R)) -- should replace by @
      [3] factor:  flist has no value
      [4] pushdown: not known that (Ring) is of mode (CATEGORY package (SIGNATURE totalfract ((Record (: sup (Polynomial R)) (: inf (Polynomial R))) PRF)) (SIGNATURE pushdown (PRF PRF OV)) (SIGNATURE pushdterm (PRF (SparseUnivariatePolynomial PRF) OV)) (SIGNATURE pushup (PRF PRF OV)) (SIGNATURE pushucoef (PRF (SparseUnivariatePolynomial (Polynomial R)) OV)) (SIGNATURE pushuconst (PRF (Fraction (Polynomial R)) OV)) (SIGNATURE factor ((Factored PRF) PRF)))
      [5] pushup:  y has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20422: MULTSQFR}
\begin{verbatim}

>compiling MULTSQFR.spad to MULTSQFR.nrlib

   Warnings: 
      [1] nsqfree:  lcf has no value
      [2] nsqfree:  z2 has no value
      [3] nsqfree:  z1 has no value
      [4] nsqfree:  leadpol has no value
      [5] nsqfree:  sqlc has no value
      [6] nsqfree: :(NonNegativeInteger) -- should replace by pretend
      [7] nsqfree:  sqlead has no value
      [8] nsqfree:  unitsq has no value
      [9] nsqfree:  sqdec has no value
      [10] squareFree: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE squareFree ((Factored P) P)) (SIGNATURE squareFree ((Factored (SparseUnivariatePolynomial P)) (SparseUnivariatePolynomial P))) (SIGNATURE squareFreePrim ((Factored P) P)) (SIGNATURE compdegd ((Integer) (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer)))))) (SIGNATURE univcase ((Factored P) P OV)) (SIGNATURE consnewpol ((Record (: pol (SparseUnivariatePolynomial P)) (: polval (SparseUnivariatePolynomial R))) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial R) (Integer))) (SIGNATURE nsqfree ((Record (: unitPart P) (: suPart (List (Record (: factor (SparseUnivariatePolynomial P)) (: exponent (Integer)))))) (SparseUnivariatePolynomial P) (List OV) (List (List R)))) (SIGNATURE intChoose ((Record (: upol (SparseUnivariatePolynomial R)) (: Lval (List R)) (: Lfact (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer))))) (: ctpol R)) (SparseUnivariatePolynomial P) (List OV) (List (List R)))) (SIGNATURE coefChoose (P (Integer) (Factored P))) (SIGNATURE check ((Boolean) (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer)))) (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer)))))) (SIGNATURE lift ((Union (List (SparseUnivariatePolynomial P)) failed) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial R) (SparseUnivariatePolynomial R) P (List OV) (List (NonNegativeInteger)) (List R))) (SIGNATURE myDegree ((List (NonNegativeInteger)) (SparseUnivariatePolynomial P) (List OV) (NonNegativeInteger))) (SIGNATURE normDeriv2 ((SparseUnivariatePolynomial R) (SparseUnivariatePolynomial R) (Integer))))
      [11] squareFree:  fctr has no value
      [12] squareFree:  xpnt has no value
      [13] squareFree:  p has no value
      [14] squareFree:  result1 has no value
      [15] squareFree:  lvar has no value
      [16] squareFree: not known that (Ring) is of mode (CATEGORY package (SIGNATURE squareFree ((Factored P) P)) (SIGNATURE squareFree ((Factored (SparseUnivariatePolynomial P)) (SparseUnivariatePolynomial P))) (SIGNATURE squareFreePrim ((Factored P) P)) (SIGNATURE compdegd ((Integer) (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer)))))) (SIGNATURE univcase ((Factored P) P OV)) (SIGNATURE consnewpol ((Record (: pol (SparseUnivariatePolynomial P)) (: polval (SparseUnivariatePolynomial R))) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial R) (Integer))) (SIGNATURE nsqfree ((Record (: unitPart P) (: suPart (List (Record (: factor (SparseUnivariatePolynomial P)) (: exponent (Integer)))))) (SparseUnivariatePolynomial P) (List OV) (List (List R)))) (SIGNATURE intChoose ((Record (: upol (SparseUnivariatePolynomial R)) (: Lval (List R)) (: Lfact (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer))))) (: ctpol R)) (SparseUnivariatePolynomial P) (List OV) (List (List R)))) (SIGNATURE coefChoose (P (Integer) (Factored P))) (SIGNATURE check ((Boolean) (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer)))) (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer)))))) (SIGNATURE lift ((Union (List (SparseUnivariatePolynomial P)) failed) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial R) (SparseUnivariatePolynomial R) P (List OV) (List (NonNegativeInteger)) (List R))) (SIGNATURE myDegree ((List (NonNegativeInteger)) (SparseUnivariatePolynomial P) (List OV) (NonNegativeInteger))) (SIGNATURE normDeriv2 ((SparseUnivariatePolynomial R) (SparseUnivariatePolynomial R) (Integer))))
      [17] intChoose: :R -- should replace by @
      [18] intChoose:  d1 has no value
      [19] coefChoose:  lcoef has no value
      [20] lift:  leadlist has no value
      [21] lift:  p0 has no value
      [22] lift:  p1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20421: NPCOEF}
\begin{verbatim}

>compiling NPCOEF.spad to NPCOEF.nrlib
 
   Warnings: 
      [1] npcoef: :(NonNegativeInteger) -- should replace by pretend
      [2] npcoef:  ndet has no value
      [3] npcoef:  detufact has no value
      [4] npcoef:  n2 has no value
      [5] npcoef:  n1 has no value
      [6] npcoef:  ltodel has no value
      [7] npcoef:  detcoef has no value
      [8] check: :(NonNegativeInteger) -- should replace by pretend
      [9] check:  doit has no value
      [10] check:  cfu has no value
      [11] check:  poselt has no value
      [12] check:  pp has no value
      [13] buildtable:  table has no value
      [14] modify: :(NonNegativeInteger) -- should replace by pretend
      [15] modify:  lterase has no value
      [16] modify:  n2 has no value
      [17] modify:  n1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warning 20420: NSUP}
\begin{verbatim}

>compiling NSUP.spad to NSUP.nrlib
 
   Warnings: 
      [1] subResultantGcd: not known that (UnivariatePolynomialCategory R) is of mode (CATEGORY domain (SIGNATURE halfExtendedResultant2 ((Record (: resultant R) (: coef2 $)) $ $)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20419: ODEPRIM}
\begin{verbatim}

>compiling ODEPRIM.spad to ODEPRIM.nrlib
 
   Warnings: 
      [1] UP2UP2:  f1 has no value
      [2] indicialEquations:  eq has no value
      [3] NPmulambda:  lamb has no value
      [4] NPmulambda:  lf has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20418: ODEPRRIC}
\begin{verbatim}

>compiling ODEPRRIC.spad to ODEPRRIC.nrlib
 
   Warnings: 
      [1] lambda:  z has no value
      [2] infLambda:  z has no value
      [3] infmax:  z has no value
      [4] dmax:  z has no value
      [5] padicsol:  z has no value
      [6] leadingDenomRicDE:  ind has no value
      [7] leadingDenomRicDE:  z2 has no value
      [8] leadingDenomRicDE:  z1 has no value
      [9] constantCoefficientOperator:  ans has no value
      [10] innermax:  ans has no value
      [11] leadingCoefficientRicDE:  ind has no value
      [12] leadingCoefficientRicDE:  z2 has no value
      [13] leadingCoefficientRicDE:  z1 has no value
      [14] innerlb:  lb has no value
      [15] polysol:  z has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20417: OMPKG}
\begin{verbatim}

>compiling OMPKG.spad to OMPKG.nrlib
 
   Warnings: 
      [1] OMreadStr: pretend(String) -- should replace by @
      [2] OMlistCDs: pretend(List (String)) -- should replace by @
      [3] OMlistSymbols: pretend(List (String)) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20416: PADICRC}
\begin{verbatim}

>compiling PADICRC.spad to PADICRC.nrlib
 
   Warnings: 
      [1] coerce:  l has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20415: PFBR}
\begin{verbatim}

>compiling PFBR.spad to PFBR.nrlib

   Warnings: 
      [1] hensel:  z1 has no value
      [2] hensel: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solveLinearPolynomialEquationByRecursion ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreeByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE randomR (R)) (SIGNATURE bivariateSLPEBR ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S) VarSet)) (SIGNATURE factorSFBRlcUnit ((Factored (SparseUnivariatePolynomial S)) (List VarSet) (SparseUnivariatePolynomial S))))
      [3] hensel:  foundFactors has no value
      [4] factorSFBRlcUnitInner:  z1 has no value
      [5] factorSFBRlcUnitInner: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solveLinearPolynomialEquationByRecursion ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreeByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE randomR (R)) (SIGNATURE bivariateSLPEBR ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S) VarSet)) (SIGNATURE factorSFBRlcUnit ((Factored (SparseUnivariatePolynomial S)) (List VarSet) (SparseUnivariatePolynomial S))))
      [6] factorSFBRlcUnitInner:  fctr has no value
      [7] bivariateSLPEBR:  z1 has no value
      [8] chooseFSQViableSubstitutions:  z1 has no value
      [9] chooseFSQViableSubstitutions:  ppR has no value
      [10] chooseSLPEViableSubstitutions:  z1 has no value
      [11] chooseSLPEViableSubstitutions:  lpolysR has no value
      [12] raise:  z1 has no value
      [13] raise: :R -- should replace by pretend
      [14] raise: :R -- should replace by @
      [15] lower:  z1 has no value
      [16] SLPEBR:  z1 has no value
      [17] factorByRecursion: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE solveLinearPolynomialEquationByRecursion ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreeByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE randomR (R)) (SIGNATURE bivariateSLPEBR ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S) VarSet)) (SIGNATURE factorSFBRlcUnit ((Factored (SparseUnivariatePolynomial S)) (List VarSet) (SparseUnivariatePolynomial S))))
      [18] factorByRecursion:  z1 has no value
      [19] factorByRecursion: :S -- should replace by @
      [20] factorSquareFreeByRecursion:  lcppPow has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20414: PFBRU}
\begin{verbatim}

>compiling PFBRU.spad to PFBRU.nrlib
 
   Warnings: 
      [1] solveLinearPolynomialEquationByRecursion:  z1 has no value
      [2] solveLinearPolynomialEquationByRecursion: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solveLinearPolynomialEquationByRecursion ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreeByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE randomR (R)) (SIGNATURE factorSFBRlcUnit ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))))
      [3] solveLinearPolynomialEquationByRecursion:  answer has no value
      [4] hensel:  z1 has no value
      [5] hensel:  foundFactors has no value
      [6] chooseFSQViableSubstitutions:  z1 has no value
      [7] chooseFSQViableSubstitutions:  ppR has no value
      [8] raise:  z1 has no value
      [9] raise: :R -- should replace by pretend
      [10] raise: :R -- should replace by @
      [11] lower:  z1 has no value
      [12] factorSFBRlcUnitInner:  z1 has no value
      [13] factorSFBRlcUnitInner: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solveLinearPolynomialEquationByRecursion ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreeByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE randomR (R)) (SIGNATURE factorSFBRlcUnit ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))))
      [14] factorSFBRlcUnitInner:  fctr has no value
      [15] factorByRecursion: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE solveLinearPolynomialEquationByRecursion ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreeByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE randomR (R)) (SIGNATURE factorSFBRlcUnit ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))))
      [16] factorByRecursion:  z1 has no value
      [17] factorByRecursion: :S -- should replace by pretend
      [18] factorByRecursion: :S -- should replace by @
      [19] factorSquareFreeByRecursion:  lcppPow has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20413: PFORP}
\begin{verbatim}

>compiling PFORP.spad to PFORP.nrlib
 
   Warnings: 
      [1] translateLocal: The conditional modes (List R) and (Mapping E (Integer)) conflict
      [2] minimalForm:  lminForm has no value
      [3] listAllMonoExp: pretend(Integer) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20412: PFRPAC}
\begin{verbatim}

>compiling PFRPAC.spad to PFRPAC.nrlib
 
   Warnings: 
      [1] makeSup: not known that (Ring) is of mode (CATEGORY package (SIGNATURE partialFraction ((Any) (Fraction (Polynomial R)) (Symbol))) (SIGNATURE partialFraction ((Any) (Polynomial R) (Factored (Polynomial R)) (Symbol))))
      [2] makeSup:  z1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20411: PGCD}
\begin{verbatim}

>compiling PGCD.spad to PGCD.nrlib
 
   Warnings: 
      [1] gcdPrimitive:  b has no value
      [2] gcdPrimitive:  a has no value
      [3] localgcd:  s has no value
      [4] gcdTermList: not known that (Ring) is of mode (CATEGORY package (SIGNATURE gcd (P P P)) (SIGNATURE gcd (P (List P))) (SIGNATURE gcd ((SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P))) (SIGNATURE gcd ((SparseUnivariatePolynomial P) (List (SparseUnivariatePolynomial P)))) (SIGNATURE gcdPrimitive (P P P)) (SIGNATURE gcdPrimitive ((SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P))) (SIGNATURE gcdPrimitive (P (List P))))
      [5] lift:  p0 has no value
      [6] gcd:  z1 has no value
      [7] gcd:  z2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20410: PLEQN}
\begin{verbatim}

>compiling PLEQN.spad to PLEQN.nrlib
 
   Warnings: 
      [1] regime:  wcd has no value
      [2] regime:  yzero has no value
      [3] bsolve:  rksoln has no value
      [4] bsolve:  lrec3 has no value
      [5] ParCondList:  covered has no value
      [6] ParCondList:  zro has no value
      [7] ParCondList:  npc has no value
      [8] ParCondList:  done has no value
      [9] ParCondList:  rcl has no value
      [10] pr2dmp: pretendGR -- should replace by @
      [11] dmp2rfi:  v1 has no value
      [12] dmp2rfi:  r1 has no value
      [13] sqfree: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE psolve ((List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (Matrix GR) (List GR))) (SIGNATURE psolve ((List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (Matrix GR) (List (Symbol)))) (SIGNATURE psolve ((List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (Matrix GR))) (SIGNATURE psolve ((List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (Matrix GR) (List GR) (PositiveInteger))) (SIGNATURE psolve ((List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (Matrix GR) (List (Symbol)) (PositiveInteger))) (SIGNATURE psolve ((List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (Matrix GR) (PositiveInteger))) (SIGNATURE psolve ((Integer) (Matrix GR) (List GR) (String))) (SIGNATURE psolve ((Integer) (Matrix GR) (List (Symbol)) (String))) (SIGNATURE psolve ((Integer) (Matrix GR) (String))) (SIGNATURE psolve ((Integer) (Matrix GR) (List GR) (PositiveInteger) (String))) (SIGNATURE psolve ((Integer) (Matrix GR) (List (Symbol)) (PositiveInteger) (String))) (SIGNATURE psolve ((Integer) (Matrix GR) (PositiveInteger) (String))) (SIGNATURE wrregime ((Integer) (List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (String))) (SIGNATURE rdregime ((List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (String))) (SIGNATURE bsolve ((Record (: rgl (List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R)))))))))) (: rgsz (Integer))) (Matrix GR) (List (Fraction (Polynomial R))) (NonNegativeInteger) (String) (Integer))) (SIGNATURE dmp2rfi ((Fraction (Polynomial R)) GR)) (SIGNATURE dmp2rfi ((Matrix (Fraction (Polynomial R))) (Matrix GR))) (SIGNATURE dmp2rfi ((List (Fraction (Polynomial R))) (List GR))) (SIGNATURE se2rfi ((List (Fraction (Polynomial R))) (List (Symbol)))) (SIGNATURE pr2dmp (GR (Polynomial R))) (SIGNATURE hasoln ((Record (: sysok (Boolean)) (: z0 (List GR)) (: n0 (List GR))) (List GR) (List GR))) (SIGNATURE ParCondList ((List (Record (: rank (NonNegativeInteger)) (: eqns (List (Record (: det GR) (: rows (List (Integer))) (: cols (List (Integer)))))) (: fgb (List GR)))) (Matrix GR) (NonNegativeInteger))) (SIGNATURE redpps ((Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R)))))) (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R)))))) (List GR))) (SIGNATURE B1solve ((Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R)))))) (Record (: mat (Matrix (Fraction (Polynomial R)))) (: vec (List (Fraction (Polynomial R)))) (: rank (NonNegativeInteger)) (: rows (List (Integer))) (: cols (List (Integer)))))) (SIGNATURE factorset ((List GR) GR)) (SIGNATURE maxrank ((NonNegativeInteger) (List (Record (: rank (NonNegativeInteger)) (: eqns (List (Record (: det GR) (: rows (List (Integer))) (: cols (List (Integer)))))) (: fgb (List GR)))))) (SIGNATURE minrank ((NonNegativeInteger) (List (Record (: rank (NonNegativeInteger)) (: eqns (List (Record (: det GR) (: rows (List (Integer))) (: cols (List (Integer)))))) (: fgb (List GR)))))) (SIGNATURE minset ((List (List GR)) (List (List GR)))) (SIGNATURE nextSublist ((List (List (Integer))) (Integer) (Integer))) (SIGNATURE overset? ((Boolean) (List GR) (List (List GR)))) (SIGNATURE ParCond ((List (Record (: det GR) (: rows (List (Integer))) (: cols (List (Integer))))) (Matrix GR) (NonNegativeInteger))) (SIGNATURE redmat ((Matrix GR) (Matrix GR) (List GR))) (SIGNATURE regime ((Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R)))))))) (Record (: det GR) (: rows (List (Integer))) (: cols (List (Integer)))) (Matrix GR) (List (Fraction (Polynomial R))) (List (List GR)) (NonNegativeInteger) (NonNegativeInteger) (Integer))) (SIGNATURE sqfree (GR GR)) (SIGNATURE inconsistent? ((Boolean) (List GR))) (SIGNATURE inconsistent? ((Boolean) (List (Polynomial R)))))
      [14] ParCond:  found has no value
      [15] ParCond:  DetEqn has no value
      [16] ParCond:  z1 has no value
      [17] ParCond:  z2 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20409: PMPLCAT}
\begin{verbatim}

>compiling PMPLCAT.spad to PMPLCAT.nrlib
 
   Warnings: 
      [1] patternMatch:  l1 has no value
      [2] patternMatch:  p1 has no value
      [3] patternMatch:  p2 has no value
      [4] patternMatch:  p3 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20408: PNTHEORY}
\begin{verbatim}

>compiling PNTHEORY.spad to PNTHEORY.nrlib

   Warnings: 
      [1] cyclotomic:  s has no value
      [2] cyclotomic:  c has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20407: POLUTIL}
\begin{verbatim}

>compiling POLUTIL.spad to POLUTIL.nrlib
 
   Warnings: 
      [1] sylvesterSequence:  res has no value
      [2] sturmVariationsOf:  ll has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20406: POLYCATQ}
\begin{verbatim}

>compiling POLYCATQ.spad to POLYCATQ.nrlib
 
   Warnings: 
      [1] isPower:  var has no value
      [2] P2UP:  z has no value
      [3] P2UP: not known that (Ring) is of mode (CATEGORY package (SIGNATURE variables ((List V) F)) (SIGNATURE mainVariable ((Union V failed) F)) (SIGNATURE univariate ((Fraction (SparseUnivariatePolynomial F)) F V)) (SIGNATURE multivariate (F (Fraction (SparseUnivariatePolynomial F)) V)) (SIGNATURE univariate ((SparseUnivariatePolynomial F) F V (SparseUnivariatePolynomial F))) (SIGNATURE isPlus ((Union (List F) failed) F)) (SIGNATURE isTimes ((Union (List F) failed) F)) (SIGNATURE isExpt ((Union (Record (: var V) (: exponent (Integer))) failed) F)) (SIGNATURE isPower ((Union (Record (: val F) (: exponent (Integer))) failed) F)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20405: POLYLIFT}
\begin{verbatim}

>compiling POLYLIFT.spad to POLYLIFT.nrlib
 
   Warnings: 
      [1] map: not known that (Ring) is of mode (CATEGORY package (SIGNATURE map (S (Mapping S Vars) (Mapping S R) P)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20404: POLYROOT}
\begin{verbatim}

>compiling POLYROOT.spad to POLYROOT.nrlib
 
   Warnings: 
      [1] zroot: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE rroot ((Record (: exponent (NonNegativeInteger)) (: coef F) (: radicand F)) R (NonNegativeInteger))) (SIGNATURE qroot ((Record (: exponent (NonNegativeInteger)) (: coef F) (: radicand F)) (Fraction (Integer)) (NonNegativeInteger))) (IF (has R (GcdDomain)) (SIGNATURE froot ((Record (: exponent (NonNegativeInteger)) (: coef F) (: radicand F)) F (NonNegativeInteger))) noBranch) (SIGNATURE nthr ((Record (: exponent (NonNegativeInteger)) (: coef P) (: radicand (List P))) P (NonNegativeInteger))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20403: POLY2}
\begin{verbatim}

>compiling POLY2.spad to POLY2.nrlib
 
   Warnings: 
      [1] map:  x1 has no value
      [2] map:  x2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20402: POLY2UP}
\begin{verbatim}

>compiling POLY2UP.spad to POLY2UP.nrlib
 
   Warnings: 
      [1] univariate: not known that (Ring) is of mode (CATEGORY package (SIGNATURE univariate ((UnivariatePolynomial x (Polynomial R)) (Polynomial R) (Variable x))))
      [2] univariate:  x1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20401: PRS}
\begin{verbatim}

>compiling PRS.spad to PRS.nrlib
 
   Warnings: 
      [1] exquo:  p1 has no value
      [2] resultantnaif:  a has no value
      [3] resultantEuclideannaif:  a has no value
      [4] semiResultantEuclideannaif:  a has no value
      [5] chainSubResultants:  L has no value
      [6] schema:  L has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20400: PSQFR}
\begin{verbatim}

>compiling PSQFR.spad to PSQFR.nrlib
 
   Warnings: 
      [1] pPolRoot: not known that (Ring) is of mode (CATEGORY package (SIGNATURE squareFree ((Factored P) P)))
      [2] pthPower:  isSq has no value
      [3] pthPower:  fctr has no value
      [4] pthPower:  xpnt has no value
      [5] finSqFr: :(NonNegativeInteger) -- should replace by pretend
      [6] finSqFr:  cont1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20399: PUSHVAR}
\begin{verbatim}

>compiling PUSHVAR.spad to PUSHVAR.nrlib
 
   Warnings: 
      [1] map:  x has no value
      [2] map: not known that (Ring) is of mode (CATEGORY package (SIGNATURE pushdown (PPR PPR OV)) (SIGNATURE pushdown (PPR PPR (List OV))) (SIGNATURE pushup (PPR PPR OV)) (SIGNATURE pushup (PPR PPR (List OV))) (SIGNATURE map (PPR (Mapping PPR (Polynomial R)) PPR)))
      [3] pushup:  y has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20398: QALGSET}
\begin{verbatim}

>compiling QALGSET.spad to QALGSET.nrlib
 
   Warnings: 
      [1] npoly: not known that (OrderedAbelianMonoid) is of mode (CATEGORY domain (IF (has (NonNegativeInteger) (Finite)) (IF (has Expon (Finite)) (ATTRIBUTE (Finite)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Monoid)) (IF (has Expon (Monoid)) (ATTRIBUTE (Monoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianMonoid)) (IF (has Expon (AbelianMonoid)) (ATTRIBUTE (AbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (CancellationAbelianMonoid)) (IF (has Expon (CancellationAbelianMonoid)) (ATTRIBUTE (CancellationAbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Group)) (IF (has Expon (Group)) (ATTRIBUTE (Group)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianGroup)) (IF (has Expon (AbelianGroup)) (ATTRIBUTE (AbelianGroup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedAbelianMonoidSup)) (IF (has Expon (OrderedAbelianMonoidSup)) (ATTRIBUTE (OrderedAbelianMonoidSup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedSet)) (IF (has Expon (OrderedSet)) (ATTRIBUTE (OrderedSet)) noBranch) noBranch) (SIGNATURE makeprod ($ (NonNegativeInteger) Expon)) (SIGNATURE selectfirst ((NonNegativeInteger) $)) (SIGNATURE selectsecond (Expon $)))
      [2] idealSimplify: not known that (OrderedAbelianMonoid) is of mode (CATEGORY domain (IF (has (NonNegativeInteger) (Finite)) (IF (has Expon (Finite)) (ATTRIBUTE (Finite)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Monoid)) (IF (has Expon (Monoid)) (ATTRIBUTE (Monoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianMonoid)) (IF (has Expon (AbelianMonoid)) (ATTRIBUTE (AbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (CancellationAbelianMonoid)) (IF (has Expon (CancellationAbelianMonoid)) (ATTRIBUTE (CancellationAbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Group)) (IF (has Expon (Group)) (ATTRIBUTE (Group)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianGroup)) (IF (has Expon (AbelianGroup)) (ATTRIBUTE (AbelianGroup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedAbelianMonoidSup)) (IF (has Expon (OrderedAbelianMonoidSup)) (ATTRIBUTE (OrderedAbelianMonoidSup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedSet)) (IF (has Expon (OrderedSet)) (ATTRIBUTE (OrderedSet)) noBranch) noBranch) (SIGNATURE makeprod ($ (NonNegativeInteger) Expon)) (SIGNATURE selectfirst ((NonNegativeInteger) $)) (SIGNATURE selectsecond (Expon $)))
      [3] idealSimplify: not known that (OrderedAbelianMonoidSup) is of mode (CATEGORY domain (IF (has (NonNegativeInteger) (Finite)) (IF (has Expon (Finite)) (ATTRIBUTE (Finite)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Monoid)) (IF (has Expon (Monoid)) (ATTRIBUTE (Monoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianMonoid)) (IF (has Expon (AbelianMonoid)) (ATTRIBUTE (AbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (CancellationAbelianMonoid)) (IF (has Expon (CancellationAbelianMonoid)) (ATTRIBUTE (CancellationAbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Group)) (IF (has Expon (Group)) (ATTRIBUTE (Group)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianGroup)) (IF (has Expon (AbelianGroup)) (ATTRIBUTE (AbelianGroup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedAbelianMonoidSup)) (IF (has Expon (OrderedAbelianMonoidSup)) (ATTRIBUTE (OrderedAbelianMonoidSup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedSet)) (IF (has Expon (OrderedSet)) (ATTRIBUTE (OrderedSet)) noBranch) noBranch) (SIGNATURE makeprod ($ (NonNegativeInteger) Expon)) (SIGNATURE selectfirst ((NonNegativeInteger) $)) (SIGNATURE selectsecond (Expon $)))
      [4] idealSimplify: not known that (PolynomialCategory R (Product (NonNegativeInteger) Expon) Var) is of mode (CATEGORY domain (IF (has R (IntegralDomain)) (IF (has (Product (NonNegativeInteger) Expon) (CancellationAbelianMonoid)) (SIGNATURE fmecg ($ $ (Product (NonNegativeInteger) Expon) R $)) noBranch) noBranch) (IF (has R (ATTRIBUTE canonicalUnitNormal)) (ATTRIBUTE canonicalUnitNormal) noBranch))
      [5] idealSimplify:  gb has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20397: RADIX}
\begin{verbatim}

>compiling RADIX.spad to RADIX.nrlib
 
   Warnings: 
      [1] fractionPart: signature of lhs not unique: (Fraction (Integer))$ chosen
      [2] coerce:  le has no value
      [3] radixFrac:  c has no value
      [4] unknown Functor code (error Radix base must be at least 2)
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20396: RCFIELD}
\begin{verbatim}

>compiling RCFIELD.spad to RCFIELD.nrlib
 
   Warnings: 
      [1] rootOf: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE sqrt (S (Integer))) (SIGNATURE sqrt (S (Fraction (Integer)))) (SIGNATURE sqrt (S S (NonNegativeInteger))) (SIGNATURE allRootsOf ((List S) (Polynomial (Integer)))) (SIGNATURE allRootsOf ((List S) (Polynomial (Fraction (Integer))))) (SIGNATURE allRootsOf ((List S) (Polynomial S))) (SIGNATURE allRootsOf ((List S) (SparseUnivariatePolynomial (Integer)))) (SIGNATURE allRootsOf ((List S) (SparseUnivariatePolynomial (Fraction (Integer))))) (SIGNATURE allRootsOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE rootOf ((Union S failed) (SparseUnivariatePolynomial S) (PositiveInteger))) (SIGNATURE rootOf ((Union S failed) (SparseUnivariatePolynomial S) (PositiveInteger) (OutputForm))) (SIGNATURE ** (S S (Fraction (Integer)))) (SIGNATURE nthRoot (S S (Integer))) (SIGNATURE sqrt (S S)) (SIGNATURE ** (S S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE ** (S S (PositiveInteger))))
      [2] allRootsOf:  z has no value
      [3] allRootsOf: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE sqrt (S (Integer))) (SIGNATURE sqrt (S (Fraction (Integer)))) (SIGNATURE sqrt (S S (NonNegativeInteger))) (SIGNATURE allRootsOf ((List S) (Polynomial (Integer)))) (SIGNATURE allRootsOf ((List S) (Polynomial (Fraction (Integer))))) (SIGNATURE allRootsOf ((List S) (Polynomial S))) (SIGNATURE allRootsOf ((List S) (SparseUnivariatePolynomial (Integer)))) (SIGNATURE allRootsOf ((List S) (SparseUnivariatePolynomial (Fraction (Integer))))) (SIGNATURE allRootsOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE rootOf ((Union S failed) (SparseUnivariatePolynomial S) (PositiveInteger))) (SIGNATURE rootOf ((Union S failed) (SparseUnivariatePolynomial S) (PositiveInteger) (OutputForm))) (SIGNATURE ** (S S (Fraction (Integer)))) (SIGNATURE nthRoot (S S (Integer))) (SIGNATURE sqrt (S S)) (SIGNATURE ** (S S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE ** (S S (PositiveInteger))))
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20395: RDETR}
\begin{verbatim}

>compiling RDETR.spad to RDETR.nrlib
 
   Warnings: 
      [1] polyRDE:  eq has no value
      [2] SPDEnocancel1:  q has no value
      [3] SPDEnocancel2:  q has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20394: RDETRS}
\begin{verbatim}

>compiling RDETRS.spad to RDETRS.nrlib
 
   Warnings: 
      [1] baseRDEsys:  z1 has no value
      [2] baseRDEsys:  z2 has no value
      [3] baseRDEsys:  z3 has no value
      [4] baseRDEsys:  z4 has no value
      [5] baseRDEsys:  z5 has no value
      [6] baseRDEsys:  z6 has no value
      [7] DSPDEsys:  z1 has no value
      [8] DSPDEsys:  z2 has no value
      [9] DSPDEsys:  z3 has no value
      [10] DSPDEsys:  z4 has no value
      [11] DSPDEsys:  z5 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20393: REAL0}
\begin{verbatim}

>compiling REAL0.spad to REAL0.nrlib
 
   Warnings: 
      [1] makeSqfr: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE realZeros ((List (Record (: left (Fraction (Integer))) (: right (Fraction (Integer))))) Pol)) (SIGNATURE realZeros ((List (Record (: left (Fraction (Integer))) (: right (Fraction (Integer))))) Pol (Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))))) (SIGNATURE realZeros ((List (Record (: left (Fraction (Integer))) (: right (Fraction (Integer))))) Pol (Fraction (Integer)))) (SIGNATURE realZeros ((List (Record (: left (Fraction (Integer))) (: right (Fraction (Integer))))) Pol (Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))) (Fraction (Integer)))) (SIGNATURE refine ((Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))) Pol (Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))) (Fraction (Integer)))) (SIGNATURE refine ((Union (Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))) failed) Pol (Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))) (Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))))) (SIGNATURE midpoint ((Fraction (Integer)) (Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))))) (SIGNATURE midpoints ((List (Fraction (Integer))) (List (Record (: left (Fraction (Integer))) (: right (Fraction (Integer))))))))
      [2] Zero1:  G has no value
      [3] rootBound:  i has no value
      [4] transMultInv: :(NonNegativeInteger) -- should replace by pretend
      [5] var:  i has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20392: REALSOLV}
\begin{verbatim}

>compiling REALSOLV.spad to REALSOLV.nrlib
 
   Warnings: 
      [1] prn2rfi:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20391: RESRING}
\begin{verbatim}

>compiling RESRING.spad to RESRING.nrlib
 
   Warnings: 
      [1] unknown Functor code (error the residue ring is the zero ring)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20390: RETSOL}
\begin{verbatim}

>compiling RETSOL.spad to RETSOL.nrlib
 
   Warnings: 
      [1] PQ2P:  q1 has no value
      [2] PQIfCan: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solveRetract ((List (List (Equation (Fraction (Polynomial R))))) (List (Polynomial R)) (List (Symbol)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20389: RF}
\begin{verbatim}

>compiling RF.spad to RF.nrlib
 
   Warnings: 
      [1] peval:  z1 has no value
      [2] peval:  z2 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20388: RFFACTOR}
\begin{verbatim}

>compiling RFFACTOR.spad to RFFACTOR.nrlib
 
   Warnings: 
      [1] factorFraction: not known that (PolynomialCategory (Fraction (Integer)) (IndexedExponents (Symbol)) (Symbol)) is of mode (CATEGORY domain (IF (has R (Algebra (Fraction (Integer)))) (SIGNATURE integrate ($ $ (Symbol))) noBranch))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20387: SHP}
\begin{verbatim}

>compiling SHP.spad to SHP.nrlib
 
   Warnings: 
      [1] subresultantSequenceNext: :(List (UnivariatePolynomial x R)) -- should replace by @
      [2] subresultantSequenceInner: :(UnivariatePolynomial x R) -- should replace by @
      [3] subresultantSequenceInner: :(List (UnivariatePolynomial x R)) -- should replace by @
      [4] subresultantSequence: :(List (UnivariatePolynomial x R)) -- should replace by @
      [5] polsth1: :(List (UnivariatePolynomial x R)) -- should replace by @
      [6] polsth1:  Listf has no value
      [7] polsth2: :(List (UnivariatePolynomial x R)) -- should replace by @
      [8] polsth3: :(List (UnivariatePolynomial x R)) -- should replace by @
      [9] wfunctaux: :(List R) -- should replace by @
      [10] wfunctaux: :(NonNegativeInteger) -- should replace by @
      [11] wfunct: :(List R) -- should replace by @
      [12] SturmHabicht: :(UnivariatePolynomial x R) -- should replace by @
      [13] SturmHabichtMultiple: :(UnivariatePolynomial x R) -- should replace by @
      [14] SturmHabichtMultiple: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE countRealRootsMultiple ((Integer) (UnivariatePolynomial x R))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20386: SIGNRF}
\begin{verbatim}

>compiling SIGNRF.spad to SIGNRF.nrlib
 
   Warnings: 
      [1] psign: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE sign ((Union (Integer) failed) (Fraction (Polynomial R)))) (SIGNATURE sign ((Union (Integer) failed) (Fraction (Polynomial R)) (Symbol) (OrderedCompletion (Fraction (Polynomial R))))) (SIGNATURE sign ((Union (Integer) failed) (Fraction (Polynomial R)) (Symbol) (Fraction (Polynomial R)) (String))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20385: SMITH}
\begin{verbatim}

>compiling SMITH.spad to SMITH.nrlib
 
   Warnings: 
      [1] elRow2:  x has no value
      [2] elColumn2:  x has no value
      [3] ijDivide:  x has no value
      [4] findEqMat:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20384: SMP}
\begin{verbatim}

>compiling SMP.spad to SMP.nrlib
 
   Warnings: 
      [1] moreThanOneVariable?:  x1 has no value
      [2] ^: pretend(NonNegativeInteger) -- should replace by @
      [3] **: pretend(NonNegativeInteger) -- should replace by @
      [4] exquo: The conditional modes (SparseUnivariatePolynomial $) and D conflict
      [5] map:  x1 has no value
      [6] evalSortedVarlist:  x1 has no value
      [7] eval:  x2 has no value
      [8] eval:  x1 has no value
      [9] eval:  IN has no value
      [10] eval:  val has no value
      [11] differentiate:  x1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20382: SOLVEFOR}
\begin{verbatim}

>compiling SOLVEFOR.spad to SOLVEFOR.nrlib
 
   Warnings: 
      [1] mapSolve:  x has no value
      [2] intsolve: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE solve ((List F) UP)) (SIGNATURE particularSolution (F UP)) (SIGNATURE mapSolve ((Record (: solns (List F)) (: maps (List (Record (: arg F) (: res F))))) UP (Mapping F F))) (SIGNATURE linear ((List F) UP)) (SIGNATURE quadratic ((List F) UP)) (SIGNATURE cubic ((List F) UP)) (SIGNATURE quartic ((List F) UP)) (SIGNATURE linear ((List F) F F)) (SIGNATURE quadratic ((List F) F F F)) (SIGNATURE cubic ((List F) F F F F)) (SIGNATURE quartic ((List F) F F F F F)) (SIGNATURE aLinear (F F F)) (SIGNATURE aQuadratic (F F F F)) (SIGNATURE aCubic (F F F F F)) (SIGNATURE aQuartic (F F F F F F)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20381: SPLTREE}
\begin{verbatim}

>compiling SPLTREE.spad to SPLTREE.nrlib
 
   Warnings: 
      [1] splitNodeOf!:  la has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20380: STINPROD}
\begin{verbatim}

>compiling STINPROD.spad to STINPROD.nrlib
 
   Warnings: 
      [1] applyOverQF:  z1 has no value
      [2] infiniteProduct:  z1 has no value
      [3] evenInfiniteProduct:  z1 has no value
      [4] oddInfiniteProduct:  z1 has no value
      [5] generalInfiniteProduct:  z1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20379: STTF}
\begin{verbatim}

>compiling STTF.spad to STTF.nrlib
 
   Warnings: 
      [1] exp:  y has no value
      [2] sincos:  y has no value
      [3] tan:  y has no value
      [4] cot:  y has no value
      [5] sinhcosh:  y has no value
      [6] tanh:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20378: SUBRESP}
\begin{verbatim}

>compiling SUBRESP.spad to SUBRESP.nrlib
 
   Warnings: 
      [1] primitivePart:  x1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20377: SUMRF}
\begin{verbatim}

>compiling SUMRF.spad to SUMRF.nrlib
 
   Warnings: 
      [1] sum:  z has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20376: SUP}
\begin{verbatim}

>compiling SUP.spad to SUP.nrlib

   Warnings: 
      [1] **: pretend(NonNegativeInteger) -- should replace by @
      [2] ^: pretend(NonNegativeInteger) -- should replace by @
      [3] **:  y has no value
      [4] pomopo!:  rout has no value
      [5] exquo: signature of lhs not unique: (Union $ failed)$$ chosen
      [6] fmecg:  rout has no value
      [7] pseudoRemainder: :(Integer) -- should replace by pretend
      [8] pseudoRemainder: :(NonNegativeInteger) -- should replace by pretend
      [9] elt: :(NonNegativeInteger) -- should replace by pretend
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20375: SUPFRACF}
\begin{verbatim}

>compiling SUPFRACF.spad to SUPFRACF.nrlib

   Warnings: 
      [1] squareFree: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored (SparseUnivariatePolynomial (Fraction P))) (SparseUnivariatePolynomial (Fraction P)))) (SIGNATURE squareFree ((Factored (SparseUnivariatePolynomial (Fraction P))) (SparseUnivariatePolynomial (Fraction P)))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20374: TEX}
\begin{verbatim}

>compiling TEX.spad to TEX.nrlib
 
   Warnings: 
      [1] display: pretend(Integer) -- should replace by @
      [2] coerce: pretend(Integer) -- should replace by @
      [3] stringify: pretend(String) -- should replace by @
      [4] splitLong1:  l has no value
      [5] splitLong1:  ls has no value
      [6] splitLong1:  s has no value
      [7] formatSpecial:  form has no value
      [8] formatSpecial:  prescript has no value
      [9] formatPlex:  s has no value
      [10] formatTex: pretend(Boolean) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20373: TEXTFILE}
\begin{verbatim}

>compiling TEXTFILE.spad to TEXTFILE.nrlib
 
   Warnings: 
      [1] endOfFile?: pretend(Boolean) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20372: TREE}
\begin{verbatim}

>compiling TREE.spad to TREE.nrlib
 
   Warnings: 
      [1] children:  node has no value
      [2] setchildren!:  node has no value
      [3] setchildren!: pretend$ -- should replace by @
      [4] setvalue!:  node has no value
      [5] count: signature of lhs not unique: (NonNegativeInteger)S$ chosen
      [6] value:  node has no value
      [7] node?:  t has no value
      [8] multipleOverbar: The conditional modes (String) and S conflict

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20371: TWOFACT}
\begin{verbatim}

>compiling TWOFACT.spad to TWOFACT.nrlib
 
   Warnings: 
      [1] pthRoot:  x has no value
      [2] generalSqFr: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE generalTwoFactor ((Factored (SparseUnivariatePolynomial (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial (SparseUnivariatePolynomial F)))) (SIGNATURE generalSqFr ((Factored (SparseUnivariatePolynomial (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial (SparseUnivariatePolynomial F)))) (SIGNATURE twoFactor ((Factored (SparseUnivariatePolynomial (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial (SparseUnivariatePolynomial F)) (Integer))))
      [3] generalSqFr:  flg has no value
      [4] generalSqFr:  xpnt has no value
      [5] generalSqFr: :(NonNegativeInteger) -- should replace by pretend
      [6] generalSqFr:  fctr has no value
      [7] generalTwoFactor:  flg has no value
      [8] generalTwoFactor:  fctr has no value
      [9] generalTwoFactor:  xpnt has no value
      [10] generalTwoFactor:  ll has no value
      [11] generalTwoFactor:  x has no value
      [12] generalTwoFactor:  unitPart has no value
      [13] twoFactor:  x has no value
      [14] twoFactor:  n has no value
      [15] twoFactor:  look has no value
      [16] twoFactor:  umv has no value
      [17] twoFactor:  umex has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20370: UNIFACT}
\begin{verbatim}

>compiling UNIFACT.spad to UNIFACT.nrlib
 
   Warnings: 
      [1] eisenstein: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored ZP) ZP)) (SIGNATURE factorSquareFree ((Factored ZP) ZP)) (SIGNATURE henselFact ((Record (: contp (Integer)) (: factors (List (Record (: irr ZP) (: pow (Integer)))))) ZP (Boolean))))
      [2] negShiftp:  x has no value
      [3] bound: :(NonNegativeInteger) -- should replace by pretend
      [4] bound:  cbound has no value
      [5] numFactors: pretend(Integer) -- should replace by @
      [6] numFactors:  ans has no value
      [7] choose:  qSave has no value
      [8] choose:  ddSave has no value
      [9] quadratic:  beta has no value
      [10] quadratic:  alpha has no value
      [11] subMinusX: :ZP -- should replace by pretend
      [12] henselFact:  c has no value
      [13] henselFact:  factorlist has no value
      [14] henselFact: :(List ZP) -- should replace by pretend

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20369: UPCDEN}
\begin{verbatim}

>compiling UPCDEN.spad to UPCDEN.nrlib
 
   Warnings: 
      [1] clearDenominator:  x has no value
      [2] splitDenominator:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20368: UPDECOMP}
\begin{verbatim}

>compiling UPDECOMP.spad to UPDECOMP.nrlib
 
   Warnings: 
      [1] leftFactorIfCan:  g has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20367: UPDIVP}
\begin{verbatim}

>compiling UPDIVP.spad to UPDIVP.nrlib
 
   Warnings: 
      [1] divideIfCan:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20366: UPSQFREE}
\begin{verbatim}

>compiling UPSQFREE.spad to UPSQFREE.nrlib
 
   Warnings: 
      [1] BumInSepFFE: :(NonNegativeInteger) -- should replace by @
      [2] squareFree:  lffe has no value
      [3] squareFree:  dunit has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20365: VIEWDEF}
\begin{verbatim}

>compiling VIEWDEF.spad to VIEWDEF.nrlib
 
   Warnings: 
      [1] viewWriteDefault:  thingsToWrite has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20364: WEIER}
\begin{verbatim}

>compiling WEIER.spad to WEIER.nrlib
 
   Warnings: 
      [1] transback: :(Stream (Stream (Polynomial R))) -- should replace by pretend
      [2] transback: :(TaylorSeries R) -- should replace by pretend
      [3] transback: :(Stream (TaylorSeries R)) -- should replace by pretend
      [4] clikeUniv:  p has no value
      [5] clikeUniv: not known that (Ring) is of mode (CATEGORY package (SIGNATURE crest ((Mapping (Stream (Polynomial R)) (Stream (Polynomial R))) (NonNegativeInteger))) (SIGNATURE cfirst ((Mapping (Stream (Polynomial R)) (Stream (Polynomial R))) (NonNegativeInteger))) (SIGNATURE sts2stst ((Stream (Stream (Polynomial R))) (Symbol) (Stream (Polynomial R)))) (SIGNATURE clikeUniv ((Mapping (SparseUnivariatePolynomial (Polynomial R)) (Polynomial R)) (Symbol))) (SIGNATURE weierstrass ((List (TaylorSeries R)) (Symbol) (TaylorSeries R))) (SIGNATURE qqq ((Mapping (Stream (TaylorSeries R)) (Stream (TaylorSeries R))) (NonNegativeInteger) (TaylorSeries R) (Stream (TaylorSeries R)))))
      [6] streamlikeUniv: :(NonNegativeInteger) -- should replace by pretend
      [7] sts2stst:  x has no value
      [8] sts2stst:  y has no value
      [9] sts2stst: :(Stream (NonNegativeInteger)) -- should replace by pretend
      [10] weier: :(TaylorSeries R) -- should replace by pretend
      [11] cfirst:  s has no value
      [12] crest:  s has no value
      [13] qqq:  s has no value
      [14] wei: :(Stream (Polynomial R)) -- should replace by pretend
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20363: WP}
\begin{verbatim}

>compiling WP.spad to WP.nrlib
 
   Warnings: 
      [1] innercoerce:  ans has no value
      [2] unknown Functor code (error incompatible length lists in WeightedPolynomial)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20362: DIAGG}
\begin{verbatim}

>compiling DIAGG.spad to DIAGG.nrlib
 
   Warnings: 
      [1] select!:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20361: DSMP}
\begin{verbatim}

>compiling DSMP.spad to DSMP.nrlib
 
   Warnings: 
      [1] retractIfCan:  x has no value
      [2] retractIfCan:  y has no value
      [3] coerce:  x has no value
      [4] coerce:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20360: FACTRN}
\begin{verbatim}

>compiling FACTRN.spad to FACTRN.nrlib
 
   Warnings: 
      [1] factor: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored (SparseUnivariatePolynomial K)) (SparseUnivariatePolynomial K) K)) (SIGNATURE factorSqFree ((Factored (SparseUnivariatePolynomial K)) (SparseUnivariatePolynomial K) K)))
      [2] norm: not known that (Ring) is of mode (CATEGORY package (SIGNATURE factor ((Factored (SparseUnivariatePolynomial K)) (SparseUnivariatePolynomial K) K)) (SIGNATURE factorSqFree ((Factored (SparseUnivariatePolynomial K)) (SparseUnivariatePolynomial K) K)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20359: FFFACTSE}
\begin{verbatim}

>compiling FFFACTSE.spad to FFFACTSE.nrlib
 
   Warnings: 
      [1] exp:  Q has no value
      [2] internalFactorCZ:  result has no value
      [3] internalFactorCZ:  listOfFactors has no value
      [4] internalFactorSquareFree:  S has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20358: FRAMALG}
\begin{verbatim}

>compiling FRAMALG.spad to FRAMALG.nrlib
 
   Warnings: 
      [1] coordinates: signature of lhs not unique: (Matrix R)(Vector S) chosen
      [2] characteristicPolynomial:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20357: INTFRSP}
\begin{verbatim}

>compiling INTFRSP.spad to INTFRSP.nrlib
 
   Warnings: 
      [1] sbSpcOfCurve: pretend(Integer) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20356: LPARSPT}
\begin{verbatim}

>compiling LPARSPT.spad to LPARSPT.nrlib
 
   Warnings: 
      [1] valuationAndMore: pretend(Integer) -- should replace by @
      [2] localize: pretend(Integer) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20355: NPOLYGON}
\begin{verbatim}

>compiling NPOLYGON.spad to NPOLYGON.nrlib
 
   Warnings: 
      [1] slope: pretend(Integer) -- should replace by @
      [2] slope:  remainder has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20354: PLOT}
\begin{verbatim}

>compiling PLOT.spad to PLOT.nrlib
 
   Warnings: 
      [1] listBranches:  newl has no value
      [2] listBranches:  outList has no value
      [3] rangeRefine:  c has no value
      [4] rangeRefine:  q has no value
      [5] rangeRefine:  NUMFUNEVALS has no value
      [6] refine:  curves has no value
      [7] plot:  curves has no value
      [8] plot:  u1 has no value
      [9] plot:  z1 has no value
      [10] plot:  t has no value
      [11] plotPolar:  u1 has no value
      [12] plotPolar:  v1 has no value
      [13] coerce:  l has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20353: RFP}
\begin{verbatim}

>compiling RFP.spad to RFP.nrlib
 
   Warnings: 
      [1] distinguishedRootsOf: not known that (Ring) is of mode (CATEGORY package (SIGNATURE distinguishedRootsOf ((Record (: zeros (List K)) (: extDegree (Integer))) (SparseUnivariatePolynomial K) K)) (SIGNATURE distinguishedCommonRootsOf ((Record (: zeros (List K)) (: extDegree (Integer))) (List (SparseUnivariatePolynomial K)) K)) (SIGNATURE foundZeroes ((List K))) (SIGNATURE setFoundZeroes ((List K) (List K))))
      [2] distinguishedRootsOf: pretend(List (Integer)) -- should replace by @
      [3] distinguishedRootsOf: not known that (UnivariatePolynomialCategory (Fraction (Integer))) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) K $)))


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20352: ROIRC}
\begin{verbatim}

>compiling ROIRC.spad to ROIRC.nrlib
 
   Warnings: 
      [1] invert:  z has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20351: SMATCAT}
\begin{verbatim}

>compiling SMATCAT.spad to SMATCAT.nrlib
 
   Warnings: 
      [1] equation2R: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE ** (S S (Integer))) (SIGNATURE diagonalProduct (R S)) (SIGNATURE trace (R S)) (SIGNATURE diagonal (Row S)) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE coerce (S (Integer))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE ** (S S (PositiveInteger))) (SIGNATURE coerce ((OutputForm) S)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20350: AFALGGRO}
\begin{verbatim}

>compiling AFALGGRO.spad to AFALGGRO.nrlib
 
   Warnings: 
      [1] affineAlgSetLocal:  listPtsIdl has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20349: AFALGRES}
\begin{verbatim}

>compiling AFALGRES.spad to AFALGRES.nrlib
 
   Warnings: 
      [1] affineAlgSetLocal:  listPtsIdl has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20348: FFINTBAS}
\begin{verbatim}

>compiling FFINTBAS.spad to FFINTBAS.nrlib
 
   Warnings: 
      [1] squaredFactors: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE integralBasis ((Record (: basis (Matrix R)) (: basisDen R) (: basisInv (Matrix R))))) (SIGNATURE localIntegralBasis ((Record (: basis (Matrix R)) (: basisDen R) (: basisInv (Matrix R))) R)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20347: FRIDEAL}
\begin{verbatim}

>compiling FRIDEAL.spad to FRIDEAL.nrlib
 
   Warnings: 
      [1] upmat:  s has no value
      [2] ret?:  s has no value
      [3] inv:  s has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20346: FRIDEAL2}
\begin{verbatim}

>compiling FRIDEAL2.spad to FRIDEAL2.nrlib
 
   Warnings: 
      [1] map:  s has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20345: FRMOD}
\begin{verbatim}

>compiling FRMOD.spad to FRMOD.nrlib
 
   Warnings: 
      [1] vectProd: pretend(Vector A) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20344: INTFACT}
\begin{verbatim}

>compiling INTFACT.spad to INTFACT.nrlib
 
   Warnings: 
      [1] PollardSmallFactor:  G has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20343: MONOGEN}
\begin{verbatim}

>compiling MONOGEN.spad to MONOGEN.nrlib
 
   Warnings: 
      [1] derivationCoordinates:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20342: NFINTBAS}
\begin{verbatim}

>compiling NFINTBAS.spad to NFINTBAS.nrlib
 
   Warnings: 
      [1] wildPrimes:  ans has no value
      [2] tameProduct:  ans has no value
      [3] integralBasis:  runningRbden has no value
      [4] iWildLocalIntegralBasis:  rbden has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20341: CCLASS}
\begin{verbatim}

>compiling CCLASS.spad to CCLASS.nrlib
 
   Warnings: 
      [1] remove!: signature of lhs not unique: $(Character)$ chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20340: CPIMA}
\begin{verbatim}

>compiling CPIMA.spad to CPIMA.nrlib
 
   Warnings: 
      [1] XtoY:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20339: GALFACT}
\begin{verbatim}

>compiling GALFACT.spad to GALFACT.nrlib
 
   Warnings: 
      [1] eisensteinIrreducible?: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE makeFR ((Factored UP) (Record (: contp (Integer)) (: factors (List (Record (: irr UP) (: pow (Integer)))))))) (SIGNATURE degreePartition ((Multiset (NonNegativeInteger)) (List (Record (: factor UP) (: degree (Integer)))))) (SIGNATURE musserTrials ((PositiveInteger))) (SIGNATURE musserTrials ((PositiveInteger) (PositiveInteger))) (SIGNATURE stopMusserTrials ((PositiveInteger))) (SIGNATURE stopMusserTrials ((PositiveInteger) (PositiveInteger))) (SIGNATURE numberOfFactors ((NonNegativeInteger) (List (Record (: factor UP) (: degree (Integer)))))) (SIGNATURE modularFactor ((Record (: prime (Integer)) (: factors (List UP))) UP)) (SIGNATURE useSingleFactorBound? ((Boolean))) (SIGNATURE useSingleFactorBound ((Boolean) (Boolean))) (SIGNATURE useEisensteinCriterion? ((Boolean))) (SIGNATURE useEisensteinCriterion ((Boolean) (Boolean))) (SIGNATURE eisensteinIrreducible? ((Boolean) UP)) (SIGNATURE tryFunctionalDecomposition? ((Boolean))) (SIGNATURE tryFunctionalDecomposition ((Boolean) (Boolean))) (SIGNATURE factor ((Factored UP) UP)) (SIGNATURE factor ((Factored UP) UP (NonNegativeInteger))) (SIGNATURE factor ((Factored UP) UP (List (NonNegativeInteger)))) (SIGNATURE factor ((Factored UP) UP (List (NonNegativeInteger)) (NonNegativeInteger))) (SIGNATURE factor ((Factored UP) UP (NonNegativeInteger) (NonNegativeInteger))) (SIGNATURE factorSquareFree ((Factored UP) UP)) (SIGNATURE factorSquareFree ((Factored UP) UP (NonNegativeInteger))) (SIGNATURE factorSquareFree ((Factored UP) UP (List (NonNegativeInteger)))) (SIGNATURE factorSquareFree ((Factored UP) UP (List (NonNegativeInteger)) (NonNegativeInteger))) (SIGNATURE factorSquareFree ((Factored UP) UP (NonNegativeInteger) (NonNegativeInteger))) (SIGNATURE factorOfDegree ((Union UP failed) (PositiveInteger) UP)) (SIGNATURE factorOfDegree ((Union UP failed) (PositiveInteger) UP (NonNegativeInteger))) (SIGNATURE factorOfDegree ((Union UP failed) (PositiveInteger) UP (List (NonNegativeInteger)))) (SIGNATURE factorOfDegree ((Union UP failed) (PositiveInteger) UP (List (NonNegativeInteger)) (NonNegativeInteger))) (SIGNATURE factorOfDegree ((Union UP failed) (PositiveInteger) UP (List (NonNegativeInteger)) (NonNegativeInteger) (Boolean))) (SIGNATURE henselFact ((Record (: contp (Integer)) (: factors (List (Record (: irr UP) (: pow (Integer)))))) UP (Boolean))) (SIGNATURE btwFact ((Record (: contp (Integer)) (: factors (List (Record (: irr UP) (: pow (Integer)))))) UP (Boolean) (Set (NonNegativeInteger)) (NonNegativeInteger))))
      [2] modularFactor:  s has no value
      [3] completeFactor:  g0 has no value
      [4] completeFactor:  degg has no value
      [5] completeFactor:  g has no value
      [6] completeFactor:  x has no value
      [7] completeFactor:  ltrue has no value
      [8] completeFactor:  level has no value
      [9] divideSet:  l has no value
      [10] btwFactor:  reverse? has no value
      [11] btwFactor:  negativelc? has no value
      [12] btwFactor:  x has no value
      [13] btwFactor:  lf has no value
      [14] henselFact:  c has no value
      [15] henselFact:  factorlist has no value
      [16] henselFact:  z has no value
      [17] btwFact:  x has no value
      [18] btwFact:  c has no value
      [19] btwFact:  factorlist has no value
      [20] btwFact:  z has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20338: IALGFACT}
\begin{verbatim}

>compiling IALGFACT.spad to IALGFACT.nrlib
 
   Warnings: 
      [1] factor: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored AlPol) AlPol (Mapping (Factored UP) UP))))
      [2]  x has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20337: IBACHIN}
\begin{verbatim}

>compiling IBACHIN.spad to IBACHIN.nrlib
 
   Warnings: 
      [1] applyFrobToMatrix:  k1 has no value
      [2] listConjugateBases:  k1 has no value
      [3] approximateExtendedEuclidean:  r1 has no value
      [4] approximateExtendedEuclidean:  z1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20336: MMLFORM}
\begin{verbatim}

>compiling MMLFORM.spad to MMLFORM.nrlib
 
   Warnings: 
      [1] exprex:  s has no value
      [2] formatSub:  j has no value
      [3] formatSub:  s has no value
      [4] formatSub1:  s has no value
      [5] formatPlex:  checkarg has no value
      [6] formatPlex:  s has no value
      [7] formatNaryNoGroup:  checkargs has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20335: NORMMA}
\begin{verbatim}

>compiling NORMMA.spad to NORMMA.nrlib
 
   Warnings: 
      [1] PolR2SUP:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20334: ODERED}
\begin{verbatim}

>compiling ODERED.spad to ODERED.nrlib
 
   Warnings: 
      [1] matF2L:  f1 has no value
      [2] reduceLODE:  f1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20333: PERM}
\begin{verbatim}

>compiling PERM.spad to PERM.nrlib
 
   Warnings: 
      [1] rotateCycle:  minpos has no value
      [2] coerceToCycle:  nextCycle has no value
      [3] coercePreimagesImages:  preImage has no value
      [4] coercePreimagesImages:  image has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20332: PERMGRP}
\begin{verbatim}

>compiling PERMGRP.spad to PERMGRP.nrlib
 
   Warnings: 
      [1] shortenWord:  newlw has no value
      [2] orbitInternal:  pos has no value
      [3] orbitInternal:  orbitList has no value
      [4] bsgs1:  j has no value
      [5] bsgs1:  out has no value
      [6] bsgs1:  outword has no value
      [7] bsgs1:  baseOfGroup has no value
      [8] reduceGenerators:  wordlist has no value
      [9] bsgs:  gpbase has no value
      [10] bsgs:  baseOfGroup has no value
      [11] bsgs:  wordProblem has no value
      [12] bsgs:  wordlist has no value
      [13] bsgs:  gporb has no value
      [14] bsgs:  noresult has no value
      [15] bsgs:  newBasePoint has no value
      [16] bsgs:  basePoint has no value
      [17] memberInternal:  supp has no value
      [18] memberInternal:  sgs has no value
      [19] memberInternal:  baseOfGroup has no value
      [20] memberInternal:  gporb has no value
      [21] coerce: :(Symbol) -- should replace by pretend
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20331: PRIMES}
\begin{verbatim}

>compiling PRIMES.spad to PRIMES.nrlib
 
   Warnings: 
      [1] rabinProvesComposite:  rootsMinus1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20330: PRJALGPK}
\begin{verbatim}

>compiling PRJALGPK.spad to PRJALGPK.nrlib
 
   Warnings: 
      [1] singularPoints:  listPtsIdl2 has no value
      [2] algebraicSet:  listPtsIdl2 has no value
      [3] rationalPoints:  listPtsIdl has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20329: PWFFINTB}
\begin{verbatim}

>compiling PWFFINTB.spad to PWFFINTB.nrlib
 
   Warnings: 
      [1] reducedDiscriminant:  r1 has no value
      [2] compLocalBasisOverExt:  k1 has no value
      [3] listSquaredFactors:  ans has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20328: SAE}
\begin{verbatim}

>compiling SAE.spad to SAE.nrlib
 
   Warnings: 
      [1] lift: pretendRep -- should replace by @
      [2] coordinates:  y has no value
      [3] index:  ans has no value
      [4] unknown Functor code (error Modulus cannot be made monic)
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20327: SGCF}
\begin{verbatim}

>compiling SGCF.spad to SGCF.nrlib
 
   Warnings: 
      [1] unrankImproperPartitions0:  l has no value
      [2] unrankImproperPartitions1:  nonZeros has no value
      [3] subSet:  l has no value
      [4] nextLatticePermutation:  ready has no value
      [5] listYoungTableaus:  lattice has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20326: SPACE3}
\begin{verbatim}

>compiling SPACE3.spad to SPACE3.nrlib
 
   Warnings: 
      [1] coerce:  llliPt has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 200325: TBAGG}
\begin{verbatim}

>compiling TBAGG.spad to TBAGG.nrlib
 
   Warnings: 
      [1] map!: signature of lhs not unique: S(Mapping Entry Entry)S chosen
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20324: VIEW3D}
\begin{verbatim}

>compiling VIEW3D.spad to VIEW3D.nrlib
 
   Warnings: 
      [1] viewpoint:  Theta has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20323: WFFINTBS}
\begin{verbatim}

>compiling WFFINTBS.spad to WFFINTBS.nrlib
 
   Warnings: 
      [1] listSquaredFactors:  ans has no value
      [2] iLocalIntegralBasis:  rbden has no value
      [3] integralBasis:  runningRbden has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20322: ALIST}
\begin{verbatim}

>compiling ALIST.spad to ALIST.nrlib
 
   Warnings: 
      [1] latex:  s has no value
      [2] remove!:  key has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20321: HASHTBL}
\begin{verbatim}

>compiling HASHTBL.spad to HASHTBL.nrlib
 
   Warnings: 
      [1] remove!: pretendEntry -- should replace by @
      [2] search: pretendEntry -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20320: INTPACK}
\begin{verbatim}

>compiling INTPACK.spad to INTPACK.nrlib
 
   Warnings: 
      [1] integrateConstantList:  x has no value
      [2] integrateConstantList:  y has no value
      [3] preAnalysis:  nia has no value
      [4] measureSpecific:  nia has no value
      [5] measureSpecific:  mdnia has no value
      [6] integrateSpecific:  nia has no value
      [7] integrateSpecific:  mdnia has no value
      [8] recoverAfterFail:  nia has no value
      [9] integrateArgs:  mdnia has no value
      [10] integrateArgs:  nia has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20319: IPF}
\begin{verbatim}

>compiling IPF.spad to IPF.nrlib
 
   Warnings: 
      [1] tableForDiscreteLogarithm: pretend(Table (PositiveInteger) (NonNegativeInteger)) -- should replace by @
      [2] initializeLog:  n has no value
      [3] coordinates: signature of lhs not unique: (Vector $)$ chosen
      [4] charthRoot: signature of lhs not unique: $$ chosen
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20318: ACF}
\begin{verbatim}

>compiling ACF.spad to ACF.nrlib
 
   Warnings: 
      [1] zeroOf: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE zerosOf ((List S) (Polynomial S))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S))) (SIGNATURE zeroOf (S (Polynomial S))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE rootsOf ((List S) (Polynomial S))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S))) (SIGNATURE rootOf (S (Polynomial S))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20317: ACPLOT}
\begin{verbatim}

>compiling ACPLOT.spad to ACPLOT.nrlib
 
   Warnings: 
      [1] listPtsOnHorizBdry:  pointList has no value
      [2] listPtsOnVertBdry:  pointList has no value
      [3] listPtsInRect:  pointList has no value
      [4] newX:  x has no value
      [5] newY:  x has no value
      [6] makeOneVarSketch:  sketchRoots has no value
      [7] makeOneVarSketch:  lf has no value
      [8] makeOneVarSketch:  rt has no value
      [9] makeOneVarSketch:  bt has no value
      [10] makeOneVarSketch:  tp has no value
      [11] makeLineSketch:  branch has no value
      [12] makeLineSketch:  lf has no value
      [13] makeLineSketch:  rt has no value
      [14] makeLineSketch:  bt has no value
      [15] makeLineSketch:  tp has no value
      [16] makeRatFcnSketch:  s has no value
      [17] makeRatFcnSketch:  outList has no value
      [18] makeRatFcnSketch:  lf has no value
      [19] makeRatFcnSketch:  rt has no value
      [20] makeRatFcnSketch:  bt has no value
      [21] makeRatFcnSketch:  tp has no value
      [22] makeRatFcnSketch:  topList has no value
      [23] makeRatFcnSketch:  botList has no value
      [24] makeGeneralSketch:  s has no value
      [25] listPtsOnLoop:  pointList has no value
      [26] computeNextPt:  xPointList has no value
      [27] computeNextPt:  yPointList has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20316: ANTISYM}
\begin{verbatim}

>compiling ANTISYM.spad to ANTISYM.nrlib
 
   Warnings: 
      [1] retractable?:  k has no value
      [2] retractIfCan:  k has no value
      [3] *:  k has no value
      [4] *:  c has no value
      [5] *:  z has no value
      [6] coerce:  c has no value
      [7] coerce:  k has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20315: ASP12}
\begin{verbatim}

>compiling ASP12.spad to ASP12.nrlib
 
   Warnings: 
      [1]  MAXIT has no value
      [2]  IFLAG has no value
      [3]  ELAM has no value
      [4]  FINFO has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20314: ASP27}
\begin{verbatim}

>compiling ASP27.spad to ASP27.nrlib
 
   Warnings: 
      [1]  IFLAG has no value
      [2]  N has no value
      [3]  LRWORK has no value
      [4]  LIWORK has no value
      [5]  Z has no value
      [6]  W has no value
      [7]  RWORK has no value
      [8]  IWORK has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20313: ASP28}
\begin{verbatim}

>compiling ASP28.spad to ASP28.nrlib
 
   Warnings: 
      [1]  IFLAG has no value
      [2]  N has no value
      [3]  LRWORK has no value
      [4]  LIWORK has no value
      [5]  Z has no value
      [6]  W has no value
      [7]  RWORK has no value
      [8]  IWORK has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20312: ASP30}
\begin{verbatim}

>compiling ASP30.spad to ASP30.nrlib
 
   Warnings: 
      [1]  MODE has no value
      [2]  M has no value
      [3]  N has no value
      [4]  LRWORK has no value
      [5]  LIWORK has no value
      [6]  X has no value
      [7]  Y has no value
      [8]  RWORK has no value
      [9]  IWORK has no value
      [10]  IFAIL has no value
      [11] coerce:  A has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20311: ASP33}
\begin{verbatim}

>compiling ASP33.spad to ASP33.nrlib
 
   Warnings: 
      [1]  JINT has no value
      [2]  X has no value
      [3]  V has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20310: ASP49}
\begin{verbatim}

>compiling ASP49.spad to ASP49.nrlib
 
   Warnings: 
      [1]  MODE has no value
      [2]  N has no value
      [3]  X has no value
      [4]  OBJF has no value
      [5]  OBJGRD has no value
      [6]  NSTATE has no value
      [7]  IUSER has no value
      [8]  USER has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20309: ASP55}
\begin{verbatim}

>compiling ASP55.spad to ASP55.nrlib
 
   Warnings: 
      [1]  MODE has no value
      [2]  NCNLN has no value
      [3]  N has no value
      [4]  NROWJ has no value
      [5]  NEEDC has no value
      [6]  X has no value
      [7]  C has no value
      [8]  CJAC has no value
      [9]  NSTATE has no value
      [10]  IUSER has no value
      [11]  USER has no value
      [12] makeCond:  NEEDC has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20308: ASP7}
\begin{verbatim}

>compiling ASP7.spad to ASP7.nrlib
 
   Warnings: 
      [1]  X has no value
      [2]  Y has no value
      [3]  F has no value
      [4] coerce:  F has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20307: ASP78}
\begin{verbatim}

>compiling ASP78.spad to ASP78.nrlib
 
   Warnings: 
      [1]  X has no value
      [2]  G has no value
      [3] coerce:  G has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20306: ASP8}
\begin{verbatim}

>compiling ASP8.spad to ASP8.nrlib
 
   Warnings: 
      [1]  COUNT has no value
      [2]  XSOL has no value
      [3]  N has no value
      [4]  Y has no value
      [5]  FORWRD has no value
      [6]  RESULT has no value
      [7]  M has no value
      [8] coerce:  POINTS has no value
      [9] coerce:  X02ALF has no value
      [10] coerce:  RESULT has no value
      [11] coerce:  COUNT has no value
      [12] coerce:  XSOL has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20305: ASP9}
\begin{verbatim}

>compiling ASP9.spad to ASP9.nrlib
 
   Warnings: 
      [1]  X has no value
      [2]  Y has no value
      [3] coerce:  CHDUM1 has no value
      [4] coerce:  CD02EJ has no value
      [5] coerce:  AD02CJ has no value
      [6] coerce:  GOPT1 has no value
      [7] coerce:  GOPT2 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20304: BLUPPACK}
\begin{verbatim}

>compiling BLUPPACK.spad to BLUPPACK.nrlib
 
   Warnings: 
      [1] stepBlowUp: not known that (FiniteAbelianMonoidRing K (DirectProduct (call LENGTH (LIST (QUOTE X) (QUOTE Y))) (NonNegativeInteger))) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [2] stepBlowUp:  listRec has no value
      [3] blowExp: pretend(Integer) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20303: BOP}
\begin{verbatim}

>compiling BOP.spad to BOP.nrlib
 
   Warnings: 
      [1] display:  x1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20302: BOP1}
\begin{verbatim}

>compiling BOP1.spad to BOP1.nrlib
 
   Warnings: 
      [1] evaluate:  ll has no value
      [2] derivative:  ll has no value
      [3] constOp:  ll has no value
      [4] constantOperator:  ll has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20301: COMPCAT}
\begin{verbatim}

>compiling COMPCAT.spad to COMPCAT.nrlib

   Warnings: 
      [1] solveLinearPolynomialEquation: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE coerce (S S)) (SIGNATURE exquo ((Union S failed) S S)) (SIGNATURE unitNormal ((Record (: unit S) (: canonical S) (: associate S)) S)) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE quo (S S S)) (SIGNATURE rem (S S S)) (SIGNATURE inv (S S)) (SIGNATURE ** (S S (Integer))) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Complex (DoubleFloat)) S)) (SIGNATURE convert ((Complex (Float)) S)) (SIGNATURE tan (S S)) (SIGNATURE sin (S S)) (SIGNATURE cos (S S)) (SIGNATURE acos (S S)) (SIGNATURE asin (S S)) (SIGNATURE atan (S S)) (SIGNATURE cosh (S S)) (SIGNATURE sinh (S S)) (SIGNATURE tanh (S S)) (SIGNATURE acosh (S S)) (SIGNATURE asinh (S S)) (SIGNATURE atanh (S S)) (SIGNATURE log (S S)) (SIGNATURE exp (S S)) (SIGNATURE ** (S S S)) (SIGNATURE pi (S)) (SIGNATURE ** (S S (Fraction (Integer)))) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE rationalIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE rational ((Fraction (Integer)) S)) (SIGNATURE rational? ((Boolean) S)) (SIGNATURE polarCoordinates ((Record (: r R) (: phi R)) S)) (SIGNATURE argument (R S)) (SIGNATURE abs (S S)) (SIGNATURE exquo ((Union S failed) S R)) (SIGNATURE conjugate (S S)) (SIGNATURE imaginary (S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE map (S (Mapping R R) S)) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE reduce ((Union S failed) (Fraction (SparseUnivariatePolynomial R)))) (SIGNATURE lift ((SparseUnivariatePolynomial R) S)) (SIGNATURE convert (S (SparseUnivariatePolynomial R))) (SIGNATURE reduce (S (SparseUnivariatePolynomial R))) (SIGNATURE definingPolynomial ((SparseUnivariatePolynomial R))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R)) (SIGNATURE convert (S (Vector R))) (SIGNATURE convert ((Vector R) S)) (SIGNATURE coordinates ((Matrix R) (Vector S))) (SIGNATURE coordinates ((Vector R) S)) (SIGNATURE minimalPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE characteristicPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R (Vector S))) (SIGNATURE coordinates ((Matrix R) (Vector S) (Vector S))) (SIGNATURE coordinates ((Vector R) S (Vector S))) (SIGNATURE norm (R S)) (SIGNATURE trace (R S)) (SIGNATURE rank ((PositiveInteger))) (SIGNATURE coerce (S R)) (SIGNATURE * (S R S)) (SIGNATURE * (S S R)) (SIGNATURE coerce (S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE recip ((Union S failed) S)) (SIGNATURE * (S S S)) (SIGNATURE ** (S S (PositiveInteger))) (SIGNATURE * (S (Integer) S)) (SIGNATURE - (S S S)) (SIGNATURE - (S S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE + (S S S)) (SIGNATURE coerce ((OutputForm) S)) (SIGNATURE = ((Boolean) S S)))
      [2] normPolynomial:  z has no value
      [3] factorPolynomial: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE coerce (S S)) (SIGNATURE exquo ((Union S failed) S S)) (SIGNATURE unitNormal ((Record (: unit S) (: canonical S) (: associate S)) S)) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE quo (S S S)) (SIGNATURE rem (S S S)) (SIGNATURE inv (S S)) (SIGNATURE ** (S S (Integer))) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Complex (DoubleFloat)) S)) (SIGNATURE convert ((Complex (Float)) S)) (SIGNATURE tan (S S)) (SIGNATURE sin (S S)) (SIGNATURE cos (S S)) (SIGNATURE acos (S S)) (SIGNATURE asin (S S)) (SIGNATURE atan (S S)) (SIGNATURE cosh (S S)) (SIGNATURE sinh (S S)) (SIGNATURE tanh (S S)) (SIGNATURE acosh (S S)) (SIGNATURE asinh (S S)) (SIGNATURE atanh (S S)) (SIGNATURE log (S S)) (SIGNATURE exp (S S)) (SIGNATURE ** (S S S)) (SIGNATURE pi (S)) (SIGNATURE ** (S S (Fraction (Integer)))) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE rationalIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE rational ((Fraction (Integer)) S)) (SIGNATURE rational? ((Boolean) S)) (SIGNATURE polarCoordinates ((Record (: r R) (: phi R)) S)) (SIGNATURE argument (R S)) (SIGNATURE abs (S S)) (SIGNATURE exquo ((Union S failed) S R)) (SIGNATURE conjugate (S S)) (SIGNATURE imaginary (S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE map (S (Mapping R R) S)) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE reduce ((Union S failed) (Fraction (SparseUnivariatePolynomial R)))) (SIGNATURE lift ((SparseUnivariatePolynomial R) S)) (SIGNATURE convert (S (SparseUnivariatePolynomial R))) (SIGNATURE reduce (S (SparseUnivariatePolynomial R))) (SIGNATURE definingPolynomial ((SparseUnivariatePolynomial R))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R)) (SIGNATURE convert (S (Vector R))) (SIGNATURE convert ((Vector R) S)) (SIGNATURE coordinates ((Matrix R) (Vector S))) (SIGNATURE coordinates ((Vector R) S)) (SIGNATURE minimalPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE characteristicPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R (Vector S))) (SIGNATURE coordinates ((Matrix R) (Vector S) (Vector S))) (SIGNATURE coordinates ((Vector R) S (Vector S))) (SIGNATURE norm (R S)) (SIGNATURE trace (R S)) (SIGNATURE rank ((PositiveInteger))) (SIGNATURE coerce (S R)) (SIGNATURE * (S R S)) (SIGNATURE * (S S R)) (SIGNATURE coerce (S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE recip ((Union S failed) S)) (SIGNATURE * (S S S)) (SIGNATURE ** (S S (PositiveInteger))) (SIGNATURE * (S (Integer) S)) (SIGNATURE - (S S S)) (SIGNATURE - (S S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE + (S S S)) (SIGNATURE coerce ((OutputForm) S)) (SIGNATURE = ((Boolean) S S)))
      [4] factorPolynomial: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE coerce (S S)) (SIGNATURE exquo ((Union S failed) S S)) (SIGNATURE unitNormal ((Record (: unit S) (: canonical S) (: associate S)) S)) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE quo (S S S)) (SIGNATURE rem (S S S)) (SIGNATURE inv (S S)) (SIGNATURE ** (S S (Integer))) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Complex (DoubleFloat)) S)) (SIGNATURE convert ((Complex (Float)) S)) (SIGNATURE tan (S S)) (SIGNATURE sin (S S)) (SIGNATURE cos (S S)) (SIGNATURE acos (S S)) (SIGNATURE asin (S S)) (SIGNATURE atan (S S)) (SIGNATURE cosh (S S)) (SIGNATURE sinh (S S)) (SIGNATURE tanh (S S)) (SIGNATURE acosh (S S)) (SIGNATURE asinh (S S)) (SIGNATURE atanh (S S)) (SIGNATURE log (S S)) (SIGNATURE exp (S S)) (SIGNATURE ** (S S S)) (SIGNATURE pi (S)) (SIGNATURE ** (S S (Fraction (Integer)))) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE rationalIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE rational ((Fraction (Integer)) S)) (SIGNATURE rational? ((Boolean) S)) (SIGNATURE polarCoordinates ((Record (: r R) (: phi R)) S)) (SIGNATURE argument (R S)) (SIGNATURE abs (S S)) (SIGNATURE exquo ((Union S failed) S R)) (SIGNATURE conjugate (S S)) (SIGNATURE imaginary (S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE map (S (Mapping R R) S)) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE reduce ((Union S failed) (Fraction (SparseUnivariatePolynomial R)))) (SIGNATURE lift ((SparseUnivariatePolynomial R) S)) (SIGNATURE convert (S (SparseUnivariatePolynomial R))) (SIGNATURE reduce (S (SparseUnivariatePolynomial R))) (SIGNATURE definingPolynomial ((SparseUnivariatePolynomial R))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R)) (SIGNATURE convert (S (Vector R))) (SIGNATURE convert ((Vector R) S)) (SIGNATURE coordinates ((Matrix R) (Vector S))) (SIGNATURE coordinates ((Vector R) S)) (SIGNATURE minimalPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE characteristicPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R (Vector S))) (SIGNATURE coordinates ((Matrix R) (Vector S) (Vector S))) (SIGNATURE coordinates ((Vector R) S (Vector S))) (SIGNATURE norm (R S)) (SIGNATURE trace (R S)) (SIGNATURE rank ((PositiveInteger))) (SIGNATURE coerce (S R)) (SIGNATURE * (S R S)) (SIGNATURE * (S S R)) (SIGNATURE coerce (S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE recip ((Union S failed) S)) (SIGNATURE * (S S S)) (SIGNATURE ** (S S (PositiveInteger))) (SIGNATURE * (S (Integer) S)) (SIGNATURE - (S S S)) (SIGNATURE - (S S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE + (S S S)) (SIGNATURE coerce ((OutputForm) S)) (SIGNATURE = ((Boolean) S S)))
      [5] factorSquareFreePolynomial:  z has no value
      [6] reducedSystem: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE coerce (S S)) (SIGNATURE exquo ((Union S failed) S S)) (SIGNATURE unitNormal ((Record (: unit S) (: canonical S) (: associate S)) S)) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE quo (S S S)) (SIGNATURE rem (S S S)) (SIGNATURE inv (S S)) (SIGNATURE ** (S S (Integer))) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Complex (DoubleFloat)) S)) (SIGNATURE convert ((Complex (Float)) S)) (SIGNATURE tan (S S)) (SIGNATURE sin (S S)) (SIGNATURE cos (S S)) (SIGNATURE acos (S S)) (SIGNATURE asin (S S)) (SIGNATURE atan (S S)) (SIGNATURE cosh (S S)) (SIGNATURE sinh (S S)) (SIGNATURE tanh (S S)) (SIGNATURE acosh (S S)) (SIGNATURE asinh (S S)) (SIGNATURE atanh (S S)) (SIGNATURE log (S S)) (SIGNATURE exp (S S)) (SIGNATURE ** (S S S)) (SIGNATURE pi (S)) (SIGNATURE ** (S S (Fraction (Integer)))) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE rationalIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE rational ((Fraction (Integer)) S)) (SIGNATURE rational? ((Boolean) S)) (SIGNATURE polarCoordinates ((Record (: r R) (: phi R)) S)) (SIGNATURE argument (R S)) (SIGNATURE abs (S S)) (SIGNATURE exquo ((Union S failed) S R)) (SIGNATURE conjugate (S S)) (SIGNATURE imaginary (S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE map (S (Mapping R R) S)) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE reduce ((Union S failed) (Fraction (SparseUnivariatePolynomial R)))) (SIGNATURE lift ((SparseUnivariatePolynomial R) S)) (SIGNATURE convert (S (SparseUnivariatePolynomial R))) (SIGNATURE reduce (S (SparseUnivariatePolynomial R))) (SIGNATURE definingPolynomial ((SparseUnivariatePolynomial R))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R)) (SIGNATURE convert (S (Vector R))) (SIGNATURE convert ((Vector R) S)) (SIGNATURE coordinates ((Matrix R) (Vector S))) (SIGNATURE coordinates ((Vector R) S)) (SIGNATURE minimalPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE characteristicPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R (Vector S))) (SIGNATURE coordinates ((Matrix R) (Vector S) (Vector S))) (SIGNATURE coordinates ((Vector R) S (Vector S))) (SIGNATURE norm (R S)) (SIGNATURE trace (R S)) (SIGNATURE rank ((PositiveInteger))) (SIGNATURE coerce (S R)) (SIGNATURE * (S R S)) (SIGNATURE * (S S R)) (SIGNATURE coerce (S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE recip ((Union S failed) S)) (SIGNATURE * (S S S)) (SIGNATURE ** (S S (PositiveInteger))) (SIGNATURE * (S (Integer) S)) (SIGNATURE - (S S S)) (SIGNATURE - (S S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE + (S S S)) (SIGNATURE coerce ((OutputForm) S)) (SIGNATURE = ((Boolean) S S)))
      [7] patternMatch: not known that (SetCategory) is of mode (CATEGORY domain (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE coerce (S S)) (SIGNATURE exquo ((Union S failed) S S)) (SIGNATURE unitNormal ((Record (: unit S) (: canonical S) (: associate S)) S)) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE quo (S S S)) (SIGNATURE rem (S S S)) (SIGNATURE inv (S S)) (SIGNATURE ** (S S (Integer))) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Complex (DoubleFloat)) S)) (SIGNATURE convert ((Complex (Float)) S)) (SIGNATURE tan (S S)) (SIGNATURE sin (S S)) (SIGNATURE cos (S S)) (SIGNATURE acos (S S)) (SIGNATURE asin (S S)) (SIGNATURE atan (S S)) (SIGNATURE cosh (S S)) (SIGNATURE sinh (S S)) (SIGNATURE tanh (S S)) (SIGNATURE acosh (S S)) (SIGNATURE asinh (S S)) (SIGNATURE atanh (S S)) (SIGNATURE log (S S)) (SIGNATURE exp (S S)) (SIGNATURE ** (S S S)) (SIGNATURE pi (S)) (SIGNATURE ** (S S (Fraction (Integer)))) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE rationalIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE rational ((Fraction (Integer)) S)) (SIGNATURE rational? ((Boolean) S)) (SIGNATURE polarCoordinates ((Record (: r R) (: phi R)) S)) (SIGNATURE argument (R S)) (SIGNATURE abs (S S)) (SIGNATURE exquo ((Union S failed) S R)) (SIGNATURE conjugate (S S)) (SIGNATURE imaginary (S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE map (S (Mapping R R) S)) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE reduce ((Union S failed) (Fraction (SparseUnivariatePolynomial R)))) (SIGNATURE lift ((SparseUnivariatePolynomial R) S)) (SIGNATURE convert (S (SparseUnivariatePolynomial R))) (SIGNATURE reduce (S (SparseUnivariatePolynomial R))) (SIGNATURE definingPolynomial ((SparseUnivariatePolynomial R))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R)) (SIGNATURE convert (S (Vector R))) (SIGNATURE convert ((Vector R) S)) (SIGNATURE coordinates ((Matrix R) (Vector S))) (SIGNATURE coordinates ((Vector R) S)) (SIGNATURE minimalPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE characteristicPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R (Vector S))) (SIGNATURE coordinates ((Matrix R) (Vector S) (Vector S))) (SIGNATURE coordinates ((Vector R) S (Vector S))) (SIGNATURE norm (R S)) (SIGNATURE trace (R S)) (SIGNATURE rank ((PositiveInteger))) (SIGNATURE coerce (S R)) (SIGNATURE * (S R S)) (SIGNATURE * (S S R)) (SIGNATURE coerce (S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE recip ((Union S failed) S)) (SIGNATURE * (S S S)) (SIGNATURE ** (S S (PositiveInteger))) (SIGNATURE * (S (Integer) S)) (SIGNATURE - (S S S)) (SIGNATURE - (S S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE + (S S S)) (SIGNATURE coerce ((OutputForm) S)) (SIGNATURE = ((Boolean) S S)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20300: DRAWCFUN}
\begin{verbatim}

>compiling DRAWCFUN.spad to DRAWCFUN.nrlib
 
   Warnings: 
      [1] drawToScaleRanges:  x has no value
      [2] drawPlot:  brans has no value
      [3] drawPlot:  xValues has no value
      [4] drawPlot:  yValues has no value
      [5] drawPlot:  x has no value
      [6] draw:  x has no value
      [7] draw:  fcn has no value
      [8] makeObject:  x has no value
      [9] makeObject:  fcn has no value
      [10] makeObject:  pointsColored? has no value
      [11] recolor:  f1 has no value
      [12] recolor:  f2 has no value
      [13] makeObject:  y has no value
      [14] makeObject:  col2 has no value
      [15] makeObject:  col3 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20299: D01ANFA}
\begin{verbatim}

>compiling D01ANFA.spad to D01ANFA.nrlib
 
   Warnings: 
      [1] numericalIntegration:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20298: D01ASFA}
\begin{verbatim}

>compiling D01ASFA.spad to D01ASFA.nrlib
 
   Warnings: 
      [1] numericalIntegration:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20297: EP}
\begin{verbatim}

>compiling EP.spad to EP.nrlib

   Warnings: 
      [1] not known that (SIGNATURE variable ((Union $ failed) (Symbol))) is of mode (CATEGORY domain (SIGNATURE new ($)) (SIGNATURE new ($ $)) (SIGNATURE resetNew ((Void))) (SIGNATURE coerce ($ (String))) (SIGNATURE name ($ $)) (SIGNATURE scripted? ((Boolean) $)) (SIGNATURE scripts ((Record (: sub (List (OutputForm))) (: sup (List (OutputForm))) (: presup (List (OutputForm))) (: presub (List (OutputForm))) (: args (List (OutputForm)))) $)) (SIGNATURE script ($ $ (List (List (OutputForm))))) (SIGNATURE script ($ $ (Record (: sub (List (OutputForm))) (: sup (List (OutputForm))) (: presup (List (OutputForm))) (: presub (List (OutputForm))) (: args (List (OutputForm)))))) (SIGNATURE subscript ($ $ (List (OutputForm)))) (SIGNATURE superscript ($ $ (List (OutputForm)))) (SIGNATURE argscript ($ $ (List (OutputForm)))) (SIGNATURE elt ($ $ (List (OutputForm)))) (SIGNATURE string ((String) $)) (SIGNATURE list ((List $) $)) (SIGNATURE sample ($) constant))
      [2] charpol: :(PositiveInteger) -- should replace by pretend
      [3] eigenvalues:  lrat has no value
      [4] eigenvalues:  lsym has no value
      [5] intAlgEig: not known that (Ring) is of mode (CATEGORY package (SIGNATURE characteristicPolynomial ((Polynomial R) (Matrix (Fraction (Polynomial R))) (Symbol))) (SIGNATURE characteristicPolynomial ((Polynomial R) (Matrix (Fraction (Polynomial R))))) (SIGNATURE eigenvalues ((List (Union (Fraction (Polynomial R)) (SuchThat (Symbol) (Polynomial R)))) (Matrix (Fraction (Polynomial R))))) (SIGNATURE eigenvector ((List (Matrix (Fraction (Polynomial R)))) (Union (Fraction (Polynomial R)) (SuchThat (Symbol) (Polynomial R))) (Matrix (Fraction (Polynomial R))))) (SIGNATURE generalizedEigenvector ((List (Matrix (Fraction (Polynomial R)))) (Union (Fraction (Polynomial R)) (SuchThat (Symbol) (Polynomial R))) (Matrix (Fraction (Polynomial R))) (NonNegativeInteger) (NonNegativeInteger))) (SIGNATURE generalizedEigenvector ((List (Matrix (Fraction (Polynomial R)))) (Record (: eigval (Union (Fraction (Polynomial R)) (SuchThat (Symbol) (Polynomial R)))) (: eigmult (NonNegativeInteger)) (: eigvec (List (Matrix (Fraction (Polynomial R)))))) (Matrix (Fraction (Polynomial R))))) (SIGNATURE generalizedEigenvectors ((List (Record (: eigval (Union (Fraction (Polynomial R)) (SuchThat (Symbol) (Polynomial R)))) (: geneigvec (List (Matrix (Fraction (Polynomial R))))))) (Matrix (Fraction (Polynomial R))))) (SIGNATURE eigenvectors ((List (Record (: eigval (Union (Fraction (Polynomial R)) (SuchThat (Symbol) (Polynomial R)))) (: eigmult (NonNegativeInteger)) (: eigvec (List (Matrix (Fraction (Polynomial R))))))) (Matrix (Fraction (Polynomial R))))))
      [6] eigenvectors:  ratSol has no value
      [7] eigenvectors:  algSol has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20296: E04AGNT}
\begin{verbatim}

>compiling E04AGNT.spad to E04AGNT.nrlib
 
   Warnings: 
      [1] optAttributes:  noa has no value
      [2] optAttributes:  lsa has no value
      [3] optAttributes:  s has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20295: FEXPR}
\begin{verbatim}

>compiling FEXPR.spad to FEXPR.nrlib
 
   Warnings: 
      [1] checkSymbols:  IN has no value
      [2] checkForNagOperators:  X01AAF has no value
      [3] pi:  X01AAF has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20294: FFCAT}
\begin{verbatim}

>compiling FFCAT.spad to FFCAT.nrlib
 
   Warnings: 
      [1] rationalPoint?: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE rationalPoints ((List (List F)))) (SIGNATURE nonSingularModel ((List (Polynomial F)) (Symbol))) (SIGNATURE algSplitSimple ((Record (: num S) (: den UP) (: derivden UP) (: gd UP)) S (Mapping UP UP))) (SIGNATURE hyperelliptic ((Union UP failed))) (SIGNATURE elliptic ((Union UP failed))) (SIGNATURE elt (F S F F)) (SIGNATURE primitivePart (S S)) (SIGNATURE represents (S (Vector UP) UP)) (SIGNATURE differentiate (S S (Mapping UP UP))) (SIGNATURE integral? ((Boolean) S UP)) (SIGNATURE integral? ((Boolean) S F)) (SIGNATURE yCoordinates ((Record (: num (Vector UP)) (: den UP)) S)) (SIGNATURE reduceBasisAtInfinity ((Vector S) (Vector S))) (SIGNATURE normalizeAtInfinity ((Vector S) (Vector S))) (SIGNATURE complementaryBasis ((Vector S) (Vector S))) (SIGNATURE integral? ((Boolean) S)) (SIGNATURE integralAtInfinity? ((Boolean) S)) (SIGNATURE rationalPoint? ((Boolean) F F)) (SIGNATURE absolutelyIrreducible? ((Boolean))) (SIGNATURE genus ((NonNegativeInteger))) (SIGNATURE numberOfComponents ((NonNegativeInteger))) (SIGNATURE differentiate (S S (Mapping (Fraction UP) (Fraction UP)))) (SIGNATURE differentiate (S S (Mapping (Fraction UP) (Fraction UP)) (NonNegativeInteger))) (SIGNATURE represents (S (Vector (Fraction UP)))) (SIGNATURE represents (S (Vector (Fraction UP)) (Vector S))))
      [2] UP2P:  s has no value
      [3] UPUP2P:  s has no value
      [4] nonSingularModel:  s has no value
      [5] primitivePart:  STEP has no value
      [6] primitivePart:  i has no value
      [7] integralAtInfinity?:  s has no value
      [8] repOrder:  nostart has no value
      [9] kmin:  nostart has no value
      [10] kmin:  k has no value
      [11] integral?:  den has no value
      [12] differentiate:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20293: FFCGP}
\begin{verbatim}

>compiling FFCGP.spad to FFCGP.nrlib
 
   Warnings: 
      [1] pretend(NonNegativeInteger) -- should replace by @
      [2] +: pretend(SingleInteger) -- should replace by @
      [3] +: pretendRep -- should replace by @
      [4] retractIfCan: pretendRep -- should replace by @
      [5] inGroundField?: pretendRep -- should replace by @
      [6] -: pretendRep -- should replace by @
      [7] extensionDegree: signature of lhs not unique: (PositiveInteger) chosen
      [8] unknown Functor code (error field too large for this representation)
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20292: FFNBP}
\begin{verbatim}

>compiling FFNBP.spad to FFNBP.nrlib
 
   Warnings: 
      [1] degree: signature of lhs not unique: (PositiveInteger)$ chosen
      [2] coerce:  l has no value
      [3] initializeLog:  n has no value
      [4] extensionDegree: signature of lhs not unique: (PositiveInteger) chosen
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20291: FFP}
\begin{verbatim}

>compiling FFP.spad to FFP.nrlib
 
   Warnings: 
      [1] degree: signature of lhs not unique: (PositiveInteger)$ chosen
      [2] tableForDiscreteLogarithm: pretend(Table (PositiveInteger) (NonNegativeInteger)) -- should replace by @
      [3] initializeLog:  n has no value
      [4] extensionDegree: signature of lhs not unique: (PositiveInteger) chosen
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20290: FLOAT}
\begin{verbatim}

>compiling FLOAT.spad to FLOAT.nrlib

   Warnings: 
      [1] OMwrite: pretend(String) -- should replace by @
      [2] cos:  s has no value
      [3] exp:  e1 has no value
      [4] exp1:  E has no value
      [5] normalize:  e has no value
      [6] power:  y has no value
      [7] power10:  y has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20289: FPARFRAC}
\begin{verbatim}

>compiling FPARFRAC.spad to FPARFRAC.nrlib
 
   Warnings: 
      [1] UP2SUP:  z1 has no value
      [2] fullPartialFraction: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE + ($ UP $)) (SIGNATURE fullPartialFraction ($ (Fraction UP))) (SIGNATURE polyPart (UP $)) (SIGNATURE fracPart ((List (Record (: exponent (NonNegativeInteger)) (: center UP) (: num UP))) $)) (SIGNATURE construct ($ (List (Record (: exponent (NonNegativeInteger)) (: center UP) (: num UP))))) (SIGNATURE differentiate ($ $)) (SIGNATURE D ($ $)) (SIGNATURE differentiate ($ $ (NonNegativeInteger))) (SIGNATURE D ($ $ (NonNegativeInteger))))
      [3] fullParFrac:  ans has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20288: FR}
\begin{verbatim}

>compiling FR.spad to FR.nrlib
 
   Warnings: 
      [1] zero?:  fctr has no value
      [2] eval:  IN has no value
      [3] eval:  e has no value
      [4] convert:  fctr has no value
      [5] convert:  xpnt has no value
      [6] exquo:  associate has no value
      [7] exquo:  goodQuotient has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20287: FRNAALG}
\begin{verbatim}

>compiling FRNAALG.spad to FRNAALG.nrlib
 
   Warnings: 
      [1] leftRankPolynomial:  xx has no value
      [2] rightRankPolynomial:  xx has no value
      [3] coordinates: signature of lhs not unique: (Matrix R)(Vector S) chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20286: FS}
\begin{verbatim}

>compiling FS.spad to FS.nrlib
 
   Warnings: 
      [1] coerce: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (Integer) S)) (SIGNATURE * (S S S)) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE coerce (S (Integer))) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE convert ((InputForm) S)) (SIGNATURE retract ((Polynomial R) S)) (SIGNATURE retractIfCan ((Union (Polynomial R) failed) S)) (SIGNATURE coerce (S (Polynomial R))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE * (S S R)) (SIGNATURE * (S R S)) (SIGNATURE coerce (S S)) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE retract ((Fraction (Polynomial R)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Polynomial R)) failed) S)) (SIGNATURE coerce (S (Fraction (Polynomial R)))) (SIGNATURE univariate ((Fraction (SparseUnivariatePolynomial S)) S (Kernel S))) (SIGNATURE coerce (S (Fraction (Polynomial (Fraction R))))) (SIGNATURE coerce (S (Polynomial (Fraction R)))) (SIGNATURE coerce (S (Fraction R))) (SIGNATURE denominator (S S)) (SIGNATURE convert (S (Factored S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S S)))) (SIGNATURE isPower ((Union (Record (: val S) (: exponent (Integer))) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (Symbol))) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (BasicOperator))) (SIGNATURE numerator (S S)) (SIGNATURE coerce (S (SparseMultivariatePolynomial R (Kernel S)))) (SIGNATURE isMult ((Union (Record (: coef (Integer)) (: var (Kernel S))) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE eval (S S (List (BasicOperator)) (List S) (Symbol))) (SIGNATURE eval (S S (BasicOperator) S (Symbol))) (SIGNATURE eval (S S)) (SIGNATURE eval (S S (List (Symbol)))) (SIGNATURE eval (S S (Symbol))) (SIGNATURE applyQuote (S (Symbol) (List S))) (SIGNATURE applyQuote (S (Symbol) S S S S)) (SIGNATURE applyQuote (S (Symbol) S S S)) (SIGNATURE applyQuote (S (Symbol) S S)) (SIGNATURE applyQuote (S (Symbol) S)) (SIGNATURE variables ((List (Symbol)) S)) (SIGNATURE ground (R S)) (SIGNATURE ground? ((Boolean) S)) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE retract ((Symbol) S)) (SIGNATURE retractIfCan ((Union (Symbol) failed) S)) (SIGNATURE coerce (S (Symbol))) (SIGNATURE eval (S S (BasicOperator) (Mapping S S))) (SIGNATURE eval (S S (BasicOperator) (Mapping S (List S)))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S S)))) (SIGNATURE eval (S S (Symbol) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S S)))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE kernels ((List (Kernel S)) S)) (SIGNATURE mainKernel ((Union (Kernel S) failed) S)) (SIGNATURE subst (S S (List (Kernel S)) (List S))) (SIGNATURE subst (S S (List (Equation S)))) (SIGNATURE subst (S S (Equation S))) (SIGNATURE elt (S (BasicOperator) (List S))) (SIGNATURE elt (S (BasicOperator) S S S S)) (SIGNATURE elt (S (BasicOperator) S S S)) (SIGNATURE elt (S (BasicOperator) S S)) (SIGNATURE elt (S (BasicOperator) S)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE eval (S S (List (Kernel S)) (List S))) (SIGNATURE eval (S S (Kernel S) S)) (SIGNATURE retract ((Kernel S) S)) (SIGNATURE retractIfCan ((Union (Kernel S) failed) S)) (SIGNATURE coerce (S (Kernel S))) (SIGNATURE coerce ((OutputForm) S)))
      [2] subs:  IN has no value
      [3] subs:  x has no value
      [4] variables: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (Integer) S)) (SIGNATURE * (S S S)) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE coerce (S (Integer))) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE convert ((InputForm) S)) (SIGNATURE retract ((Polynomial R) S)) (SIGNATURE retractIfCan ((Union (Polynomial R) failed) S)) (SIGNATURE coerce (S (Polynomial R))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE * (S S R)) (SIGNATURE * (S R S)) (SIGNATURE coerce (S S)) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE retract ((Fraction (Polynomial R)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Polynomial R)) failed) S)) (SIGNATURE coerce (S (Fraction (Polynomial R)))) (SIGNATURE univariate ((Fraction (SparseUnivariatePolynomial S)) S (Kernel S))) (SIGNATURE coerce (S (Fraction (Polynomial (Fraction R))))) (SIGNATURE coerce (S (Polynomial (Fraction R)))) (SIGNATURE coerce (S (Fraction R))) (SIGNATURE denominator (S S)) (SIGNATURE convert (S (Factored S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S S)))) (SIGNATURE isPower ((Union (Record (: val S) (: exponent (Integer))) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (Symbol))) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (BasicOperator))) (SIGNATURE numerator (S S)) (SIGNATURE coerce (S (SparseMultivariatePolynomial R (Kernel S)))) (SIGNATURE isMult ((Union (Record (: coef (Integer)) (: var (Kernel S))) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE eval (S S (List (BasicOperator)) (List S) (Symbol))) (SIGNATURE eval (S S (BasicOperator) S (Symbol))) (SIGNATURE eval (S S)) (SIGNATURE eval (S S (List (Symbol)))) (SIGNATURE eval (S S (Symbol))) (SIGNATURE applyQuote (S (Symbol) (List S))) (SIGNATURE applyQuote (S (Symbol) S S S S)) (SIGNATURE applyQuote (S (Symbol) S S S)) (SIGNATURE applyQuote (S (Symbol) S S)) (SIGNATURE applyQuote (S (Symbol) S)) (SIGNATURE variables ((List (Symbol)) S)) (SIGNATURE ground (R S)) (SIGNATURE ground? ((Boolean) S)) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE retract ((Symbol) S)) (SIGNATURE retractIfCan ((Union (Symbol) failed) S)) (SIGNATURE coerce (S (Symbol))) (SIGNATURE eval (S S (BasicOperator) (Mapping S S))) (SIGNATURE eval (S S (BasicOperator) (Mapping S (List S)))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S S)))) (SIGNATURE eval (S S (Symbol) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S S)))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE kernels ((List (Kernel S)) S)) (SIGNATURE mainKernel ((Union (Kernel S) failed) S)) (SIGNATURE subst (S S (List (Kernel S)) (List S))) (SIGNATURE subst (S S (List (Equation S)))) (SIGNATURE subst (S S (Equation S))) (SIGNATURE elt (S (BasicOperator) (List S))) (SIGNATURE elt (S (BasicOperator) S S S S)) (SIGNATURE elt (S (BasicOperator) S S S)) (SIGNATURE elt (S (BasicOperator) S S)) (SIGNATURE elt (S (BasicOperator) S)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE eval (S S (List (Kernel S)) (List S))) (SIGNATURE eval (S S (Kernel S) S)) (SIGNATURE retract ((Kernel S) S)) (SIGNATURE retractIfCan ((Union (Kernel S) failed) S)) (SIGNATURE coerce (S (Kernel S))) (SIGNATURE coerce ((OutputForm) S)))
      [5] eval:  y has no value
      [6] eval:  IN has no value
      [7] eval:  f has no value
      [8] smprep:  IN has no value
      [9] smprep:  a has no value
      [10] smprep:  y has no value
      [11] smprep: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (Integer) S)) (SIGNATURE * (S S S)) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE coerce (S (Integer))) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE convert ((InputForm) S)) (SIGNATURE retract ((Polynomial R) S)) (SIGNATURE retractIfCan ((Union (Polynomial R) failed) S)) (SIGNATURE coerce (S (Polynomial R))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE * (S S R)) (SIGNATURE * (S R S)) (SIGNATURE coerce (S S)) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE retract ((Fraction (Polynomial R)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Polynomial R)) failed) S)) (SIGNATURE coerce (S (Fraction (Polynomial R)))) (SIGNATURE univariate ((Fraction (SparseUnivariatePolynomial S)) S (Kernel S))) (SIGNATURE coerce (S (Fraction (Polynomial (Fraction R))))) (SIGNATURE coerce (S (Polynomial (Fraction R)))) (SIGNATURE coerce (S (Fraction R))) (SIGNATURE denominator (S S)) (SIGNATURE convert (S (Factored S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S S)))) (SIGNATURE isPower ((Union (Record (: val S) (: exponent (Integer))) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (Symbol))) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (BasicOperator))) (SIGNATURE numerator (S S)) (SIGNATURE coerce (S (SparseMultivariatePolynomial R (Kernel S)))) (SIGNATURE isMult ((Union (Record (: coef (Integer)) (: var (Kernel S))) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE eval (S S (List (BasicOperator)) (List S) (Symbol))) (SIGNATURE eval (S S (BasicOperator) S (Symbol))) (SIGNATURE eval (S S)) (SIGNATURE eval (S S (List (Symbol)))) (SIGNATURE eval (S S (Symbol))) (SIGNATURE applyQuote (S (Symbol) (List S))) (SIGNATURE applyQuote (S (Symbol) S S S S)) (SIGNATURE applyQuote (S (Symbol) S S S)) (SIGNATURE applyQuote (S (Symbol) S S)) (SIGNATURE applyQuote (S (Symbol) S)) (SIGNATURE variables ((List (Symbol)) S)) (SIGNATURE ground (R S)) (SIGNATURE ground? ((Boolean) S)) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE retract ((Symbol) S)) (SIGNATURE retractIfCan ((Union (Symbol) failed) S)) (SIGNATURE coerce (S (Symbol))) (SIGNATURE eval (S S (BasicOperator) (Mapping S S))) (SIGNATURE eval (S S (BasicOperator) (Mapping S (List S)))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S S)))) (SIGNATURE eval (S S (Symbol) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S S)))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE kernels ((List (Kernel S)) S)) (SIGNATURE mainKernel ((Union (Kernel S) failed) S)) (SIGNATURE subst (S S (List (Kernel S)) (List S))) (SIGNATURE subst (S S (List (Equation S)))) (SIGNATURE subst (S S (Equation S))) (SIGNATURE elt (S (BasicOperator) (List S))) (SIGNATURE elt (S (BasicOperator) S S S S)) (SIGNATURE elt (S (BasicOperator) S S S)) (SIGNATURE elt (S (BasicOperator) S S)) (SIGNATURE elt (S (BasicOperator) S)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE eval (S S (List (Kernel S)) (List S))) (SIGNATURE eval (S S (Kernel S) S)) (SIGNATURE retract ((Kernel S) S)) (SIGNATURE retractIfCan ((Union (Kernel S) failed) S)) (SIGNATURE coerce (S (Kernel S))) (SIGNATURE coerce ((OutputForm) S)))
      [12] diffdiff0:  ans has no value
      [13] diffEval:  k has no value
      [14] opderiv:  x has no value
      [15] opderiv:  y has no value
      [16] smpderiv:  s has no value
      [17] coerce:  s has no value
      [18] coerce:  r has no value
      [19] smp2O:  x has no value
      [20] smpsubst:  x has no value
      [21] smpsubst:  s has no value
      [22] smpsubst:  z has no value
      [23] smpsubst:  y has no value
      [24] smpeval:  x has no value
      [25] smpeval:  s has no value
      [26] smpeval:  z has no value
      [27] smpeval:  y has no value
      [28] smpunq:  x has no value
      [29] smpunq:  y has no value
      [30] smpret:  x has no value
      [31] smpret:  y has no value
      [32] univariate: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (Integer) S)) (SIGNATURE * (S S S)) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE coerce (S (Integer))) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE convert ((InputForm) S)) (SIGNATURE retract ((Polynomial R) S)) (SIGNATURE retractIfCan ((Union (Polynomial R) failed) S)) (SIGNATURE coerce (S (Polynomial R))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE * (S S R)) (SIGNATURE * (S R S)) (SIGNATURE coerce (S S)) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE retract ((Fraction (Polynomial R)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Polynomial R)) failed) S)) (SIGNATURE coerce (S (Fraction (Polynomial R)))) (SIGNATURE univariate ((Fraction (SparseUnivariatePolynomial S)) S (Kernel S))) (SIGNATURE coerce (S (Fraction (Polynomial (Fraction R))))) (SIGNATURE coerce (S (Polynomial (Fraction R)))) (SIGNATURE coerce (S (Fraction R))) (SIGNATURE denominator (S S)) (SIGNATURE convert (S (Factored S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S S)))) (SIGNATURE isPower ((Union (Record (: val S) (: exponent (Integer))) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (Symbol))) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (BasicOperator))) (SIGNATURE numerator (S S)) (SIGNATURE coerce (S (SparseMultivariatePolynomial R (Kernel S)))) (SIGNATURE isMult ((Union (Record (: coef (Integer)) (: var (Kernel S))) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE eval (S S (List (BasicOperator)) (List S) (Symbol))) (SIGNATURE eval (S S (BasicOperator) S (Symbol))) (SIGNATURE eval (S S)) (SIGNATURE eval (S S (List (Symbol)))) (SIGNATURE eval (S S (Symbol))) (SIGNATURE applyQuote (S (Symbol) (List S))) (SIGNATURE applyQuote (S (Symbol) S S S S)) (SIGNATURE applyQuote (S (Symbol) S S S)) (SIGNATURE applyQuote (S (Symbol) S S)) (SIGNATURE applyQuote (S (Symbol) S)) (SIGNATURE variables ((List (Symbol)) S)) (SIGNATURE ground (R S)) (SIGNATURE ground? ((Boolean) S)) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE retract ((Symbol) S)) (SIGNATURE retractIfCan ((Union (Symbol) failed) S)) (SIGNATURE coerce (S (Symbol))) (SIGNATURE eval (S S (BasicOperator) (Mapping S S))) (SIGNATURE eval (S S (BasicOperator) (Mapping S (List S)))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S S)))) (SIGNATURE eval (S S (Symbol) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S S)))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE kernels ((List (Kernel S)) S)) (SIGNATURE mainKernel ((Union (Kernel S) failed) S)) (SIGNATURE subst (S S (List (Kernel S)) (List S))) (SIGNATURE subst (S S (List (Equation S)))) (SIGNATURE subst (S S (Equation S))) (SIGNATURE elt (S (BasicOperator) (List S))) (SIGNATURE elt (S (BasicOperator) S S S S)) (SIGNATURE elt (S (BasicOperator) S S S)) (SIGNATURE elt (S (BasicOperator) S S)) (SIGNATURE elt (S (BasicOperator) S)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE eval (S S (List (Kernel S)) (List S))) (SIGNATURE eval (S S (Kernel S) S)) (SIGNATURE retract ((Kernel S) S)) (SIGNATURE retractIfCan ((Union (Kernel S) failed) S)) (SIGNATURE coerce (S (Kernel S))) (SIGNATURE coerce ((OutputForm) S)))
      [33] convert: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (Integer) S)) (SIGNATURE * (S S S)) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE coerce (S (Integer))) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE convert ((InputForm) S)) (SIGNATURE retract ((Polynomial R) S)) (SIGNATURE retractIfCan ((Union (Polynomial R) failed) S)) (SIGNATURE coerce (S (Polynomial R))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE * (S S R)) (SIGNATURE * (S R S)) (SIGNATURE coerce (S S)) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE retract ((Fraction (Polynomial R)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Polynomial R)) failed) S)) (SIGNATURE coerce (S (Fraction (Polynomial R)))) (SIGNATURE univariate ((Fraction (SparseUnivariatePolynomial S)) S (Kernel S))) (SIGNATURE coerce (S (Fraction (Polynomial (Fraction R))))) (SIGNATURE coerce (S (Polynomial (Fraction R)))) (SIGNATURE coerce (S (Fraction R))) (SIGNATURE denominator (S S)) (SIGNATURE convert (S (Factored S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S S)))) (SIGNATURE isPower ((Union (Record (: val S) (: exponent (Integer))) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (Symbol))) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (BasicOperator))) (SIGNATURE numerator (S S)) (SIGNATURE coerce (S (SparseMultivariatePolynomial R (Kernel S)))) (SIGNATURE isMult ((Union (Record (: coef (Integer)) (: var (Kernel S))) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE eval (S S (List (BasicOperator)) (List S) (Symbol))) (SIGNATURE eval (S S (BasicOperator) S (Symbol))) (SIGNATURE eval (S S)) (SIGNATURE eval (S S (List (Symbol)))) (SIGNATURE eval (S S (Symbol))) (SIGNATURE applyQuote (S (Symbol) (List S))) (SIGNATURE applyQuote (S (Symbol) S S S S)) (SIGNATURE applyQuote (S (Symbol) S S S)) (SIGNATURE applyQuote (S (Symbol) S S)) (SIGNATURE applyQuote (S (Symbol) S)) (SIGNATURE variables ((List (Symbol)) S)) (SIGNATURE ground (R S)) (SIGNATURE ground? ((Boolean) S)) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE retract ((Symbol) S)) (SIGNATURE retractIfCan ((Union (Symbol) failed) S)) (SIGNATURE coerce (S (Symbol))) (SIGNATURE eval (S S (BasicOperator) (Mapping S S))) (SIGNATURE eval (S S (BasicOperator) (Mapping S (List S)))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S S)))) (SIGNATURE eval (S S (Symbol) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S S)))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE kernels ((List (Kernel S)) S)) (SIGNATURE mainKernel ((Union (Kernel S) failed) S)) (SIGNATURE subst (S S (List (Kernel S)) (List S))) (SIGNATURE subst (S S (List (Equation S)))) (SIGNATURE subst (S S (Equation S))) (SIGNATURE elt (S (BasicOperator) (List S))) (SIGNATURE elt (S (BasicOperator) S S S S)) (SIGNATURE elt (S (BasicOperator) S S S)) (SIGNATURE elt (S (BasicOperator) S S)) (SIGNATURE elt (S (BasicOperator) S)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE eval (S S (List (Kernel S)) (List S))) (SIGNATURE eval (S S (Kernel S) S)) (SIGNATURE retract ((Kernel S) S)) (SIGNATURE retractIfCan ((Union (Kernel S) failed) S)) (SIGNATURE coerce (S (Kernel S))) (SIGNATURE coerce ((OutputForm) S)))
      [34] coerce:  x has no value
      [35] coerce:  y has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20285: FST}
\begin{verbatim}

>compiling FST.spad to FST.nrlib
 
   Warnings: 
      [1] coerce:  REAL has no value
      [2] coerce:  INTEGER has no value
      [3] coerce:  COMPLEX has no value
      [4] coerce:  CHARACTER has no value
      [5] coerce:  LOGICAL has no value
      [6] coerce:  real has no value
      [7] coerce:  integer has no value
      [8] coerce:  complex has no value
      [9] coerce:  character has no value
      [10] coerce:  logical has no value
      [11] coerce:  upperDoubleCOmplexSymbol has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20284: GDMP}
\begin{verbatim}

>compiling GDMP.spad to GDMP.nrlib
 
   Warnings: 
      [1] zero?: :Rep -- should replace by pretend
      [2] listCoef: :Rep -- should replace by pretend
      [3] numberOfMonomials: :Rep -- should replace by pretend
      [4] monomial?: :Rep -- should replace by pretend
      [5] maxNorm:  m has no value
      [6] variables: :(PositiveInteger) -- should replace by pretend
      [7] reorder:  z2 has no value
      [8] reorder:  z1 has no value
      [9] univariate:  deg has no value
      [10] evalSortedVarlist:  x has no value
      [11] eval:  y has no value
      [12] eval:  x has no value
      [13] coerce:  l has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20283: HACKPI}
\begin{verbatim}

>compiling HACKPI.spad to HACKPI.nrlib
 
   Warnings: 
      [1] pi: pretend$ -- should replace by @
      [2] p2sf:  x has no value
      [3] p2f:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20282: IDEAL}
\begin{verbatim}

>compiling IDEAL.spad to IDEAL.nrlib
 
   Warnings: 
      [1] not known that (OrderedAbelianMonoidSup) is of mode (CATEGORY domain (IF (has (NonNegativeInteger) (Finite)) (IF (has Expon (Finite)) (ATTRIBUTE (Finite)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Monoid)) (IF (has Expon (Monoid)) (ATTRIBUTE (Monoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianMonoid)) (IF (has Expon (AbelianMonoid)) (ATTRIBUTE (AbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (CancellationAbelianMonoid)) (IF (has Expon (CancellationAbelianMonoid)) (ATTRIBUTE (CancellationAbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Group)) (IF (has Expon (Group)) (ATTRIBUTE (Group)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianGroup)) (IF (has Expon (AbelianGroup)) (ATTRIBUTE (AbelianGroup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedAbelianMonoidSup)) (IF (has Expon (OrderedAbelianMonoidSup)) (ATTRIBUTE (OrderedAbelianMonoidSup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedSet)) (IF (has Expon (OrderedSet)) (ATTRIBUTE (OrderedSet)) noBranch) noBranch) (SIGNATURE makeprod ($ (NonNegativeInteger) Expon)) (SIGNATURE selectfirst ((NonNegativeInteger) $)) (SIGNATURE selectsecond (Expon $)))
      [2] leadterm: not known that (Ring) is of mode (CATEGORY package (SIGNATURE * ($ $ $)) (SIGNATURE ** ($ $ (NonNegativeInteger))) (SIGNATURE + ($ $ $)) (SIGNATURE one? ((Boolean) $)) (SIGNATURE zero? ((Boolean) $)) (SIGNATURE element? ((Boolean) DPoly $)) (SIGNATURE in? ((Boolean) $ $)) (SIGNATURE inRadical? ((Boolean) DPoly $)) (SIGNATURE zeroDim? ((Boolean) $ (List VarSet))) (SIGNATURE zeroDim? ((Boolean) $)) (SIGNATURE intersect ($ $ $)) (SIGNATURE intersect ($ (List $))) (SIGNATURE quotient ($ $ $)) (SIGNATURE quotient ($ $ DPoly)) (SIGNATURE groebner ($ $)) (SIGNATURE generalPosition ((Record (: mval (Matrix F)) (: invmval (Matrix F)) (: genIdeal $)) $ (List VarSet))) (SIGNATURE backOldPos ($ (Record (: mval (Matrix F)) (: invmval (Matrix F)) (: genIdeal $)))) (SIGNATURE dimension ((Integer) $ (List VarSet))) (SIGNATURE dimension ((Integer) $)) (SIGNATURE leadingIdeal ($ $)) (SIGNATURE ideal ($ (List DPoly))) (SIGNATURE groebnerIdeal ($ (List DPoly))) (SIGNATURE groebner? ((Boolean) $)) (SIGNATURE generators ((List DPoly) $)) (SIGNATURE coerce ($ (List DPoly))) (SIGNATURE saturate ($ $ DPoly)) (SIGNATURE saturate ($ $ DPoly (List VarSet))) (IF (has VarSet (ConvertibleTo (Symbol))) (SIGNATURE relationsIdeal ((SuchThat (List (Polynomial F)) (List (Equation (Polynomial F)))) (List DPoly))) noBranch))
      [3] contractGrob: not known that (PolynomialCategory F newExpon VarSet) is of mode (CATEGORY domain (IF (has F (IntegralDomain)) (IF (has newExpon (CancellationAbelianMonoid)) (SIGNATURE fmecg ($ $ newExpon F $)) noBranch) noBranch) (IF (has F (ATTRIBUTE canonicalUnitNormal)) (ATTRIBUTE canonicalUnitNormal) noBranch))
      [4] monomDim:  b has no value
      [5] monomDim:  a has no value
      [6] monomDim:  monvar has no value
      [7] **: :(NonNegativeInteger) -- should replace by pretend
      [8] relationsIdeal: not known that (OrderedAbelianMonoid) is of mode (CATEGORY domain (IF (has Expon (Finite)) (IF (has DirP (Finite)) (ATTRIBUTE (Finite)) noBranch) noBranch) (IF (has Expon (Monoid)) (IF (has DirP (Monoid)) (ATTRIBUTE (Monoid)) noBranch) noBranch) (IF (has Expon (AbelianMonoid)) (IF (has DirP (AbelianMonoid)) (ATTRIBUTE (AbelianMonoid)) noBranch) noBranch) (IF (has Expon (CancellationAbelianMonoid)) (IF (has DirP (CancellationAbelianMonoid)) (ATTRIBUTE (CancellationAbelianMonoid)) noBranch) noBranch) (IF (has Expon (Group)) (IF (has DirP (Group)) (ATTRIBUTE (Group)) noBranch) noBranch) (IF (has Expon (AbelianGroup)) (IF (has DirP (AbelianGroup)) (ATTRIBUTE (AbelianGroup)) noBranch) noBranch) (IF (has Expon (OrderedAbelianMonoidSup)) (IF (has DirP (OrderedAbelianMonoidSup)) (ATTRIBUTE (OrderedAbelianMonoidSup)) noBranch) noBranch) (IF (has Expon (OrderedSet)) (IF (has DirP (OrderedSet)) (ATTRIBUTE (OrderedSet)) noBranch) noBranch) (SIGNATURE makeprod ($ Expon DirP)) (SIGNATURE selectfirst (Expon $)) (SIGNATURE selectsecond (DirP $)))
      [9] relationsIdeal: not known that (OrderedAbelianMonoidSup) is of mode (CATEGORY domain (IF (has Expon (Finite)) (IF (has DirP (Finite)) (ATTRIBUTE (Finite)) noBranch) noBranch) (IF (has Expon (Monoid)) (IF (has DirP (Monoid)) (ATTRIBUTE (Monoid)) noBranch) noBranch) (IF (has Expon (AbelianMonoid)) (IF (has DirP (AbelianMonoid)) (ATTRIBUTE (AbelianMonoid)) noBranch) noBranch) (IF (has Expon (CancellationAbelianMonoid)) (IF (has DirP (CancellationAbelianMonoid)) (ATTRIBUTE (CancellationAbelianMonoid)) noBranch) noBranch) (IF (has Expon (Group)) (IF (has DirP (Group)) (ATTRIBUTE (Group)) noBranch) noBranch) (IF (has Expon (AbelianGroup)) (IF (has DirP (AbelianGroup)) (ATTRIBUTE (AbelianGroup)) noBranch) noBranch) (IF (has Expon (OrderedAbelianMonoidSup)) (IF (has DirP (OrderedAbelianMonoidSup)) (ATTRIBUTE (OrderedAbelianMonoidSup)) noBranch) noBranch) (IF (has Expon (OrderedSet)) (IF (has DirP (OrderedSet)) (ATTRIBUTE (OrderedSet)) noBranch) noBranch) (SIGNATURE makeprod ($ Expon DirP)) (SIGNATURE selectfirst (Expon $)) (SIGNATURE selectsecond (DirP $)))
      [10] relationsIdeal: not known that (PolynomialCategory F nExponent VarSet1) is of mode (CATEGORY domain (IF (has F (IntegralDomain)) (IF (has nExponent (CancellationAbelianMonoid)) (SIGNATURE fmecg ($ $ nExponent F $)) noBranch) noBranch) (IF (has F (ATTRIBUTE canonicalUnitNormal)) (ATTRIBUTE canonicalUnitNormal) noBranch))
      [11] relationsIdeal: :(Vector (NonNegativeInteger)) -- should replace by pretend
      [12] relationsIdeal: The conditional modes (Polynomial F) and nPoly conflict
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20281: INFORM}
\begin{verbatim}

>compiling INFORM.spad to INFORM.nrlib

   Warnings: 
      [1] conv: pretend$ -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20280: IR}
\begin{verbatim}

>compiling IR.spad to IR.nrlib
 
   Warnings: 
      [1] nesimp:  IN has no value
      [2] nesimp:  ne has no value
      [3] *:  x1 has no value
      [4] *:  x2 has no value
      [5] differentiate:  x1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20279: ISUPS}
\begin{verbatim}

>compiling ISUPS.spad to ISUPS.nrlib
 
   Warnings: 
      [1] map:  y has no value
      [2] map:  z has no value
      [3] differentiate:  n has no value
      [4] differentiate:  y has no value
      [5] differentiate:  z has no value
      [6] multiplyCoefficients:  n has no value
      [7] multiplyCoefficients:  y has no value
      [8] multiplyCoefficients:  z has no value
      [9] multiplyExponents:  y has no value
      [10] multiplyExponents:  z has no value
      [11] iPlus1:  x1 has no value
      [12] iPlus1:  z has no value
      [13] iPlus2:  z has no value
      [14] +:  xi has no value
      [15] +:  yi has no value
      [16] -:  xi has no value
      [17] -:  yi has no value
      [18] -:  x has no value
      [19] -:  z has no value
      [20] *:  z has no value
      [21] productByTerm:  y has no value
      [22] productByTerm:  z has no value
      [23] iTimes:  a has no value
      [24] iTimes:  b has no value
      [25] iDivide:  a has no value
      [26] iDivide:  b has no value
      [27] iExquo:  y1 has no value
      [28] iExquo:  z has no value
      [29] taylorQuoByVar:  y has no value
      [30] taylorQuoByVar:  z has no value
      [31] compose0:  s has no value
      [32] compose0:  m has no value
      [33] compose0:  a has no value
      [34] compose0:  b has no value
      [35] integrate:  n has no value
      [36] integrate:  y has no value
      [37] integrate:  z has no value
      [38] cPower:  s has no value
      [39] iExp:  s has no value
      [40] iSincos:  s has no value
      [41] tan0:  a has no value
      [42] tan0:  b has no value
      [43] iTan:  s has no value
      [44] cSin:  %sin has no value
      [45] cCos:  %cos has no value
      [46] sinhcosh:  %sin has no value
      [47] sinhcosh:  %cos has no value
      [48] cSinh:  %sinh has no value
      [49] cCosh:  %cosh has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20278: LMDICT}
\begin{verbatim}

>compiling LMDICT.spad to LMDICT.nrlib
 
   Warnings: 
      [1] substitute:  z1 has no value
      [2] select!:  z has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20277: LODOOPS}
\begin{verbatim}

>compiling LODOOPS.spad to LODOOPS.nrlib
 
   Warnings: 
      [1] nonTrivial?:  x1 has no value
      [2] killer: not known that (Ring) is of mode (CATEGORY package (SIGNATURE symmetricProduct (L L L (Mapping A A))) (SIGNATURE symmetricPower (L L (NonNegativeInteger) (Mapping A A))) (SIGNATURE directSum (L L L (Mapping A A))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20276: MATRIX}
\begin{verbatim}

>compiling MATRIX.spad to MATRIX.nrlib
 
   Warnings: 
      [1] positivePower: pretend(Matrix R) -- should replace by @
      [2] determinant: not known that (CommutativeRing) is of mode (CATEGORY R (ATTRIBUTE (commutative *)))
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20275: MKFLCFN}
\begin{verbatim}

>compiling MKFLCFN.spad to MKFLCFN.nrlib
 
   Warnings: 
      [1] mkLisp: pretend(InputForm) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20274: MSET}
\begin{verbatim}

>compiling MSET.spad to MSET.nrlib
 
   Warnings: 
      [1] select!:  s1 has no value
      [2] intersect:  n has no value
      [3] difference:  n has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20273: M3D}
\begin{verbatim}

>compiling M3D.spad to M3D.nrlib
 
   Warnings: 
      [1] matrixConcat3D:  retVal has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20272: NAGC02}
\begin{verbatim}

>compiling NAGC02.spad to NAGC02.nrlib
 
   Warnings: 
      [1] c02aff: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] c02agf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20271: NAGC05}
\begin{verbatim}

>compiling NAGC05.spad to NAGC05.nrlib
 
   Warnings: 
      [1] c05adf:  fn has no value
      [2] c05adf:  fp has no value
      [3] c05adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] c05nbf:  fn has no value
      [5] c05nbf:  fp has no value
      [6] c05nbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] c05pbf:  fn has no value
      [8] c05pbf:  fp has no value
      [9] c05pbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20270: NAGC06}
\begin{verbatim}

>compiling NAGC06.spad to NAGC06.nrlib

   Warnings: 
      [1] c06eaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] c06ebf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] c06ecf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] c06ekf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] c06fpf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [6] c06fqf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] c06frf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [8] c06fuf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [9] c06gbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] c06gcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [11] c06gqf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [12] c06gsf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20269: NAGD01}
\begin{verbatim}

>compiling NAGD01.spad to NAGD01.nrlib
 
   Warnings: 
      [1] d01ajf:  fn has no value
      [2] d01ajf:  fp has no value
      [3] d01ajf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] d01akf:  fn has no value
      [5] d01akf:  fp has no value
      [6] d01akf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] d01alf:  fn has no value
      [8] d01alf:  fp has no value
      [9] d01alf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] d01amf:  fn has no value
      [11] d01amf:  fp has no value
      [12] d01amf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [13] d01anf:  fn has no value
      [14] d01anf:  fp has no value
      [15] d01anf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [16] d01apf:  fn has no value
      [17] d01apf:  fp has no value
      [18] d01apf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [19] d01aqf:  fn has no value
      [20] d01aqf:  fp has no value
      [21] d01aqf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [22] d01asf:  fn has no value
      [23] d01asf:  fp has no value
      [24] d01asf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [25] d01bbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [26] d01fcf:  fn has no value
      [27] d01fcf:  fp has no value
      [28] d01fcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [29] d01gaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [30] d01gbf:  fn has no value
      [31] d01gbf:  fp has no value
      [32] d01gbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20268: NAGD02}
\begin{verbatim}

>compiling NAGD02.spad to NAGD02.nrlib
 
   Warnings: 
      [1] d02bbf:  fn has no value
      [2] d02bbf:  fp has no value
      [3] d02bbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] d02bhf:  fn has no value
      [5] d02bhf:  fp has no value
      [6] d02bhf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] d02cjf:  fn has no value
      [8] d02cjf:  fp has no value
      [9] d02cjf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] d02ejf:  fn has no value
      [11] d02ejf:  fp has no value
      [12] d02ejf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [13] d02gaf:  fn has no value
      [14] d02gaf:  fp has no value
      [15] d02gaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [16] d02gbf:  fn has no value
      [17] d02gbf:  fp has no value
      [18] d02gbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [19] d02kef:  fn has no value
      [20] d02kef:  fp has no value
      [21] d02kef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [22] d02raf:  fn has no value
      [23] d02raf:  fp has no value
      [24] d02raf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20267: NAGD03}
\begin{verbatim}

>compiling NAGD03.spad to NAGD03.nrlib
 
   Warnings: 
      [1] d03edf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] d03eef:  fn has no value
      [3] d03eef:  fp has no value
      [4] d03eef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] d03faf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20266: NAGE01}
\begin{verbatim}

>compiling NAGE01.spad to NAGE01.nrlib
 
   Warnings: 
      [1] e01baf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] e01bef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] e01bff: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] e01bgf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] e01bhf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [6] e01daf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] e01saf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [8] e01sbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [9] e01sef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] e01sff: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20265: NAGE02}
\begin{verbatim}

>compiling NAGE02.spad to NAGE02.nrlib
 
   Warnings: 
      [1] e02adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] e02aef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] e02agf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] e02ahf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] e02ajf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [6] e02akf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] e02baf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [8] e02bbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [9] e02bcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] e02bdf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [11] e02bef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [12] e02daf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [13] e02dcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [14] e02ddf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [15] e02def: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [16] e02dff: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [17] e02gaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [18] e02zaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20264: NAGE04}
\begin{verbatim}

>compiling NAGE04.spad to NAGE04.nrlib
 
   Warnings: 
      [1] e04dgf:  fn has no value
      [2] e04dgf:  fp has no value
      [3] e04dgf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] e04fdf:  fn has no value
      [5] e04fdf:  fp has no value
      [6] e04fdf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] e04gcf:  fn has no value
      [8] e04gcf:  fp has no value
      [9] e04gcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] e04jaf:  fn has no value
      [11] e04jaf:  fp has no value
      [12] e04jaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [13] e04mbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [14] e04naf:  fn has no value
      [15] e04naf:  fp has no value
      [16] e04naf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [17] e04ucf:  fn has no value
      [18] e04ucf:  fp has no value
      [19] e04ucf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [20] e04ycf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20263: NAGF07}
\begin{verbatim}

>compiling NAGF07.spad to NAGF07.nrlib
 
   Warnings: 
      [1] f07adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] f07aef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] f07fdf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] f07fef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20262: NAGS}
\begin{verbatim}

>compiling NAGS.spad to NAGS.nrlib
 
   Warnings: 
      [1] s01eaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] s13aaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] s13acf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] s13adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] s14aaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [6] s14abf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] s14baf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [8] s15adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [9] s15aef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] s17acf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [11] s17adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [12] s17aef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [13] s17aff: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [14] s17agf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [15] s17ahf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [16] s17ajf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [17] s17akf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [18] s17dcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [19] s17def: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [20] s17dgf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [21] s17dhf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [22] s17dlf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [23] s18acf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [24] s18adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [25] s18aef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [26] s18aff: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [27] s18dcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [28] s18def: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [29] s19aaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [30] s19abf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [31] s19acf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [32] s19adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [33] s20acf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [34] s20adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [35] s21baf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [36] s21bbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [37] s21bcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [38] s21bdf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20261: NAGSP}
\begin{verbatim}

>compiling NAGSP.spad to NAGSP.nrlib
 
   Warnings: 
      [1] getUniqueId:  uniqueId has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20260: NSDPS}
\begin{verbatim}

>compiling NSDPS.spad to NSDPS.nrlib
 
   Warnings: 
      [1] removeZeroes:  c has no value
      [2] iDiv:  c has no value
      [3] iDiv:  k has no value
      [4] sbt:  k has no value
      [5] sbt:  c has no value
      [6] shift:  k has no value
      [7] shift:  c has no value
      [8] +:  k has no value
      [9] +:  c has no value
      [10] multC:  k has no value
      [11] multC:  c has no value
      [12] *:  k has no value
      [13] *:  c has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20259: NUMFMT}
\begin{verbatim}

>compiling NUMFMT.spad to NUMFMT.nrlib
 
   Warnings: 
      [1] check:  c1 has no value
      [2] check:  c2 has no value
      [3] ScanRoman:  nprens has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20258: ODERAT}
\begin{verbatim}

>compiling ODERAT.spad to ODERAT.nrlib
 
   Warnings: 
      [1] ratDsolve1: not known that (Ring) is of mode (CATEGORY package (SIGNATURE ratDsolve ((Record (: particular (Union (Fraction UP) failed)) (: basis (List (Fraction UP)))) (LinearOrdinaryDifferentialOperator1 (Fraction UP)) (Fraction UP))) (SIGNATURE ratDsolve ((Record (: basis (List (Fraction UP))) (: mat (Matrix F))) (LinearOrdinaryDifferentialOperator1 (Fraction UP)) (List (Fraction UP)))) (SIGNATURE ratDsolve ((Record (: particular (Union (Fraction UP) failed)) (: basis (List (Fraction UP)))) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (Fraction UP))) (SIGNATURE ratDsolve ((Record (: basis (List (Fraction UP))) (: mat (Matrix F))) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (List (Fraction UP)))) (SIGNATURE indicialEquationAtInfinity (UP (LinearOrdinaryDifferentialOperator1 (Fraction UP)))) (SIGNATURE indicialEquationAtInfinity (UP (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)))))
      [2] ratDsolve0:  b has no value
      [3] candidates:  l1 has no value
      [4] infMuLambda:  lamb has no value
      [5] infMuLambda:  lf has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20257: OMERRK}
\begin{verbatim}

>compiling OMERRK.spad to OMERRK.nrlib
 
   Warnings: 
      [1] OMParseError?:  parseError has no value
      [2] OMUnknownCD?:  unknownCD has no value
      [3] OMUnknownSymbol?:  unknownSymbol has no value
      [4] OMReadError?:  readError has no value
      [5] coerce:  OMParseError has no value
      [6] coerce:  OMUnknownCD has no value
      [7] coerce:  OMUnknownSymbol has no value
      [8] coerce:  OMReadError has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20256: OPTPACK}
\begin{verbatim}

>compiling OPTPACK.spad to OPTPACK.nrlib
 
   Warnings: 
      [1] constant:  noa has no value
      [2] measureSpecific:  noa has no value
      [3] measureSpecific:  lsa has no value
      [4] optimizeSpecific:  noa has no value
      [5] optimizeSpecific:  lsa has no value
      [6] goodnessOfFit:  lsa has no value
      [7] goodnessOfFit:  method has no value
      [8] goodnessOfFit:  nameOfRoutine has no value
      [9] goodnessOfFit:  w has no value
      [10] goodnessOfFit:  objf has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20255: OSI}
\begin{verbatim}

>compiling OSI.spad to OSI.nrlib
 
   Warnings: 
      [1] value: :Rep -- should replace by pretend
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20254: PACOFF}
\begin{verbatim}

>compiling PACOFF.spad to PACOFF.nrlib
 
   Warnings: 
      [1] repPolynomial: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [2] vectorise: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [3] localRandom:  recTower has no value
      [4] +:  recEl has no value
      [5] *:  recEl has no value
      [6] *:  recTower has no value
      [7] -: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [8] coerce: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [9] fullOutput: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [10] definingPolynomial: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [11] extDegree: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [12] previousTower: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [13] name: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [14] down: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20253: PACRAT}
\begin{verbatim}

>compiling PACRAT.spad to PACRAT.nrlib
 
   Warnings: 
      [1] down: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [2] lift: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [3] reduce: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [4] vectorise: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [5] +:  recEl has no value
      [6] *:  recEl has no value
      [7] *:  recTower has no value
      [8] inv: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [9] -: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [10] coerce: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [11] fullOutput: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [12] definingPolynomial: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [13] extDegree: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [14] previousTower: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [15] name: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20252: PATTERN}
\begin{verbatim}

>compiling PATTERN.spad to PATTERN.nrlib
 
   Warnings: 
      [1] quoted?:  sym has no value
      [2] generic?:  sym has no value
      [3] multiple?:  sym has no value
      [4] optional?:  sym has no value
      [5] =: pretend(Boolean) -- should replace by @
      [6] isOp:  ker has no value
      [7] variables:  exp has no value
      [8] variables:  qot has no value
      [9] variables:  ker has no value
      [10] PAT2O:  ret has no value
      [11] PAT2O:  sym has no value
      [12] PAT2O:  exp has no value
      [13] PAT2O:  qot has no value
      [14] PAT2O:  ker has no value
      [15] patcopy:  ret has no value
      [16] patcopy:  sym has no value
      [17] patcopy:  ker has no value
      [18] patcopy:  qot has no value
      [19] patcopy:  exp has no value
      [20] pateq?:  ret has no value
      [21] pateq?:  qot has no value
      [22] pateq?:  sym has no value
      [23] pateq?:  ker has no value
      [24] pateq?:  exp has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20251: PLCS}
\begin{verbatim}

>compiling PLCS.spad to PLCS.nrlib
 
   Warnings: 
      [1]  ActualSetOfPlacesName has no value
      [2] =: The conditional modes (String) and $ conflict
      [3] setFoundPlacesToEmpty:  ActualSetOfPlacesName has no value
      [4] create:  SIMPLE has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20250: PMKERNEL}
\begin{verbatim}

>compiling PMKERNEL.spad to PMKERNEL.nrlib
 
   Warnings: 
      [1] patternMatchArg: not known that (SetCategory) is of mode (CATEGORY package (SIGNATURE patternMatch ((PatternMatchResult S E) (Kernel E) (Pattern S) (PatternMatchResult S E))))
      [2] patternMatchInner: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE patternMatch ((PatternMatchResult S E) (Kernel E) (Pattern S) (PatternMatchResult S E))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20249: PRIMELT}
\begin{verbatim}

>compiling PRIMELT.spad to PRIMELT.nrlib
 
   Warnings: 
      [1] multi:  f1 has no value
      [2] incl?:  s1 has no value
      [3] triangularLinearIfCan: not known that (Ring) is of mode (CATEGORY package (SIGNATURE primitiveElement ((Record (: coef1 (Integer)) (: coef2 (Integer)) (: prim (SparseUnivariatePolynomial F))) (Polynomial F) (Symbol) (Polynomial F) (Symbol))) (SIGNATURE primitiveElement ((Record (: coef (List (Integer))) (: poly (List (SparseUnivariatePolynomial F))) (: prim (SparseUnivariatePolynomial F))) (List (Polynomial F)) (List (Symbol)))) (SIGNATURE primitiveElement ((Record (: coef (List (Integer))) (: poly (List (SparseUnivariatePolynomial F))) (: prim (SparseUnivariatePolynomial F))) (List (Polynomial F)) (List (Symbol)) (Symbol))))
      [4] triangularLinearIfCan:  z1 has no value
      [5] triangularLinearIfCan:  f1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20248: QALGSET2}
\begin{verbatim}

>compiling QALGSET2.spad to QALGSET2.nrlib
 
   Warnings: 
      [1] npoly:  z1 has no value
      [2] npoly:  z2 has no value
      [3] npoly: not known that (PolynomialCategory (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [4] oldpoly:  z1 has no value
      [5] oldpoly:  z2 has no value
      [6] radicalSimplify: not known that (PolynomialCategory (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [7] radicalSimplify:  gb has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20247: RECLOS}
\begin{verbatim}

>compiling RECLOS.spad to RECLOS.nrlib
 
   Warnings: 
      [1] *:  z has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20246: REP1}
\begin{verbatim}

>compiling REP1.spad to REP1.nrlib
 
   Warnings: 
      [1] antisymmetricTensors: not known that (Ring) is of mode (CATEGORY R (ATTRIBUTE (commutative *)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20245: RFFACT}
\begin{verbatim}

>compiling RFFACT.spad to RFFACT.nrlib
 
   Warnings: 
      [1] likuniv:  y has no value
      [2] likuniv: not known that (Ring) is of mode (CATEGORY package (SIGNATURE factor ((Factored UP) UP)))
      [3] factor:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20244: RPOLCAT}
\begin{verbatim}

>compiling RPOLCAT.spad to RPOLCAT.nrlib
 
   Warnings: 
      [1] mainCoefficients: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE coerce (S S)) (SIGNATURE gcd (S S S)) (SIGNATURE gcd (S (List S))) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE coerce ((Polynomial R) S)) (SIGNATURE convert ((Polynomial R) S)) (SIGNATURE convert ((String) S)) (SIGNATURE mainSquareFreePart (S S)) (SIGNATURE mainPrimitivePart (S S)) (SIGNATURE mainContent (S S)) (SIGNATURE primitivePart! (S S)) (SIGNATURE gcd (R R S)) (SIGNATURE exactQuotient! (S S S)) (SIGNATURE exactQuotient (S S S)) (SIGNATURE exactQuotient! (S S R)) (SIGNATURE exactQuotient (S S R)) (SIGNATURE primPartElseUnitCanonical! (S S)) (SIGNATURE primPartElseUnitCanonical (S S)) (SIGNATURE convert (S (Polynomial R))) (SIGNATURE retract (S (Polynomial R))) (SIGNATURE retractIfCan ((Union S failed) (Polynomial R))) (SIGNATURE convert (S (Polynomial (Integer)))) (SIGNATURE retract (S (Polynomial (Integer)))) (SIGNATURE retractIfCan ((Union S failed) (Polynomial (Integer)))) (SIGNATURE convert (S (Polynomial (Fraction (Integer))))) (SIGNATURE retract (S (Polynomial (Fraction (Integer))))) (SIGNATURE retractIfCan ((Union S failed) (Polynomial (Fraction (Integer))))) (SIGNATURE initiallyReduce (S S S)) (SIGNATURE headReduce (S S S)) (SIGNATURE lazyResidueClass ((Record (: polnum S) (: polden S) (: power (NonNegativeInteger))) S S)) (SIGNATURE monicModulo (S S S)) (SIGNATURE pseudoDivide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE lazyPseudoDivide ((Record (: coef S) (: gap (NonNegativeInteger)) (: quotient S) (: remainder S)) S S V)) (SIGNATURE lazyPseudoDivide ((Record (: coef S) (: gap (NonNegativeInteger)) (: quotient S) (: remainder S)) S S)) (SIGNATURE lazyPremWithDefault ((Record (: coef S) (: gap (NonNegativeInteger)) (: remainder S)) S S V)) (SIGNATURE lazyPremWithDefault ((Record (: coef S) (: gap (NonNegativeInteger)) (: remainder S)) S S)) (SIGNATURE lazyPquo (S S S V)) (SIGNATURE lazyPrem (S S S V)) (SIGNATURE lazyPquo (S S S)) (SIGNATURE lazyPrem (S S S)) (SIGNATURE pquo (S S S V)) (SIGNATURE prem (S S S V)) (SIGNATURE pquo (S S S)) (SIGNATURE prem (S S S)) (SIGNATURE normalized? ((Boolean) S (List S))) (SIGNATURE normalized? ((Boolean) S S)) (SIGNATURE initiallyReduced? ((Boolean) S (List S))) (SIGNATURE initiallyReduced? ((Boolean) S S)) (SIGNATURE headReduced? ((Boolean) S (List S))) (SIGNATURE headReduced? ((Boolean) S S)) (SIGNATURE reduced? ((Boolean) S (List S))) (SIGNATURE reduced? ((Boolean) S S)) (SIGNATURE supRittWu? ((Boolean) S S)) (SIGNATURE infRittWu? ((Boolean) S S)) (SIGNATURE RittWuCompare ((Union (Boolean) failed) S S)) (SIGNATURE mainMonomials ((List S) S)) (SIGNATURE mainCoefficients ((List S) S)) (SIGNATURE leastMonomial (S S)) (SIGNATURE mainMonomial (S S)) (SIGNATURE quasiMonic? ((Boolean) S)) (SIGNATURE monic? ((Boolean) S)) (SIGNATURE reductum (S S V)) (SIGNATURE leadingCoefficient (S S V)) (SIGNATURE deepestInitial (S S)) (SIGNATURE iteratedInitials ((List S) S)) (SIGNATURE deepestTail (S S)) (SIGNATURE tail (S S)) (SIGNATURE head (S S)) (SIGNATURE init (S S)) (SIGNATURE mdeg ((NonNegativeInteger) S)) (SIGNATURE mvar (V S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE retract (V S)) (SIGNATURE retractIfCan ((Union V failed) S)) (SIGNATURE coerce (S V)) (SIGNATURE leadingCoefficient (R S)) (SIGNATURE reductum (S S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retract (R S)) (SIGNATURE coerce (S (Integer))) (SIGNATURE coerce ((OutputForm) S)))
      [2] convert:  stpol has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20243: SWITCH}
\begin{verbatim}

>compiling SWITCH.spad to SWITCH.nrlib
 
   Warnings: 
      [1]  NULL has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20242: SYMTAB}
\begin{verbatim}

>compiling SYMTAB.spad to SYMTAB.nrlib
 
   Warnings: 
      [1] typeList:  fst has no value
      [2] typeList2:  fst has no value
      [3] newTypeLists:  fst has no value
      [4] oForm2:  S has no value
      [5] oForm2:  P has no value
      [6] oForm:  bounds has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20241: SYSSOLP}
\begin{verbatim}

>compiling SYSSOLP.spad to SYSSOLP.nrlib
 
   Warnings: 
      [1] makeEq: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solve ((List (List (Equation (Fraction (Polynomial R))))) (List (Fraction (Polynomial R))) (List (Symbol)))) (SIGNATURE solve ((List (List (Equation (Fraction (Polynomial R))))) (List (Equation (Fraction (Polynomial R)))) (List (Symbol)))) (SIGNATURE solve ((List (List (Equation (Fraction (Polynomial R))))) (List (Fraction (Polynomial R))))) (SIGNATURE solve ((List (List (Equation (Fraction (Polynomial R))))) (List (Equation (Fraction (Polynomial R)))))) (SIGNATURE solve ((List (Equation (Fraction (Polynomial R)))) (Fraction (Polynomial R)) (Symbol))) (SIGNATURE solve ((List (Equation (Fraction (Polynomial R)))) (Equation (Fraction (Polynomial R))) (Symbol))) (SIGNATURE solve ((List (Equation (Fraction (Polynomial R)))) (Fraction (Polynomial R)))) (SIGNATURE solve ((List (Equation (Fraction (Polynomial R)))) (Equation (Fraction (Polynomial R))))) (SIGNATURE triangularSystems ((List (List (Polynomial R))) (List (Fraction (Polynomial R))) (List (Symbol)))))
      [2] triangularSystems: not known that (SIGNATURE variable ((Union $ failed) (Symbol))) is of mode (CATEGORY domain (SIGNATURE new ($)) (SIGNATURE new ($ $)) (SIGNATURE resetNew ((Void))) (SIGNATURE coerce ($ (String))) (SIGNATURE name ($ $)) (SIGNATURE scripted? ((Boolean) $)) (SIGNATURE scripts ((Record (: sub (List (OutputForm))) (: sup (List (OutputForm))) (: presup (List (OutputForm))) (: presub (List (OutputForm))) (: args (List (OutputForm)))) $)) (SIGNATURE script ($ $ (List (List (OutputForm))))) (SIGNATURE script ($ $ (Record (: sub (List (OutputForm))) (: sup (List (OutputForm))) (: presup (List (OutputForm))) (: presub (List (OutputForm))) (: args (List (OutputForm)))))) (SIGNATURE subscript ($ $ (List (OutputForm)))) (SIGNATURE superscript ($ $ (List (OutputForm)))) (SIGNATURE argscript ($ $ (List (OutputForm)))) (SIGNATURE elt ($ $ (List (OutputForm)))) (SIGNATURE string ((String) $)) (SIGNATURE list ((List $) $)) (SIGNATURE sample ($) constant))
      [3] triangularSystems: not known that (PolynomialCategory (Polynomial R) DP OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [4] triangularSystems: not known that (PolynomialCategory (Polynomial R) (DirectProduct (# lv) (NonNegativeInteger)) OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [5] triangularSystems: not known that (PolynomialCategory (Polynomial R) (DirectProduct (call LENGTH lv) (NonNegativeInteger)) OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20240: UTSCAT}
\begin{verbatim}

>compiling UTSCAT.spad to UTSCAT.nrlib
 
   Warnings: 
      [1] coerce:  l has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20239: ACFS}
\begin{verbatim}

>compiling ACFS.spad to ACFS.nrlib
 
   Warnings: 
      [1] zeroOf: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE zerosOf ((List S) S (Symbol))) (SIGNATURE zeroOf (S S (Symbol))) (SIGNATURE zerosOf ((List S) S)) (SIGNATURE zeroOf (S S)) (SIGNATURE rootsOf ((List S) S (Symbol))) (SIGNATURE rootOf (S S (Symbol))) (SIGNATURE rootsOf ((List S) S)) (SIGNATURE rootOf (S S)) (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE zerosOf ((List S) (Polynomial S))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S))) (SIGNATURE zeroOf (S (Polynomial S))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE rootsOf ((List S) (Polynomial S))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S))) (SIGNATURE rootOf (S (Polynomial S))))
      [2] zeroOf: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE zerosOf ((List S) S (Symbol))) (SIGNATURE zeroOf (S S (Symbol))) (SIGNATURE zerosOf ((List S) S)) (SIGNATURE zeroOf (S S)) (SIGNATURE rootsOf ((List S) S (Symbol))) (SIGNATURE rootOf (S S (Symbol))) (SIGNATURE rootsOf ((List S) S)) (SIGNATURE rootOf (S S)) (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE zerosOf ((List S) (Polynomial S))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S))) (SIGNATURE zeroOf (S (Polynomial S))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE rootsOf ((List S) (Polynomial S))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S))) (SIGNATURE rootOf (S (Polynomial S))))
      [3] not known that (Ring) is of mode (CATEGORY domain (SIGNATURE zerosOf ((List S) S (Symbol))) (SIGNATURE zeroOf (S S (Symbol))) (SIGNATURE zerosOf ((List S) S)) (SIGNATURE zeroOf (S S)) (SIGNATURE rootsOf ((List S) S (Symbol))) (SIGNATURE rootOf (S S (Symbol))) (SIGNATURE rootsOf ((List S) S)) (SIGNATURE rootOf (S S)) (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE zerosOf ((List S) (Polynomial S))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S))) (SIGNATURE zeroOf (S (Polynomial S))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE rootsOf ((List S) (Polynomial S))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S))) (SIGNATURE rootOf (S (Polynomial S))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20238: AF}
\begin{verbatim}

>compiling AF.spad to AF.nrlib
 
   Warnings: 
      [1] rootOf: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE rootOf (F (SparseUnivariatePolynomial F) (Symbol))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE inrootof (F (SparseUnivariatePolynomial F) F)) (SIGNATURE droot ((OutputForm) (List F))) (IF (has R (RetractableTo (Integer))) (PROGN (SIGNATURE ** (F F (Fraction (Integer)))) (SIGNATURE minPoly ((SparseUnivariatePolynomial F) (Kernel F))) (SIGNATURE definingPolynomial (F F)) (SIGNATURE iroot (F R (Integer)))) noBranch))
      [2] rootOf: not known that (Ring) is of mode (CATEGORY package (SIGNATURE rootOf (F (SparseUnivariatePolynomial F) (Symbol))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE inrootof (F (SparseUnivariatePolynomial F) F)) (SIGNATURE droot ((OutputForm) (List F))) (IF (has R (RetractableTo (Integer))) (PROGN (SIGNATURE ** (F F (Fraction (Integer)))) (SIGNATURE minPoly ((SparseUnivariatePolynomial F) (Kernel F))) (SIGNATURE definingPolynomial (F F)) (SIGNATURE iroot (F R (Integer)))) noBranch))
      [3] dvalg:  s has no value
      [4] inrootof: not known that (Ring) is of mode (CATEGORY package (SIGNATURE rootOf (F (SparseUnivariatePolynomial F) (Symbol))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE inrootof (F (SparseUnivariatePolynomial F) F)) (SIGNATURE droot ((OutputForm) (List F))) (IF (has R (RetractableTo (Integer))) (PROGN (SIGNATURE ** (F F (Fraction (Integer)))) (SIGNATURE minPoly ((SparseUnivariatePolynomial F) (Kernel F))) (SIGNATURE definingPolynomial (F F)) (SIGNATURE iroot (F R (Integer)))) noBranch))
      [5] hackroot: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE iroot (F R (Integer))))
      [6] inroot0:  rn has no value
      [7] inroot0:  coef has no value
      [8] inroot0:  radicand has no value
      [9] inroot0:  exponent has no value
      [10] inroot0:  rd has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20237: ALGFACT}
\begin{verbatim}

>compiling ALGFACT.spad to ALGFACT.nrlib
 
   Warnings: 
      [1] allk: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE factor ((Factored UP) UP (List (AlgebraicNumber)))) (SIGNATURE factor ((Factored UP) UP)) (SIGNATURE split ((Factored UP) UP)) (SIGNATURE doublyTransitive? ((Boolean) UP)))
      [2] liftpoly:  x has no value
      [3] downpoly:  x has no value
      [4] extend: not known that (Ring) is of mode (CATEGORY package (SIGNATURE factor ((Factored UP) UP (List (AlgebraicNumber)))) (SIGNATURE factor ((Factored UP) UP)) (SIGNATURE split ((Factored UP) UP)) (SIGNATURE doublyTransitive? ((Boolean) UP)))
      [5] fact: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE factor ((Factored UP) UP (List (AlgebraicNumber)))) (SIGNATURE factor ((Factored UP) UP)) (SIGNATURE split ((Factored UP) UP)) (SIGNATURE doublyTransitive? ((Boolean) UP)))
      [6] fact:  x has no value
      [7] fact: not known that (SIGNATURE coerce ($ (SparseMultivariatePolynomial (Integer) (Kernel (AlgebraicNumber))))) is of mode (CATEGORY domain (SIGNATURE coerce ($ (SparseMultivariatePolynomial (Integer) (Kernel $)))) (SIGNATURE numer ((SparseMultivariatePolynomial (Integer) (Kernel $)) $)) (SIGNATURE denom ((SparseMultivariatePolynomial (Integer) (Kernel $)) $)) (SIGNATURE reduce ($ $)) (SIGNATURE norm ((SparseUnivariatePolynomial $) (SparseUnivariatePolynomial $) (Kernel $))) (SIGNATURE norm ((SparseUnivariatePolynomial $) (SparseUnivariatePolynomial $) (List (Kernel $)))) (SIGNATURE norm ($ $ (Kernel $))) (SIGNATURE norm ($ $ (List (Kernel $)))))
      [8] fact: not known that (SIGNATURE numer ((SparseMultivariatePolynomial (Integer) (Kernel (AlgebraicNumber))) $)) is of mode (CATEGORY domain (SIGNATURE coerce ($ (SparseMultivariatePolynomial (Integer) (Kernel $)))) (SIGNATURE numer ((SparseMultivariatePolynomial (Integer) (Kernel $)) $)) (SIGNATURE denom ((SparseMultivariatePolynomial (Integer) (Kernel $)) $)) (SIGNATURE reduce ($ $)) (SIGNATURE norm ((SparseUnivariatePolynomial $) (SparseUnivariatePolynomial $) (Kernel $))) (SIGNATURE norm ((SparseUnivariatePolynomial $) (SparseUnivariatePolynomial $) (List (Kernel $)))) (SIGNATURE norm ($ $ (Kernel $))) (SIGNATURE norm ($ $ (List (Kernel $)))))
      [9] fact: not known that (SIGNATURE denom ((SparseMultivariatePolynomial (Integer) (Kernel (AlgebraicNumber))) $)) is of mode (CATEGORY domain (SIGNATURE coerce ($ (SparseMultivariatePolynomial (Integer) (Kernel $)))) (SIGNATURE numer ((SparseMultivariatePolynomial (Integer) (Kernel $)) $)) (SIGNATURE denom ((SparseMultivariatePolynomial (Integer) (Kernel $)) $)) (SIGNATURE reduce ($ $)) (SIGNATURE norm ((SparseUnivariatePolynomial $) (SparseUnivariatePolynomial $) (Kernel $))) (SIGNATURE norm ((SparseUnivariatePolynomial $) (SparseUnivariatePolynomial $) (List (Kernel $)))) (SIGNATURE norm ($ $ (Kernel $))) (SIGNATURE norm ($ $ (List (Kernel $)))))
      [10] fact:  y has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20236: ALGFF}
\begin{verbatim}

>compiling ALGFF.spad to ALGFF.nrlib
 
   Warnings: 
      [1] getInfBasis:  s has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20235: ALGMANIP}
\begin{verbatim}

>compiling ALGMANIP.spad to ALGMANIP.nrlib
 
   Warnings: 
      [1] ratDenom: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE rootSplit (F F)) (SIGNATURE ratDenom (F F)) (SIGNATURE ratDenom (F F F)) (SIGNATURE ratDenom (F F (List F))) (SIGNATURE ratDenom (F F (List (Kernel F)))) (SIGNATURE ratPoly ((SparseUnivariatePolynomial F) F)) (IF (has R (OrderedSet)) (IF (has R (GcdDomain)) (IF (has R (RetractableTo (Integer))) (IF (has F (FunctionSpace R)) (PROGN (SIGNATURE rootPower (F F)) (SIGNATURE rootProduct (F F)) (SIGNATURE rootSimp (F F)) (SIGNATURE rootKerSimp (F (BasicOperator) F (NonNegativeInteger)))) noBranch) noBranch) noBranch) noBranch))
      [2] algkernels:  z1 has no value
      [3] rootkernels:  z1 has no value
      [4] ratPoly: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE rootSplit (F F)) (SIGNATURE ratDenom (F F)) (SIGNATURE ratDenom (F F F)) (SIGNATURE ratDenom (F F (List F))) (SIGNATURE ratDenom (F F (List (Kernel F)))) (SIGNATURE ratPoly ((SparseUnivariatePolynomial F) F)) (IF (has R (OrderedSet)) (IF (has R (GcdDomain)) (IF (has R (RetractableTo (Integer))) (IF (has F (FunctionSpace R)) (PROGN (SIGNATURE rootPower (F F)) (SIGNATURE rootProduct (F F)) (SIGNATURE rootSimp (F F)) (SIGNATURE rootKerSimp (F (BasicOperator) F (NonNegativeInteger)))) noBranch) noBranch) noBranch) noBranch))
      [5] ratPoly: not known that (SIGNATURE coerce ($ (SparseMultivariatePolynomial R (Kernel F)))) is of mode (CATEGORY domain (SIGNATURE numer ((SparseMultivariatePolynomial R (Kernel $)) $)) (SIGNATURE denom ((SparseMultivariatePolynomial R (Kernel $)) $)) (SIGNATURE coerce ($ (SparseMultivariatePolynomial R (Kernel $)))))
      [6] ratPoly: not known that (SIGNATURE numer ((SparseMultivariatePolynomial R (Kernel F)) $)) is of mode (CATEGORY domain (SIGNATURE numer ((SparseMultivariatePolynomial R (Kernel $)) $)) (SIGNATURE denom ((SparseMultivariatePolynomial R (Kernel $)) $)) (SIGNATURE coerce ($ (SparseMultivariatePolynomial R (Kernel $)))))
      [7] ratPoly: not known that (SIGNATURE denom ((SparseMultivariatePolynomial R (Kernel F)) $)) is of mode (CATEGORY domain (SIGNATURE numer ((SparseMultivariatePolynomial R (Kernel $)) $)) (SIGNATURE denom ((SparseMultivariatePolynomial R (Kernel $)) $)) (SIGNATURE coerce ($ (SparseMultivariatePolynomial R (Kernel $)))))
      [8] innerRF:  z2 has no value
      [9] innerRF:  z1 has no value
      [10] innerRF:  z3 has no value
      [11] innerRF:  z4 has no value
      [12] innerRF: not known that (Ring) is of mode (CATEGORY package (SIGNATURE rootSplit (F F)) (SIGNATURE ratDenom (F F)) (SIGNATURE ratDenom (F F F)) (SIGNATURE ratDenom (F F (List F))) (SIGNATURE ratDenom (F F (List (Kernel F)))) (SIGNATURE ratPoly ((SparseUnivariatePolynomial F) F)) (IF (has R (OrderedSet)) (IF (has R (GcdDomain)) (IF (has R (RetractableTo (Integer))) (IF (has F (FunctionSpace R)) (PROGN (SIGNATURE rootPower (F F)) (SIGNATURE rootProduct (F F)) (SIGNATURE rootSimp (F F)) (SIGNATURE rootKerSimp (F (BasicOperator) F (NonNegativeInteger)))) noBranch) noBranch) noBranch) noBranch))
      [13] innerRF:  z5 has no value
      [14] innerRF:  z6 has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20234: ALGMFACT}
\begin{verbatim}

>compiling ALGMFACT.spad to ALGMFACT.nrlib
 
   Warnings: 
      [1] factor:  z1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20233: ALGSC}
\begin{verbatim}

>compiling ALGSC.spad to ALGSC.nrlib
 
   Warnings: 
      [1] elt: :Rep -- should replace by pretend
      [2] coerce:  le has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20232: APPRULE}
\begin{verbatim}

>compiling APPRULE.spad to APPRULE.nrlib
 
   Warnings: 
      [1] splitRules: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE applyRules (F (List (RewriteRule Base R F)) F)) (SIGNATURE applyRules (F (List (RewriteRule Base R F)) F (PositiveInteger))) (SIGNATURE localUnquote (F F (List (Symbol)))))
      [2] rewrite: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE applyRules (F (List (RewriteRule Base R F)) F)) (SIGNATURE applyRules (F (List (RewriteRule Base R F)) F (PositiveInteger))) (SIGNATURE localUnquote (F F (List (Symbol)))))
      [3] isitwithpred: not known that (SetCategory) is of mode (CATEGORY package (SIGNATURE applyRules (F (List (RewriteRule Base R F)) F)) (SIGNATURE applyRules (F (List (RewriteRule Base R F)) F (PositiveInteger))) (SIGNATURE localUnquote (F F (List (Symbol)))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20231: ASP19}
\begin{verbatim}

>compiling ASP19.spad to ASP19.nrlib
 
   Warnings: 
      [1]  M has no value
      [2]  N has no value
      [3]  LJC has no value
      [4]  XC has no value
      [5]  FVECC has no value
      [6]  FJACC has no value
      [7] localAssign1: not known that (FiniteLinearAggregate (FortranExpression (construct) (construct (QUOTE XC)) (MachineFloat))) is of mode (CATEGORY domain (SIGNATURE vector ($ (List (FortranExpression  (LIST (QUOTE XC)) (MachineFloat))))))
      [8] coerce:  FJACC has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20230: ASP20}
\begin{verbatim}

>compiling ASP20.spad to ASP20.nrlib
 
   Warnings: 
      [1]  N has no value
      [2]  NROWH has no value
      [3]  NCOLH has no value
      [4]  JTHCOL has no value
      [5]  HESS has no value
      [6]  X has no value
      [7]  HX has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20229: ASP31}
\begin{verbatim}

>compiling ASP31.spad to ASP31.nrlib
 
   Warnings: 
      [1]  X has no value
      [2]  Y has no value
      [3] localAssign: not known that (FiniteLinearAggregate (FortranExpression (construct (QUOTE X)) (construct (QUOTE Y)) (MachineFloat))) is of mode (CATEGORY domain (SIGNATURE vector ($ (List (FortranExpression (LIST (QUOTE X)) (LIST (QUOTE Y)) (MachineFloat))))))
      [4] coerce:  PW has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20228: ASP35}
\begin{verbatim}

>compiling ASP35.spad to ASP35.nrlib
 
   Warnings: 
      [1]  N has no value
      [2]  X has no value
      [3]  FVEC has no value
      [4]  LDFJAC has no value
      [5]  FJAC has no value
      [6]  IFLAG has no value
      [7] localAssign1: not known that (FiniteLinearAggregate (FortranExpression (construct) (construct (QUOTE X)) (MachineFloat))) is of mode (CATEGORY domain (SIGNATURE vector ($ (List (FortranExpression  (LIST (QUOTE X)) (MachineFloat))))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20227: ASP41}
\begin{verbatim}

>compiling ASP41.spad to ASP41.nrlib
 
   Warnings: 
      [1]  N has no value
      [2]  X has no value
      [3]  EPS has no value
      [4]  Y has no value
      [5]  F has no value
      [6] localAssign1: not known that (FiniteLinearAggregate (FortranExpression (construct (QUOTE X) (QUOTE EPS)) (construct (QUOTE Y)) (MachineFloat))) is of mode (CATEGORY domain (SIGNATURE vector ($ (List (FortranExpression (LIST (QUOTE X) (QUOTE EPS)) (LIST (QUOTE Y)) (MachineFloat))))))
      [7] makeCodeThree:  EPS has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20226: ASP42}
\begin{verbatim}

>compiling ASP42.spad to ASP42.nrlib
 
   Warnings: 
      [1]  EPS has no value
      [2]  N has no value
      [3]  YA has no value
      [4]  YB has no value
      [5]  BC has no value
      [6]  AJ has no value
      [7]  BJ has no value
      [8]  BCEP has no value
      [9] localAssign1: not known that (FiniteLinearAggregate (FortranExpression (construct (QUOTE EPS)) (construct (QUOTE YA) (QUOTE YB)) (MachineFloat))) is of mode (CATEGORY domain (SIGNATURE vector ($ (List (FortranExpression (LIST (QUOTE EPS)) (LIST (QUOTE YA) (QUOTE YB)) (MachineFloat))))))
      [10] makeCodeThree:  EPS has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20225: ASP74}
\begin{verbatim}

>compiling ASP74.spad to ASP74.nrlib
 
   Warnings: 
      [1]  X has no value
      [2]  Y has no value
      [3]  A has no value
      [4]  B has no value
      [5]  C has no value
      [6]  IBND has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20224: ASP77}
\begin{verbatim}

>compiling ASP77.spad to ASP77.nrlib
 
   Warnings: 
      [1]  X has no value
      [2] localAssign: not known that (FiniteLinearAggregate (FortranExpression (construct (QUOTE X)) (construct) (MachineFloat))) is of mode (CATEGORY domain (SIGNATURE vector ($ (List (FortranExpression (LIST (QUOTE X))  (MachineFloat))))))
      [3] coerce:  F has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20223: ASP80}
\begin{verbatim}

>compiling ASP80.spad to ASP80.nrlib
 
   Warnings: 
      [1]  XL has no value
      [2]  XR has no value
      [3]  ELAM has no value
      [4]  YL has no value
      [5]  YR has no value

 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20222: CINTSLPE}
\begin{verbatim}

>compiling CINTSLPE.spad to CINTSLPE.nrlib
 
   Warnings: 
      [1] solveLinearPolynomialEquation:  slpePrime has no value
      [2] solveLinearPolynomialEquation:  oldtable has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20221: COMBF}
\begin{verbatim}

>compiling COMBF.spad to COMBF.nrlib
 
   Warnings: 
      [1] **: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE ** (F F F)) (SIGNATURE binomial (F F F)) (SIGNATURE permutation (F F F)) (SIGNATURE factorial (F F)) (SIGNATURE factorials (F F)) (SIGNATURE factorials (F F (Symbol))) (SIGNATURE summation (F F (Symbol))) (SIGNATURE summation (F F (SegmentBinding F))) (SIGNATURE product (F F (Symbol))) (SIGNATURE product (F F (SegmentBinding F))) (SIGNATURE iifact (F F)) (SIGNATURE iibinom (F (List F))) (SIGNATURE iiperm (F (List F))) (SIGNATURE iipow (F (List F))) (SIGNATURE iidsum (F (List F))) (SIGNATURE iidprod (F (List F))) (SIGNATURE ipow (F (List F))))
      [2] facts: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE ** (F F F)) (SIGNATURE binomial (F F F)) (SIGNATURE permutation (F F F)) (SIGNATURE factorial (F F)) (SIGNATURE factorials (F F)) (SIGNATURE factorials (F F (Symbol))) (SIGNATURE summation (F F (Symbol))) (SIGNATURE summation (F F (SegmentBinding F))) (SIGNATURE product (F F (Symbol))) (SIGNATURE product (F F (SegmentBinding F))) (SIGNATURE iifact (F F)) (SIGNATURE iibinom (F (List F))) (SIGNATURE iiperm (F (List F))) (SIGNATURE iipow (F (List F))) (SIGNATURE iidsum (F (List F))) (SIGNATURE iidprod (F (List F))) (SIGNATURE ipow (F (List F))))
      [3] summand: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE ** (F F F)) (SIGNATURE binomial (F F F)) (SIGNATURE permutation (F F F)) (SIGNATURE factorial (F F)) (SIGNATURE factorials (F F)) (SIGNATURE factorials (F F (Symbol))) (SIGNATURE summation (F F (Symbol))) (SIGNATURE summation (F F (SegmentBinding F))) (SIGNATURE product (F F (Symbol))) (SIGNATURE product (F F (SegmentBinding F))) (SIGNATURE iifact (F F)) (SIGNATURE iibinom (F (List F))) (SIGNATURE iiperm (F (List F))) (SIGNATURE iipow (F (List F))) (SIGNATURE iidsum (F (List F))) (SIGNATURE iidprod (F (List F))) (SIGNATURE ipow (F (List F))))
      [4] smpfact:  x has no value
      [5] smpfact:  y has no value
      [6] ipow:  n has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20220: COMPFACT}
\begin{verbatim}

>compiling COMPFACT.spad to COMPFACT.nrlib
 
   Warnings: 
      [1] conv:  pris has no value
      [2] conv:  dris has no value
      [3] backConv:  fctr has no value
      [4] backConv:  xpnt has no value
      [5] backConv:  flg has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20219: COMPLEX}
\begin{verbatim}

>compiling COMPLEX.spad to COMPLEX.nrlib
 
   Warnings: 
      [1] OMwrite: pretend(String) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20218: CPMATCH}
\begin{verbatim}

>compiling CPMATCH.spad to CPMATCH.nrlib
 
   Warnings: 
      [1] patternMatch: not known that (SetCategory) is of mode (CATEGORY $ (SIGNATURE patternMatch ((PatternMatchResult R CS) CS (Pattern R) (PatternMatchResult R CS))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20217: CRFP}
\begin{verbatim}

>compiling CRFP.spad to CRFP.nrlib
 
   Warnings: 
      [1] pleskenSplit:  split has no value
      [2] startPolynomial:  centerIsRoot has no value
      [3] startPolynomial:  fp has no value
      [4] factor:  result has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20216: CTRIGMNP}
\begin{verbatim}

>compiling CTRIGMNP.spad to CTRIGMNP.nrlib
 
   Warnings: 
      [1] complexForm: not known that (RadicalCategory) is of mode (CATEGORY domain (IF (has R (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace R)) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has R (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has R (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [2] complexForm: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has R (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace R)) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has R (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has R (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [3] real?: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE complexNormalize (F F)) (SIGNATURE complexNormalize (F F (Symbol))) (SIGNATURE complexElementary (F F)) (SIGNATURE complexElementary (F F (Symbol))) (SIGNATURE real ((Expression R) F)) (SIGNATURE imag ((Expression R) F)) (SIGNATURE real? ((Boolean) F)) (SIGNATURE trigs (F F)) (SIGNATURE complexForm ((Complex (Expression R)) F)))
      [4] complexElementary:  x has no value
      [5] complexElementary:  y has no value
      [6] complexElementary: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE complexNormalize (F F)) (SIGNATURE complexNormalize (F F (Symbol))) (SIGNATURE complexElementary (F F)) (SIGNATURE complexElementary (F F (Symbol))) (SIGNATURE real ((Expression R) F)) (SIGNATURE imag ((Expression R) F)) (SIGNATURE real? ((Boolean) F)) (SIGNATURE trigs (F F)) (SIGNATURE complexForm ((Complex (Expression R)) F)))
      [7] complexNormalize:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20215: D01WGTS}
\begin{verbatim}

>compiling D01WGTS.spad to D01WGTS.nrlib
 
   Warnings: 
      [1] inRest?:  x has no value
      [2] findCommonFactor:  x has no value
      [3] exprIsLogarithmicWeight: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exprHasWeightCosWXorSinWX ((Union (Record (: op (BasicOperator)) (: w (DoubleFloat))) failed) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))) (SIGNATURE exprHasAlgebraicWeight ((Union (List (DoubleFloat)) failed) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))) (SIGNATURE exprHasLogarithmicWeights ((Integer) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))))
      [4] functionIsQuotient: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exprHasWeightCosWXorSinWX ((Union (Record (: op (BasicOperator)) (: w (DoubleFloat))) failed) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))) (SIGNATURE exprHasAlgebraicWeight ((Union (List (DoubleFloat)) failed) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))) (SIGNATURE exprHasLogarithmicWeights ((Integer) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20214: D02AGNT}
\begin{verbatim}

>compiling D02AGNT.spad to D02AGNT.nrlib
 
   Warnings: 
      [1] stiffnessAndStabilityFactor:  b has no value
      [2] stiffnessAndStabilityFactor:  e has no value
      [3] stiffnessAndStabilityOfODE:  Y has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20213: DBLRESP}
\begin{verbatim}

>compiling DBLRESP.spad to DBLRESP.nrlib
 
   Warnings: 
      [1] UP22:  x has no value
      [2] UP23:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20212: D01AGNT}
\begin{verbatim}

>compiling D01AGNT.spad to D01AGNT.nrlib
 
   Warnings: 
      [1] continuousAtPoint?: not known that (AlgebraicallyClosedField) is of mode (CATEGORY domain (IF (has (Fraction (Integer)) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Fraction (Integer)))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Fraction (Integer)) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Fraction (Integer)) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [2] continuousAtPoint?: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has (Fraction (Integer)) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Fraction (Integer)))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Fraction (Integer)) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Fraction (Integer)) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [3] functionIsOscillatory: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE rangeIsFinite ((Union (: finite The range is finite) (: lowerInfinite The bottom of range is infinite) (: upperInfinite The top of range is infinite) (: bothInfinite Both top and bottom points are infinite) (: notEvaluated Range not yet evaluated)) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))) (SIGNATURE functionIsContinuousAtEndPoints ((Union (: continuous Continuous at the end points) (: lowerSingular There is a singularity at the lower end point) (: upperSingular There is a singularity at the upper end point) (: bothSingular There are singularities at both end points) (: notEvaluated End point continuity not yet evaluated)) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))) (SIGNATURE getlo ((DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE gethi ((DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE functionIsOscillatory ((Float) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))) (SIGNATURE problemPoints ((List (DoubleFloat)) (Expression (DoubleFloat)) (Symbol) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE singularitiesOf ((Stream (DoubleFloat)) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))) (SIGNATURE df2st ((String) (DoubleFloat))) (SIGNATURE ldf2lst ((List (String)) (List (DoubleFloat)))) (SIGNATURE sdf2lst ((List (String)) (Stream (DoubleFloat)))) (SIGNATURE commaSeparate ((String) (List (String)))) (SIGNATURE changeName ((Result) (Symbol) (Symbol) (Result))))
      [4] singularitiesOf:  str has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20211: DFSFUN}
\begin{verbatim}

>compiling DFSFUN.spad to DFSFUN.nrlib
 
   Warnings: 
      [1] En: The conditional modes (DoubleFloat) and (Complex (DoubleFloat)) conflict
      [2] fresnelC: The conditional modes (Integer) and (DoubleFloat) conflict
      [3] fresnelS: The conditional modes (Integer) and (DoubleFloat) conflict
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20210: DRAWCURV}
\begin{verbatim}

>compiling DRAWCURV.spad to DRAWCURV.nrlib
 
   Warnings: 
      [1] draw:  s has no value
      [2] draw:  xRangeFloat has no value
      [3] draw:  yRangeFloat has no value
      [4] draw:  floatRanges has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20209: DTP}
\begin{verbatim}

>compiling DTP.spad to DTP.nrlib
 
   Warnings: 
      [1] blowUp:  I has no value
      [2] adjunctionDivisorForHamburgeNoether: pretend(Integer) -- should replace by @
      [3] adjunctionDivisorForQuadTrans: pretend(Integer) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20208: D01TRNS}
\begin{verbatim}

>compiling D01TRNS.spad to D01TRNS.nrlib

   Warnings: 
      [1] transformFunction: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has (Fraction (Integer)) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Fraction (Integer)))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Fraction (Integer)) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Fraction (Integer)) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [2] transformFunction:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20207: EF}
\begin{verbatim}

>compiling EF.spad to EF.nrlib
 
   Warnings: 
      [1] pi:  Pie has no value
      [2] iisqrt1:  isqrt1 has no value
      [3] iisqrt2:  isqrt2 has no value
      [4] iisqrt3:  isqrt3 has no value
      [5] kernel: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exp (F F)) (SIGNATURE log (F F)) (SIGNATURE sin (F F)) (SIGNATURE cos (F F)) (SIGNATURE tan (F F)) (SIGNATURE cot (F F)) (SIGNATURE sec (F F)) (SIGNATURE csc (F F)) (SIGNATURE asin (F F)) (SIGNATURE acos (F F)) (SIGNATURE atan (F F)) (SIGNATURE acot (F F)) (SIGNATURE asec (F F)) (SIGNATURE acsc (F F)) (SIGNATURE sinh (F F)) (SIGNATURE cosh (F F)) (SIGNATURE tanh (F F)) (SIGNATURE coth (F F)) (SIGNATURE sech (F F)) (SIGNATURE csch (F F)) (SIGNATURE asinh (F F)) (SIGNATURE acosh (F F)) (SIGNATURE atanh (F F)) (SIGNATURE acoth (F F)) (SIGNATURE asech (F F)) (SIGNATURE acsch (F F)) (SIGNATURE pi (F)) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE iisqrt2 (F)) (SIGNATURE iisqrt3 (F)) (SIGNATURE iiexp (F F)) (SIGNATURE iilog (F F)) (SIGNATURE iisin (F F)) (SIGNATURE iicos (F F)) (SIGNATURE iitan (F F)) (SIGNATURE iicot (F F)) (SIGNATURE iisec (F F)) (SIGNATURE iicsc (F F)) (SIGNATURE iiasin (F F)) (SIGNATURE iiacos (F F)) (SIGNATURE iiatan (F F)) (SIGNATURE iiacot (F F)) (SIGNATURE iiasec (F F)) (SIGNATURE iiacsc (F F)) (SIGNATURE iisinh (F F)) (SIGNATURE iicosh (F F)) (SIGNATURE iitanh (F F)) (SIGNATURE iicoth (F F)) (SIGNATURE iisech (F F)) (SIGNATURE iicsch (F F)) (SIGNATURE iiasinh (F F)) (SIGNATURE iiacosh (F F)) (SIGNATURE iiatanh (F F)) (SIGNATURE iiacoth (F F)) (SIGNATURE iiasech (F F)) (SIGNATURE iiacsch (F F)) (SIGNATURE specialTrigs ((Union F failed) F (List (Record (: func F) (: pole (Boolean)))))) (SIGNATURE localReal? ((Boolean) F)))
      [6] ilog: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exp (F F)) (SIGNATURE log (F F)) (SIGNATURE sin (F F)) (SIGNATURE cos (F F)) (SIGNATURE tan (F F)) (SIGNATURE cot (F F)) (SIGNATURE sec (F F)) (SIGNATURE csc (F F)) (SIGNATURE asin (F F)) (SIGNATURE acos (F F)) (SIGNATURE atan (F F)) (SIGNATURE acot (F F)) (SIGNATURE asec (F F)) (SIGNATURE acsc (F F)) (SIGNATURE sinh (F F)) (SIGNATURE cosh (F F)) (SIGNATURE tanh (F F)) (SIGNATURE coth (F F)) (SIGNATURE sech (F F)) (SIGNATURE csch (F F)) (SIGNATURE asinh (F F)) (SIGNATURE acosh (F F)) (SIGNATURE atanh (F F)) (SIGNATURE acoth (F F)) (SIGNATURE asech (F F)) (SIGNATURE acsch (F F)) (SIGNATURE pi (F)) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE iisqrt2 (F)) (SIGNATURE iisqrt3 (F)) (SIGNATURE iiexp (F F)) (SIGNATURE iilog (F F)) (SIGNATURE iisin (F F)) (SIGNATURE iicos (F F)) (SIGNATURE iitan (F F)) (SIGNATURE iicot (F F)) (SIGNATURE iisec (F F)) (SIGNATURE iicsc (F F)) (SIGNATURE iiasin (F F)) (SIGNATURE iiacos (F F)) (SIGNATURE iiatan (F F)) (SIGNATURE iiacot (F F)) (SIGNATURE iiasec (F F)) (SIGNATURE iiacsc (F F)) (SIGNATURE iisinh (F F)) (SIGNATURE iicosh (F F)) (SIGNATURE iitanh (F F)) (SIGNATURE iicoth (F F)) (SIGNATURE iisech (F F)) (SIGNATURE iicsch (F F)) (SIGNATURE iiasinh (F F)) (SIGNATURE iiacosh (F F)) (SIGNATURE iiatanh (F F)) (SIGNATURE iiacoth (F F)) (SIGNATURE iiasech (F F)) (SIGNATURE iiacsch (F F)) (SIGNATURE specialTrigs ((Union F failed) F (List (Record (: func F) (: pole (Boolean)))))) (SIGNATURE localReal? ((Boolean) F)))
      [7]  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20206: EFSTRUC}
\begin{verbatim}

>compiling EFSTRUC.spad to EFSTRUC.nrlib
 
   Warnings: 
      [1] realElem: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE normalize (F F)) (SIGNATURE normalize (F F (Symbol))) (SIGNATURE rischNormalize ((Record (: func F) (: kers (List (Kernel F))) (: vals (List F))) F (Symbol))) (SIGNATURE realElementary (F F)) (SIGNATURE realElementary (F F (Symbol))) (SIGNATURE validExponential ((Union F failed) (List (Kernel F)) F (Symbol))) (SIGNATURE rootNormalize (F F (Kernel F))) (SIGNATURE tanQ (F (Fraction (Integer)) F)))
      [2] rtNormalize:  func has no value
      [3] toR:  s has no value
      [4] tanQ: not known that (Ring) is of mode (CATEGORY package (SIGNATURE normalize (F F)) (SIGNATURE normalize (F F (Symbol))) (SIGNATURE rischNormalize ((Record (: func F) (: kers (List (Kernel F))) (: vals (List F))) F (Symbol))) (SIGNATURE realElementary (F F)) (SIGNATURE realElementary (F F (Symbol))) (SIGNATURE validExponential ((Union F failed) (List (Kernel F)) F (Symbol))) (SIGNATURE rootNormalize (F F (Kernel F))) (SIGNATURE tanQ (F (Fraction (Integer)) F)))
      [5] rootNormalize0:  s has no value
      [6] rootNormalize0: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE normalize (F F)) (SIGNATURE normalize (F F (Symbol))) (SIGNATURE rischNormalize ((Record (: func F) (: kers (List (Kernel F))) (: vals (List F))) F (Symbol))) (SIGNATURE realElementary (F F)) (SIGNATURE realElementary (F F (Symbol))) (SIGNATURE validExponential ((Union F failed) (List (Kernel F)) F (Symbol))) (SIGNATURE rootNormalize (F F (Kernel F))) (SIGNATURE tanQ (F (Fraction (Integer)) F)))
      [7] ktoY: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE normalize (F F)) (SIGNATURE normalize (F F (Symbol))) (SIGNATURE rischNormalize ((Record (: func F) (: kers (List (Kernel F))) (: vals (List F))) F (Symbol))) (SIGNATURE realElementary (F F)) (SIGNATURE realElementary (F F (Symbol))) (SIGNATURE validExponential ((Union F failed) (List (Kernel F)) F (Symbol))) (SIGNATURE rootNormalize (F F (Kernel F))) (SIGNATURE tanQ (F (Fraction (Integer)) F)))
      [8] smpElem:  x has no value
      [9] smpElem:  y has no value
      [10] k2Elem:  ez has no value
      [11] k2Elem:  iez has no value
      [12] k2Elem:  tz2 has no value
      [13] tannosimp:  x has no value
      [14] tannosimp:  den has no value
      [15] tannosimp:  num has no value
      [16] expnosimp:  x has no value
      [17] expnosimp:  den has no value
      [18] expnosimp:  num has no value
      [19] rischNormalize:  vec has no value
      [20] rootKernelNormalize:  vec has no value
      [21] validExponential:  IN has no value
      [22] validExponential:  g has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20205: ELFUTS}
\begin{verbatim}

>compiling ELFUTS.spad to ELFUTS.nrlib
 
   Warnings: 
      [1] sncndn:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20204: ESTOOLS}
\begin{verbatim}

>compiling ESTOOLS.spad to ESTOOLS.nrlib
 
   Warnings: 
      [1] isQuotient: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE f2df ((DoubleFloat) (Float))) (SIGNATURE ef2edf ((Expression (DoubleFloat)) (Expression (Float)))) (SIGNATURE ocf2ocdf ((OrderedCompletion (DoubleFloat)) (OrderedCompletion (Float)))) (SIGNATURE socf2socdf ((Segment (OrderedCompletion (DoubleFloat))) (Segment (OrderedCompletion (Float))))) (SIGNATURE convert ((List (Segment (OrderedCompletion (DoubleFloat)))) (List (Segment (OrderedCompletion (Float)))))) (SIGNATURE df2fi ((Fraction (Integer)) (DoubleFloat))) (SIGNATURE edf2fi ((Fraction (Integer)) (Expression (DoubleFloat)))) (SIGNATURE edf2df ((DoubleFloat) (Expression (DoubleFloat)))) (SIGNATURE isQuotient ((Union (Expression (DoubleFloat)) failed) (Expression (DoubleFloat)))) (SIGNATURE expenseOfEvaluation ((Float) (Vector (Expression (DoubleFloat))))) (SIGNATURE numberOfOperations ((Record (: additions (Integer)) (: multiplications (Integer)) (: exponentiations (Integer)) (: functionCalls (Integer))) (Vector (Expression (DoubleFloat))))) (SIGNATURE edf2efi ((Expression (Fraction (Integer))) (Expression (DoubleFloat)))) (SIGNATURE dfRange ((Segment (OrderedCompletion (DoubleFloat))) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE dflist ((List (DoubleFloat)) (List (Record (: left (Fraction (Integer))) (: right (Fraction (Integer))))))) (SIGNATURE df2mf ((MachineFloat) (DoubleFloat))) (SIGNATURE ldf2vmf ((Vector (MachineFloat)) (List (DoubleFloat)))) (SIGNATURE edf2ef ((Expression (Float)) (Expression (DoubleFloat)))) (SIGNATURE vedf2vef ((Vector (Expression (Float))) (Vector (Expression (DoubleFloat))))) (SIGNATURE in? ((Boolean) (DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE df2st ((String) (DoubleFloat))) (SIGNATURE f2st ((String) (Float))) (SIGNATURE ldf2lst ((List (String)) (List (DoubleFloat)))) (SIGNATURE sdf2lst ((List (String)) (Stream (DoubleFloat)))) (SIGNATURE getlo ((DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE gethi ((DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE concat ((Result) (Result) (Result))) (SIGNATURE concat ((Result) (List (Result)))) (SIGNATURE outputMeasure ((String) (Float))) (SIGNATURE measure2Result ((Result) (Record (: measure (Float)) (: name (String)) (: explanations (List (String)))))) (SIGNATURE measure2Result ((Result) (Record (: measure (Float)) (: name (String)) (: explanations (List (String))) (: extra (Result))))) (SIGNATURE att2Result ((Result) (Record (: endPointContinuity (Union (: continuous Continuous at the end points) (: lowerSingular There is a singularity at the lower end point) (: upperSingular There is a singularity at the upper end point) (: bothSingular There are singularities at both end points) (: notEvaluated End point continuity not yet evaluated))) (: singularitiesStream (Union (: str (Stream (DoubleFloat))) (: notEvaluated Internal singularities not yet evaluated))) (: range (Union (: finite The range is finite) (: lowerInfinite The bottom of range is infinite) (: upperInfinite The top of range is infinite) (: bothInfinite Both top and bottom points are infinite) (: notEvaluated Range not yet evaluated)))))) (SIGNATURE iflist2Result ((Result) (Record (: stiffness (Float)) (: stability (Float)) (: expense (Float)) (: accuracy (Float)) (: intermediateResults (Float))))) (SIGNATURE pdf2ef ((Expression (Float)) (Polynomial (DoubleFloat)))) (SIGNATURE pdf2df ((DoubleFloat) (Polynomial (DoubleFloat)))) (SIGNATURE df2ef ((Expression (Float)) (DoubleFloat))) (SIGNATURE fi2df ((DoubleFloat) (Fraction (Integer)))) (SIGNATURE mat ((Matrix (DoubleFloat)) (List (DoubleFloat)) (NonNegativeInteger))))
      [2] numberOfOperations1: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE f2df ((DoubleFloat) (Float))) (SIGNATURE ef2edf ((Expression (DoubleFloat)) (Expression (Float)))) (SIGNATURE ocf2ocdf ((OrderedCompletion (DoubleFloat)) (OrderedCompletion (Float)))) (SIGNATURE socf2socdf ((Segment (OrderedCompletion (DoubleFloat))) (Segment (OrderedCompletion (Float))))) (SIGNATURE convert ((List (Segment (OrderedCompletion (DoubleFloat)))) (List (Segment (OrderedCompletion (Float)))))) (SIGNATURE df2fi ((Fraction (Integer)) (DoubleFloat))) (SIGNATURE edf2fi ((Fraction (Integer)) (Expression (DoubleFloat)))) (SIGNATURE edf2df ((DoubleFloat) (Expression (DoubleFloat)))) (SIGNATURE isQuotient ((Union (Expression (DoubleFloat)) failed) (Expression (DoubleFloat)))) (SIGNATURE expenseOfEvaluation ((Float) (Vector (Expression (DoubleFloat))))) (SIGNATURE numberOfOperations ((Record (: additions (Integer)) (: multiplications (Integer)) (: exponentiations (Integer)) (: functionCalls (Integer))) (Vector (Expression (DoubleFloat))))) (SIGNATURE edf2efi ((Expression (Fraction (Integer))) (Expression (DoubleFloat)))) (SIGNATURE dfRange ((Segment (OrderedCompletion (DoubleFloat))) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE dflist ((List (DoubleFloat)) (List (Record (: left (Fraction (Integer))) (: right (Fraction (Integer))))))) (SIGNATURE df2mf ((MachineFloat) (DoubleFloat))) (SIGNATURE ldf2vmf ((Vector (MachineFloat)) (List (DoubleFloat)))) (SIGNATURE edf2ef ((Expression (Float)) (Expression (DoubleFloat)))) (SIGNATURE vedf2vef ((Vector (Expression (Float))) (Vector (Expression (DoubleFloat))))) (SIGNATURE in? ((Boolean) (DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE df2st ((String) (DoubleFloat))) (SIGNATURE f2st ((String) (Float))) (SIGNATURE ldf2lst ((List (String)) (List (DoubleFloat)))) (SIGNATURE sdf2lst ((List (String)) (Stream (DoubleFloat)))) (SIGNATURE getlo ((DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE gethi ((DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE concat ((Result) (Result) (Result))) (SIGNATURE concat ((Result) (List (Result)))) (SIGNATURE outputMeasure ((String) (Float))) (SIGNATURE measure2Result ((Result) (Record (: measure (Float)) (: name (String)) (: explanations (List (String)))))) (SIGNATURE measure2Result ((Result) (Record (: measure (Float)) (: name (String)) (: explanations (List (String))) (: extra (Result))))) (SIGNATURE att2Result ((Result) (Record (: endPointContinuity (Union (: continuous Continuous at the end points) (: lowerSingular There is a singularity at the lower end point) (: upperSingular There is a singularity at the upper end point) (: bothSingular There are singularities at both end points) (: notEvaluated End point continuity not yet evaluated))) (: singularitiesStream (Union (: str (Stream (DoubleFloat))) (: notEvaluated Internal singularities not yet evaluated))) (: range (Union (: finite The range is finite) (: lowerInfinite The bottom of range is infinite) (: upperInfinite The top of range is infinite) (: bothInfinite Both top and bottom points are infinite) (: notEvaluated Range not yet evaluated)))))) (SIGNATURE iflist2Result ((Result) (Record (: stiffness (Float)) (: stability (Float)) (: expense (Float)) (: accuracy (Float)) (: intermediateResults (Float))))) (SIGNATURE pdf2ef ((Expression (Float)) (Polynomial (DoubleFloat)))) (SIGNATURE pdf2df ((DoubleFloat) (Polynomial (DoubleFloat)))) (SIGNATURE df2ef ((Expression (Float)) (DoubleFloat))) (SIGNATURE fi2df ((DoubleFloat) (Fraction (Integer)))) (SIGNATURE mat ((Matrix (DoubleFloat)) (List (DoubleFloat)) (NonNegativeInteger))))
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20203: EXPRODE}
\begin{verbatim}

>compiling EXPRODE.spad to EXPRODE.nrlib
 
   Warnings: 
      [1] diffRhs: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (List F))))
      [2] k2exquo:  IN has no value
      [3] k2exquo:  f has no value
      [4] smp2exquo:  x has no value
      [5] div2exquo: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (List F))))
      [6] diffRhsK: not known that (Ring) is of mode (CATEGORY package (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (List F))))
      [7] findEq: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (List F))))
      [8] seriesSolve:  IN has no value
      [9] seriesSolve:  deq has no value
      [10] seriesSolve:  y has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20202: EXPRTUBE}
\begin{verbatim}

>compiling EXPRTUBE.spad to EXPRTUBE.nrlib
 
   Warnings: 
      [1] constantToUnaryFunction:  s has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20201: EXPR2}
\begin{verbatim}

>compiling EXPR2.spad to EXPR2.nrlib
 
   Warnings: 
      [1] map:  x1 has no value
      [2] map: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE map ((Expression S) (Mapping S R) (Expression R))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20200: FC}
\begin{verbatim}

>compiling FC.spad to FC.nrlib
 
   Warnings: 
      [1] getElseIf:  conditionalBranch has no value
      [2] getCode:  assignmentBranch has no value
      [3] getCode:  arrayAssignmentBranch has no value
      [4] getCode:  conditionalBranch has no value
      [5] getCode:  returnBranch has no value
      [6] getCode:  blockBranch has no value
      [7] getCode:  commentBranch has no value
      [8] getCode:  callBranch has no value
      [9] getCode:  forBranch has no value
      [10] getCode:  labelBranch has no value
      [11] getCode:  loopBranch has no value
      [12] getCode:  printBranch has no value
      [13] getCode:  commonBranch has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20199: FDIV}
\begin{verbatim}

>compiling FDIV2.spad to FDIV2.nrlib
 
   Warnings: 
      [1] map:  s has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20198: FSPRMELT}
\begin{verbatim}

>compiling FSPRMELT.spad to FSPRMELT.nrlib
 
   Warnings: 
      [1] F2P: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE primitiveElement ((Record (: primelt F) (: poly (List (SparseUnivariatePolynomial F))) (: prim (SparseUnivariatePolynomial F))) (List F))) (IF (has F (AlgebraicallyClosedField)) (SIGNATURE primitiveElement ((Record (: primelt F) (: pol1 (SparseUnivariatePolynomial F)) (: pol2 (SparseUnivariatePolynomial F)) (: prim (SparseUnivariatePolynomial F))) F F)) noBranch))
      [2] F2P:  k1 has no value
      [3] F2P:  r1 has no value
      [4] K2P: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE primitiveElement ((Record (: primelt F) (: poly (List (SparseUnivariatePolynomial F))) (: prim (SparseUnivariatePolynomial F))) (List F))) (IF (has F (AlgebraicallyClosedField)) (SIGNATURE primitiveElement ((Record (: primelt F) (: pol1 (SparseUnivariatePolynomial F)) (: pol2 (SparseUnivariatePolynomial F)) (: prim (SparseUnivariatePolynomial F))) F F)) noBranch))
      [5] primitiveElement: not known that (Ring) is of mode (CATEGORY package (SIGNATURE primitiveElement ((Record (: primelt F) (: poly (List (SparseUnivariatePolynomial F))) (: prim (SparseUnivariatePolynomial F))) (List F))) (IF (has F (AlgebraicallyClosedField)) (SIGNATURE primitiveElement ((Record (: primelt F) (: pol1 (SparseUnivariatePolynomial F)) (: pol2 (SparseUnivariatePolynomial F)) (: prim (SparseUnivariatePolynomial F))) F F)) noBranch))
      [6] primitiveElement: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE primitiveElement ((Record (: primelt F) (: poly (List (SparseUnivariatePolynomial F))) (: prim (SparseUnivariatePolynomial F))) (List F))) (IF (has F (AlgebraicallyClosedField)) (SIGNATURE primitiveElement ((Record (: primelt F) (: pol1 (SparseUnivariatePolynomial F)) (: pol2 (SparseUnivariatePolynomial F)) (: prim (SparseUnivariatePolynomial F))) F F)) noBranch))
      [7] F2UP: not known that (Ring) is of mode (CATEGORY $ (SIGNATURE primitiveElement ((Record (: primelt F) (: pol1 (SparseUnivariatePolynomial F)) (: pol2 (SparseUnivariatePolynomial F)) (: prim (SparseUnivariatePolynomial F))) F F)))
      [8] primitiveElement:  z1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20197: FSRED}
\begin{verbatim}

>compiling FSRED.spad to FSRED.nrlib
 
   Warnings: 
      [1] bringDown: not known that (Ring) is of mode (CATEGORY package (SIGNATURE bringDown ((Fraction (Integer)) F)) (SIGNATURE bringDown ((SparseUnivariatePolynomial (Fraction (Integer))) F (Kernel F))) (SIGNATURE newReduc ((Void))))
      [2] bringDown: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE bringDown ((Fraction (Integer)) F)) (SIGNATURE bringDown ((SparseUnivariatePolynomial (Fraction (Integer))) F (Kernel F))) (SIGNATURE newReduc ((Void))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20196: FSUPFACT}
\begin{verbatim}

>compiling FSUPFACT.spad to FSUPFACT.nrlib
 
   Warnings: 
      [1] UPAN2F:  x has no value
      [2] UPQ2AN:  x has no value
      [3] anfactor:  overq has no value
      [4] anfactor:  overan has no value
      [5] UPQ2F:  x has no value
      [6] ffactor0: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE ffactor ((Factored UP) UP)) (SIGNATURE qfactor ((Union (Factored (SparseUnivariatePolynomial (Fraction (Integer)))) failed) UP)) (SIGNATURE UP2ifCan ((Union (: overq (SparseUnivariatePolynomial (Fraction (Integer)))) (: overan (SparseUnivariatePolynomial (AlgebraicNumber))) (: failed (Boolean))) UP)) (IF (has F (RetractableTo (AlgebraicNumber))) (SIGNATURE anfactor ((Union (Factored (SparseUnivariatePolynomial (AlgebraicNumber))) failed) UP)) noBranch))
      [7] ffactor0:  x has no value
      [8] ffactor0: not known that (Ring) is of mode (CATEGORY package (SIGNATURE ffactor ((Factored UP) UP)) (SIGNATURE qfactor ((Union (Factored (SparseUnivariatePolynomial (Fraction (Integer)))) failed) UP)) (SIGNATURE UP2ifCan ((Union (: overq (SparseUnivariatePolynomial (Fraction (Integer)))) (: overan (SparseUnivariatePolynomial (AlgebraicNumber))) (: failed (Boolean))) UP)) (IF (has F (RetractableTo (AlgebraicNumber))) (SIGNATURE anfactor ((Union (Factored (SparseUnivariatePolynomial (AlgebraicNumber))) failed) UP)) noBranch))
      [9] UPQ2UP:  x has no value
      [10] PQ2F:  x has no value
      [11] PQ2F:  y has no value
      [12] qfactor:  overq has no value
      [13] P2QifCan:  x has no value
      [14] P2QifCan:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20195: FSPECF}
\begin{verbatim}

>compiling FSPECF.spad to FSPECF.nrlib
 
   Warnings: 
      [1] iiabs: not known that (Ring) is of mode (CATEGORY R (SIGNATURE abs (R R)))
      [2] not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE abs (F F)) (SIGNATURE Gamma (F F)) (SIGNATURE Gamma (F F F)) (SIGNATURE Beta (F F F)) (SIGNATURE digamma (F F)) (SIGNATURE polygamma (F F F)) (SIGNATURE besselJ (F F F)) (SIGNATURE besselY (F F F)) (SIGNATURE besselI (F F F)) (SIGNATURE besselK (F F F)) (SIGNATURE airyAi (F F)) (SIGNATURE airyBi (F F)) (SIGNATURE iiGamma (F F)) (SIGNATURE iiabs (F F)) (SIGNATURE iiBeta (F (List F))) (SIGNATURE iidigamma (F F)) (SIGNATURE iipolygamma (F (List F))) (SIGNATURE iiBesselJ (F (List F))) (SIGNATURE iiBesselY (F (List F))) (SIGNATURE iiBesselI (F (List F))) (SIGNATURE iiBesselK (F (List F))) (SIGNATURE iiAiryAi (F F)) (SIGNATURE iiAiryBi (F F)))
      [3]  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20194: FS2}
\begin{verbatim}

>compiling FS2.spad to FS2.nrlib
 
   Warnings: 
      [1] smpmap:  z has no value
      [2] smpmap:  x has no value
      [3] smpmap:  y has no value
      [4] map: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE map (B (Mapping S R) A)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20193: FS2UPS}
\begin{verbatim}

>compiling FS2UPS.spad to FS2UPS.nrlib
 
   Warnings: 
      [1] exprToUPS: not known that (Ring) is of mode (CATEGORY package (SIGNATURE exprToUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE exprToGenUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE localAbs (FE FE)))
      [2] exprToUPS:  y1 has no value
      [3] exprToUPS:  y2 has no value
      [4] listToUPS:  %series has no value
      [5] powerToUPS:  %series has no value
      [6] kernelToUPS: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exprToUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE exprToGenUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE localAbs (FE FE)))
      [7] nthRootToUPS:  %series has no value
      [8] logToUPS:  %series has no value
      [9] atancotToUPS:  %series has no value
      [10] applyIfCan:  %series has no value
      [11] powToUPS:  %series has no value
      [12] newElem: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exprToUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE exprToGenUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE localAbs (FE FE)))
      [13] smpElem:  x1 has no value
      [14] iExprToGenUPS:  y1 has no value
      [15] iExprToGenUPS:  y2 has no value
      [16] opsInvolvingX: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exprToUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE exprToGenUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE localAbs (FE FE)))
      [17] powerToGenUPS:  %series has no value
      [18] nthRootToGenUPS:  %series has no value
      [19] logToGenUPS:  %series has no value
      [20] expToGenUPS:  %series has no value
      [21] expGenUPS:  %series has no value
      [22] atancotToGenUPS:  %problem has no value
      [23] atancotToGenUPS:  %series has no value
      [24] genUPSApplyIfCan:  %series has no value
      [25] applyBddIfCan:  %problem has no value
      [26] applyBddIfCan:  %series has no value
      [27] powToGenUPS:  %series has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20192: GAUSSFAC}
\begin{verbatim}

>compiling GAUSSFAC.spad to GAUSSFAC.nrlib
 
   Warnings: 
      [1] intfactor:  unity has no value
      [2] factor: :(NonNegativeInteger) -- should replace by pretend
      [3] factor:  result has no value
      [4] factor:  unity has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20191: GCNAALG}
\begin{verbatim}

>compiling GCNAALG.spad to GCNAALG.nrlib

   Warnings: 
      [1] leftRankPolynomial: signature of lhs not unique: (SparseUnivariatePolynomial (Fraction (Polynomial R))) chosen
      [2] rightRankPolynomial: signature of lhs not unique: (SparseUnivariatePolynomial (Fraction (Polynomial R))) chosen
      [3] genericLeftMinimalPolynomial:  x has no value
      [4] genericRightMinimalPolynomial:  x has no value
      [5] genericLeftNorm:  rf has no value
      [6] genericRightNorm:  rf has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20190: GENUFACT}
\begin{verbatim}

>compiling GENUFACT.spad to GENUFACT.nrlib
 
   Warnings: 
      [1] factor: not known that (UnivariatePolynomialCategory (Integer)) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) R $)))
      [2] factor: not known that (UnivariatePolynomialCategory (Fraction (Integer))) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) R $)))
      [3] factor: not known that (UnivariatePolynomialCategory (Complex (Integer))) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) R $)))
      [4] factor: not known that (UnivariatePolynomialCategory (Complex (Fraction (Integer)))) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) R $)))
      [5] factor: not known that (UnivariatePolynomialCategory (AlgebraicNumber)) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) R $)))
      [6] factor: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored (SparseUnivariatePolynomial R)) (SparseUnivariatePolynomial R))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20189: GENUPS}
\begin{verbatim}

>compiling GENUPS.spad to GENUPS.nrlib
 
   Warnings: 
      [1] taylor:  i has no value
      [2] laurent:  i has no value
      [3] puiseux:  i has no value
      [4] puiseux:  r has no value
      [5] series:  r has no value
      [6] series:  x has no value
      [7] series:  i has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20188: IAN}
\begin{verbatim}

>compiling IAN.spad to IAN.nrlib
 
   Warnings: 
      [1] makeUnivariate:  x has no value
      [2] norm:  x has no value
      [3] convert:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20187: INEP}
\begin{verbatim}

>compiling INEP.spad to INEP.nrlib
 
   Warnings: 
      [1] charpol: :(PositiveInteger) -- should replace by pretend
      [2] unknown Functor code (error unsupported matrix type)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20186: INFSP}
\begin{verbatim}

>compiling INFSP.spad to INFSP.nrlib
 
   Warnings: 
      [1] evaluate: not known that (Ring) is of mode (CATEGORY package (SIGNATURE innerSolve1 ((List F) (SparseUnivariatePolynomial K) Par)) (SIGNATURE innerSolve1 ((List F) (Polynomial K) Par)) (SIGNATURE innerSolve ((List (List F)) (List (Polynomial K)) (List (Polynomial K)) (List (Symbol)) Par)) (SIGNATURE makeEq ((List (Equation (Polynomial F))) (List F) (List (Symbol)))))
      [2] innerSolve1: not known that (UnivariatePolynomialCategory (Complex (Integer))) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) K $)))
      [3] innerSolve1: pretend(List F) -- should replace by @
      [4] innerSolve: pretenddmp -- should replace by @
      [5] innerSolve:  lq has no value
      [6] innerSolve: not known that (PolynomialCategory K (DirectProduct (# lv) (NonNegativeInteger)) OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [7] innerSolve: not known that (PolynomialCategory K (DirectProduct (call LENGTH lv) (NonNegativeInteger)) OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [8] innerSolve: pretend(List dmp) -- should replace by @
      [9] innerSolve:  listGen has no value
      [10] innerSolve:  result has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20185: INPRODPF}
\begin{verbatim}

>compiling INPRODPF.spad to INPRODPF.nrlib
 
   Warnings: 
      [1] applyOverZ:  z1 has no value
      [2] generalInfiniteProduct:  z1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20184: INTAF}
\begin{verbatim}

>compiling INTAF.spad to INTAF.nrlib
 
   Warnings: 
      [1] rootintegrate: not known that (Ring) is of mode (CATEGORY package (SIGNATURE algint ((IntegrationResult F) F (Kernel F) (Kernel F) (Mapping (SparseUnivariatePolynomial F) (SparseUnivariatePolynomial F)))))
      [2] rootintegrate: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE algint ((IntegrationResult F) F (Kernel F) (Kernel F) (Mapping (SparseUnivariatePolynomial F) (SparseUnivariatePolynomial F)))))
      [3] rootintegrate:  x1 has no value
      [4] algintegrate:  x1 has no value
      [5] UP2UPUP:  x1 has no value
      [6] UP2UPUP: not known that (Ring) is of mode (CATEGORY package (SIGNATURE algint ((IntegrationResult F) F (Kernel F) (Kernel F) (Mapping (SparseUnivariatePolynomial F) (SparseUnivariatePolynomial F)))))
      [7] UPUP2F:  x1 has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20183: INTALG}
\begin{verbatim}

>compiling INTALG.spad to INTALG.nrlib
 
   Warnings: 
      [1] algintexp:  x1 has no value
      [2] UPQ2F:  x has no value
      [3] UP2SUP:  x has no value
      [4] SUP2UP:  x has no value
      [5] R2UP: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE algintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palgintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palginfieldint ((Union R failed) R (Mapping UP UP))))
      [6] R2UP:  f1 has no value
      [7] R2UP: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE algintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palgintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palginfieldint ((Union R failed) R (Mapping UP UP))))
      [8] R2UP:  x1 has no value
      [9] R2UP: not known that (Ring) is of mode (CATEGORY package (SIGNATURE algintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palgintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palginfieldint ((Union R failed) R (Mapping UP UP))))
      [10] univ: not known that (Ring) is of mode (CATEGORY package (SIGNATURE algintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palgintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palginfieldint ((Union R failed) R (Mapping UP UP))))
      [11] rlift:  x1 has no value
      [12] palgintegrate:  x1 has no value
      [13] alglogint:  x1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20182: INTEF}
\begin{verbatim}

>compiling INTEF.spad to INTEF.nrlib
 
   Warnings: 
      [1] tanint: not known that (Ring) is of mode (CATEGORY package (SIGNATURE lfextendedint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) F)) (SIGNATURE lflimitedint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Symbol) (List F))) (SIGNATURE lfinfieldint ((Union F failed) F (Symbol))) (SIGNATURE lfintegrate ((IntegrationResult F) F (Symbol))) (SIGNATURE lfextlimint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) (Kernel F) (List (Kernel F)))))
      [2] tanint: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE lfextendedint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) F)) (SIGNATURE lflimitedint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Symbol) (List F))) (SIGNATURE lfinfieldint ((Union F failed) F (Symbol))) (SIGNATURE lfintegrate ((IntegrationResult F) F (Symbol))) (SIGNATURE lfextlimint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) (Kernel F) (List (Kernel F)))))
      [3] tanint:  x1 has no value
      [4] tanint:  x2 has no value
      [5] tanint:  x3 has no value
      [6] tanint:  x4 has no value
      [7] tanint:  x5 has no value
      [8] tanint:  x6 has no value
      [9] tanint:  x7 has no value
      [10] tanint:  x8 has no value
      [11] tanint:  x9 has no value
      [12] unknownint: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE lfextendedint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) F)) (SIGNATURE lflimitedint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Symbol) (List F))) (SIGNATURE lfinfieldint ((Union F failed) F (Symbol))) (SIGNATURE lfintegrate ((IntegrationResult F) F (Symbol))) (SIGNATURE lfextlimint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) (Kernel F) (List (Kernel F)))))
      [13] droponex: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE lfextendedint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) F)) (SIGNATURE lflimitedint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Symbol) (List F))) (SIGNATURE lfinfieldint ((Union F failed) F (Symbol))) (SIGNATURE lfintegrate ((IntegrationResult F) F (Symbol))) (SIGNATURE lfextlimint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) (Kernel F) (List (Kernel F)))))
      [14] alglfint: not known that (Ring) is of mode (CATEGORY package (SIGNATURE lfextendedint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) F)) (SIGNATURE lflimitedint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Symbol) (List F))) (SIGNATURE lfinfieldint ((Union F failed) F (Symbol))) (SIGNATURE lfintegrate ((IntegrationResult F) F (Symbol))) (SIGNATURE lfextlimint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) (Kernel F) (List (Kernel F)))))
      [15] alglfint:  x1 has no value
      [16] alglflimint:  x1 has no value
      [17] lfintegrate0:  x1 has no value
      [18] tryChangeVar:  x1 has no value
      [19] algexpint:  x1 has no value
      [20] algexpint:  x2 has no value
      [21] algprimint:  x1 has no value
      [22] algprimint:  x2 has no value
      [23] lfextendedint:  x1 has no value
      [24] lflimitedint:  x1 has no value
      [25] primextint:  x1 has no value
      [26] primextint:  x2 has no value
      [27] primextint:  x3 has no value
      [28] expextint:  x1 has no value
      [29] expextint:  x2 has no value
      [30] expextint:  x3 has no value
      [31] expextint:  x4 has no value
      [32] expextint:  x5 has no value
      [33] expextint:  x6 has no value
      [34] expextint:  x7 has no value
      [35] expextint:  x8 has no value
      [36] primint:  x1 has no value
      [37] primint:  x2 has no value
      [38] primint:  x3 has no value
      [39] expint:  x1 has no value
      [40] expint:  x2 has no value
      [41] expint:  x3 has no value
      [42] expint:  x4 has no value
      [43] expint:  x5 has no value
      [44] expint:  x6 has no value
      [45] expint:  x7 has no value
      [46] expint:  x8 has no value
      [47] primlimint:  x1 has no value
      [48] primlimint:  x2 has no value
      [49] primlimint:  x3 has no value
      [50] explimint:  x1 has no value
      [51] explimint:  x2 has no value
      [52] explimint:  x3 has no value
      [53] explimint:  x4 has no value
      [54] explimint:  x5 has no value
      [55] explimint:  x6 has no value
      [56] explimint:  x7 has no value
      [57] explimint:  x8 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20181: INTG0}
\begin{verbatim}

>compiling INTG0.spad to INTG0.nrlib
 
   Warnings: 
      [1] kerdiff: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F F (SparseUnivariatePolynomial F))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) F (SparseUnivariatePolynomial F))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) F (SparseUnivariatePolynomial F))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE univariate ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) F (Kernel F) (Kernel F) (SparseUnivariatePolynomial F))) (SIGNATURE multivariate (F (SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (Kernel F) F)) (SIGNATURE lift ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial F) (Kernel F))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (PROGN (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F))))) noBranch))
      [2] univ: not known that (Ring) is of mode (CATEGORY package (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F F (SparseUnivariatePolynomial F))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) F (SparseUnivariatePolynomial F))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) F (SparseUnivariatePolynomial F))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE univariate ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) F (Kernel F) (Kernel F) (SparseUnivariatePolynomial F))) (SIGNATURE multivariate (F (SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (Kernel F) F)) (SIGNATURE lift ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial F) (Kernel F))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (PROGN (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F))))) noBranch))
      [3] univ: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F F (SparseUnivariatePolynomial F))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) F (SparseUnivariatePolynomial F))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) F (SparseUnivariatePolynomial F))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE univariate ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) F (Kernel F) (Kernel F) (SparseUnivariatePolynomial F))) (SIGNATURE multivariate (F (SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (Kernel F) F)) (SIGNATURE lift ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial F) (Kernel F))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (PROGN (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F))))) noBranch))
      [4] lift:  x1 has no value
      [5] palgint0: not known that (Ring) is of mode (CATEGORY package (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F F (SparseUnivariatePolynomial F))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) F (SparseUnivariatePolynomial F))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) F (SparseUnivariatePolynomial F))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE univariate ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) F (Kernel F) (Kernel F) (SparseUnivariatePolynomial F))) (SIGNATURE multivariate (F (SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (Kernel F) F)) (SIGNATURE lift ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial F) (Kernel F))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (PROGN (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F))))) noBranch))
      [6] palgint0:  f1 has no value
      [7] palgint0: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F F (SparseUnivariatePolynomial F))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) F (SparseUnivariatePolynomial F))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) F (SparseUnivariatePolynomial F))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE univariate ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) F (Kernel F) (Kernel F) (SparseUnivariatePolynomial F))) (SIGNATURE multivariate (F (SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (Kernel F) F)) (SIGNATURE lift ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial F) (Kernel F))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (PROGN (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F))))) noBranch))
      [8] palgint0:  x1 has no value
      [9] palgextint0:  x1 has no value
      [10] palglimint0:  x1 has no value
      [11] multivariate:  x1 has no value
      [12] palgextint0:  f1 has no value
      [13] palglimint0:  f1 has no value
      [14] palgRDE0:  var has no value
      [15] palgRDE0:  coeff has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20180: INTHERAL}
\begin{verbatim}

>compiling INTHERAL.spad to INTHERAL.nrlib
 
   Warnings: 
      [1] HermiteIntegrate: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE HermiteIntegrate ((Record (: answer R) (: logpart R)) R (Mapping UP UP))))
      [2] localsolve:  x has no value
      [3] localsolve:  coef1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20179: INTPAF}
\begin{verbatim}

>compiling INTPAF.spad to INTPAF.nrlib
 
   Warnings: 
      [1] UPUP2F0: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE palgint ((IntegrationResult F) F (Kernel F) (Kernel F))) (SIGNATURE palgextint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F)) (SIGNATURE palglimint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F))) (SIGNATURE palgRDE ((Union F failed) F F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (SIGNATURE palgLODE ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Symbol))) noBranch))
      [2] chv: not known that (Ring) is of mode (CATEGORY package (SIGNATURE palgint ((IntegrationResult F) F (Kernel F) (Kernel F))) (SIGNATURE palgextint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F)) (SIGNATURE palglimint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F))) (SIGNATURE palgRDE ((Union F failed) F F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (SIGNATURE palgLODE ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Symbol))) noBranch))
      [3] RF2UPUP:  z1 has no value
      [4] RF2UPUP:  x1 has no value
      [5] linearInXIfCan: not known that (Ring) is of mode (CATEGORY package (SIGNATURE palgint ((IntegrationResult F) F (Kernel F) (Kernel F))) (SIGNATURE palgextint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F)) (SIGNATURE palglimint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F))) (SIGNATURE palgRDE ((Union F failed) F F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (SIGNATURE palgLODE ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Symbol))) noBranch))
      [6] linearInXIfCan: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE palgint ((IntegrationResult F) F (Kernel F) (Kernel F))) (SIGNATURE palgextint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F)) (SIGNATURE palglimint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F))) (SIGNATURE palgRDE ((Union F failed) F F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (SIGNATURE palgLODE ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Symbol))) noBranch))
      [7] prootintegrate:  f1 has no value
      [8] prootintegrate1: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE palgint ((IntegrationResult F) F (Kernel F) (Kernel F))) (SIGNATURE palgextint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F)) (SIGNATURE palglimint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F))) (SIGNATURE palgRDE ((Union F failed) F F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (SIGNATURE palgLODE ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Symbol))) noBranch))
      [9] prootintegrate1:  x1 has no value
      [10] candidates:  l has no value
      [11] prootlimint:  x1 has no value
      [12] prootextint:  x1 has no value
      [13] palgintegrate:  x1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20178: INTPM}
\begin{verbatim}

>compiling INTPM.spad to INTPM.nrlib
 
   Warnings: 
      [1]  x1 has no value
      [2] splitConstant: more than 1 modemap for: (One) with dc=F ===>(((F F) ((has R (SemiGroup)) (CONST F ($)))) ((F F) (T (CONST F ($)))))
      [3] matcherfei: not known that (SetCategory) is of mode (CATEGORY domain (SIGNATURE pmintegrate ((Union (Record (: special F) (: integrand F)) failed) F (Symbol))))
      [4] matchdilog: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE pmintegrate ((Union (Record (: special F) (: integrand F)) failed) F (Symbol))))
      [5] matchdilog:  x1 has no value
      [6] matchdilog0: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE pmintegrate ((Union (Record (: special F) (: integrand F)) failed) F (Symbol))))
      [7] matchdilog0: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE pmintegrate ((Union (Record (: special F) (: integrand F)) failed) F (Symbol))))
      [8] matchli:  x1 has no value
      [9] matchli0: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE pmintegrate ((Union (Record (: special F) (: integrand F)) failed) F (Symbol))))
      [10] matchsici:  ci0? has no value
      [11] pmintegrate:  const has no value
      [12] pmintegrate:  nconst has no value
      [13] pmComplexintegrate:  const has no value
      [14] pmComplexintegrate:  nconst has no value
      [15] formula1: not known that (OrderedSet) is of mode (CATEGORY $ (SIGNATURE pmintegrate ((Union F failed) F (Symbol) (OrderedCompletion F) (OrderedCompletion F))))
      [16] pmintegrate:  x1 has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20177: INTTOOLS}
\begin{verbatim}

>compiling INTTOOLS.spad to INTTOOLS.nrlib
 
   Warnings: 
      [1] varselect: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE varselect ((List (Kernel F)) (List (Kernel F)) (Symbol))) (SIGNATURE kmax ((Kernel F) (List (Kernel F)))) (SIGNATURE ksec ((Kernel F) (Kernel F) (List (Kernel F)) (Symbol))) (SIGNATURE union ((List (Kernel F)) (List (Kernel F)) (List (Kernel F)))) (SIGNATURE vark ((List (Kernel F)) (List F) (Symbol))) (IF (has R (IntegralDomain)) (SIGNATURE removeConstantTerm (F F (Symbol))) noBranch) (IF (has R (GcdDomain)) (IF (has F (ElementaryFunctionCategory)) (PROGN (SIGNATURE mkPrim (F F (Symbol))) (IF (has R (ConvertibleTo (Pattern (Integer)))) (IF (has R (PatternMatchable (Integer))) (IF (has F (LiouvillianFunctionCategory)) (IF (has F (RetractableTo (Symbol))) (SIGNATURE intPatternMatch ((IntegrationResult F) F (Symbol) (Mapping (IntegrationResult F) F (Symbol)) (Mapping (Union (Record (: special F) (: integrand F)) failed) F (Symbol)))) noBranch) noBranch) noBranch) noBranch)) noBranch) noBranch))
      [2] vark: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE varselect ((List (Kernel F)) (List (Kernel F)) (Symbol))) (SIGNATURE kmax ((Kernel F) (List (Kernel F)))) (SIGNATURE ksec ((Kernel F) (Kernel F) (List (Kernel F)) (Symbol))) (SIGNATURE union ((List (Kernel F)) (List (Kernel F)) (List (Kernel F)))) (SIGNATURE vark ((List (Kernel F)) (List F) (Symbol))) (IF (has R (IntegralDomain)) (SIGNATURE removeConstantTerm (F F (Symbol))) noBranch) (IF (has R (GcdDomain)) (IF (has F (ElementaryFunctionCategory)) (PROGN (SIGNATURE mkPrim (F F (Symbol))) (IF (has R (ConvertibleTo (Pattern (Integer)))) (IF (has R (PatternMatchable (Integer))) (IF (has F (LiouvillianFunctionCategory)) (IF (has F (RetractableTo (Symbol))) (SIGNATURE intPatternMatch ((IntegrationResult F) F (Symbol) (Mapping (IntegrationResult F) F (Symbol)) (Mapping (Union (Record (: special F) (: integrand F)) failed) F (Symbol)))) noBranch) noBranch) noBranch) noBranch)) noBranch) noBranch))
      [3] removeConstantTerm: not known that (OrderedSet) is of mode (CATEGORY $ (SIGNATURE removeConstantTerm (F F (Symbol))))
      [4] removeConstantTerm:  ans has no value
      [5] cont: not known that (Ring) is of mode (CATEGORY $ (SIGNATURE mkPrim (F F (Symbol))))
      [6] cont:  unit has no value
      [7] linearLog?: not known that (Ring) is of mode (CATEGORY $ (SIGNATURE mkPrim (F F (Symbol))))
      [8] intPatternMatch:  nl has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20176: ITRIGMNP}
\begin{verbatim}

>compiling ITRIGMNP.spad to ITRIGMNP.nrlib
 
   Warnings: 
      [1] FG2F: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE GF2FG (FG (Complex F))) (SIGNATURE FG2F (F FG)) (SIGNATURE F2FG (FG F)) (SIGNATURE explogs2trigs ((Complex F) FG)) (SIGNATURE trigs2explogs (FG FG (List (Kernel FG)) (List (Symbol)))))
      [2] F2FG:  x has no value
      [3] ker2explogs:  IN has no value
      [4] ker2explogs:  v has no value
      [5] ker2explogs: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE GF2FG (FG (Complex F))) (SIGNATURE FG2F (F FG)) (SIGNATURE F2FG (FG F)) (SIGNATURE explogs2trigs ((Complex F) FG)) (SIGNATURE trigs2explogs (FG FG (List (Kernel FG)) (List (Symbol)))))
      [6] ker2explogs:  a has no value
      [7] ker2trigs:  IN has no value
      [8] smp2trigs:  x has no value
      [9] explogs2trigs: not known that (Ring) is of mode (CATEGORY package (SIGNATURE GF2FG (FG (Complex F))) (SIGNATURE FG2F (F FG)) (SIGNATURE F2FG (FG F)) (SIGNATURE explogs2trigs ((Complex F) FG)) (SIGNATURE trigs2explogs (FG FG (List (Kernel FG)) (List (Symbol)))))
      [10] smp2explogs:  x has no value
      [11] smp2explogs:  y has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20175: KOVACIC}
\begin{verbatim}

>compiling KOVACIC.spad to KOVACIC.nrlib
 
   Warnings: 
      [1] kovacic: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE kovacic ((Union (SparseUnivariatePolynomial (Fraction UP)) failed) (Fraction UP) (Fraction UP) (Fraction UP))) (SIGNATURE kovacic ((Union (SparseUnivariatePolynomial (Fraction UP)) failed) (Fraction UP) (Fraction UP) (Fraction UP) (Mapping (Factored UP) UP))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20174: LF}
\begin{verbatim}

>compiling LF.spad to LF.nrlib
 
   Warnings: 
      [1] integrand: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE Ei (F F)) (SIGNATURE Si (F F)) (SIGNATURE Ci (F F)) (SIGNATURE li (F F)) (SIGNATURE erf (F F)) (SIGNATURE dilog (F F)) (SIGNATURE fresnelS (F F)) (SIGNATURE fresnelC (F F)) (SIGNATURE integral (F F (Symbol))) (SIGNATURE integral (F F (SegmentBinding F))))
      [2] eqint: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE Ei (F F)) (SIGNATURE Si (F F)) (SIGNATURE Ci (F F)) (SIGNATURE li (F F)) (SIGNATURE erf (F F)) (SIGNATURE dilog (F F)) (SIGNATURE fresnelS (F F)) (SIGNATURE fresnelC (F F)) (SIGNATURE integral (F F (Symbol))) (SIGNATURE integral (F F (SegmentBinding F))))
      [3]  z1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20173: LODOF}
\begin{verbatim}

>compiling LODOF.spad to LODOF.nrlib
 
   Warnings: 
      [1] factor: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((List (LinearOrdinaryDifferentialOperator1 (Fraction UP))) (LinearOrdinaryDifferentialOperator1 (Fraction UP)) (Mapping (List F) UP))) (IF (has F (AlgebraicallyClosedField)) (PROGN (SIGNATURE factor ((List (LinearOrdinaryDifferentialOperator1 (Fraction UP))) (LinearOrdinaryDifferentialOperator1 (Fraction UP)))) (SIGNATURE factor1 ((List (LinearOrdinaryDifferentialOperator1 (Fraction UP))) (LinearOrdinaryDifferentialOperator1 (Fraction UP))))) noBranch))
      [2] rfactor:  z has no value
      [3] zro1:  z1 has no value
      [4] zro1: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE factor1 ((List (LinearOrdinaryDifferentialOperator1 (Fraction UP))) (LinearOrdinaryDifferentialOperator1 (Fraction UP)))))
      [5] factor:  p has no value
      [6] factor1:  p has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20172: LSQM}
\begin{verbatim}

>compiling LSQM.spad to LSQM.nrlib
 
   Warnings: 
      [1] not known that (NonAssociativeAlgebra R) is of mode (CATEGORY domain (SIGNATURE transpose ($ $)) (SIGNATURE squareMatrix ($ (Matrix R))) (SIGNATURE coerce ((Matrix R) $)) (IF (has R (ATTRIBUTE (commutative *))) (ATTRIBUTE central) noBranch) (IF (has R (ATTRIBUTE (commutative *))) (IF (has R (ATTRIBUTE unitsKnown)) (ATTRIBUTE unitsKnown) noBranch) noBranch) (IF (has R (ConvertibleTo (InputForm))) (ATTRIBUTE (ConvertibleTo (InputForm))) noBranch))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20171: MULTFACT}
\begin{verbatim}

>compiling MULTFACT.spad to MULTFACT.nrlib
 
   Warnings: 
      [1] factor: not known that (OrderedSet) is of mode (CATEGORY OV (SIGNATURE convert ((Symbol) $)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20170: MYUP}
\begin{verbatim}

>compiling MYUP.spad to MYUP.nrlib
 
   Warnings: 
      [1] coerce:  z1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20169: MYEXPR}
\begin{verbatim}

>compiling MYEXPR.spad to MYEXPR.nrlib
 
   Warnings: 
      [1] iunivariate:  z1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20168: MYEXPR}
\begin{verbatim}

>compiling MYEXPR.spad to MYEXPR.nrlib
 
   Warnings: 
      [1] coerce:  z1 has no value
 
   Warnings: 
      [1] iunivariate:  z1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20167: NAGF01}
\begin{verbatim}

>compiling NAGF01.spad to NAGF01.nrlib
 
   Warnings: 
      [1] f01brf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] f01bsf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] f01maf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] f01mcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] f01qcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [6] f01qdf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] f01qef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [8] f01rcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [9] f01rdf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] f01ref: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20166: NAGF02}
\begin{verbatim}

>compiling NAGF02.spad to NAGF02.nrlib
 
   Warnings: 
      [1] f02aaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] f02abf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] f02adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] f02aef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] f02aff: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [6] f02agf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] f02ajf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [8] f02akf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [9] f02awf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] f02axf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [11] f02bbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [12] f02bjf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [13] f02fjf:  fn has no value
      [14] f02fjf:  fp has no value
      [15] f02fjf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [16] f02wef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [17] f02xef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20165: NAGF04}
\begin{verbatim}

>compiling NAGF04.spad to NAGF04.nrlib
 
   Warnings: 
      [1] f04adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] f04arf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] f04asf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] f04atf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] f04axf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [6] f04faf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] f04jgf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [8] f04maf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [9] f04mbf:  fn has no value
      [10] f04mbf:  fp has no value
      [11] f04mbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [12] f04mcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [13] f04qaf:  fn has no value
      [14] f04qaf:  fp has no value
      [15] f04qaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20164: NLINSOL}
\begin{verbatim}

>compiling NLINSOL.spad to NLINSOL.nrlib
 
   Warnings: 
      [1] allRoots: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solveInField ((List (List (Equation (Fraction (Polynomial R))))) (List (Polynomial R)) (List (Symbol)))) (SIGNATURE solveInField ((List (List (Equation (Fraction (Polynomial R))))) (List (Polynomial R)))) (SIGNATURE solve ((List (List (Equation (Fraction (Polynomial R))))) (List (Polynomial R)) (List (Symbol)))) (SIGNATURE solve ((List (List (Equation (Fraction (Polynomial R))))) (List (Polynomial R)))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20163: NSMP}
\begin{verbatim}

>compiling NSMP.spad to NSMP.nrlib
 
   Warnings: 
      [1] localMonicModulo:  a1 has no value
      [2] monicModulo:  mM has no value
      [3] exactQuotient:  a1 has no value
      [4] exactQuotient!:  a1 has no value
      [5] primitivePart!:  a1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20162: ODERTRIC}
\begin{verbatim}

>compiling ODERTRIC.spad to ODERTRIC.nrlib
 
   Warnings: 
      [1] UP2SUP:  z has no value
      [2] ricDsolve: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator1 (Fraction UP)) (Mapping (List F) UP))) (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator1 (Fraction UP)) (Mapping (List F) UP) (Mapping (Factored UP) UP))) (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (Mapping (List F) UP))) (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (Mapping (List F) UP) (Mapping (Factored UP) UP))) (SIGNATURE singRicDE ((List (Record (: frac (Fraction UP)) (: eq (LinearOrdinaryDifferentialOperator2 UP (Fraction UP))))) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (Mapping (Factored UP) UP))) (SIGNATURE polyRicDE ((List (Record (: poly UP) (: eq (LinearOrdinaryDifferentialOperator2 UP (Fraction UP))))) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (Mapping (List F) UP))) (IF (has F (AlgebraicallyClosedField)) (PROGN (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator1 (Fraction UP)))) (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator1 (Fraction UP)) (Mapping (Factored UP) UP))) (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)))) (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (Mapping (Factored UP) UP)))) noBranch))
      [3] mapeval:  z has no value
      [4] ratsln:  ls has no value
      [5] ratsln:  lv has no value
      [6] ratsol:  ans has no value
      [7] polyRicDE:  deg has no value
      [8] polyRicDE:  ans has no value
      [9] newtonSolution:  m has no value
      [10] nopoly:  z has no value
      [11] ricDsolve:  z has no value
      [12] zro1:  z has no value
      [13] zro1: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (Mapping (Factored UP) UP))))
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20161: OMEXPR}
\begin{verbatim}

>compiling OMEXPR.spad to OMEXPR.nrlib
 
   Warnings: 
      [1] outputOMFunction:  %defint has no value
      [2] outputOMFunction:  %defsum has no value
      [3] outputOMFunction:  %defprod has no value
      [4] outputOMFunction:  %power has no value
      [5] outputOMExpr: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE OMwrite ((String) (Expression R))) (SIGNATURE OMwrite ((String) (Expression R) (Boolean))) (SIGNATURE OMwrite ((Void) (OpenMathDevice) (Expression R))) (SIGNATURE OMwrite ((Void) (OpenMathDevice) (Expression R) (Boolean))))
      [6] OMwrite: pretend(String) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20160: PADE}
\begin{verbatim}

>compiling PADE.spad to PADE.nrlib
 
   Warnings: 
      [1] padeInner:  plist has no value
      [2] padeInner:  alist has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20159: PAN2EXPR}
\begin{verbatim}

>compiling PAN2EXPR.spad to PAN2EXPR.nrlib
 
   Warnings: 
      [1] coerce:  x has no value
      [2] coerce:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20158: PFO}
\begin{verbatim}

>compiling PFO.spad to PFO.nrlib
 
   Warnings: 
      [1] klist: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE order ((Union (NonNegativeInteger) failed) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsion? ((Boolean) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsionIfCan ((Union (Record (: order (NonNegativeInteger)) (: function R)) failed) (FiniteDivisor F UP UPUP R))))
      [2] UPQ2F: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE order ((Union (NonNegativeInteger) failed) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsion? ((Boolean) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsionIfCan ((Union (Record (: order (NonNegativeInteger)) (: function R)) failed) (FiniteDivisor F UP UPUP R))))
      [3] UP22UP:  p1 has no value
      [4] UP32UPUP:  p1 has no value
      [5] commonDen: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE order ((Union (NonNegativeInteger) failed) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsion? ((Boolean) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsionIfCan ((Union (Record (: order (NonNegativeInteger)) (: function R)) failed) (FiniteDivisor F UP UPUP R))))
      [6] alglist:  k1 has no value
      [7] krmod:  z1 has no value
      [8] raise2:  z1 has no value
      [9] algcurve:  z1 has no value
      [10] algcurve:  q1 has no value
      [11] rat:  q1 has no value
      [12] selectIntegers: not known that (Ring) is of mode (CATEGORY package (SIGNATURE order ((Union (NonNegativeInteger) failed) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsion? ((Boolean) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsionIfCan ((Union (Record (: order (NonNegativeInteger)) (: function R)) failed) (FiniteDivisor F UP UPUP R))))
      [13] toQ1:  p1 has no value
      [14] toQ2:  p1 has no value
      [15] kpmod:  p1 has no value
      [16] goodRed:  z1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20157: PFOQ}
\begin{verbatim}

>compiling PFOQ.spad to PFOQ.nrlib
 
   Warnings: 
      [1] rat:  z1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20156: PICOERCE}
\begin{verbatim}

>compiling PICOERCE.spad to PICOERCE.nrlib
 
   Warnings: 
      [1] p2e:  x1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20155: PMASSFS}
\begin{verbatim}

>compiling PMASSFS.spad to PMASSFS.nrlib
 
   Warnings: 
      [1] ass: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE assert (F F (String))) (SIGNATURE constant (F F)) (SIGNATURE optional (F F)) (SIGNATURE multiple (F F)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20154: PMFS}
\begin{verbatim}

>compiling PMFS.spad to PMFS.nrlib
 
   Warnings: 
      [1] patternMatch: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE patternMatch ((PatternMatchResult S F) F (Pattern S) (PatternMatchResult S F))))
      [2] patternMatch:  l1 has no value
      [3] patternMatch:  var has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20153: PMPREDFS}
\begin{verbatim}

>compiling PMPREDFS.spad to PMPREDFS.nrlib
 
   Warnings: 
      [1] suchThat: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE suchThat (F F (Mapping (Boolean) D))) (SIGNATURE suchThat (F F (List (Mapping (Boolean) D)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20152: PSETPK}
\begin{verbatim}

>compiling PSETPK.spad to PSETPK.nrlib
 
   Warnings: 
      [1] selectPolynomials:  gps has no value
      [2] selectPolynomials:  bps has no value
      [3] selectOrPolynomials:  gps has no value
      [4] selectOrPolynomials:  bps has no value
      [5] selectAndPolynomials:  gps has no value
      [6] selectAndPolynomials:  bps has no value
      [7] certainlySubVariety?:  polnum has no value
      [8] autoRemainder:  newlp has no value
      [9] rewriteSetByReducingWithParticularGenerators:  rs has no value
      [10] squareFreeFactors: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE removeRedundantFactorsInPols ((List P) (List P) (List P))))
      [11] univariatePolynomialsGcds:  p has no value
      [12] univariatePolynomialsGcds:  pInV has no value
      [13] univariatePolynomialsGcds:  stop has no value
      [14] univariatePolynomialsGcds:  lg has no value
      [15] removeRoughlyRedundantFactorsInContents:  newcp has no value
      [16] removeRedundantFactorsInContents:  newcp has no value
      [17] removeRedundantFactorsInPols:  newcp has no value
      [18] removeRedundantFactorsInPols:  newp has no value
      [19] unprotectedRemoveRedundantFactors:  d has no value
      [20] removeRedundantFactors:  toSee has no value
      [21] removeRedundantFactors:  toSave has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20151: RADFF}
\begin{verbatim}

>compiling RADFF.spad to RADFF.nrlib
 
   Warnings: 
      [1] fullVector:  s has no value
      [2] charPintbas:  s has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20150: RDEEF}
\begin{verbatim}

>compiling RDEEF.spad to RDEEF.nrlib
 
   Warnings: 
      [1] rischDEalg:  z1 has no value
      [2] rischDEalg:  z2 has no value
      [3] rischDEalg:  z3 has no value
      [4] rischDEalg: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE rischDE ((Record (: ans F) (: right F) (: sol? (Boolean))) (Integer) F F (Symbol) (Mapping (Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (List F)) (Mapping (Union (Record (: ratpart F) (: coeff F)) failed) F F))))
      [5] rischDEalg: not known that (Ring) is of mode (CATEGORY package (SIGNATURE rischDE ((Record (: ans F) (: right F) (: sol? (Boolean))) (Integer) F F (Symbol) (Mapping (Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (List F)) (Mapping (Union (Record (: ratpart F) (: coeff F)) failed) F F))))
      [6] normalise0: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE rischDE ((Record (: ans F) (: right F) (: sol? (Boolean))) (Integer) F F (Symbol) (Mapping (Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (List F)) (Mapping (Union (Record (: ratpart F) (: coeff F)) failed) F F))))
      [7] normalise0: not known that (Ring) is of mode (CATEGORY package (SIGNATURE rischDE ((Record (: ans F) (: right F) (: sol? (Boolean))) (Integer) F F (Symbol) (Mapping (Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (List F)) (Mapping (Union (Record (: ratpart F) (: coeff F)) failed) F F))))
      [8] normalise:  z1 has no value
      [9] normalise:  z2 has no value
      [10] polyDElog:  z1 has no value
      [11] polyDElog:  limitedlogs has no value
      [12] polyDElog: more than 1 modemap for: (Zero) with dc=F ===>(((F F) ((has R (AbelianSemiGroup)) (CONST F ($)))) ((F F) (T (CONST F ($)))))
      [13] polyDElog:  eq has no value
      [14] gpolDEexp:  z1 has no value
      [15] gpolDEexp:  z2 has no value
      [16] polyDEexp:  z1 has no value
      [17] polyDEexp:  z2 has no value
      [18] polyDEexp:  eq has no value
      [19] logdegrad:  z1 has no value
      [20] expdegrad:  z1 has no value
      [21] expdegrad:  z2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20149: RDEEFS}
\begin{verbatim}

>compiling RDEEFS.spad to RDEEFS.nrlib
 
   Warnings: 
      [1] basecase: not known that (Ring) is of mode (CATEGORY package (SIGNATURE rischDEsys ((Union (List F) failed) (Integer) F F F (Symbol) (Mapping (Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (List F)) (Mapping (Union (Record (: ratpart F) (: coeff F)) failed) F F))))
      [2] basecase: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE rischDEsys ((Union (List F) failed) (Integer) F F F (Symbol) (Mapping (Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (List F)) (Mapping (Union (Record (: ratpart F) (: coeff F)) failed) F F))))
      [3] rischDEsys: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE rischDEsys ((Union (List F) failed) (Integer) F F F (Symbol) (Mapping (Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (List F)) (Mapping (Union (Record (: ratpart F) (: coeff F)) failed) F F))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20148: RSETCAT}
\begin{verbatim}

>compiling RSETCAT.spad to RSETCAT.nrlib
 
   Warnings: 
      [1] intersect:  toSave has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20147: RSETGCD}
\begin{verbatim}

>compiling RSETGCD.spad to RSETGCD.nrlib
 
   Warnings: 
      [1] toseInvertible?:  x has no value
      [2] toseInvertible?:  y has no value
      [3] toseInvertibleSet:  toSave has no value
      [4] prepareSubResAlgo:  toSave has no value
      [5] internalLastSubResultant:  toReturn has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20146: RULE}
\begin{verbatim}

>compiling RULE.spad to RULE.nrlib
 
   Warnings: 
      [1] F2Symbol:  z has no value
      [2] F2Symbol: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE rule ($ F F)) (SIGNATURE rule ($ F F (List (Symbol)))) (SIGNATURE suchThat ($ $ (List (Symbol)) (Mapping (Boolean) (List F)))) (SIGNATURE pattern ((Pattern Base) $)) (SIGNATURE lhs (F $)) (SIGNATURE rhs (F $)) (SIGNATURE elt (F $ F (PositiveInteger))) (SIGNATURE quotedOperators ((List (Symbol)) $)))
      [3] retractIfCan: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE rule ($ F F)) (SIGNATURE rule ($ F F (List (Symbol)))) (SIGNATURE suchThat ($ $ (List (Symbol)) (Mapping (Boolean) (List F)))) (SIGNATURE pattern ((Pattern Base) $)) (SIGNATURE lhs (F $)) (SIGNATURE rhs (F $)) (SIGNATURE elt (F $ F (PositiveInteger))) (SIGNATURE quotedOperators ((List (Symbol)) $)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20145: SIGNEF}
\begin{verbatim}

>compiling SIGNEF.spad to SIGNEF.nrlib
 
   Warnings: 
      [1] sign: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE sign ((Union (Integer) failed) F)) (SIGNATURE sign ((Union (Integer) failed) F (Symbol) (OrderedCompletion F))) (SIGNATURE sign ((Union (Integer) failed) F (Symbol) F (String))))
      [2] sign:  z has no value
      [3] smpsign: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE sign ((Union (Integer) failed) F)) (SIGNATURE sign ((Union (Integer) failed) F (Symbol) (OrderedCompletion F))) (SIGNATURE sign ((Union (Integer) failed) F (Symbol) F (String))))
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20144: SIMPAN}
\begin{verbatim}

>compiling SIMPAN.spad to SIMPAN.nrlib
 
   Warnings: 
      [1] simplify: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has (Integer) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Integer))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Integer) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Integer) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20143: SOLVESER}
\begin{verbatim}

>compiling SOLVESER.spad to SOLVESER.nrlib
 
   Warnings: 
      [1] unvectorise: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE decomposeFunc ((Fraction (SparseUnivariatePolynomial (Expression R))) (Fraction (SparseUnivariatePolynomial (Expression R))) (Fraction (SparseUnivariatePolynomial (Expression R))) (Fraction (SparseUnivariatePolynomial (Expression R))))) (SIGNATURE unvectorise ((Fraction (SparseUnivariatePolynomial (Expression R))) (Vector (Expression R)) (Fraction (SparseUnivariatePolynomial (Expression R))) (Integer))))
      [2] unvectorise: not known that (Ring) is of mode (CATEGORY package (SIGNATURE decomposeFunc ((Fraction (SparseUnivariatePolynomial (Expression R))) (Fraction (SparseUnivariatePolynomial (Expression R))) (Fraction (SparseUnivariatePolynomial (Expression R))) (Fraction (SparseUnivariatePolynomial (Expression R))))) (SIGNATURE unvectorise ((Fraction (SparseUnivariatePolynomial (Expression R))) (Vector (Expression R)) (Fraction (SparseUnivariatePolynomial (Expression R))) (Integer))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20142: SOLVETRA}
\begin{verbatim}

>compiling SOLVETRA.spad to SOLVETRA.nrlib
 
   Warnings: 
      [1] solveInner: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE solve ((List (Equation (Expression R))) (Expression R))) (SIGNATURE solve ((List (Equation (Expression R))) (Equation (Expression R)))) (SIGNATURE solve ((List (Equation (Expression R))) (Equation (Expression R)) (Symbol))) (SIGNATURE solve ((List (Equation (Expression R))) (Expression R) (Symbol))) (SIGNATURE solve ((List (List (Equation (Expression R)))) (List (Equation (Expression R))) (List (Symbol)))))
      [2] solveInner: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solve ((List (Equation (Expression R))) (Expression R))) (SIGNATURE solve ((List (Equation (Expression R))) (Equation (Expression R)))) (SIGNATURE solve ((List (Equation (Expression R))) (Equation (Expression R)) (Symbol))) (SIGNATURE solve ((List (Equation (Expression R))) (Expression R) (Symbol))) (SIGNATURE solve ((List (List (Equation (Expression R)))) (List (Equation (Expression R))) (List (Symbol)))))
      [3] tryToTrans: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has R (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace R)) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has R (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has R (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [4] tryToTrans: not known that (AlgebraicallyClosedField) is of mode (CATEGORY domain (IF (has R (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace R)) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has R (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has R (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [5] subsTan: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE solve ((List (Equation (Expression R))) (Expression R))) (SIGNATURE solve ((List (Equation (Expression R))) (Equation (Expression R)))) (SIGNATURE solve ((List (Equation (Expression R))) (Equation (Expression R)) (Symbol))) (SIGNATURE solve ((List (Equation (Expression R))) (Expression R) (Symbol))) (SIGNATURE solve ((List (List (Equation (Expression R)))) (List (Equation (Expression R))) (List (Symbol)))))
      [6] buildnexpr:  anscoeff has no value
      [7] buildnexpr:  ansmant has no value
      [8] combineLog:  ans has no value
      [9] funcinv: not known that (OrderedSet) is of mode (CATEGORY R (ATTRIBUTE complex))
      [10] smp2Poly:  x has no value
      [11] smp2Poly:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20141: SUMFS}
\begin{verbatim}

>compiling SUMFS.spad to SUMFS.nrlib
 
   Warnings: 
      [1] sum: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE sum (F F (Symbol))) (SIGNATURE sum (F F (SegmentBinding F))))
      [2] notRF?: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE sum (F F (Symbol))) (SIGNATURE sum (F F (SegmentBinding F))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20140: TOOLSIGN}
\begin{verbatim}

>compiling TOOLSIGN.spad to TOOLSIGN.nrlib
 
   Warnings: 
      [1] nonQsign: pretend(AlgebraicNumber) -- should replace by @
      [2] nonQsign: not known that (AlgebraicallyClosedField) is of mode (CATEGORY domain (IF (has (Integer) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Integer))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Integer) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Integer) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [3] nonQsign: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has (Integer) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Integer))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Integer) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Integer) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20139: TRIGMNIP}
\begin{verbatim}

>compiling TRIGMNIP.spad to TRIGMNIP.nrlib
 
   Warnings: 
      [1] K2KG: not known that (RadicalCategory) is of mode (CATEGORY domain (IF (has (Complex R) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Complex R))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Complex R) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Complex R) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [2] K2KG: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has (Complex R) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Complex R))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Complex R) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Complex R) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [3] K2KG: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE complexNormalize (F F)) (SIGNATURE complexNormalize (F F (Symbol))) (SIGNATURE complexElementary (F F)) (SIGNATURE complexElementary (F F (Symbol))) (SIGNATURE trigs (F F)) (SIGNATURE real (F F)) (SIGNATURE imag (F F)) (SIGNATURE real? ((Boolean) F)) (SIGNATURE complexForm ((Complex F) F)))
      [4] real?:  ker has no value
      [5] complexKernels: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE complexNormalize (F F)) (SIGNATURE complexNormalize (F F (Symbol))) (SIGNATURE complexElementary (F F)) (SIGNATURE complexElementary (F F (Symbol))) (SIGNATURE trigs (F F)) (SIGNATURE real (F F)) (SIGNATURE imag (F F)) (SIGNATURE real? ((Boolean) F)) (SIGNATURE complexForm ((Complex F) F)))
      [6] complexKernels:  lk has no value
      [7] complexKernels:  lv has no value
      [8] locexplogs:  x has no value
      [9] complexNormalize:  y has no value
      [10] complexNormalize: not known that (AlgebraicallyClosedField) is of mode (CATEGORY domain (IF (has (Complex R) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Complex R))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Complex R) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Complex R) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [11] complexNormalize: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has (Complex R) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Complex R))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Complex R) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Complex R) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [12] complexNormalize:  x has no value
      [13] complexElementary:  y has no value
      [14] complexElementary:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20138: TRMANIP}
\begin{verbatim}

>compiling TRMANIP.spad to TRMANIP.nrlib
 
   Warnings: 
      [1] logArgs: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE expand (F F)) (SIGNATURE simplify (F F)) (SIGNATURE htrigs (F F)) (SIGNATURE simplifyExp (F F)) (SIGNATURE simplifyLog (F F)) (SIGNATURE expandPower (F F)) (SIGNATURE expandLog (F F)) (SIGNATURE cos2sec (F F)) (SIGNATURE cosh2sech (F F)) (SIGNATURE cot2trig (F F)) (SIGNATURE coth2trigh (F F)) (SIGNATURE csc2sin (F F)) (SIGNATURE csch2sinh (F F)) (SIGNATURE sec2cos (F F)) (SIGNATURE sech2cosh (F F)) (SIGNATURE sin2csc (F F)) (SIGNATURE sinh2csch (F F)) (SIGNATURE tan2trig (F F)) (SIGNATURE tanh2trigh (F F)) (SIGNATURE tan2cot (F F)) (SIGNATURE tanh2coth (F F)) (SIGNATURE cot2tan (F F)) (SIGNATURE coth2tanh (F F)) (SIGNATURE removeCosSq (F F)) (SIGNATURE removeSinSq (F F)) (SIGNATURE removeCoshSq (F F)) (SIGNATURE removeSinhSq (F F)) (IF (has R (PatternMatchable R)) (IF (has R (ConvertibleTo (Pattern R))) (IF (has F (ConvertibleTo (Pattern R))) (IF (has F (PatternMatchable R)) (SIGNATURE expandTrigProducts (F F)) noBranch) noBranch) noBranch) noBranch))
      [2] logArgs:  sum has no value
      [3] logArgs:  arg has no value
      [4] simplifyLog1:  exprs has no value
      [5] simplifyLog1:  terms has no value
      [6] simplifyLog1: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE expand (F F)) (SIGNATURE simplify (F F)) (SIGNATURE htrigs (F F)) (SIGNATURE simplifyExp (F F)) (SIGNATURE simplifyLog (F F)) (SIGNATURE expandPower (F F)) (SIGNATURE expandLog (F F)) (SIGNATURE cos2sec (F F)) (SIGNATURE cosh2sech (F F)) (SIGNATURE cot2trig (F F)) (SIGNATURE coth2trigh (F F)) (SIGNATURE csc2sin (F F)) (SIGNATURE csch2sinh (F F)) (SIGNATURE sec2cos (F F)) (SIGNATURE sech2cosh (F F)) (SIGNATURE sin2csc (F F)) (SIGNATURE sinh2csch (F F)) (SIGNATURE tan2trig (F F)) (SIGNATURE tanh2trigh (F F)) (SIGNATURE tan2cot (F F)) (SIGNATURE tanh2coth (F F)) (SIGNATURE cot2tan (F F)) (SIGNATURE coth2tanh (F F)) (SIGNATURE removeCosSq (F F)) (SIGNATURE removeSinSq (F F)) (SIGNATURE removeCoshSq (F F)) (SIGNATURE removeSinhSq (F F)) (IF (has R (PatternMatchable R)) (IF (has R (ConvertibleTo (Pattern R))) (IF (has F (ConvertibleTo (Pattern R))) (IF (has F (PatternMatchable R)) (SIGNATURE expandTrigProducts (F F)) noBranch) noBranch) noBranch) noBranch))
      [7] expandpow: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE expand (F F)) (SIGNATURE simplify (F F)) (SIGNATURE htrigs (F F)) (SIGNATURE simplifyExp (F F)) (SIGNATURE simplifyLog (F F)) (SIGNATURE expandPower (F F)) (SIGNATURE expandLog (F F)) (SIGNATURE cos2sec (F F)) (SIGNATURE cosh2sech (F F)) (SIGNATURE cot2trig (F F)) (SIGNATURE coth2trigh (F F)) (SIGNATURE csc2sin (F F)) (SIGNATURE csch2sinh (F F)) (SIGNATURE sec2cos (F F)) (SIGNATURE sech2cosh (F F)) (SIGNATURE sin2csc (F F)) (SIGNATURE sinh2csch (F F)) (SIGNATURE tan2trig (F F)) (SIGNATURE tanh2trigh (F F)) (SIGNATURE tan2cot (F F)) (SIGNATURE tanh2coth (F F)) (SIGNATURE cot2tan (F F)) (SIGNATURE coth2tanh (F F)) (SIGNATURE removeCosSq (F F)) (SIGNATURE removeSinSq (F F)) (SIGNATURE removeCoshSq (F F)) (SIGNATURE removeSinhSq (F F)) (IF (has R (PatternMatchable R)) (IF (has R (ConvertibleTo (Pattern R))) (IF (has F (ConvertibleTo (Pattern R))) (IF (has F (PatternMatchable R)) (SIGNATURE expandTrigProducts (F F)) noBranch) noBranch) noBranch) noBranch))
      [8] termexp:  z has no value
      [9] termexp:  exponent has no value
      [10] expandPower:  z has no value
      [11] powersimp:  z has no value
      [12] cos2sec:  z1 has no value
      [13] sin2csc:  z1 has no value
      [14] tan2cot:  z1 has no value
      [15] cot2tan:  z1 has no value
      [16] cosh2sech:  z1 has no value
      [17] sinh2csch:  z1 has no value
      [18] tanh2coth:  z1 has no value
      [19] coth2tanh:  z1 has no value
      [20] removeCosSq:  z1 has no value
      [21] removeCoshSq:  z1 has no value
      [22] smpexpand:  r1 has no value
      [23] smplog:  r1 has no value
      [24] smp2htrigs:  k1 has no value
      [25] smp2htrigs:  r1 has no value
      [26] htrigs: not known that (Ring) is of mode (CATEGORY package (SIGNATURE expand (F F)) (SIGNATURE simplify (F F)) (SIGNATURE htrigs (F F)) (SIGNATURE simplifyExp (F F)) (SIGNATURE simplifyLog (F F)) (SIGNATURE expandPower (F F)) (SIGNATURE expandLog (F F)) (SIGNATURE cos2sec (F F)) (SIGNATURE cosh2sech (F F)) (SIGNATURE cot2trig (F F)) (SIGNATURE coth2trigh (F F)) (SIGNATURE csc2sin (F F)) (SIGNATURE csch2sinh (F F)) (SIGNATURE sec2cos (F F)) (SIGNATURE sech2cosh (F F)) (SIGNATURE sin2csc (F F)) (SIGNATURE sinh2csch (F F)) (SIGNATURE tan2trig (F F)) (SIGNATURE tanh2trigh (F F)) (SIGNATURE tan2cot (F F)) (SIGNATURE tanh2coth (F F)) (SIGNATURE cot2tan (F F)) (SIGNATURE coth2tanh (F F)) (SIGNATURE removeCosSq (F F)) (SIGNATURE removeSinSq (F F)) (SIGNATURE removeCoshSq (F F)) (SIGNATURE removeSinhSq (F F)) (IF (has R (PatternMatchable R)) (IF (has R (ConvertibleTo (Pattern R))) (IF (has F (ConvertibleTo (Pattern R))) (IF (has F (PatternMatchable R)) (SIGNATURE expandTrigProducts (F F)) noBranch) noBranch) noBranch) noBranch))
      [27] exlog: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE expand (F F)) (SIGNATURE simplify (F F)) (SIGNATURE htrigs (F F)) (SIGNATURE simplifyExp (F F)) (SIGNATURE simplifyLog (F F)) (SIGNATURE expandPower (F F)) (SIGNATURE expandLog (F F)) (SIGNATURE cos2sec (F F)) (SIGNATURE cosh2sech (F F)) (SIGNATURE cot2trig (F F)) (SIGNATURE coth2trigh (F F)) (SIGNATURE csc2sin (F F)) (SIGNATURE csch2sinh (F F)) (SIGNATURE sec2cos (F F)) (SIGNATURE sech2cosh (F F)) (SIGNATURE sin2csc (F F)) (SIGNATURE sinh2csch (F F)) (SIGNATURE tan2trig (F F)) (SIGNATURE tanh2trigh (F F)) (SIGNATURE tan2cot (F F)) (SIGNATURE tanh2coth (F F)) (SIGNATURE cot2tan (F F)) (SIGNATURE coth2tanh (F F)) (SIGNATURE removeCosSq (F F)) (SIGNATURE removeSinSq (F F)) (SIGNATURE removeCoshSq (F F)) (SIGNATURE removeSinhSq (F F)) (IF (has R (PatternMatchable R)) (IF (has R (ConvertibleTo (Pattern R))) (IF (has F (ConvertibleTo (Pattern R))) (IF (has F (PatternMatchable R)) (SIGNATURE expandTrigProducts (F F)) noBranch) noBranch) noBranch) noBranch))
      [28] logexpand:  IN has no value
      [29] logexpand:  x has no value
      [30] kerexpand:  IN has no value
      [31] kerexpand:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20137: UPXSSING}
\begin{verbatim}

>compiling UPXSSING.spad to UPXSSING.nrlib
 
   Warnings: 
      [1] retractIfCan: signature of lhs not unique: (Union (UnivariatePuiseuxSeries FE var cen) failed)$ chosen
      [2] sortAndDiscardTerms:  zeroTerms has no value
      [3] sortAndDiscardTerms:  infiniteTerms has no value
      [4] sortAndDiscardTerms:  failedTerms has no value
      [5] dominantTermOnList:  x has no value
      [6] dominantTermOnList:  y has no value
      [7] dominantTermOnList:  %list has no value
      [8] dominantTermOnList:  %order has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20136: UTSODE}
\begin{verbatim}

>compiling UTSODE.spad to UTSODE.nrlib
 
   Warnings: 
      [1] stFunc1:  s has no value
      [2] stFunc2:  s1 has no value
      [3] stFunc2:  s2 has no value
      [4] stFuncN:  ls has no value
      [5] divloop:  s has no value
      [6] iOde1:  s has no value
      [7] iOde2:  s has no value
      [8] iOde:  ls has no value
      [9] iMpsode:  ls has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20135: UTSODETL}
\begin{verbatim}

>compiling UTSODETL.spad to UTSODETL.nrlib
 
   Warnings: 
      [1] LODO2FUN:  l1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20134: UTSSOL}
\begin{verbatim}

>compiling UTSSOL.spad to UTSSOL.nrlib

   Warnings: 
      [1] seriesSolve:  x has no value
      [2] seriesSolve:  res has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20133: WUTSET}
\begin{verbatim}

>compiling WUTSET.spad to WUTSET.nrlib
 
   Warnings: 
      [1] medialSetWithTrace:  rs has no value
      [2] medialSetWithTrace:  contradiction has no value
      [3] medialSetWithTrace:  bs has no value
      [4] characteristicSetUsingTrace:  contradiction has no value
      [5] characteristicSetUsingTrace:  rs has no value
      [6] characteristicSetUsingTrace:  ms has no value
      [7] zeroSetSplit:  newlts has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20132: DEFINTEF}
\begin{verbatim}

>compiling DEFINTEF.spad to DEFINTEF.nrlib
 
   Warnings: 
      [1] checkForPole: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE integrate ((Union (: f1 (OrderedCompletion F)) (: f2 (List (OrderedCompletion F))) (: fail failed) (: pole potentialPole)) F (SegmentBinding (OrderedCompletion F)))) (SIGNATURE integrate ((Union (: f1 (OrderedCompletion F)) (: f2 (List (OrderedCompletion F))) (: fail failed) (: pole potentialPole)) F (SegmentBinding (OrderedCompletion F)) (String))) (SIGNATURE innerint ((Union (: f1 (OrderedCompletion F)) (: f2 (List (OrderedCompletion F))) (: fail failed) (: pole potentialPole)) F (Symbol) (OrderedCompletion F) (OrderedCompletion F) (Boolean))))
      [2] polyIfCan: not known that (Ring) is of mode (CATEGORY package (SIGNATURE integrate ((Union (: f1 (OrderedCompletion F)) (: f2 (List (OrderedCompletion F))) (: fail failed) (: pole potentialPole)) F (SegmentBinding (OrderedCompletion F)))) (SIGNATURE integrate ((Union (: f1 (OrderedCompletion F)) (: f2 (List (OrderedCompletion F))) (: fail failed) (: pole potentialPole)) F (SegmentBinding (OrderedCompletion F)) (String))) (SIGNATURE innerint ((Union (: f1 (OrderedCompletion F)) (: f2 (List (OrderedCompletion F))) (: fail failed) (: pole potentialPole)) F (Symbol) (OrderedCompletion F) (OrderedCompletion F) (Boolean))))
      [3] polyIfCan: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE integrate ((Union (: f1 (OrderedCompletion F)) (: f2 (List (OrderedCompletion F))) (: fail failed) (: pole potentialPole)) F (SegmentBinding (OrderedCompletion F)))) (SIGNATURE integrate ((Union (: f1 (OrderedCompletion F)) (: f2 (List (OrderedCompletion F))) (: fail failed) (: pole potentialPole)) F (SegmentBinding (OrderedCompletion F)) (String))) (SIGNATURE innerint ((Union (: f1 (OrderedCompletion F)) (: f2 (List (OrderedCompletion F))) (: fail failed) (: pole potentialPole)) F (Symbol) (OrderedCompletion F) (OrderedCompletion F) (Boolean))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20131: DEFINTRF}
\begin{verbatim}

>compiling DEFINTRF.spad to DEFINTRF.nrlib
 
   Warnings: 
      [1] nopole: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has R (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace R)) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has R (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has R (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [2] nopole: not known that (AlgebraicallyClosedFunctionSpace R) is of mode (CATEGORY domain (IF (has R (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace R)) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has R (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has R (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [3] integrate:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20130: DFINTTLS}
\begin{verbatim}

>compiling DFINTTLS.spad to DFINTTLS.nrlib
 
   Warnings: 
      [1] findLimit: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE ignore? ((Boolean) (String))) (SIGNATURE computeInt ((Union (OrderedCompletion F) failed) (Kernel F) F (OrderedCompletion F) (OrderedCompletion F) (Boolean))) (SIGNATURE checkForZero ((Union (Boolean) failed) (Polynomial R) (Symbol) (OrderedCompletion F) (OrderedCompletion F) (Boolean))) (SIGNATURE checkForZero ((Union (Boolean) failed) (SparseUnivariatePolynomial F) (OrderedCompletion F) (OrderedCompletion F) (Boolean))))
      [2] mkLogPos: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE ignore? ((Boolean) (String))) (SIGNATURE computeInt ((Union (OrderedCompletion F) failed) (Kernel F) F (OrderedCompletion F) (OrderedCompletion F) (Boolean))) (SIGNATURE checkForZero ((Union (Boolean) failed) (Polynomial R) (Symbol) (OrderedCompletion F) (OrderedCompletion F) (Boolean))) (SIGNATURE checkForZero ((Union (Boolean) failed) (SparseUnivariatePolynomial F) (OrderedCompletion F) (OrderedCompletion F) (Boolean))))
      [3] checkForZero:  s has no value
      [4] checkForZero: not known that (Ring) is of mode (CATEGORY package (SIGNATURE ignore? ((Boolean) (String))) (SIGNATURE computeInt ((Union (OrderedCompletion F) failed) (Kernel F) F (OrderedCompletion F) (OrderedCompletion F) (Boolean))) (SIGNATURE checkForZero ((Union (Boolean) failed) (Polynomial R) (Symbol) (OrderedCompletion F) (OrderedCompletion F) (Boolean))) (SIGNATURE checkForZero ((Union (Boolean) failed) (SparseUnivariatePolynomial F) (OrderedCompletion F) (OrderedCompletion F) (Boolean))))
      [5] findRealZero:  fin has no value
      [6] findRealZero:  s has no value
      [7] findRealZero:  halfinf has no value
      [8] var:  i has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20129: EFULS}
\begin{verbatim}

>compiling EFULS.spad to EFULS.nrlib

   Warnings: 
      [1] tanIfCan: not known that (Algebra (Fraction (Integer))) is of mode (CATEGORY Coef (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) Coef)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20128: ESCONT}
\begin{verbatim}

>compiling ESCONT.spad to ESCONT.nrlib
 
   Warnings: 
      [1] zerosOf: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE getlo ((DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE gethi ((DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE functionIsFracPolynomial? ((Boolean) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))) (SIGNATURE problemPoints ((List (DoubleFloat)) (Expression (DoubleFloat)) (Symbol) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE zerosOf ((Stream (DoubleFloat)) (Expression (DoubleFloat)) (List (Symbol)) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE singularitiesOf ((Stream (DoubleFloat)) (Expression (DoubleFloat)) (List (Symbol)) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE singularitiesOf ((Stream (DoubleFloat)) (Vector (Expression (DoubleFloat))) (List (Symbol)) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE polynomialZeros ((List (DoubleFloat)) (Polynomial (Fraction (Integer))) (Symbol) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE df2st ((String) (DoubleFloat))) (SIGNATURE ldf2lst ((List (String)) (List (DoubleFloat)))) (SIGNATURE sdf2lst ((List (String)) (Stream (DoubleFloat)))))
      [2] zerosOf:  t1 has no value
      [3] zerosOf:  t2 has no value
      [4] singularitiesOf:  t3 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20127: EXPR}
\begin{verbatim}

>compiling EXPR.spad to EXPR.nrlib
 
   Warnings: 
      [1] not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [2] simplifyPower: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [3] **: pretend(Integer) -- should replace by @
      [4] **: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [5] <: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [6] numer: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [7] algkernels:  x has no value
      [8] toprat: not known that (Field) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [9] toprat: not known that (ExpressionSpace) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [10] toprat: not known that (SIGNATURE numer ((SparseMultivariatePolynomial R (Kernel $)) $)) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [11] toprat: not known that (SIGNATURE denom ((SparseMultivariatePolynomial R (Kernel $)) $)) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [12] toprat: not known that (SIGNATURE coerce ($ (SparseMultivariatePolynomial R (Kernel $)))) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [13] reducedSystem: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [14] commonk0: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [15] rootOf: not known that (FunctionSpace R) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [16] rootOf: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [17] pi: not known that (FunctionSpace R) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [18] pi: not known that (RadicalCategory) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [19] abs: not known that (FunctionSpace R) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [20] **: not known that (FunctionSpace R) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [21] erf: not known that (FunctionSpace R) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [22] erf: not known that (RadicalCategory) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [23] erf: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [24] operator: not known that (FunctionSpace R) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [25] operator: not known that (ExpressionSpace) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [26] evl0: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [27] gcdPolynomial: not known that (GcdDomain) is of mode (CATEGORY domain (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))))
      [28] factorPolynomial: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))))
      [29] factorPolynomial: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))))
      [30] coerce: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [31] retract: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [32] retractIfCan: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [33] k2expr:  x has no value
      [34] k2expr: not known that (ExpressionSpace) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [35] smp2expr:  x has no value
      [36] smp2expr: not known that (SetCategory) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [37] smp2expr: not known that (SIGNATURE + ($ $ $)) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [38] smp2expr: not known that (SIGNATURE * ($ $ $)) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [39] smp2expr: not known that (SIGNATURE ** ($ $ (NonNegativeInteger))) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [40] smp2an: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [41] convert: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [42] eval: not known that (ConvertibleTo (InputForm)) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [43] patternMatch: not known that (FunctionSpace R) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [44] patternMatch: not known that (ConvertibleTo (Pattern (Integer))) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [45] patternMatch: not known that (PatternMatchable (Integer)) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [46] patternMatch: not known that (RetractableTo (Kernel $)) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [47] patternMatch: not known that (SetCategory) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [48] patternMatch: not known that (ConvertibleTo (Pattern (Float))) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [49] patternMatch: not known that (PatternMatchable (Float)) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [50] kereval:  x1 has no value
      [51] kereval:  x2 has no value
      [52] subeval:  x has no value
      [53] isPlus:  gen has no value
      [54] eval:  x2 has no value
      [55] eval:  x1 has no value
      [56] subst:  x1 has no value
      [57] not known that (Ring) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))
      [58] not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE simplifyPower ($ $ (Integer))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20126: EXPRSOL}
\begin{verbatim}

>compiling EXPRSOL.spad to EXPRSOL.nrlib
 
   Warnings: 
      [1] replaceDiffs: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE seriesSolve (UTSF F (BasicOperator) (Symbol) (List F))) (SIGNATURE replaceDiffs (F F (BasicOperator) (Symbol))))
      [2] replaceDiffs:  %diff has no value
      [3] seriesSolve:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20125: EXPR2UPS}
\begin{verbatim}

>compiling EXPR2UPS.spad to EXPR2UPS.nrlib
 
   Warnings: 
      [1] iTaylor:  %problem has no value
      [2] iTaylor:  %series has no value
      [3] taylor: more than 1 modemap for: (Zero) with dc=FE ===>(((FE FE) ((has R (AbelianSemiGroup)) (CONST FE ($)))) ((FE FE) (T (CONST FE ($)))))
      [4] iLaurent:  %problem has no value
      [5] iLaurent:  %series has no value
      [6] laurent: more than 1 modemap for: (Zero) with dc=FE ===>(((FE FE) ((has R (AbelianSemiGroup)) (CONST FE ($)))) ((FE FE) (T (CONST FE ($)))))
      [7] iPuiseux:  %problem has no value
      [8] iPuiseux:  %series has no value
      [9] puiseux: more than 1 modemap for: (Zero) with dc=FE ===>(((FE FE) ((has R (AbelianSemiGroup)) (CONST FE ($)))) ((FE FE) (T (CONST FE ($)))))
      [10] iSeries:  %problem has no value
      [11] iSeries:  %series has no value
      [12] series: more than 1 modemap for: (Zero) with dc=FE ===>(((FE FE) ((has R (AbelianSemiGroup)) (CONST FE ($)))) ((FE FE) (T (CONST FE ($)))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20124: FACTEXT}
\begin{verbatim}

>compiling FACTEXT.spad to FACTEXT.nrlib
 
   Warnings: 
      [1] factor: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored (SparseUnivariatePolynomial K)) (SparseUnivariatePolynomial K) K)) (SIGNATURE factorSqFree ((Factored (SparseUnivariatePolynomial K)) (SparseUnivariatePolynomial K) K)))
      [2] norm: not known that (Ring) is of mode (CATEGORY package (SIGNATURE factor ((Factored (SparseUnivariatePolynomial K)) (SparseUnivariatePolynomial K) K)) (SIGNATURE factorSqFree ((Factored (SparseUnivariatePolynomial K)) (SparseUnivariatePolynomial K) K)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20123: FDIV}
\begin{verbatim}

>compiling FDIV.spad to FDIV.nrlib
 
   Warnings: 
      [1] *: signature of lhs not unique: $(Integer)$ chosen
      [2] reduce:  s has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20122: FSCINT}
\begin{verbatim}

>compiling FSCINT.spad to FSCINT.nrlib
 
   Warnings: 
      [1] K2KG: not known that (RadicalCategory) is of mode (CATEGORY domain (IF (has (Complex R) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Complex R))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Complex R) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Complex R) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [2] K2KG: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has (Complex R) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Complex R))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Complex R) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Complex R) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [3] K2KG: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE internalIntegrate ((IntegrationResult F) F (Symbol))) (SIGNATURE internalIntegrate0 ((IntegrationResult F) F (Symbol))) (SIGNATURE complexIntegrate (F F (Symbol))))
      [4] internalIntegrate:  x1 has no value
      [5] internalIntegrate: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE internalIntegrate ((IntegrationResult F) F (Symbol))) (SIGNATURE internalIntegrate0 ((IntegrationResult F) F (Symbol))) (SIGNATURE complexIntegrate (F F (Symbol))))
      [6] internalIntegrate: not known that (AlgebraicallyClosedField) is of mode (CATEGORY domain (IF (has (Complex R) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Complex R))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Complex R) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Complex R) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [7] internalIntegrate: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has (Complex R) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Complex R))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Complex R) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Complex R) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20121: FSINT}
\begin{verbatim}

>compiling FSINT.spad to FSINT.nrlib
 
   Warnings: 
      [1] K2KG: not known that (RadicalCategory) is of mode (CATEGORY domain (IF (has (Complex R) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Complex R))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Complex R) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Complex R) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [2] K2KG: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has (Complex R) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Complex R))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Complex R) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Complex R) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [3] K2KG: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE integrate ((Union F (List F)) F (Symbol))))
      [4] trans?:  x1 has no value
      [5] postSubst: not known that (Ring) is of mode (CATEGORY package (SIGNATURE integrate ((Union F (List F)) F (Symbol))))
      [6] postSubst: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE integrate ((Union F (List F)) F (Symbol))))
      [7] integrate:  x1 has no value
      [8] integrate: not known that (AlgebraicallyClosedField) is of mode (CATEGORY domain (IF (has (Complex R) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Complex R))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Complex R) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Complex R) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [9] integrate: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has (Complex R) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Complex R))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Complex R) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Complex R) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20120: FS2EXPXP}
\begin{verbatim}

>compiling FS2EXPXP.spad to FS2EXPXP.nrlib
 
   Warnings: 
      [1] newElem: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exprToXXP ((Union (: %expansion (ExponentialExpansion R FE x cen)) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean))) (SIGNATURE localAbs (FE FE)))
      [2] smpElem:  x1 has no value
      [3] k2Elem: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exprToXXP ((Union (: %expansion (ExponentialExpansion R FE x cen)) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean))) (SIGNATURE localAbs (FE FE)))
      [4] iExprToXXP:  %series has no value
      [5] iExprToXXP:  y1 has no value
      [6] iExprToXXP:  y2 has no value
      [7] listToXXP:  %expansion has no value
      [8] powerToXXP:  %expansion has no value
      [9] nthRootXXPIfCan:  %problem has no value
      [10] nthRootXXPIfCan:  %series has no value
      [11] nthRootToXXP:  %problem has no value
      [12] nthRootToXXP:  %expansion has no value
      [13] genPowerToXXP:  %expansion has no value
      [14] genExp:  %series has no value
      [15] exponential:  %problem has no value
      [16] exponential:  %series has no value
      [17] expToXXP:  %expansion has no value
      [18] logToXXP:  %expansion has no value
      [19] logToXXP:  %problem has no value
      [20] logToXXP:  %series has no value
      [21] applyIfCan:  %expansion has no value
      [22] applyBddIfCan:  %problem has no value
      [23] applyBddIfCan:  %expansion has no value
      [24] opsInvolvingX: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exprToXXP ((Union (: %expansion (ExponentialExpansion R FE x cen)) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean))) (SIGNATURE localAbs (FE FE)))
      [25] atancotToXXP:  %problem has no value
      [26] atancotToXXP:  %series has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20119: GSERIES}
\begin{verbatim}

>compiling GSERIES.spad to GSERIES.nrlib

   Warnings: 
      [1] differentiate:  x has no value
      [2] integrate:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20118: HELLFDIV}
\begin{verbatim}

>compiling HELLFDIV.spad to HELLFDIV.nrlib
 
   Warnings: 
      [1] unknown Functor code (error HyperellipticFiniteDivisor: curve must be hyperelliptic)
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20117: INTDIVP}
\begin{verbatim}

>compiling INTDIVP.spad to INTDIVP.nrlib
 
   Warnings: 
      [1] intersectionDivisor: pretend(Integer) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20116: INVLAPLA}
\begin{verbatim}

>compiling INVLAPLA.spad to INVLAPLA.nrlib
 
   Warnings: 
      [1] ilt: not known that (Ring) is of mode (CATEGORY package (SIGNATURE inverseLaplace ((Union F failed) F (Symbol) (Symbol))))
      [2] ilt: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE inverseLaplace ((Union F failed) F (Symbol) (Symbol))))
      [3] iltsqfr: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE inverseLaplace ((Union F failed) F (Symbol) (Symbol))))
      [4] iltirred: not known that (Ring) is of mode (CATEGORY package (SIGNATURE inverseLaplace ((Union F failed) F (Symbol) (Symbol))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20115: IR2F}
\begin{verbatim}

>compiling IR2F.spad to IR2F.nrlib
 
   Warnings: 
      [1] evenRoots: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE split ((IntegrationResult F) (IntegrationResult F))) (SIGNATURE expand ((List F) (IntegrationResult F))) (SIGNATURE complexExpand (F (IntegrationResult F))))
      [2] ilog: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE split ((IntegrationResult F) (IntegrationResult F))) (SIGNATURE expand ((List F) (IntegrationResult F))) (SIGNATURE complexExpand (F (IntegrationResult F))))
      [3] ilog: not known that (Ring) is of mode (CATEGORY package (SIGNATURE split ((IntegrationResult F) (IntegrationResult F))) (SIGNATURE expand ((List F) (IntegrationResult F))) (SIGNATURE complexExpand (F (IntegrationResult F))))
      [4] lg2func: not known that (Ring) is of mode (CATEGORY package (SIGNATURE split ((IntegrationResult F) (IntegrationResult F))) (SIGNATURE expand ((List F) (IntegrationResult F))) (SIGNATURE complexExpand (F (IntegrationResult F))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20114: IRRF2F}
\begin{verbatim}

>compiling IRRF2F.spad to IRRF2F.nrlib
 
   Warnings: 
      [1] toEF:  z1 has no value
      [2] expand: not known that (AlgebraicallyClosedFunctionSpace R) is of mode (CATEGORY domain (IF (has R (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace R)) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has R (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has R (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [3] expand: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has R (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace R)) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has R (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has R (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [4] integrate: not known that (AlgebraicallyClosedField) is of mode (CATEGORY domain (IF (has R (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace R)) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has R (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has R (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [5] integrate: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has R (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace R)) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has R (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has R (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20113: LAPLACE}
\begin{verbatim}

>compiling LAPLACE.spad to LAPLACE.nrlib
 
   Warnings: 
      [1] algebraic?: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE laplace (F F (Symbol) (Symbol))))
      [2] isLinear: not known that (Ring) is of mode (CATEGORY package (SIGNATURE laplace (F F (Symbol) (Symbol))))
      [3] isLinear: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE laplace (F F (Symbol) (Symbol))))
      [4] atn:  d has no value
      [5] mkPlus: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE laplace (F F (Symbol) (Symbol))))
      [6] locallaplace:  const has no value
      [7] locallaplace:  nconst has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20112: LIMITPS}
\begin{verbatim}

>compiling LIMITPS.spad to LIMITPS.nrlib
 
   Warnings: 
      [1] firstNonLogPtr: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE limit ((Union (OrderedCompletion FE) (Record (: leftHandLimit (Union (OrderedCompletion FE) failed)) (: rightHandLimit (Union (OrderedCompletion FE) failed))) failed) FE (Equation (OrderedCompletion FE)))) (SIGNATURE complexLimit ((Union (OnePointCompletion FE) failed) FE (Equation (OnePointCompletion FE)))) (SIGNATURE limit ((Union (OrderedCompletion FE) failed) FE (Equation FE) (String))))
      [2] complLimit:  %series has no value
      [3] realLimit:  %problem has no value
      [4] realLimit:  %series has no value
      [5] realLimit:  func has no value
      [6] realLimit:  prob has no value
      [7] xxpLimit:  %expansion has no value
      [8] limitPlus:  %problem has no value
      [9] limitPlus:  %series has no value
      [10] limitPlus:  func has no value
      [11] limitPlus:  prob has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20111: LODEEF}
\begin{verbatim}

>compiling LODEEF.spad to LODEEF.nrlib
 
   Warnings: 
      [1] algSolve: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE solve ((Union (Record (: particular F) (: basis (List F))) failed) L F (Symbol))) (SIGNATURE solve ((Union F failed) L F (Symbol) F (List F))))
      [2] algSolve: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solve ((Union (Record (: particular F) (: basis (List F))) failed) L F (Symbol))) (SIGNATURE solve ((Union F failed) L F (Symbol) F (List F))))
      [3] algSolve:  f1 has no value
      [4] doVarParams:  f1 has no value
      [5] xpart: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE solve ((Union (Record (: particular F) (: basis (List F))) failed) L F (Symbol))) (SIGNATURE solve ((Union F failed) L F (Symbol) F (List F))))
      [6] kovode:  z1 has no value
      [7] ulodo: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solve ((Union (Record (: particular F) (: basis (List F))) failed) L F (Symbol))) (SIGNATURE solve ((Union F failed) L F (Symbol) F (List F))))
      [8] solve:  f1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20110: NODE1}
\begin{verbatim}

>compiling NODE1.spad to NODE1.nrlib
 
   Warnings: 
      [1] solve: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE solve ((Union F failed) F F (BasicOperator) (Symbol))))
      [2] checkBernoulli: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solve ((Union F failed) F F (BasicOperator) (Symbol))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20109: ODECONST}
\begin{verbatim}

>compiling ODECONST.spad to ODECONST.nrlib
 
   Warnings: 
      [1] constDsolve:  f1 has no value
      [2] basisSqfr: not known that (Ring) is of mode (CATEGORY package (SIGNATURE constDsolve ((Record (: particular F) (: basis (List F))) L F (Symbol))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20108: ODEEF}
\begin{verbatim}

>compiling ODEEF.spad to ODEEF.nrlib
 
   Warnings: 
      [1] solve:  z1 has no value
      [2] solve:  z2 has no value
      [3] solve: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE solve ((Union (Record (: particular (Vector F)) (: basis (List (Vector F)))) failed) (Matrix F) (Vector F) (Symbol))) (SIGNATURE solve ((Union (List (Vector F)) failed) (Matrix F) (Symbol))) (SIGNATURE solve ((Union (Record (: particular (Vector F)) (: basis (List (Vector F)))) failed) (List (Equation F)) (List (BasicOperator)) (Symbol))) (SIGNATURE solve ((Union (Record (: particular (Vector F)) (: basis (List (Vector F)))) failed) (List F) (List (BasicOperator)) (Symbol))) (SIGNATURE solve ((Union (Record (: particular F) (: basis (List F))) F failed) (Equation F) (BasicOperator) (Symbol))) (SIGNATURE solve ((Union (Record (: particular F) (: basis (List F))) F failed) F (BasicOperator) (Symbol))) (SIGNATURE solve ((Union F failed) (Equation F) (BasicOperator) (Equation F) (List F))) (SIGNATURE solve ((Union F failed) F (BasicOperator) (Equation F) (List F))))
      [4] parseODE:  n has no value
      [5] parseODE:  c has no value
      [6] parseODE:  k has no value
      [7] getcoeff: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE solve ((Union (Record (: particular (Vector F)) (: basis (List (Vector F)))) failed) (Matrix F) (Vector F) (Symbol))) (SIGNATURE solve ((Union (List (Vector F)) failed) (Matrix F) (Symbol))) (SIGNATURE solve ((Union (Record (: particular (Vector F)) (: basis (List (Vector F)))) failed) (List (Equation F)) (List (BasicOperator)) (Symbol))) (SIGNATURE solve ((Union (Record (: particular (Vector F)) (: basis (List (Vector F)))) failed) (List F) (List (BasicOperator)) (Symbol))) (SIGNATURE solve ((Union (Record (: particular F) (: basis (List F))) F failed) (Equation F) (BasicOperator) (Symbol))) (SIGNATURE solve ((Union (Record (: particular F) (: basis (List F))) F failed) F (BasicOperator) (Symbol))) (SIGNATURE solve ((Union F failed) (Equation F) (BasicOperator) (Equation F) (List F))) (SIGNATURE solve ((Union F failed) F (BasicOperator) (Equation F) (List F))))
      [8] getcoeff: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solve ((Union (Record (: particular (Vector F)) (: basis (List (Vector F)))) failed) (Matrix F) (Vector F) (Symbol))) (SIGNATURE solve ((Union (List (Vector F)) failed) (Matrix F) (Symbol))) (SIGNATURE solve ((Union (Record (: particular (Vector F)) (: basis (List (Vector F)))) failed) (List (Equation F)) (List (BasicOperator)) (Symbol))) (SIGNATURE solve ((Union (Record (: particular (Vector F)) (: basis (List (Vector F)))) failed) (List F) (List (BasicOperator)) (Symbol))) (SIGNATURE solve ((Union (Record (: particular F) (: basis (List F))) F failed) (Equation F) (BasicOperator) (Symbol))) (SIGNATURE solve ((Union (Record (: particular F) (: basis (List F))) F failed) F (BasicOperator) (Symbol))) (SIGNATURE solve ((Union F failed) (Equation F) (BasicOperator) (Equation F) (List F))) (SIGNATURE solve ((Union F failed) F (BasicOperator) (Equation F) (List F))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20107: ODEINT}
\begin{verbatim}

>compiling ODEINT.spad to ODEINT.nrlib
 
   Warnings: 
      [1] diff:  f1 has no value
      [2] mkprod:  z1 has no value
      [3] expint: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE int (F F (Symbol))) (SIGNATURE expint (F F (Symbol))) (SIGNATURE diff ((Mapping F F) (Symbol))))
      [4] expint:  lrec has no value
      [5] expint:  exponent has no value
      [6] isQlog: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE int (F F (Symbol))) (SIGNATURE expint (F F (Symbol))) (SIGNATURE diff ((Mapping F F) (Symbol))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20106: QCMPACK}
\begin{verbatim}

>compiling QCMPACK.spad to QCMPACK.nrlib
 
   Warnings: 
      [1] removeSuperfluousCases:  x has no value
      [2] removeSuperfluousCases:  y has no value
      [3] removeSuperfluousCases:  maxcases has no value
      [4] removeSuperfluousCases:  lpwt1 has no value
      [5] removeSuperfluousCases:  headmaxcases has no value
      [6] removeSuperfluousCases:  toSave has no value
      [7] removeSuperfluousQuasiComponents:  maxlts has no value
      [8] removeSuperfluousQuasiComponents:  headmaxlts has no value
      [9] removeSuperfluousQuasiComponents:  toSave has no value
      [10] branchIfCan:  polnum has no value
      [11] prepareDecompose:  branches has no value
      [12] prepareDecompose:  x has no value
      [13] prepareDecompose:  y has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20105: REGSET}
\begin{verbatim}

>compiling REGSET.spad to REGSET.nrlib
 
   Warnings: 
      [1] construct:  ts has no value
      [2] preprocess:  lp1 has no value
      [3] preprocess:  lp2 has no value
      [4] preprocess:  lts has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20104: REP}
\begin{verbatim}

>compiling REP.spad to REP.nrlib
 
   Warnings: 
      [1] evalvect: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE radicalEigenvectors ((List (Record (: radval (Expression (Integer))) (: radmult (Integer)) (: radvect (List (Matrix (Expression (Integer))))))) (Matrix (Fraction (Polynomial (Integer)))))) (SIGNATURE radicalEigenvector ((List (Matrix (Expression (Integer)))) (Expression (Integer)) (Matrix (Fraction (Polynomial (Integer)))))) (SIGNATURE radicalEigenvalues ((List (Expression (Integer))) (Matrix (Fraction (Polynomial (Integer)))))) (SIGNATURE eigenMatrix ((Union (Matrix (Expression (Integer))) failed) (Matrix (Fraction (Polynomial (Integer)))))) (SIGNATURE normalise ((Matrix (Expression (Integer))) (Matrix (Expression (Integer))))) (SIGNATURE gramschmidt ((List (Matrix (Expression (Integer)))) (List (Matrix (Expression (Integer)))))) (SIGNATURE orthonormalBasis ((List (Matrix (Expression (Integer)))) (Matrix (Fraction (Polynomial (Integer)))))))
      [2] gramschmidt: :(PositiveInteger) -- should replace by pretend
      [3] gramschmidt: :RMR -- should replace by pretend
      [4] gramschmidt: :(Matrix (Expression (Integer))) -- should replace by pretend
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20103: RSDCMPK}
\begin{verbatim}

>compiling RSDCMPK.spad to RSDCMPK.nrlib
 
   Warnings: 
      [1] algebraicDecompose:  llpwt has no value
      [2] internalDecompose:  llpwt has no value
      [3] internalDecompose:  lts has no value
      [4] decompose:  toSave has no value
      [5] upDateBranches:  branches1 has no value
      [6] upDateBranches:  branches2 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20102: SOLVERAD}
\begin{verbatim}

>compiling SOLVERAD.spad to SOLVERAD.nrlib
 
   Warnings: 
      [1] quadratic: not known that (SIGNATURE ** ($ $ (Fraction (Integer)))) is of mode (CATEGORY domain (IF (has R (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace R)) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has R (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has R (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [2] findGenZeros: not known that (Ring) is of mode (CATEGORY package (SIGNATURE radicalSolve ((List (Equation (Expression R))) (Fraction (Polynomial R)) (Symbol))) (SIGNATURE radicalSolve ((List (Equation (Expression R))) (Fraction (Polynomial R)))) (SIGNATURE radicalSolve ((List (Equation (Expression R))) (Equation (Fraction (Polynomial R))) (Symbol))) (SIGNATURE radicalSolve ((List (Equation (Expression R))) (Equation (Fraction (Polynomial R))))) (SIGNATURE radicalSolve ((List (List (Equation (Expression R)))) (List (Fraction (Polynomial R))) (List (Symbol)))) (SIGNATURE radicalSolve ((List (List (Equation (Expression R)))) (List (Fraction (Polynomial R))))) (SIGNATURE radicalSolve ((List (List (Equation (Expression R)))) (List (Equation (Fraction (Polynomial R)))) (List (Symbol)))) (SIGNATURE radicalSolve ((List (List (Equation (Expression R)))) (List (Equation (Fraction (Polynomial R)))))) (SIGNATURE radicalRoots ((List (Expression R)) (Fraction (Polynomial R)) (Symbol))) (SIGNATURE radicalRoots ((List (List (Expression R))) (List (Fraction (Polynomial R))) (List (Symbol)))) (SIGNATURE contractSolve ((SuchThat (List (Expression R)) (List (Equation (Expression R)))) (Equation (Fraction (Polynomial R))) (Symbol))) (SIGNATURE contractSolve ((SuchThat (List (Expression R)) (List (Equation (Expression R)))) (Fraction (Polynomial R)) (Symbol))))
      [3] findGenZeros: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE radicalSolve ((List (Equation (Expression R))) (Fraction (Polynomial R)) (Symbol))) (SIGNATURE radicalSolve ((List (Equation (Expression R))) (Fraction (Polynomial R)))) (SIGNATURE radicalSolve ((List (Equation (Expression R))) (Equation (Fraction (Polynomial R))) (Symbol))) (SIGNATURE radicalSolve ((List (Equation (Expression R))) (Equation (Fraction (Polynomial R))))) (SIGNATURE radicalSolve ((List (List (Equation (Expression R)))) (List (Fraction (Polynomial R))) (List (Symbol)))) (SIGNATURE radicalSolve ((List (List (Equation (Expression R)))) (List (Fraction (Polynomial R))))) (SIGNATURE radicalSolve ((List (List (Equation (Expression R)))) (List (Equation (Fraction (Polynomial R)))) (List (Symbol)))) (SIGNATURE radicalSolve ((List (List (Equation (Expression R)))) (List (Equation (Fraction (Polynomial R)))))) (SIGNATURE radicalRoots ((List (Expression R)) (Fraction (Polynomial R)) (Symbol))) (SIGNATURE radicalRoots ((List (List (Expression R))) (List (Fraction (Polynomial R))) (List (Symbol)))) (SIGNATURE contractSolve ((SuchThat (List (Expression R)) (List (Equation (Expression R)))) (Equation (Fraction (Polynomial R))) (Symbol))) (SIGNATURE contractSolve ((SuchThat (List (Expression R)) (List (Equation (Expression R)))) (Fraction (Polynomial R)) (Symbol))))
      [4] findZeros: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE radicalSolve ((List (Equation (Expression R))) (Fraction (Polynomial R)) (Symbol))) (SIGNATURE radicalSolve ((List (Equation (Expression R))) (Fraction (Polynomial R)))) (SIGNATURE radicalSolve ((List (Equation (Expression R))) (Equation (Fraction (Polynomial R))) (Symbol))) (SIGNATURE radicalSolve ((List (Equation (Expression R))) (Equation (Fraction (Polynomial R))))) (SIGNATURE radicalSolve ((List (List (Equation (Expression R)))) (List (Fraction (Polynomial R))) (List (Symbol)))) (SIGNATURE radicalSolve ((List (List (Equation (Expression R)))) (List (Fraction (Polynomial R))))) (SIGNATURE radicalSolve ((List (List (Equation (Expression R)))) (List (Equation (Fraction (Polynomial R)))) (List (Symbol)))) (SIGNATURE radicalSolve ((List (List (Equation (Expression R)))) (List (Equation (Fraction (Polynomial R)))))) (SIGNATURE radicalRoots ((List (Expression R)) (Fraction (Polynomial R)) (Symbol))) (SIGNATURE radicalRoots ((List (List (Expression R))) (List (Fraction (Polynomial R))) (List (Symbol)))) (SIGNATURE contractSolve ((SuchThat (List (Expression R)) (List (Equation (Expression R)))) (Equation (Fraction (Polynomial R))) (Symbol))) (SIGNATURE contractSolve ((SuchThat (List (Expression R)) (List (Equation (Expression R)))) (Fraction (Polynomial R)) (Symbol))))
      [5] radicalRoots:  result has no value
      [6] solveInner:  solutions has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20101: SULS}
\begin{verbatim}

>compiling SULS.spad to SULS.nrlib
 
   Warnings: 
      [1] exp: not known that (UnivariateLaurentSeriesConstructorCategory Coef (SparseUnivariateTaylorSeries Coef var cen)) is of mode (CATEGORY domain (SIGNATURE integrate ($ $ (Variable var))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20100: UFPS1}
\begin{verbatim}

>compiling UFPS1.spad to UFPS1.nrlib
 
   Warnings: 
      [1] hadamard:  z1 has no value
      [2] hadamard:  z2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20099: ULSCONS}
\begin{verbatim}

>compiling ULSCONS.spad to ULSCONS.nrlib
 
   Warnings: 
      [1] multiplyCoefficients:  z1 has no value
      [2] differentiate:  z1 has no value
      [3] integrate:  z has no value
      [4] integrate:  z1 has no value
      [5] termsToOutputForm:  l has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20098: UPXS}
\begin{verbatim}

>compiling UPXS.spad to UPXS.nrlib
 
   Warnings: 
      [1] termsToOutputForm:  l has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20097: UPXSCONS}
\begin{verbatim}

>compiling UPXSCONS.spad to UPXSCONS.nrlib
 
   Warnings: 
      [1] terms:  t1 has no value
      [2] series:  t1 has no value
      [3] +:  z1 has no value
      [4] +:  z2 has no value
      [5] -:  z1 has no value
      [6] -:  z2 has no value
      [7] *:  z1 has no value
      [8] *:  z2 has no value
      [9] /:  z1 has no value
      [10] /:  z2 has no value
      [11] differentiate:  z1 has no value
      [12] integrate:  z1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20096: UTS}
\begin{verbatim}

>compiling UTS.spad to UTS.nrlib
 
   Warnings: 
      [1] differentiate:  y has no value
      [2] integrate:  y has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20095: GPAFF}
\begin{verbatim}

>compiling GPAFF.spad to GPAFF.nrlib
 
   Warnings: 
      [1] lBasis: pretend(Integer) -- should replace by @
      [2] genus:  theGenus has no value
      [3] genusNeg:  theGenus has no value
      [4] findOrderOfDivisor: pretend(Integer) -- should replace by @
      [5] desingTreeWoFullParam:  theTree has no value
      [6] adjunctionDivisor:  theAdjDiv has no value
      [7] singularPoints:  lesPtsSing has no value
      [8] rationalPoints:  lesRatPts has no value
      [9] ZetaFunction:  zf has no value
      [10] ZetaFunction: pretend(UnivariateTaylorSeriesCZero (Integer) t) -- should replace by @
      [11] numberOfPlacesOfDegreeUsingZeta: pretend(UnivariateTaylorSeriesCZero (Integer) t) -- should replace by @
      [12] numberOfPlacesOfDegreeUsingZeta:  serdel has no value
      [13] numberOfPlacesOfDegree:  calculatedNP has no value
      [14] numberPlacesDegExtDeg:  res has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20094: IRURPK}
\begin{verbatim}

>compiling IRURPK.spad to IRURPK.nrlib
 
   Warnings: 
      [1] makeLinearAndMonic:  toSave has no value
      [2] rur:  toSave has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20093: LEXTRIPK}
\begin{verbatim}

>compiling LEXTRIPK.spad to LEXTRIPK.nrlib
 
   Warnings: 
      [1] trueVariables:  truels has no value
      [2] lexTriangular:  polnum has no value
      [3] lexTriangular:  toSave has no value
      [4] squareFreeLexTriangular:  polnum has no value
      [5] squareFreeLexTriangular:  toSave has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20092: NORMPK}
\begin{verbatim}

>compiling NORMPK.spad to NORMPK.nrlib
 
   Warnings: 
      [1] normalizedAssociate:  mp has no value
      [2] normalizedAssociate:  tp has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20091: PACEXT}
\begin{verbatim}

>compiling PACEXT.spad to PACEXT.nrlib
 
   Warnings: 
      [1] retractToGrn: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [2] down: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [3] lift: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [4] reduce: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [5] vectorise: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [6] +:  recEl has no value
      [7] *:  recEl has no value
      [8] *:  recTower has no value
      [9] inv: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [10] -: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [11] coerce: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [12] fullOutput: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [13] definingPolynomial: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [14] extDegree: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [15] previousTower: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
      [16] name: pretend(Record (: recEl (SparseUnivariatePolynomial $)) (: recTower (SparseUnivariatePolynomial $)) (: recDeg (PositiveInteger)) (: recPrevTower $) (: recName (Symbol))) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20090: RECOP}
\begin{verbatim}

>compiling RECOP.spad to RECOP.nrlib
 
   Warnings: 
      [1] operatorName: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE evalRec (F (BasicOperator) (Symbol) F F F (List F))) (SIGNATURE evalADE (F (BasicOperator) (Symbol) F F F (List F))) (SIGNATURE getEq (F F)) (SIGNATURE getOp ((BasicOperator) F)) (SIGNATURE numberOfValuesNeeded ((Integer) (Integer) (BasicOperator) (Symbol) F)) (IF (has R (Ring)) (PROGN (SIGNATURE getShiftRec ((Union (Integer) failed) (BasicOperator) (Kernel F) (Symbol))) (SIGNATURE shiftInfoRec ((Record (: max (Union (Integer) failed)) (: ord (Union (Integer) failed)) (: ker (Kernel F))) (BasicOperator) (Symbol) F))) noBranch))
      [2] getShiftRec:  z has no value
      [3] getShiftRec: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE evalRec (F (BasicOperator) (Symbol) F F F (List F))) (SIGNATURE evalADE (F (BasicOperator) (Symbol) F F F (List F))) (SIGNATURE getEq (F F)) (SIGNATURE getOp ((BasicOperator) F)) (SIGNATURE numberOfValuesNeeded ((Integer) (Integer) (BasicOperator) (Symbol) F)) (IF (has R (Ring)) (PROGN (SIGNATURE getShiftRec ((Union (Integer) failed) (BasicOperator) (Kernel F) (Symbol))) (SIGNATURE shiftInfoRec ((Record (: max (Union (Integer) failed)) (: ord (Union (Integer) failed)) (: ker (Kernel F))) (BasicOperator) (Symbol) F))) noBranch))
      [4] getShiftRec: not known that (Ring) is of mode (CATEGORY package (SIGNATURE evalRec (F (BasicOperator) (Symbol) F F F (List F))) (SIGNATURE evalADE (F (BasicOperator) (Symbol) F F F (List F))) (SIGNATURE getEq (F F)) (SIGNATURE getOp ((BasicOperator) F)) (SIGNATURE numberOfValuesNeeded ((Integer) (Integer) (BasicOperator) (Symbol) F)) (IF (has R (Ring)) (PROGN (SIGNATURE getShiftRec ((Union (Integer) failed) (BasicOperator) (Kernel F) (Symbol))) (SIGNATURE shiftInfoRec ((Record (: max (Union (Integer) failed)) (: ord (Union (Integer) failed)) (: ker (Kernel F))) (BasicOperator) (Symbol) F))) noBranch))
      [5] shiftInfoRec:  maxShift has no value
      [6] shiftInfoRec:  minShift has no value
      [7] shiftInfoRec:  nextKernel has no value
      [8] evalRec:  ord has no value
      [9] evalRec:  ker has no value
      [10] evalRec:  z has no value
      [11] getOrder:  %diff has no value

 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20089: RURPK}
\begin{verbatim}

>compiling RURPK.spad to RURPK.nrlib
 
   Warnings: 
      [1] rur:  lq has no value
      [2] rur:  q has no value
      [3] rur:  toSave has no value
      [4] rur:  toReturn has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20088: SFRGCD}
\begin{verbatim}

>compiling SFRGCD.spad to SFRGCD.nrlib
 
   Warnings: 
      [1] stosePrepareSubResAlgo:  toSave has no value
      [2] stoseInternalLastSubResultant:  toReturn has no value
      [3] stoseInvertible?sqfreg:  x has no value
      [4] stoseInvertible?sqfreg:  y has no value
      [5] stoseInvertibleSetsqfreg:  toSave has no value
      [6] stoseInvertible?reg:  x has no value
      [7] stoseInvertible?reg:  y has no value
      [8] stoseInvertibleSetreg:  toSave has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20087: SFQCMPK}
\begin{verbatim}

>compiling SFQCMPK.spad to SFQCMPK.nrlib
 
   Warnings: 
      [1] removeSuperfluousCases:  x has no value
      [2] removeSuperfluousCases:  y has no value
      [3] removeSuperfluousCases:  maxcases has no value
      [4] removeSuperfluousCases:  lpwt1 has no value
      [5] removeSuperfluousCases:  headmaxcases has no value
      [6] removeSuperfluousCases:  toSave has no value
      [7] removeSuperfluousQuasiComponents:  maxlts has no value
      [8] removeSuperfluousQuasiComponents:  headmaxlts has no value
      [9] removeSuperfluousQuasiComponents:  toSave has no value
      [10] branchIfCan:  polnum has no value
      [11] prepareDecompose:  branches has no value
      [12] prepareDecompose:  x has no value
      [13] prepareDecompose:  y has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20086: SRDCMPK}
\begin{verbatim}

>compiling SRDCMPK.spad to SRDCMPK.nrlib
 
   Warnings: 
      [1] algebraicDecompose:  lts has no value
      [2] internalDecompose:  llpwt has no value
      [3] internalDecompose:  lts has no value
      [4] decompose:  toSave has no value
      [5] upDateBranches:  branches1 has no value
      [6] upDateBranches:  branches2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20085: SREGSET}
\begin{verbatim}

>compiling SREGSET.spad to SREGSET.nrlib
 
   Warnings: 
      [1] construct:  ts has no value
      [2] internalAugment:  lts has no value
      [3] preprocess:  lp1 has no value
      [4] preprocess:  lp2 has no value
      [5] preprocess:  lts has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20084: ZDSOLVE}
\begin{verbatim}

>compiling ZDSOLVE.spad to ZDSOLVE.nrlib
 
   Warnings: 
      [1] squareFree:  toSave has no value
      [2] realSolve: not known that (Ring) is of mode (CATEGORY package (SIGNATURE triangSolve ((List (RegularChain R ls)) (List (Polynomial R)) (Boolean) (Boolean))) (SIGNATURE triangSolve ((List (RegularChain R ls)) (List (Polynomial R)) (Boolean))) (SIGNATURE triangSolve ((List (RegularChain R ls)) (List (Polynomial R)))) (SIGNATURE univariateSolve ((List (Record (: complexRoots (SparseUnivariatePolynomial R)) (: coordinates (List (Polynomial R))))) (RegularChain R ls))) (SIGNATURE univariateSolve ((List (Record (: complexRoots (SparseUnivariatePolynomial R)) (: coordinates (List (Polynomial R))))) (List (Polynomial R)) (Boolean) (Boolean) (Boolean))) (SIGNATURE univariateSolve ((List (Record (: complexRoots (SparseUnivariatePolynomial R)) (: coordinates (List (Polynomial R))))) (List (Polynomial R)) (Boolean) (Boolean))) (SIGNATURE univariateSolve ((List (Record (: complexRoots (SparseUnivariatePolynomial R)) (: coordinates (List (Polynomial R))))) (List (Polynomial R)) (Boolean))) (SIGNATURE univariateSolve ((List (Record (: complexRoots (SparseUnivariatePolynomial R)) (: coordinates (List (Polynomial R))))) (List (Polynomial R)))) (SIGNATURE realSolve ((List (List (RealClosure (Fraction R)))) (RegularChain R ls))) (SIGNATURE realSolve ((List (List (RealClosure (Fraction R)))) (List (Polynomial R)) (Boolean) (Boolean) (Boolean))) (SIGNATURE realSolve ((List (List (RealClosure (Fraction R)))) (List (Polynomial R)) (Boolean) (Boolean))) (SIGNATURE realSolve ((List (List (RealClosure (Fraction R)))) (List (Polynomial R)) (Boolean))) (SIGNATURE realSolve ((List (List (RealClosure (Fraction R)))) (List (Polynomial R)))) (SIGNATURE positiveSolve ((List (List (RealClosure (Fraction R)))) (RegularChain R ls))) (SIGNATURE positiveSolve ((List (List (RealClosure (Fraction R)))) (List (Polynomial R)) (Boolean) (Boolean))) (SIGNATURE positiveSolve ((List (List (RealClosure (Fraction R)))) (List (Polynomial R)) (Boolean))) (SIGNATURE positiveSolve ((List (List (RealClosure (Fraction R)))) (List (Polynomial R)))) (SIGNATURE squareFree ((List (SquareFreeRegularTriangularSet R (IndexedExponents (OrderedVariableList ls2)) (OrderedVariableList ls2) (NewSparseMultivariatePolynomial R (OrderedVariableList ls2)))) (RegularChain R ls))) (SIGNATURE convert ((NewSparseMultivariatePolynomial R (OrderedVariableList ls2)) (NewSparseMultivariatePolynomial R (OrderedVariableList ls)))) (SIGNATURE convert ((Polynomial (RealClosure (Fraction R))) (Polynomial R))) (SIGNATURE convert ((Polynomial (RealClosure (Fraction R))) (NewSparseMultivariatePolynomial R (OrderedVariableList ls2)))) (SIGNATURE convert ((SparseUnivariatePolynomial (RealClosure (Fraction R))) (SparseUnivariatePolynomial R))) (SIGNATURE convert ((List (NewSparseMultivariatePolynomial R (OrderedVariableList ls2))) (SquareFreeRegularTriangularSet R (IndexedExponents (OrderedVariableList ls2)) (OrderedVariableList ls2) (NewSparseMultivariatePolynomial R (OrderedVariableList ls2))))))
      [3] realSolve:  toSave has no value
      [4] positiveSolve:  toSave has no value
      [5] univariateSolve:  lq2 has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20083: GUESS}
\begin{verbatim}

>compiling GUESS.spad to GUESS.nrlib
 
   Warnings: 
      [1] guessExpRatAux: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE guess ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guess ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guess ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (List (Symbol)))) (SIGNATURE guess ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (List (Symbol)) (List (GuessOption)))) (SIGNATURE guessExpRat ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessExpRat ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessBinRat ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessBinRat ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (IF (has F (RetractableTo (Symbol))) (IF (has S (RetractableTo (Symbol))) (PROGN (SIGNATURE guessExpRat ((Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption))) (Symbol))) (SIGNATURE guessBinRat ((Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption))) (Symbol)))) noBranch) noBranch) (SIGNATURE guessHP ((Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption))) (Mapping (Record (: guessStream (Mapping (Stream (UnivariateFormalPowerSeries F)) (UnivariateFormalPowerSeries F))) (: degreeStream (Stream (NonNegativeInteger))) (: testStream (Mapping (Stream (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F))) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: exprStream (Mapping (Stream EXPRR) EXPRR (Symbol))) (: A (Mapping S (NonNegativeInteger) (NonNegativeInteger) (SparseUnivariatePolynomial S))) (: AF (Mapping (SparseUnivariatePolynomial F) (NonNegativeInteger) (NonNegativeInteger) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: AX (Mapping EXPRR (NonNegativeInteger) (Symbol) EXPRR)) (: C (Mapping (List S) (NonNegativeInteger)))) (List (GuessOption))))) (SIGNATURE guessADE ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessADE ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessAlg ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessAlg ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessHolo ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessHolo ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessPade ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessPade ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessRec ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessRec ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessPRec ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessPRec ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessRat ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessRat ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE diffHP ((Record (: guessStream (Mapping (Stream (UnivariateFormalPowerSeries F)) (UnivariateFormalPowerSeries F))) (: degreeStream (Stream (NonNegativeInteger))) (: testStream (Mapping (Stream (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F))) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: exprStream (Mapping (Stream EXPRR) EXPRR (Symbol))) (: A (Mapping S (NonNegativeInteger) (NonNegativeInteger) (SparseUnivariatePolynomial S))) (: AF (Mapping (SparseUnivariatePolynomial F) (NonNegativeInteger) (NonNegativeInteger) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: AX (Mapping EXPRR (NonNegativeInteger) (Symbol) EXPRR)) (: C (Mapping (List S) (NonNegativeInteger)))) (List (GuessOption)))) (SIGNATURE shiftHP ((Record (: guessStream (Mapping (Stream (UnivariateFormalPowerSeries F)) (UnivariateFormalPowerSeries F))) (: degreeStream (Stream (NonNegativeInteger))) (: testStream (Mapping (Stream (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F))) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: exprStream (Mapping (Stream EXPRR) EXPRR (Symbol))) (: A (Mapping S (NonNegativeInteger) (NonNegativeInteger) (SparseUnivariatePolynomial S))) (: AF (Mapping (SparseUnivariatePolynomial F) (NonNegativeInteger) (NonNegativeInteger) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: AX (Mapping EXPRR (NonNegativeInteger) (Symbol) EXPRR)) (: C (Mapping (List S) (NonNegativeInteger)))) (List (GuessOption)))) (IF (has F (RetractableTo (Symbol))) (IF (has S (RetractableTo (Symbol))) (PROGN (SIGNATURE shiftHP ((Mapping (Record (: guessStream (Mapping (Stream (UnivariateFormalPowerSeries F)) (UnivariateFormalPowerSeries F))) (: degreeStream (Stream (NonNegativeInteger))) (: testStream (Mapping (Stream (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F))) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: exprStream (Mapping (Stream EXPRR) EXPRR (Symbol))) (: A (Mapping S (NonNegativeInteger) (NonNegativeInteger) (SparseUnivariatePolynomial S))) (: AF (Mapping (SparseUnivariatePolynomial F) (NonNegativeInteger) (NonNegativeInteger) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: AX (Mapping EXPRR (NonNegativeInteger) (Symbol) EXPRR)) (: C (Mapping (List S) (NonNegativeInteger)))) (List (GuessOption))) (Symbol))) (SIGNATURE diffHP ((Mapping (Record (: guessStream (Mapping (Stream (UnivariateFormalPowerSeries F)) (UnivariateFormalPowerSeries F))) (: degreeStream (Stream (NonNegativeInteger))) (: testStream (Mapping (Stream (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F))) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: exprStream (Mapping (Stream EXPRR) EXPRR (Symbol))) (: A (Mapping S (NonNegativeInteger) (NonNegativeInteger) (SparseUnivariatePolynomial S))) (: AF (Mapping (SparseUnivariatePolynomial F) (NonNegativeInteger) (NonNegativeInteger) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: AX (Mapping EXPRR (NonNegativeInteger) (Symbol) EXPRR)) (: C (Mapping (List S) (NonNegativeInteger)))) (List (GuessOption))) (Symbol))) (SIGNATURE guessRec ((Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption))) (Symbol))) (SIGNATURE guessPRec ((Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption))) (Symbol))) (SIGNATURE guessRat ((Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption))) (Symbol))) (SIGNATURE guessADE ((Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption))) (Symbol)))) noBranch) noBranch))
      [2] guessExpRatAux: not known that (SIGNATURE variable ((Union $ failed) (Symbol))) is of mode (CATEGORY domain (SIGNATURE create ($)) (SIGNATURE convert ((Symbol) $)))
      [3] guessExpRatAux: not known that (PolynomialCategory F (IndexedExponents (OrderedVariableList (construct (QUOTE a1) (QUOTE A)))) (SingletonAsOrderedSet)) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) F $)))
      [4] guessExpRatAux: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE guess ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guess ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guess ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (List (Symbol)))) (SIGNATURE guess ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (List (Symbol)) (List (GuessOption)))) (SIGNATURE guessExpRat ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessExpRat ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessBinRat ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessBinRat ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (IF (has F (RetractableTo (Symbol))) (IF (has S (RetractableTo (Symbol))) (PROGN (SIGNATURE guessExpRat ((Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption))) (Symbol))) (SIGNATURE guessBinRat ((Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption))) (Symbol)))) noBranch) noBranch) (SIGNATURE guessHP ((Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption))) (Mapping (Record (: guessStream (Mapping (Stream (UnivariateFormalPowerSeries F)) (UnivariateFormalPowerSeries F))) (: degreeStream (Stream (NonNegativeInteger))) (: testStream (Mapping (Stream (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F))) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: exprStream (Mapping (Stream EXPRR) EXPRR (Symbol))) (: A (Mapping S (NonNegativeInteger) (NonNegativeInteger) (SparseUnivariatePolynomial S))) (: AF (Mapping (SparseUnivariatePolynomial F) (NonNegativeInteger) (NonNegativeInteger) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: AX (Mapping EXPRR (NonNegativeInteger) (Symbol) EXPRR)) (: C (Mapping (List S) (NonNegativeInteger)))) (List (GuessOption))))) (SIGNATURE guessADE ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessADE ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessAlg ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessAlg ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessHolo ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessHolo ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessPade ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessPade ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessRec ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessRec ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessPRec ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessPRec ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE guessRat ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption)))) (SIGNATURE guessRat ((List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F))) (SIGNATURE diffHP ((Record (: guessStream (Mapping (Stream (UnivariateFormalPowerSeries F)) (UnivariateFormalPowerSeries F))) (: degreeStream (Stream (NonNegativeInteger))) (: testStream (Mapping (Stream (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F))) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: exprStream (Mapping (Stream EXPRR) EXPRR (Symbol))) (: A (Mapping S (NonNegativeInteger) (NonNegativeInteger) (SparseUnivariatePolynomial S))) (: AF (Mapping (SparseUnivariatePolynomial F) (NonNegativeInteger) (NonNegativeInteger) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: AX (Mapping EXPRR (NonNegativeInteger) (Symbol) EXPRR)) (: C (Mapping (List S) (NonNegativeInteger)))) (List (GuessOption)))) (SIGNATURE shiftHP ((Record (: guessStream (Mapping (Stream (UnivariateFormalPowerSeries F)) (UnivariateFormalPowerSeries F))) (: degreeStream (Stream (NonNegativeInteger))) (: testStream (Mapping (Stream (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F))) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: exprStream (Mapping (Stream EXPRR) EXPRR (Symbol))) (: A (Mapping S (NonNegativeInteger) (NonNegativeInteger) (SparseUnivariatePolynomial S))) (: AF (Mapping (SparseUnivariatePolynomial F) (NonNegativeInteger) (NonNegativeInteger) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: AX (Mapping EXPRR (NonNegativeInteger) (Symbol) EXPRR)) (: C (Mapping (List S) (NonNegativeInteger)))) (List (GuessOption)))) (IF (has F (RetractableTo (Symbol))) (IF (has S (RetractableTo (Symbol))) (PROGN (SIGNATURE shiftHP ((Mapping (Record (: guessStream (Mapping (Stream (UnivariateFormalPowerSeries F)) (UnivariateFormalPowerSeries F))) (: degreeStream (Stream (NonNegativeInteger))) (: testStream (Mapping (Stream (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F))) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: exprStream (Mapping (Stream EXPRR) EXPRR (Symbol))) (: A (Mapping S (NonNegativeInteger) (NonNegativeInteger) (SparseUnivariatePolynomial S))) (: AF (Mapping (SparseUnivariatePolynomial F) (NonNegativeInteger) (NonNegativeInteger) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: AX (Mapping EXPRR (NonNegativeInteger) (Symbol) EXPRR)) (: C (Mapping (List S) (NonNegativeInteger)))) (List (GuessOption))) (Symbol))) (SIGNATURE diffHP ((Mapping (Record (: guessStream (Mapping (Stream (UnivariateFormalPowerSeries F)) (UnivariateFormalPowerSeries F))) (: degreeStream (Stream (NonNegativeInteger))) (: testStream (Mapping (Stream (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F))) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: exprStream (Mapping (Stream EXPRR) EXPRR (Symbol))) (: A (Mapping S (NonNegativeInteger) (NonNegativeInteger) (SparseUnivariatePolynomial S))) (: AF (Mapping (SparseUnivariatePolynomial F) (NonNegativeInteger) (NonNegativeInteger) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: AX (Mapping EXPRR (NonNegativeInteger) (Symbol) EXPRR)) (: C (Mapping (List S) (NonNegativeInteger)))) (List (GuessOption))) (Symbol))) (SIGNATURE guessRec ((Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption))) (Symbol))) (SIGNATURE guessPRec ((Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption))) (Symbol))) (SIGNATURE guessRat ((Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption))) (Symbol))) (SIGNATURE guessADE ((Mapping (List (Record (: function EXPRR) (: order (NonNegativeInteger)))) (List F) (List (GuessOption))) (Symbol)))) noBranch) noBranch))
      [5] guessExpRatAux0:  zeros has no value
      [6] guessExpRatAux0:  newlist has no value
      [7] guessExpRatAux0:  xValues has no value
      [8] guessBinRatAux0:  zeros has no value
      [9] guessBinRatAux0:  newlist has no value
      [10] guessBinRatAux0:  xValues has no value
      [11] diffHP: signature of lhs not unique: (Record (: guessStream (Mapping (Stream (UnivariateFormalPowerSeries F)) (UnivariateFormalPowerSeries F))) (: degreeStream (Stream (NonNegativeInteger))) (: testStream (Mapping (Stream (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F))) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: exprStream (Mapping (Stream EXPRR) EXPRR (Symbol))) (: A (Mapping S (NonNegativeInteger) (NonNegativeInteger) (SparseUnivariatePolynomial S))) (: AF (Mapping (SparseUnivariatePolynomial F) (NonNegativeInteger) (NonNegativeInteger) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: AX (Mapping EXPRR (NonNegativeInteger) (Symbol) EXPRR)) (: C (Mapping (List S) (NonNegativeInteger))))(List (GuessOption)) chosen
      [12] shiftHP: signature of lhs not unique: (Record (: guessStream (Mapping (Stream (UnivariateFormalPowerSeries F)) (UnivariateFormalPowerSeries F))) (: degreeStream (Stream (NonNegativeInteger))) (: testStream (Mapping (Stream (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F))) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: exprStream (Mapping (Stream EXPRR) EXPRR (Symbol))) (: A (Mapping S (NonNegativeInteger) (NonNegativeInteger) (SparseUnivariatePolynomial S))) (: AF (Mapping (SparseUnivariatePolynomial F) (NonNegativeInteger) (NonNegativeInteger) (UnivariateFormalPowerSeries (SparseUnivariatePolynomial F)))) (: AX (Mapping EXPRR (NonNegativeInteger) (Symbol) EXPRR)) (: C (Mapping (List S) (NonNegativeInteger))))(List (GuessOption)) chosen
      [13] guessInterpolate: not known that (FiniteAbelianMonoidRing (Fraction S) (NonNegativeInteger)) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) F $)))
      [14] testInterpolant:  nonZeroCoefficient has no value
      [15] guessHPaux:  guessDegree has no value
      [16] guessHPaux:  maxEta has no value
      [17] guessHPaux:  reslist has no value
      [18] guessHPaux:  eta has no value
      [19] guess:  res has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20082: INFCLST}
\begin{verbatim}

>compiling INFCLSPT.spad to INFCLSPT.nrlib
 
   Warnings: 
      [1] create:  P has no value
      [2] create:  chartA has no value
      [3] subMultV: :Rep -- should replace by pretend
      [4] setsubmult!: :Rep -- should replace by pretend
      [5] pointV: :Rep -- should replace by pretend
      [6] symbNameV: :Rep -- should replace by pretend
      [7] curveV: :Rep -- should replace by pretend
      [8] localPointV: :Rep -- should replace by pretend
      [9] multV: :Rep -- should replace by pretend
      [10] chartV: :Rep -- should replace by pretend
      [11] excpDivV: :Rep -- should replace by pretend
      [12] localParamV: :Rep -- should replace by pretend
      [13] actualExtensionV: :Rep -- should replace by pretend
      [14] setpoint!: :Rep -- should replace by pretend
      [15] setcurve!: :Rep -- should replace by pretend
      [16] setlocalPoint!: :Rep -- should replace by pretend
      [17] setmult!: :Rep -- should replace by pretend
      [18] setchart!: :Rep -- should replace by pretend
      [19] setlocalParam!: :Rep -- should replace by pretend
      [20] setexcpDiv!: :Rep -- should replace by pretend
      [21] setsymbName!: :Rep -- should replace by pretend
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20081: GUESSAN}
\begin{verbatim}

>compiling GUESSAN.spad to GUESSAN.nrlib
 
   Warnings: 
      [1] not known that (RetractableTo (AlgebraicNumber)) is of mode (CATEGORY domain (IF (has (Integer) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Integer))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Integer) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Integer) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [2] not known that (CombinatorialOpsCategory) is of mode (CATEGORY domain (IF (has (Integer) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Integer))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Integer) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Integer) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [3] not known that (SIGNATURE ** ($ $ $)) is of mode (CATEGORY domain (IF (has (Integer) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Integer))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Integer) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Integer) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20080: GUESSINT}
\begin{verbatim}

>compiling GUESSINT.spad to GUESSINT.nrlib
 
   Warnings: 
      [1] not known that (CombinatorialOpsCategory) is of mode (CATEGORY domain (IF (has (Integer) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Integer))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Integer) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Integer) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [2] not known that (SIGNATURE ** ($ $ $)) is of mode (CATEGORY domain (IF (has (Integer) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Integer))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Integer) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Integer) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20079: GUESSP}
\begin{verbatim}

>compiling GUESSP.spad to GUESSP.nrlib
 
   Warnings: 
      [1] not known that (CombinatorialOpsCategory) is of mode (CATEGORY domain (IF (has (Integer) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Integer))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Integer) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Integer) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [2] not known that (SIGNATURE ** ($ $ $)) is of mode (CATEGORY domain (IF (has (Integer) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Integer))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Integer) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Integer) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20078: GUESSUP}
\begin{verbatim}

>compiling GUESSUP.spad to GUESSUP.nrlib
 
   Warnings: 
      [1] not known that (RetractableTo (Fraction (MyUnivariatePolynomial q (Integer)))) is of mode (CATEGORY domain (SIGNATURE * ($ $ $)) (SIGNATURE / ($ $ $)) (SIGNATURE ** ($ $ $)) (SIGNATURE numerator ($ $)) (SIGNATURE denominator ($ $)) (SIGNATURE ground? ((Boolean) $)) (SIGNATURE coerce ($ (Fraction (MyUnivariatePolynomial q (Integer))))) (SIGNATURE retract ((Fraction (MyUnivariatePolynomial q (Integer))) $)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20077: GUESSF}
\begin{verbatim}

>compiling GUESSF.spad to GUESSF.nrlib
 
   Warnings: 
      [1] not known that (CombinatorialOpsCategory) is of mode (CATEGORY domain (IF (has (Integer) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Integer))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Integer) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Integer) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [2] not known that (SIGNATURE ** ($ $ $)) is of mode (CATEGORY domain (IF (has (Integer) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Integer))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Integer) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Integer) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20076: PAFF}
\begin{verbatim}

>compiling PAFF.spad to PAFF.nrlib
 
   Warnings: 
      [1] homogenize: not known that (FiniteAbelianMonoidRing K (DirectProduct (call LENGTH symb) (NonNegativeInteger))) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20075: PAFFFF}
\begin{verbatim}

>compiling PAFFFF.spad to PAFFFF.nrlib
 
   Warnings: 
      [1] homogenize: not known that (FiniteAbelianMonoidRing K (DirectProduct (call LENGTH symb) (NonNegativeInteger))) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
 
(1) -> copying PAFFFF.nrlib to PAFFFF.o
cl1 making /research/test/mnt/ubuntu/algebra/PAFF.o from /research/test/int/algebra/clique2.spad
cl1 making /research/test/mnt/ubuntu/algebra/PAFFFF.o from /research/test/int/algebra/clique2.spad
 
   Warnings: 
      [1] homogenize: not known that (FiniteAbelianMonoidRing K (DirectProduct (call LENGTH symb) (NonNegativeInteger))) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20074: CLAGG}
\begin{verbatim}

>compiling CLAGG.spad to CLAGG.nrlib
 
   Warnings: 
      [1] remove:  y has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20072: ES}
\begin{verbatim}

>compiling ES.spad to ES.nrlib
 
   Warnings: 
      [1] tower: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE odd? ((Boolean) S)) (SIGNATURE even? ((Boolean) S)) (SIGNATURE eval (S S (BasicOperator) (Mapping S S))) (SIGNATURE eval (S S (BasicOperator) (Mapping S (List S)))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S S)))) (SIGNATURE eval (S S (Symbol) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S S)))) (SIGNATURE freeOf? ((Boolean) S (Symbol))) (SIGNATURE freeOf? ((Boolean) S S)) (SIGNATURE map (S (Mapping S S) (Kernel S))) (SIGNATURE kernel (S (BasicOperator) (List S))) (SIGNATURE kernel (S (BasicOperator) S)) (SIGNATURE is? ((Boolean) S (Symbol))) (SIGNATURE is? ((Boolean) S (BasicOperator))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE operators ((List (BasicOperator)) S)) (SIGNATURE tower ((List (Kernel S)) S)) (SIGNATURE mainKernel ((Union (Kernel S) failed) S)) (SIGNATURE height ((NonNegativeInteger) S)) (SIGNATURE distribute (S S S)) (SIGNATURE distribute (S S)) (SIGNATURE paren (S (List S))) (SIGNATURE paren (S S)) (SIGNATURE box (S (List S))) (SIGNATURE box (S S)) (SIGNATURE subst (S S (List (Kernel S)) (List S))) (SIGNATURE subst (S S (List (Equation S)))) (SIGNATURE subst (S S (Equation S))) (SIGNATURE elt (S (BasicOperator) (List S))) (SIGNATURE elt (S (BasicOperator) S S S S)) (SIGNATURE elt (S (BasicOperator) S S S)) (SIGNATURE elt (S (BasicOperator) S S)) (SIGNATURE elt (S (BasicOperator) S)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE eval (S S (List (Kernel S)) (List S))) (SIGNATURE eval (S S (Kernel S) S)) (SIGNATURE retract ((Kernel S) S)) (SIGNATURE retractIfCan ((Union (Kernel S) failed) S)))
      [2] freeOf?: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE odd? ((Boolean) S)) (SIGNATURE even? ((Boolean) S)) (SIGNATURE eval (S S (BasicOperator) (Mapping S S))) (SIGNATURE eval (S S (BasicOperator) (Mapping S (List S)))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S S)))) (SIGNATURE eval (S S (Symbol) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S S)))) (SIGNATURE freeOf? ((Boolean) S (Symbol))) (SIGNATURE freeOf? ((Boolean) S S)) (SIGNATURE map (S (Mapping S S) (Kernel S))) (SIGNATURE kernel (S (BasicOperator) (List S))) (SIGNATURE kernel (S (BasicOperator) S)) (SIGNATURE is? ((Boolean) S (Symbol))) (SIGNATURE is? ((Boolean) S (BasicOperator))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE operators ((List (BasicOperator)) S)) (SIGNATURE tower ((List (Kernel S)) S)) (SIGNATURE mainKernel ((Union (Kernel S) failed) S)) (SIGNATURE height ((NonNegativeInteger) S)) (SIGNATURE distribute (S S S)) (SIGNATURE distribute (S S)) (SIGNATURE paren (S (List S))) (SIGNATURE paren (S S)) (SIGNATURE box (S (List S))) (SIGNATURE box (S S)) (SIGNATURE subst (S S (List (Kernel S)) (List S))) (SIGNATURE subst (S S (List (Equation S)))) (SIGNATURE subst (S S (Equation S))) (SIGNATURE elt (S (BasicOperator) (List S))) (SIGNATURE elt (S (BasicOperator) S S S S)) (SIGNATURE elt (S (BasicOperator) S S S)) (SIGNATURE elt (S (BasicOperator) S S)) (SIGNATURE elt (S (BasicOperator) S)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE eval (S S (List (Kernel S)) (List S))) (SIGNATURE eval (S S (Kernel S) S)) (SIGNATURE retract ((Kernel S) S)) (SIGNATURE retractIfCan ((Union (Kernel S) failed) S)))
      [3] eval:  y has no value
      [4] eval:  IN has no value
      [5] eval:  f has no value
      [6] eval:  s has no value
      [7] map:  IN has no value
      [8] map:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20071: EUCDOM}
\begin{verbatim}

>compiling EUCDOM.spad to EUCDOM.nrlib
 
   Warnings: 
      [1] principalIdeal:  coef1 has no value
      [2] principalIdeal:  coef2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20070: FFIELDC}
\begin{verbatim}

>compiling FFIELDC.spad to FFIELDC.nrlib
 
   Warnings: 
      [1] conditionP: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE order ((PositiveInteger) S)) (SIGNATURE discreteLog ((NonNegativeInteger) S)) (SIGNATURE primitive? ((Boolean) S)) (SIGNATURE createPrimitiveElement (S)) (SIGNATURE conditionP ((Union (Vector S) failed) (Matrix S))) (SIGNATURE charthRoot (S S)) (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE init (S)) (SIGNATURE nextItem ((Union S failed) S)) (SIGNATURE discreteLog ((Union (NonNegativeInteger) failed) S S)) (SIGNATURE order ((OnePointCompletion (PositiveInteger)) S)) (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))))
      [2] order: signature of lhs not unique: (PositiveInteger)S chosen
      [3] order:  ord has no value
      [4] discreteLog:  disc1 has no value
      [5] discreteLog:  disclog has no value
      [6] discreteLog: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE order ((PositiveInteger) S)) (SIGNATURE discreteLog ((NonNegativeInteger) S)) (SIGNATURE primitive? ((Boolean) S)) (SIGNATURE createPrimitiveElement (S)) (SIGNATURE conditionP ((Union (Vector S) failed) (Matrix S))) (SIGNATURE charthRoot (S S)) (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE init (S)) (SIGNATURE nextItem ((Union S failed) S)) (SIGNATURE discreteLog ((Union (NonNegativeInteger) failed) S S)) (SIGNATURE order ((OnePointCompletion (PositiveInteger)) S)) (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))))
      [7] gcdPolynomial: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE order ((PositiveInteger) S)) (SIGNATURE discreteLog ((NonNegativeInteger) S)) (SIGNATURE primitive? ((Boolean) S)) (SIGNATURE createPrimitiveElement (S)) (SIGNATURE conditionP ((Union (Vector S) failed) (Matrix S))) (SIGNATURE charthRoot (S S)) (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE init (S)) (SIGNATURE nextItem ((Union S failed) S)) (SIGNATURE discreteLog ((Union (NonNegativeInteger) failed) S S)) (SIGNATURE order ((OnePointCompletion (PositiveInteger)) S)) (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20069: GCDDOM}
\begin{verbatim}

>compiling GCDDOM.spad to GCDDOM.nrlib
 
   Warnings: 
      [1] gcdPolynomial: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))) (SIGNATURE lcm (S (List S))) (SIGNATURE lcm (S S S)) (SIGNATURE gcd (S (List S))) (SIGNATURE gcd (S S S)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20068: HOAGG}
\begin{verbatim}

>compiling HOAGG.spad to HOAGG.nrlib
 
   Warnings: 
      [1] eval:  x has no value
      [2] count:  y has no value
      [3] member?:  x has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20067: ILIST}
\begin{verbatim}

>compiling ILIST.spad to ILIST.nrlib
 
   Warnings: 
      [1] latex:  s has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20066: INS}
\begin{verbatim}

>compiling INS.spad to INS.nrlib
 
   Warnings: 
      [1] factor: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE invmod (S S S)) (SIGNATURE powmod (S S S S)) (SIGNATURE mask (S S)) (SIGNATURE copy (S S)) (SIGNATURE rationalIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE rational ((Fraction (Integer)) S)) (SIGNATURE rational? ((Boolean) S)) (SIGNATURE symmetricRemainder (S S S)) (SIGNATURE bit? ((Boolean) S S)) (SIGNATURE even? ((Boolean) S)) (SIGNATURE init (S)) (SIGNATURE nextItem ((Union S failed) S)) (SIGNATURE convert ((DoubleFloat) S)) (SIGNATURE convert ((Float) S)) (SIGNATURE permutation (S S S)) (SIGNATURE factorial (S S)) (SIGNATURE binomial (S S S)) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE convert ((Integer) S)) (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE positive? ((Boolean) S)) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE factor ((Factored S) S)) (SIGNATURE squareFree ((Factored S) S)) (SIGNATURE prime? ((Boolean) S)) (SIGNATURE characteristic ((NonNegativeInteger))))
      [2] patternMatch: not known that (SetCategory) is of mode (CATEGORY domain (SIGNATURE invmod (S S S)) (SIGNATURE powmod (S S S S)) (SIGNATURE mask (S S)) (SIGNATURE copy (S S)) (SIGNATURE rationalIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE rational ((Fraction (Integer)) S)) (SIGNATURE rational? ((Boolean) S)) (SIGNATURE symmetricRemainder (S S S)) (SIGNATURE bit? ((Boolean) S S)) (SIGNATURE even? ((Boolean) S)) (SIGNATURE init (S)) (SIGNATURE nextItem ((Union S failed) S)) (SIGNATURE convert ((DoubleFloat) S)) (SIGNATURE convert ((Float) S)) (SIGNATURE permutation (S S S)) (SIGNATURE factorial (S S)) (SIGNATURE binomial (S S S)) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE convert ((Integer) S)) (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE positive? ((Boolean) S)) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE factor ((Factored S) S)) (SIGNATURE squareFree ((Factored S) S)) (SIGNATURE prime? ((Boolean) S)) (SIGNATURE characteristic ((NonNegativeInteger))))
      [3] powmod:  y has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20065: INT}
\begin{verbatim}

>compiling INT.spad to INT.nrlib
 
   Warnings: 
      [1] OMwrite: pretend(String) -- should replace by @
      [2] hash: signature of lhs not unique: $$ chosen
      [3] factorPolynomial: not known that (UnivariatePolynomialCategory (Integer)) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) $ $)))
      [4] factorPolynomial:  x1 has no value
      [5] gcdPolynomial: not known that (UnivariatePolynomialCategory (Integer)) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) $ $)))
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20064: ISTRING}
\begin{verbatim}

>compiling ISTRING.spad to ISTRING.nrlib
 
   Warnings: 
      [1] split:  j has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20062: LSAGG}
\begin{verbatim}

>compiling LSAGG.spad to LSAGG.nrlib
 
   Warnings: 
      [1] removeDuplicates!:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20061: POLYCAT}
\begin{verbatim}

>compiling POLYCAT.spad to POLYCAT.nrlib
 
   Warnings: 
      [1] eval:  IN has no value
      [2] coefficient: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))) (SIGNATURE squareFree ((Factored S) S)) (SIGNATURE squareFreePart (S S)) (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE factor ((Factored S) S)) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE conditionP ((Union (Vector S) failed) (Matrix S))) (SIGNATURE primitivePart (S S VarSet)) (SIGNATURE content (S S VarSet)) (SIGNATURE discriminant (S S VarSet)) (SIGNATURE resultant (S S S VarSet)) (SIGNATURE primitiveMonomials ((List S) S)) (SIGNATURE totalDegree ((NonNegativeInteger) S (List VarSet))) (SIGNATURE totalDegree ((NonNegativeInteger) S)) (SIGNATURE isExpt ((Union (Record (: var VarSet) (: exponent (NonNegativeInteger))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE monomial (S S (List VarSet) (List (NonNegativeInteger)))) (SIGNATURE monomial (S S VarSet (NonNegativeInteger))) (SIGNATURE monicDivide ((Record (: quotient S) (: remainder S)) S S VarSet)) (SIGNATURE monomials ((List S) S)) (SIGNATURE coefficient (S S (List VarSet) (List (NonNegativeInteger)))) (SIGNATURE coefficient (S S VarSet (NonNegativeInteger))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (VarSet S)) (SIGNATURE retractIfCan ((Union VarSet failed) S)) (SIGNATURE eval (S S (List VarSet) (List S))) (SIGNATURE eval (S S VarSet S)) (SIGNATURE eval (S S (List VarSet) (List R))) (SIGNATURE eval (S S VarSet R)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE monomial (S R E)) (SIGNATURE coefficient (R S E)) (SIGNATURE retract ((Integer) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retract (R S)) (SIGNATURE content (R S)) (SIGNATURE primitivePart (S S)))
      [3] totalDegree:  w has no value
      [4] reducedSystem:  IN has no value
      [5] reducedSystem:  r has no value
      [6] reducedSystem: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))) (SIGNATURE squareFree ((Factored S) S)) (SIGNATURE squareFreePart (S S)) (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE factor ((Factored S) S)) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE conditionP ((Union (Vector S) failed) (Matrix S))) (SIGNATURE primitivePart (S S VarSet)) (SIGNATURE content (S S VarSet)) (SIGNATURE discriminant (S S VarSet)) (SIGNATURE resultant (S S S VarSet)) (SIGNATURE primitiveMonomials ((List S) S)) (SIGNATURE totalDegree ((NonNegativeInteger) S (List VarSet))) (SIGNATURE totalDegree ((NonNegativeInteger) S)) (SIGNATURE isExpt ((Union (Record (: var VarSet) (: exponent (NonNegativeInteger))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE monomial (S S (List VarSet) (List (NonNegativeInteger)))) (SIGNATURE monomial (S S VarSet (NonNegativeInteger))) (SIGNATURE monicDivide ((Record (: quotient S) (: remainder S)) S S VarSet)) (SIGNATURE monomials ((List S) S)) (SIGNATURE coefficient (S S (List VarSet) (List (NonNegativeInteger)))) (SIGNATURE coefficient (S S VarSet (NonNegativeInteger))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (VarSet S)) (SIGNATURE retractIfCan ((Union VarSet failed) S)) (SIGNATURE eval (S S (List VarSet) (List S))) (SIGNATURE eval (S S VarSet S)) (SIGNATURE eval (S S (List VarSet) (List R))) (SIGNATURE eval (S S VarSet R)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE monomial (S R E)) (SIGNATURE coefficient (R S E)) (SIGNATURE retract ((Integer) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retract (R S)) (SIGNATURE content (R S)) (SIGNATURE primitivePart (S S)))
      [7] solveLinearPolynomialEquation: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))) (SIGNATURE squareFree ((Factored S) S)) (SIGNATURE squareFreePart (S S)) (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE factor ((Factored S) S)) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE conditionP ((Union (Vector S) failed) (Matrix S))) (SIGNATURE primitivePart (S S VarSet)) (SIGNATURE content (S S VarSet)) (SIGNATURE discriminant (S S VarSet)) (SIGNATURE resultant (S S S VarSet)) (SIGNATURE primitiveMonomials ((List S) S)) (SIGNATURE totalDegree ((NonNegativeInteger) S (List VarSet))) (SIGNATURE totalDegree ((NonNegativeInteger) S)) (SIGNATURE isExpt ((Union (Record (: var VarSet) (: exponent (NonNegativeInteger))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE monomial (S S (List VarSet) (List (NonNegativeInteger)))) (SIGNATURE monomial (S S VarSet (NonNegativeInteger))) (SIGNATURE monicDivide ((Record (: quotient S) (: remainder S)) S S VarSet)) (SIGNATURE monomials ((List S) S)) (SIGNATURE coefficient (S S (List VarSet) (List (NonNegativeInteger)))) (SIGNATURE coefficient (S S VarSet (NonNegativeInteger))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (VarSet S)) (SIGNATURE retractIfCan ((Union VarSet failed) S)) (SIGNATURE eval (S S (List VarSet) (List S))) (SIGNATURE eval (S S VarSet S)) (SIGNATURE eval (S S (List VarSet) (List R))) (SIGNATURE eval (S S VarSet R)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE monomial (S R E)) (SIGNATURE coefficient (R S E)) (SIGNATURE retract ((Integer) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retract (R S)) (SIGNATURE content (R S)) (SIGNATURE primitivePart (S S)))
      [8] factorPolynomial: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))) (SIGNATURE squareFree ((Factored S) S)) (SIGNATURE squareFreePart (S S)) (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE factor ((Factored S) S)) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE conditionP ((Union (Vector S) failed) (Matrix S))) (SIGNATURE primitivePart (S S VarSet)) (SIGNATURE content (S S VarSet)) (SIGNATURE discriminant (S S VarSet)) (SIGNATURE resultant (S S S VarSet)) (SIGNATURE primitiveMonomials ((List S) S)) (SIGNATURE totalDegree ((NonNegativeInteger) S (List VarSet))) (SIGNATURE totalDegree ((NonNegativeInteger) S)) (SIGNATURE isExpt ((Union (Record (: var VarSet) (: exponent (NonNegativeInteger))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE monomial (S S (List VarSet) (List (NonNegativeInteger)))) (SIGNATURE monomial (S S VarSet (NonNegativeInteger))) (SIGNATURE monicDivide ((Record (: quotient S) (: remainder S)) S S VarSet)) (SIGNATURE monomials ((List S) S)) (SIGNATURE coefficient (S S (List VarSet) (List (NonNegativeInteger)))) (SIGNATURE coefficient (S S VarSet (NonNegativeInteger))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (VarSet S)) (SIGNATURE retractIfCan ((Union VarSet failed) S)) (SIGNATURE eval (S S (List VarSet) (List S))) (SIGNATURE eval (S S VarSet S)) (SIGNATURE eval (S S (List VarSet) (List R))) (SIGNATURE eval (S S VarSet R)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE monomial (S R E)) (SIGNATURE coefficient (R S E)) (SIGNATURE retract ((Integer) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retract (R S)) (SIGNATURE content (R S)) (SIGNATURE primitivePart (S S)))
      [9] factor: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))) (SIGNATURE squareFree ((Factored S) S)) (SIGNATURE squareFreePart (S S)) (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE factor ((Factored S) S)) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE conditionP ((Union (Vector S) failed) (Matrix S))) (SIGNATURE primitivePart (S S VarSet)) (SIGNATURE content (S S VarSet)) (SIGNATURE discriminant (S S VarSet)) (SIGNATURE resultant (S S S VarSet)) (SIGNATURE primitiveMonomials ((List S) S)) (SIGNATURE totalDegree ((NonNegativeInteger) S (List VarSet))) (SIGNATURE totalDegree ((NonNegativeInteger) S)) (SIGNATURE isExpt ((Union (Record (: var VarSet) (: exponent (NonNegativeInteger))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE monomial (S S (List VarSet) (List (NonNegativeInteger)))) (SIGNATURE monomial (S S VarSet (NonNegativeInteger))) (SIGNATURE monicDivide ((Record (: quotient S) (: remainder S)) S S VarSet)) (SIGNATURE monomials ((List S) S)) (SIGNATURE coefficient (S S (List VarSet) (List (NonNegativeInteger)))) (SIGNATURE coefficient (S S VarSet (NonNegativeInteger))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (VarSet S)) (SIGNATURE retractIfCan ((Union VarSet failed) S)) (SIGNATURE eval (S S (List VarSet) (List S))) (SIGNATURE eval (S S VarSet S)) (SIGNATURE eval (S S (List VarSet) (List R))) (SIGNATURE eval (S S VarSet R)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE monomial (S R E)) (SIGNATURE coefficient (R S E)) (SIGNATURE retract ((Integer) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retract (R S)) (SIGNATURE content (R S)) (SIGNATURE primitivePart (S S)))
      [10] conditionP: :(Integer) -- should replace by pretend
      [11] patternMatch: not known that (SetCategory) is of mode (CATEGORY domain (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))) (SIGNATURE squareFree ((Factored S) S)) (SIGNATURE squareFreePart (S S)) (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE factor ((Factored S) S)) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE conditionP ((Union (Vector S) failed) (Matrix S))) (SIGNATURE primitivePart (S S VarSet)) (SIGNATURE content (S S VarSet)) (SIGNATURE discriminant (S S VarSet)) (SIGNATURE resultant (S S S VarSet)) (SIGNATURE primitiveMonomials ((List S) S)) (SIGNATURE totalDegree ((NonNegativeInteger) S (List VarSet))) (SIGNATURE totalDegree ((NonNegativeInteger) S)) (SIGNATURE isExpt ((Union (Record (: var VarSet) (: exponent (NonNegativeInteger))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE monomial (S S (List VarSet) (List (NonNegativeInteger)))) (SIGNATURE monomial (S S VarSet (NonNegativeInteger))) (SIGNATURE monicDivide ((Record (: quotient S) (: remainder S)) S S VarSet)) (SIGNATURE monomials ((List S) S)) (SIGNATURE coefficient (S S (List VarSet) (List (NonNegativeInteger)))) (SIGNATURE coefficient (S S VarSet (NonNegativeInteger))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (VarSet S)) (SIGNATURE retractIfCan ((Union VarSet failed) S)) (SIGNATURE eval (S S (List VarSet) (List S))) (SIGNATURE eval (S S VarSet S)) (SIGNATURE eval (S S (List VarSet) (List R))) (SIGNATURE eval (S S VarSet R)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE monomial (S R E)) (SIGNATURE coefficient (R S E)) (SIGNATURE retract ((Integer) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retract (R S)) (SIGNATURE content (R S)) (SIGNATURE primitivePart (S S)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20060: PSETCAT}
\begin{verbatim}

>compiling PSETCAT.spad to PSETCAT.nrlib
 
   Warnings: 
      [1] variables1:  z2 has no value
      [2] variables1:  z1 has no value
      [3] variables2:  z2 has no value
      [4] variables2:  z1 has no value
      [5] collectUnder:  lq has no value
      [6] collectUpper:  lq has no value
      [7] collect:  lq has no value
      [8] sort:  us has no value
      [9] sort:  vs has no value
      [10] sort:  ws has no value
      [11] localTriangular?:  z2 has no value
      [12] localTriangular?:  z1 has no value
      [13] localTriangular?:  q has no value
      [14] headRemainder:  r has no value
      [15] rewriteIdealWithHeadRemainder:  rs has no value
      [16] rewriteIdealWithRemainder:  rs has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20059: QFCAT}
\begin{verbatim}

>compiling QFCAT.spad to QFCAT.nrlib
 
   Warnings: 
      [1] reducedSystem: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE < ((Boolean) A A)) (SIGNATURE init (A)) (SIGNATURE nextItem ((Union A failed) A)) (SIGNATURE retract ((Integer) A)) (SIGNATURE retractIfCan ((Union (Integer) failed) A)) (SIGNATURE retract ((Fraction (Integer)) A)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) A)) (SIGNATURE convert ((DoubleFloat) A)) (SIGNATURE convert ((Float) A)) (SIGNATURE convert ((InputForm) A)) (SIGNATURE retract ((Symbol) A)) (SIGNATURE retractIfCan ((Union (Symbol) failed) A)) (SIGNATURE coerce (A (Symbol))) (SIGNATURE random (A)) (SIGNATURE fractionPart (A A)) (SIGNATURE denominator (A A)) (SIGNATURE numerator (A A)) (SIGNATURE patternMatch ((PatternMatchResult (Float) A) A (Pattern (Float)) (PatternMatchResult (Float) A))) (SIGNATURE patternMatch ((PatternMatchResult (Integer) A) A (Pattern (Integer)) (PatternMatchResult (Integer) A))) (SIGNATURE convert ((Pattern (Float)) A)) (SIGNATURE convert ((Pattern (Integer)) A)) (SIGNATURE reducedSystem ((Matrix S) (Matrix A))) (SIGNATURE reducedSystem ((Record (: mat (Matrix S)) (: vec (Vector S))) (Matrix A) (Vector A))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix A) (Vector A))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix A))) (SIGNATURE differentiate (A A (Mapping S S))) (SIGNATURE differentiate (A A (Mapping S S) (NonNegativeInteger))) (SIGNATURE differentiate (A A (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE differentiate (A A (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (A A (List (Symbol)))) (SIGNATURE differentiate (A A (Symbol))) (SIGNATURE differentiate (A A (NonNegativeInteger))) (SIGNATURE differentiate (A A)) (SIGNATURE map (A (Mapping S S) A)) (SIGNATURE retract (S A)) (SIGNATURE retractIfCan ((Union S failed) A)) (SIGNATURE coerce (A S)) (SIGNATURE coerce (A (Fraction (Integer)))) (SIGNATURE coerce (A A)) (SIGNATURE coerce (A (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE coerce ((OutputForm) A)))
      [2] patternMatch: not known that (SetCategory) is of mode (CATEGORY domain (SIGNATURE < ((Boolean) A A)) (SIGNATURE init (A)) (SIGNATURE nextItem ((Union A failed) A)) (SIGNATURE retract ((Integer) A)) (SIGNATURE retractIfCan ((Union (Integer) failed) A)) (SIGNATURE retract ((Fraction (Integer)) A)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) A)) (SIGNATURE convert ((DoubleFloat) A)) (SIGNATURE convert ((Float) A)) (SIGNATURE convert ((InputForm) A)) (SIGNATURE retract ((Symbol) A)) (SIGNATURE retractIfCan ((Union (Symbol) failed) A)) (SIGNATURE coerce (A (Symbol))) (SIGNATURE random (A)) (SIGNATURE fractionPart (A A)) (SIGNATURE denominator (A A)) (SIGNATURE numerator (A A)) (SIGNATURE patternMatch ((PatternMatchResult (Float) A) A (Pattern (Float)) (PatternMatchResult (Float) A))) (SIGNATURE patternMatch ((PatternMatchResult (Integer) A) A (Pattern (Integer)) (PatternMatchResult (Integer) A))) (SIGNATURE convert ((Pattern (Float)) A)) (SIGNATURE convert ((Pattern (Integer)) A)) (SIGNATURE reducedSystem ((Matrix S) (Matrix A))) (SIGNATURE reducedSystem ((Record (: mat (Matrix S)) (: vec (Vector S))) (Matrix A) (Vector A))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix A) (Vector A))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix A))) (SIGNATURE differentiate (A A (Mapping S S))) (SIGNATURE differentiate (A A (Mapping S S) (NonNegativeInteger))) (SIGNATURE differentiate (A A (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE differentiate (A A (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (A A (List (Symbol)))) (SIGNATURE differentiate (A A (Symbol))) (SIGNATURE differentiate (A A (NonNegativeInteger))) (SIGNATURE differentiate (A A)) (SIGNATURE map (A (Mapping S S) A)) (SIGNATURE retract (S A)) (SIGNATURE retractIfCan ((Union S failed) A)) (SIGNATURE coerce (A S)) (SIGNATURE coerce (A (Fraction (Integer)))) (SIGNATURE coerce (A A)) (SIGNATURE coerce (A (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE coerce ((OutputForm) A)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20058: RNS}
\begin{verbatim}

>compiling RNS.spad to RNS.nrlib
 
   Warnings: 
      [1] patternMatch: not known that (SetCategory) is of mode (CATEGORY domain (SIGNATURE round (S S)) (SIGNATURE truncate (S S)) (SIGNATURE fractionPart (S S)) (SIGNATURE floor (S S)) (SIGNATURE ceiling (S S)) (SIGNATURE norm (S S)) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE coerce (S (Integer))) (SIGNATURE convert ((DoubleFloat) S)) (SIGNATURE convert ((Float) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE coerce (S S)) (SIGNATURE coerce (S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE coerce ((OutputForm) S)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20057: SINT}
\begin{verbatim}

>compiling SINT.spad to SINT.nrlib
 
   Warnings: 
      [1] hash: signature of lhs not unique: $$ chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20056: SYMBOL}
\begin{verbatim}

>compiling SYMBOL.spad to SYMBOL.nrlib
 
   Warnings: 
      [1] latex:  s has no value
      [2] latex:  sc has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20055: TSETCAT}
\begin{verbatim}

>compiling TSETCAT.spad to TSETCAT.nrlib
 
   Warnings: 
      [1] basicSet:  p has no value
      [2] basicSet:  gps has no value
      [3] basicSet:  bps has no value
      [4] initials:  lip has no value
      [5] initiallyReduced?:  red has no value
      [6] reduce: signature of lhs not unique: PPS(Mapping P P P)(Mapping (Boolean) P P) chosen
      [7] rewriteSetWithReduction:  rs has no value
      [8] select: signature of lhs not unique: (Union P failed)SV chosen
      [9] collectQuasiMonic:  newlp has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20054: UFD}
\begin{verbatim}

>compiling UFD.spad to UFD.nrlib
 
   Warnings: 
      [1] squareFreePart: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE squareFreePart (S S)) (SIGNATURE prime? ((Boolean) S)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20053: UPOLYC}
\begin{verbatim}

>compiling UPOLYC.spad to UPOLYC.nrlib
 
   Warnings: 
      [1] monomial:  x1 has no value
      [2] solveLinearPolynomialEquation: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE coerce (S S)) (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))) (SIGNATURE squareFree ((Factored S) S)) (SIGNATURE squareFreePart (S S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE init (S)) (SIGNATURE nextItem ((Union S failed) S)) (SIGNATURE elt ((Fraction S) S (Fraction S))) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE integrate (S S)) (SIGNATURE elt (R (Fraction S) R)) (SIGNATURE separate ((Record (: primePart S) (: commonPart S)) S S)) (SIGNATURE pseudoDivide ((Record (: coef R) (: quotient S) (: remainder S)) S S)) (SIGNATURE pseudoQuotient (S S S)) (SIGNATURE composite ((Union (Fraction S) failed) (Fraction S) S)) (SIGNATURE composite ((Union S failed) S S)) (SIGNATURE order ((NonNegativeInteger) S S)) (SIGNATURE elt ((Fraction S) (Fraction S) (Fraction S))) (SIGNATURE differentiate (S S (Mapping R R) S)) (SIGNATURE shiftLeft (S S (NonNegativeInteger))) (SIGNATURE shiftRight (S S (NonNegativeInteger))) (SIGNATURE karatsubaDivide ((Record (: quotient S) (: remainder S)) S (NonNegativeInteger))) (SIGNATURE unmakeSUP (S (SparseUnivariatePolynomial R))) (SIGNATURE makeSUP ((SparseUnivariatePolynomial R) S)) (SIGNATURE vectorise ((Vector R) S (NonNegativeInteger))) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE elt (S S S)) (SIGNATURE elt (R S R)) (SIGNATURE factor ((Factored S) S)) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE content (S S (SingletonAsOrderedSet))) (SIGNATURE variables ((List (SingletonAsOrderedSet)) S)) (SIGNATURE totalDegree ((NonNegativeInteger) S (List (SingletonAsOrderedSet)))) (SIGNATURE totalDegree ((NonNegativeInteger) S)) (SIGNATURE monomial (S S (List (SingletonAsOrderedSet)) (List (NonNegativeInteger)))) (SIGNATURE monomial (S S (SingletonAsOrderedSet) (NonNegativeInteger))) (SIGNATURE minimumDegree ((List (NonNegativeInteger)) S (List (SingletonAsOrderedSet)))) (SIGNATURE minimumDegree ((NonNegativeInteger) S (SingletonAsOrderedSet))) (SIGNATURE mainVariable ((Union (SingletonAsOrderedSet) failed) S)) (SIGNATURE degree ((List (NonNegativeInteger)) S (List (SingletonAsOrderedSet)))) (SIGNATURE degree ((NonNegativeInteger) S (SingletonAsOrderedSet))) (SIGNATURE retract ((SingletonAsOrderedSet) S)) (SIGNATURE retractIfCan ((Union (SingletonAsOrderedSet) failed) S)) (SIGNATURE coerce (S (SingletonAsOrderedSet))) (SIGNATURE eval (S S (List (SingletonAsOrderedSet)) (List S))) (SIGNATURE eval (S S (SingletonAsOrderedSet) S)) (SIGNATURE eval (S S (List (SingletonAsOrderedSet)) (List R))) (SIGNATURE eval (S S (SingletonAsOrderedSet) R)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE degree ((NonNegativeInteger) S)) (SIGNATURE monomial (S R (NonNegativeInteger))) (SIGNATURE retract ((Integer) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retract (R S)) (SIGNATURE minimumDegree ((NonNegativeInteger) S)) (SIGNATURE content (R S)) (SIGNATURE differentiate (S S (List (SingletonAsOrderedSet)) (List (NonNegativeInteger)))) (SIGNATURE differentiate (S S (SingletonAsOrderedSet) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (SingletonAsOrderedSet)))) (SIGNATURE differentiate (S S (SingletonAsOrderedSet))) (SIGNATURE coerce (S (Integer))) (SIGNATURE coerce ((OutputForm) S)))
      [3] factorPolynomial: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE coerce (S S)) (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))) (SIGNATURE squareFree ((Factored S) S)) (SIGNATURE squareFreePart (S S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE init (S)) (SIGNATURE nextItem ((Union S failed) S)) (SIGNATURE elt ((Fraction S) S (Fraction S))) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE integrate (S S)) (SIGNATURE elt (R (Fraction S) R)) (SIGNATURE separate ((Record (: primePart S) (: commonPart S)) S S)) (SIGNATURE pseudoDivide ((Record (: coef R) (: quotient S) (: remainder S)) S S)) (SIGNATURE pseudoQuotient (S S S)) (SIGNATURE composite ((Union (Fraction S) failed) (Fraction S) S)) (SIGNATURE composite ((Union S failed) S S)) (SIGNATURE order ((NonNegativeInteger) S S)) (SIGNATURE elt ((Fraction S) (Fraction S) (Fraction S))) (SIGNATURE differentiate (S S (Mapping R R) S)) (SIGNATURE shiftLeft (S S (NonNegativeInteger))) (SIGNATURE shiftRight (S S (NonNegativeInteger))) (SIGNATURE karatsubaDivide ((Record (: quotient S) (: remainder S)) S (NonNegativeInteger))) (SIGNATURE unmakeSUP (S (SparseUnivariatePolynomial R))) (SIGNATURE makeSUP ((SparseUnivariatePolynomial R) S)) (SIGNATURE vectorise ((Vector R) S (NonNegativeInteger))) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE elt (S S S)) (SIGNATURE elt (R S R)) (SIGNATURE factor ((Factored S) S)) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE content (S S (SingletonAsOrderedSet))) (SIGNATURE variables ((List (SingletonAsOrderedSet)) S)) (SIGNATURE totalDegree ((NonNegativeInteger) S (List (SingletonAsOrderedSet)))) (SIGNATURE totalDegree ((NonNegativeInteger) S)) (SIGNATURE monomial (S S (List (SingletonAsOrderedSet)) (List (NonNegativeInteger)))) (SIGNATURE monomial (S S (SingletonAsOrderedSet) (NonNegativeInteger))) (SIGNATURE minimumDegree ((List (NonNegativeInteger)) S (List (SingletonAsOrderedSet)))) (SIGNATURE minimumDegree ((NonNegativeInteger) S (SingletonAsOrderedSet))) (SIGNATURE mainVariable ((Union (SingletonAsOrderedSet) failed) S)) (SIGNATURE degree ((List (NonNegativeInteger)) S (List (SingletonAsOrderedSet)))) (SIGNATURE degree ((NonNegativeInteger) S (SingletonAsOrderedSet))) (SIGNATURE retract ((SingletonAsOrderedSet) S)) (SIGNATURE retractIfCan ((Union (SingletonAsOrderedSet) failed) S)) (SIGNATURE coerce (S (SingletonAsOrderedSet))) (SIGNATURE eval (S S (List (SingletonAsOrderedSet)) (List S))) (SIGNATURE eval (S S (SingletonAsOrderedSet) S)) (SIGNATURE eval (S S (List (SingletonAsOrderedSet)) (List R))) (SIGNATURE eval (S S (SingletonAsOrderedSet) R)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE degree ((NonNegativeInteger) S)) (SIGNATURE monomial (S R (NonNegativeInteger))) (SIGNATURE retract ((Integer) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retract (R S)) (SIGNATURE minimumDegree ((NonNegativeInteger) S)) (SIGNATURE content (R S)) (SIGNATURE differentiate (S S (List (SingletonAsOrderedSet)) (List (NonNegativeInteger)))) (SIGNATURE differentiate (S S (SingletonAsOrderedSet) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (SingletonAsOrderedSet)))) (SIGNATURE differentiate (S S (SingletonAsOrderedSet))) (SIGNATURE coerce (S (Integer))) (SIGNATURE coerce ((OutputForm) S)))
      [4] factor: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE coerce (S S)) (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))) (SIGNATURE squareFree ((Factored S) S)) (SIGNATURE squareFreePart (S S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE init (S)) (SIGNATURE nextItem ((Union S failed) S)) (SIGNATURE elt ((Fraction S) S (Fraction S))) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE integrate (S S)) (SIGNATURE elt (R (Fraction S) R)) (SIGNATURE separate ((Record (: primePart S) (: commonPart S)) S S)) (SIGNATURE pseudoDivide ((Record (: coef R) (: quotient S) (: remainder S)) S S)) (SIGNATURE pseudoQuotient (S S S)) (SIGNATURE composite ((Union (Fraction S) failed) (Fraction S) S)) (SIGNATURE composite ((Union S failed) S S)) (SIGNATURE order ((NonNegativeInteger) S S)) (SIGNATURE elt ((Fraction S) (Fraction S) (Fraction S))) (SIGNATURE differentiate (S S (Mapping R R) S)) (SIGNATURE shiftLeft (S S (NonNegativeInteger))) (SIGNATURE shiftRight (S S (NonNegativeInteger))) (SIGNATURE karatsubaDivide ((Record (: quotient S) (: remainder S)) S (NonNegativeInteger))) (SIGNATURE unmakeSUP (S (SparseUnivariatePolynomial R))) (SIGNATURE makeSUP ((SparseUnivariatePolynomial R) S)) (SIGNATURE vectorise ((Vector R) S (NonNegativeInteger))) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE elt (S S S)) (SIGNATURE elt (R S R)) (SIGNATURE factor ((Factored S) S)) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE content (S S (SingletonAsOrderedSet))) (SIGNATURE variables ((List (SingletonAsOrderedSet)) S)) (SIGNATURE totalDegree ((NonNegativeInteger) S (List (SingletonAsOrderedSet)))) (SIGNATURE totalDegree ((NonNegativeInteger) S)) (SIGNATURE monomial (S S (List (SingletonAsOrderedSet)) (List (NonNegativeInteger)))) (SIGNATURE monomial (S S (SingletonAsOrderedSet) (NonNegativeInteger))) (SIGNATURE minimumDegree ((List (NonNegativeInteger)) S (List (SingletonAsOrderedSet)))) (SIGNATURE minimumDegree ((NonNegativeInteger) S (SingletonAsOrderedSet))) (SIGNATURE mainVariable ((Union (SingletonAsOrderedSet) failed) S)) (SIGNATURE degree ((List (NonNegativeInteger)) S (List (SingletonAsOrderedSet)))) (SIGNATURE degree ((NonNegativeInteger) S (SingletonAsOrderedSet))) (SIGNATURE retract ((SingletonAsOrderedSet) S)) (SIGNATURE retractIfCan ((Union (SingletonAsOrderedSet) failed) S)) (SIGNATURE coerce (S (SingletonAsOrderedSet))) (SIGNATURE eval (S S (List (SingletonAsOrderedSet)) (List S))) (SIGNATURE eval (S S (SingletonAsOrderedSet) S)) (SIGNATURE eval (S S (List (SingletonAsOrderedSet)) (List R))) (SIGNATURE eval (S S (SingletonAsOrderedSet) R)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE degree ((NonNegativeInteger) S)) (SIGNATURE monomial (S R (NonNegativeInteger))) (SIGNATURE retract ((Integer) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retract (R S)) (SIGNATURE minimumDegree ((NonNegativeInteger) S)) (SIGNATURE content (R S)) (SIGNATURE differentiate (S S (List (SingletonAsOrderedSet)) (List (NonNegativeInteger)))) (SIGNATURE differentiate (S S (SingletonAsOrderedSet) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (SingletonAsOrderedSet)))) (SIGNATURE differentiate (S S (SingletonAsOrderedSet))) (SIGNATURE coerce (S (Integer))) (SIGNATURE coerce ((OutputForm) S)))
      [5] elt: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE coerce (S S)) (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))) (SIGNATURE squareFree ((Factored S) S)) (SIGNATURE squareFreePart (S S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE init (S)) (SIGNATURE nextItem ((Union S failed) S)) (SIGNATURE elt ((Fraction S) S (Fraction S))) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE integrate (S S)) (SIGNATURE elt (R (Fraction S) R)) (SIGNATURE separate ((Record (: primePart S) (: commonPart S)) S S)) (SIGNATURE pseudoDivide ((Record (: coef R) (: quotient S) (: remainder S)) S S)) (SIGNATURE pseudoQuotient (S S S)) (SIGNATURE composite ((Union (Fraction S) failed) (Fraction S) S)) (SIGNATURE composite ((Union S failed) S S)) (SIGNATURE order ((NonNegativeInteger) S S)) (SIGNATURE elt ((Fraction S) (Fraction S) (Fraction S))) (SIGNATURE differentiate (S S (Mapping R R) S)) (SIGNATURE shiftLeft (S S (NonNegativeInteger))) (SIGNATURE shiftRight (S S (NonNegativeInteger))) (SIGNATURE karatsubaDivide ((Record (: quotient S) (: remainder S)) S (NonNegativeInteger))) (SIGNATURE unmakeSUP (S (SparseUnivariatePolynomial R))) (SIGNATURE makeSUP ((SparseUnivariatePolynomial R) S)) (SIGNATURE vectorise ((Vector R) S (NonNegativeInteger))) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE elt (S S S)) (SIGNATURE elt (R S R)) (SIGNATURE factor ((Factored S) S)) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE content (S S (SingletonAsOrderedSet))) (SIGNATURE variables ((List (SingletonAsOrderedSet)) S)) (SIGNATURE totalDegree ((NonNegativeInteger) S (List (SingletonAsOrderedSet)))) (SIGNATURE totalDegree ((NonNegativeInteger) S)) (SIGNATURE monomial (S S (List (SingletonAsOrderedSet)) (List (NonNegativeInteger)))) (SIGNATURE monomial (S S (SingletonAsOrderedSet) (NonNegativeInteger))) (SIGNATURE minimumDegree ((List (NonNegativeInteger)) S (List (SingletonAsOrderedSet)))) (SIGNATURE minimumDegree ((NonNegativeInteger) S (SingletonAsOrderedSet))) (SIGNATURE mainVariable ((Union (SingletonAsOrderedSet) failed) S)) (SIGNATURE degree ((List (NonNegativeInteger)) S (List (SingletonAsOrderedSet)))) (SIGNATURE degree ((NonNegativeInteger) S (SingletonAsOrderedSet))) (SIGNATURE retract ((SingletonAsOrderedSet) S)) (SIGNATURE retractIfCan ((Union (SingletonAsOrderedSet) failed) S)) (SIGNATURE coerce (S (SingletonAsOrderedSet))) (SIGNATURE eval (S S (List (SingletonAsOrderedSet)) (List S))) (SIGNATURE eval (S S (SingletonAsOrderedSet) S)) (SIGNATURE eval (S S (List (SingletonAsOrderedSet)) (List R))) (SIGNATURE eval (S S (SingletonAsOrderedSet) R)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE degree ((NonNegativeInteger) S)) (SIGNATURE monomial (S R (NonNegativeInteger))) (SIGNATURE retract ((Integer) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retract (R S)) (SIGNATURE minimumDegree ((NonNegativeInteger) S)) (SIGNATURE content (R S)) (SIGNATURE differentiate (S S (List (SingletonAsOrderedSet)) (List (NonNegativeInteger)))) (SIGNATURE differentiate (S S (SingletonAsOrderedSet) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (SingletonAsOrderedSet)))) (SIGNATURE differentiate (S S (SingletonAsOrderedSet))) (SIGNATURE coerce (S (Integer))) (SIGNATURE coerce ((OutputForm) S)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20052: FFFG}
\begin{verbatim}

>compiling FFFG.spad to FFFG.nrlib
 
   Warnings: 
      [1] generalCoefficient:  res has no value
      [2] generalInterpolation:  x has no value
      [3] generalInterpolation:  y has no value
      [4] nextVector!:  x has no value
      [5] interpolate:  s has no value
      [6] interpolate:  u has no value
      [7] fffg:  M has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20051: FFFGF}
\begin{verbatim}

>compiling FFFGF.spad to FFFGF.nrlib
 
   Warnings: 
      [1] generalInterpolation:  x has no value
      [2] generalInterpolation:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20050: FFHOM}
\begin{verbatim}

>compiling FFHOM.spad to FFHOM.nrlib
 
   Warnings: 
      [1] compare:  equal has no value
      [2] initialize:  mat has no value
      [3] unknown Functor code (error FFHOM: one extension degree must divide the other one)
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20049: FFPOLY}
\begin{verbatim}

>compiling FFPOLY.spad to FFPOLY.nrlib
 
   Warnings: 
      [1] leastAffineMultiple:  coeffVector has no value
      [2] primitive?: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE primitive? ((Boolean) (SparseUnivariatePolynomial GF))) (SIGNATURE normal? ((Boolean) (SparseUnivariatePolynomial GF))) (SIGNATURE numberOfIrreduciblePoly ((PositiveInteger) (PositiveInteger))) (SIGNATURE numberOfPrimitivePoly ((PositiveInteger) (PositiveInteger))) (SIGNATURE numberOfNormalPoly ((PositiveInteger) (PositiveInteger))) (SIGNATURE createIrreduciblePoly ((SparseUnivariatePolynomial GF) (PositiveInteger))) (SIGNATURE createPrimitivePoly ((SparseUnivariatePolynomial GF) (PositiveInteger))) (SIGNATURE createNormalPoly ((SparseUnivariatePolynomial GF) (PositiveInteger))) (SIGNATURE createNormalPrimitivePoly ((SparseUnivariatePolynomial GF) (PositiveInteger))) (SIGNATURE createPrimitiveNormalPoly ((SparseUnivariatePolynomial GF) (PositiveInteger))) (SIGNATURE nextIrreduciblePoly ((Union (SparseUnivariatePolynomial GF) failed) (SparseUnivariatePolynomial GF))) (SIGNATURE nextPrimitivePoly ((Union (SparseUnivariatePolynomial GF) failed) (SparseUnivariatePolynomial GF))) (SIGNATURE nextNormalPoly ((Union (SparseUnivariatePolynomial GF) failed) (SparseUnivariatePolynomial GF))) (SIGNATURE nextNormalPrimitivePoly ((Union (SparseUnivariatePolynomial GF) failed) (SparseUnivariatePolynomial GF))) (SIGNATURE nextPrimitiveNormalPoly ((Union (SparseUnivariatePolynomial GF) failed) (SparseUnivariatePolynomial GF))) (SIGNATURE random ((SparseUnivariatePolynomial GF) (PositiveInteger))) (SIGNATURE random ((SparseUnivariatePolynomial GF) (PositiveInteger) (PositiveInteger))) (SIGNATURE leastAffineMultiple ((SparseUnivariatePolynomial GF) (SparseUnivariatePolynomial GF))) (SIGNATURE reducedQPowers ((PrimitiveArray (SparseUnivariatePolynomial GF)) (SparseUnivariatePolynomial GF))))
      [3] nextSubset:  restOfs has no value
      [4] nextSubset:  noGap has no value
      [5] nextSubset:  i has no value
      [6] nextIrreduciblePoly:  fcopy has no value
      [7] nextIrreduciblePoly:  s has no value
      [8] nextPrimitivePoly:  fcopy has no value
      [9] nextPrimitivePoly:  term has no value
      [10] nextPrimitivePoly:  noGenerator has no value
      [11] nextPrimitivePoly:  c has no value
      [12] nextPrimitivePoly:  weight has no value
      [13] nextPrimitivePoly:  s has no value
      [14] nextPrimitivePoly:  l has no value
      [15] nextNormalPoly:  fcopy has no value
      [16] nextNormalPoly:  l has no value
      [17] nextNormalPoly:  a has no value
      [18] nextNormalPoly:  s has no value
      [19] nextNormalPrimitivePoly:  fcopy has no value
      [20] nextNormalPrimitivePoly:  term has no value
      [21] nextNormalPrimitivePoly:  noGenerator has no value
      [22] nextNormalPrimitivePoly:  c has no value
      [23] nextNormalPrimitivePoly:  la has no value
      [24] nextNormalPrimitivePoly:  a has no value
      [25] nextNormalPrimitivePoly:  middlelookuplist has no value
      [26] nextNormalPrimitivePoly:  middlepol has no value
      [27] nextNormalPrimitivePoly:  weight has no value
      [28] nextNormalPrimitivePoly:  s has no value
      [29] nextNormalPrimitivePoly:  lc has no value
      [30] random:  polRepr has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20048: FFSQFR}
\begin{verbatim}

>compiling FFSQFR.spad to FFSQFR.nrlib
 
   Warnings: 
      [1] rawMusser:  A has no value
      [2] rawMusser:  decomposition has no value
      [3] oneYunStep:  B has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20047: FFSLPE}
\begin{verbatim}

>compiling FFSLPE.spad to FFSLPE.nrlib
 
   Warnings: 
      [1] solveLinearPolynomialEquation:  slpePrime has no value
      [2] solveLinearPolynomialEquation:  oldtable has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20046: FGLMICPK}
\begin{verbatim}

>compiling FGLMICPK.spad to FGLMICPK.nrlib
 
   Warnings: 
      [1] zeroDim?: not known that (Ring) is of mode (CATEGORY package (SIGNATURE zeroDimensional? ((Boolean) (List (Polynomial R)))) (SIGNATURE fglmIfCan ((Union (List (Polynomial R)) failed) (List (Polynomial R)))) (SIGNATURE groebner ((List (Polynomial R)) (List (Polynomial R)))))
      [2] zeroDim?:  lv has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20045: FFF}
\begin{verbatim}

>compiling FFF.spad to FFF.nrlib
 
   Warnings: 
      [1] createLowComplexityTable:  k has no value
      [2] createLowComplexityTable:  t1 has no value
      [3] createLowComplexityTable:  a has no value
      [4] createLowComplexityTable: pretend(NonNegativeInteger) -- should replace by @
      [5] createLowComplexityTable:  l has no value
      [6] createMultiplicationTable:  l has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20044: FORMULA}
\begin{verbatim}

>compiling FORMULA.spad to FORMULA.nrlib
 
   Warnings: 
      [1] display: pretend(Integer) -- should replace by @
      [2] coerce: pretend(Integer) -- should replace by @
      [3] stringify: pretend(String) -- should replace by @
      [4] splitLong1:  l has no value
      [5] splitLong1:  ls has no value
      [6] splitLong1:  s has no value
      [7] formatSpecial:  form has no value
      [8] formatPlex:  s has no value
      [9] formatFormula: pretend(Boolean) -- should replace by @
      [10] formatFormula: :(Integer) -- should replace by pretend
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20043: FORT}
\begin{verbatim}

>compiling FORT.spad to FORT.nrlib
 
   Warnings: 
      [1] linkToFortran:  fst has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20042: FRAC}
\begin{verbatim}

>compiling FRAC.spad to FRAC.nrlib
 
   Warnings: 
      [1] OMwrite: pretend(String) -- should replace by @
      [2] gcdPolynomial:  x has no value
      [3] factorPolynomial:  x has no value
      [4] factorPolynomial:  den1 has no value
      [5] factorSquareFreePolynomial:  x has no value
      [6] factorSquareFreePolynomial:  den1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20041: FTEM}
\begin{verbatim}

>compiling FTEM.spad to FTEM.nrlib
 
   Warnings: 
      [1] processTemplate:  active has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20040: GENEEZ}
\begin{verbatim}

>compiling GENEEZ.spad to GENEEZ.nrlib
 
   Warnings: 
      [1] reduction:  x has no value
      [2] liftSol:  x has no value
      [3] solveid:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20039: GENMFACT}
\begin{verbatim}

>compiling GENMFACT.spad to GENMFACT.nrlib
 
   Warnings: 
      [1] factor: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored P) P)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20038: GENPGCD}
\begin{verbatim}

>compiling GENPGCD.spad to GENPGCD.nrlib
 
   Warnings: 
      [1] gcdPolynomial:  canonical has no value
      [2] gcdSameVariables:  x has no value
      [3] gcdSameVariables: not known that (Ring) is of mode (CATEGORY package (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P))) (SIGNATURE randomR (R)))
      [4] gcdSameVariables:  y has no value
      [5] gcdSameVariables:  z has no value
      [6] gcdSameVariables:  x1 has no value
      [7] gcdSameVariables:  y1 has no value
      [8] gcdSameVariables:  up1 has no value
      [9] gcdSameVariables:  up2 has no value
      [10] lift:  x has no value
      [11] lift:  y has no value
      [12] lift:  x1 has no value
      [13] lift:  x2 has no value
      [14] lift: not known that (Ring) is of mode (CATEGORY package (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P))) (SIGNATURE randomR (R)))
      [15] recursivelyGCDCoefficients:  x has no value
      [16] flatten:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20037: GALFACTU}
\begin{verbatim}

>compiling GALFACTU.spad to GALFACTU.nrlib
 
   Warnings: 
      [1] singleFactorBound: not known that (Ring) is of mode (CATEGORY F (SIGNATURE Gamma (F F)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20036: GB}
\begin{verbatim}

>compiling GB.spad to GB.nrlib
 
   Warnings: 
      [1] groebner:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20035: GBEUCLID}
\begin{verbatim}

>compiling GBEUCLID.spad to GBEUCLID.nrlib
 
   Warnings: 
      [1] strongGbasis:  z2 has no value
      [2] strongGbasis:  z1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20034: GBF}
\begin{verbatim}

>compiling GBF.spad to GBF.nrlib
 
   Warnings: 
      [1] createGroebnerBases:  nP has no value
      [2] createGroebnerBases:  allReducedFactors has no value
      [3] createGroebnerBases:  y has no value
      [4] createGroebnerBases:  x has no value
      [5] createAllFactors:  x has no value
      [6] createAllFactors:  y has no value
      [7] factorGroebnerBasis:  fctr has no value
      [8] groebnerFactorize: signature of lhs not unique: (List (List Dpol))(List Dpol)(List Dpol) chosen
      [9] groebnerFactorize:  x has no value
      [10] groebnerFactorize:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20033: GBINTERN}
\begin{verbatim}

>compiling GBINTERN.spad to GBINTERN.nrlib
 
   Warnings: 
      [1] gbasis:  z2 has no value
      [2] gbasis:  z1 has no value
      [3] redPo:  m has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20032: GHENSEL}
\begin{verbatim}

>compiling GHENSEL.spad to GHENSEL.nrlib
 
   Warnings: 
      [1] reduction:  x has no value
      [2] mQuo:  x has no value
      [3] genFact:  auxfl has no value
      [4] HenselLift:  constp has no value
      [5] HenselLift:  fln has no value
      [6] completeHensel:  factlist has no value
      [7] completeHensel:  finallist has no value
      [8] completeHensel:  aux has no value
      [9] completeHensel:  auxfl has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20031: GOSPER}
\begin{verbatim}

>compiling GOSPER.spad to GOSPER.nrlib
 
   Warnings: 
      [1] PQ2R:  x has no value
      [2] PQ2R:  y has no value
      [3] UP2QIfCan:  x has no value
      [4] UP2QIfCan:  y has no value
      [5] GosperF: not known that (Ring) is of mode (CATEGORY package (SIGNATURE GospersMethod ((Union Q failed) Q V (Mapping V))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20030: GRIMAGE}
\begin{verbatim}

>compiling GRIMAGE.spad to GRIMAGE.nrlib
 
   Warnings: 
      [1] makeGraphImage: signature of lhs not unique: $(List (List (Point (DoubleFloat)))) chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20029: GROEBSOL}
\begin{verbatim}

>compiling GROEBSOL.spad to GROEBSOL.nrlib
 
   Warnings: 
      [1] testPower: not known that (Ring) is of mode (CATEGORY package (SIGNATURE groebSolve ((List (List (DistributedMultivariatePolynomial lv F))) (List (DistributedMultivariatePolynomial lv F)) (List (OrderedVariableList lv)))) (SIGNATURE testDim ((Union (List (HomogeneousDistributedMultivariatePolynomial lv F)) failed) (List (HomogeneousDistributedMultivariatePolynomial lv F)) (List (OrderedVariableList lv)))) (SIGNATURE genericPosition ((Record (: dpolys (List (DistributedMultivariatePolynomial lv F))) (: coords (List (Integer)))) (List (DistributedMultivariatePolynomial lv F)) (List (OrderedVariableList lv)))))
      [2] testGenPos:  newlpol has no value
      [3] groebSolve:  result has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20028: HEUGCD}
\begin{verbatim}

>compiling HEUGCD.spad to HEUGCD.nrlib
 
   Warnings: 
      [1] lintgcd:  z1 has no value
      [2] lintgcd:  z2 has no value
      [3] localgcd:  flag has no value
      [4] localgcd:  result has no value
      [5] internal:  Cgcd has no value
      [6] internal:  contgcd has no value
      [7] internal:  ans has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20027: HTMLFORM}
\begin{verbatim}

>compiling HTMLFORM.spad to HTMLFORM.nrlib
 
   Warnings: 
      [1] exprex:  s has no value
      [2] outputTree:  allString has no value
      [3] formatNaryNoGroup:  tags has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20026: ICARD}
\begin{verbatim}

>compiling ICARD.spad to ICARD.nrlib
 
   Warnings: 
      [1] elt: pretend(String) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20025: ICDEN}
\begin{verbatim}

>compiling ICDEN.spad to ICDEN.nrlib
 
   Warnings: 
      [1] clearDenominator:  x has no value
      [2] splitDenominator:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20024: IDECOMP}
\begin{verbatim}

>compiling IDECOMP.spad to IDECOMP.nrlib
 
   Warnings: 
      [1] internalForm: not known that (PolynomialCategory (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [2] internalForm: not known that (PolynomialCategory (Fraction (Polynomial (Integer))) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [3] externalForm: not known that (PolynomialCategory (Fraction (Polynomial (Integer))) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [4] externalForm: not known that (PolynomialCategory (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [5] rearrange:  z2 has no value
      [6] rearrange:  z1 has no value
      [7] zeroRadComp: not known that (PolynomialCategory (Fraction (Polynomial (Integer))) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [8] zeroRadComp: not known that (Ring) is of mode (CATEGORY package (SIGNATURE zeroDimPrime? ((Boolean) (PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))))) (SIGNATURE zeroDimPrimary? ((Boolean) (PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))))) (SIGNATURE prime? ((Boolean) (PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))))) (SIGNATURE radical ((PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))) (PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))))) (SIGNATURE primaryDecomp ((List (PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer))))) (PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))))) (SIGNATURE contract ((PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))) (PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))) (List (OrderedVariableList vl)))))
      [9] findvar:  lmonicvar has no value
      [10] zeroPrimDecomp: not known that (PolynomialCategory (Fraction (Polynomial (Integer))) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [11] testPower: :(Integer) -- should replace by pretend
      [12] primaryDecomp: not known that (PolynomialCategory (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [13] contract:  IN has no value
      [14] contract:  vv has no value
      [15] contract: not known that (PolynomialCategory (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20023: IIARRAY2}
\begin{verbatim}

>compiling IIARRAY2.spad to IIARRAY2.nrlib
 
   Warnings: 
      [1] latex:  s has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20022: IMATLIN}
\begin{verbatim}

>compiling IMATLIN.spad to IMATLIN.nrlib
 
   Warnings: 
      [1] nullSpace:  basis has no value
      [2] determinant:  ans has no value
      [3] generalizedInverse: not known that (MatrixCategory FSUP VFSUP VFSUP) is of mode (CATEGORY domain (SIGNATURE diagonalMatrix ($ (Vector FSUP))) (IF (has FSUP (ConvertibleTo (InputForm))) (ATTRIBUTE (ConvertibleTo (InputForm))) noBranch) (IF (has FSUP (Field)) (SIGNATURE inverse ((Union $ failed) $)) noBranch))
      [4] generalizedInverse:  r1 has no value
      [5] generalizedInverse:  z1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20021: IMATQF}
\begin{verbatim}

>compiling IMATQF.spad to IMATQF.nrlib
 
   Warnings: 
      [1] qfMat:  r1 has no value
      [2] nullSpace: not known that (FiniteLinearAggregate QF) is of mode (CATEGORY Col2 (ATTRIBUTE shallowlyMutable))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20020: INMODGCD}
\begin{verbatim}

>compiling INMODGCD.spad to INMODGCD.nrlib
 
   Warnings: 
      [1] reduction:  r1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20019: INNMFACT}
\begin{verbatim}

>compiling INNMFACT.spad to INNMFACT.nrlib
 
   Warnings: 
      [1] supFactor:  factorlist has no value
      [2] supFactor:  irr has no value
      [3] supFactor:  pow has no value
      [4] varChoose: not known that (Ring) is of mode (CATEGORY package (SIGNATURE factor ((Factored P) P (Mapping (Factored (SparseUnivariatePolynomial R)) (SparseUnivariatePolynomial R)))) (SIGNATURE factor ((Factored (SparseUnivariatePolynomial P)) (SparseUnivariatePolynomial P) (Mapping (Factored (SparseUnivariatePolynomial R)) (SparseUnivariatePolynomial R)))))
      [5] intChoose:  unifact has no value
      [6] intChoose:  int has no value
      [7] simplify:  pol1 has no value
      [8] simplify:  factorlist has no value
      [9] intfact:  unifact has no value
      [10] intfact:  lpol has no value
      [11] intfact:  factfin has no value
      [12] monicMfpol:  z1 has no value
      [13] mFactor: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored P) P (Mapping (Factored (SparseUnivariatePolynomial R)) (SparseUnivariatePolynomial R)))) (SIGNATURE factor ((Factored (SparseUnivariatePolynomial P)) (SparseUnivariatePolynomial P) (Mapping (Factored (SparseUnivariatePolynomial R)) (SparseUnivariatePolynomial R)))))
      [14] mFactor:  flead has no value
      [15] mFactor:  irr has no value
      [16] mFactor:  pow has no value
      [17] mFactor:  x has no value
      [18] mFactor:  ffactor has no value
      [19] mFactor:  lvar has no value
      [20] mFactor:  factorlist has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20018: INTERGB}
\begin{verbatim}

>compiling INTERGB.spad to INTERGB.nrlib
 
   Warnings: 
      [1] coerceRtoDwithPF: not known that (PolynomialCategory (PrimeField q) E OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [2] coerceDtoRwithPF: not known that (PolynomialCategory (PrimeField q) E OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [3] coerceRtoD: not known that (PolynomialCategory K E OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [4] coerceDtoR: not known that (PolynomialCategory K E OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [5] groebner: not known that (PolynomialCategory (PrimeField q) E OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [6] groebner: not known that (PolynomialCategory K E OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20017: INTRF}
\begin{verbatim}

>compiling INTRF.spad to INTRF.nrlib
 
   Warnings: 
      [1] infieldIntegrate:  x1 has no value
      [2] internalIntegrate:  x1 has no value
      [3] extendedIntegrate:  x1 has no value
      [4] limitedIntegrate:  x1 has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20016: INTSLPE}
\begin{verbatim}

>compiling INTSLPE.spad to INTSLPE.nrlib
 
   Warnings: 
      [1] solveLinearPolynomialEquation:  slpePrime has no value
      [2] solveLinearPolynomialEquation:  oldtable has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20015: INTTR}
\begin{verbatim}

>compiling INTTR.spad to INTTR.nrlib
 
   Warnings: 
      [1] UP2UP2:  x has no value
      [2] UP2UPR:  x has no value
      [3] UP22UPR:  x has no value
      [4] monomialIntegrate:  x1 has no value
      [5] expintegratepoly:  coef0 has no value
      [6] primlimintfrac:  x1 has no value
      [7] explimintfrac:  x1 has no value
      [8] explimintfrac:  logand has no value
      [9] explimintfrac:  coeff has no value
      [10] tanintegrate:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20014: ISUMP}
\begin{verbatim}

>compiling ISUMP.spad to ISUMP.nrlib
 
   Warnings: 
      [1] pmul:  x has no value
      [2] sum: not known that (Ring) is of mode (CATEGORY package (SIGNATURE sum ((Record (: num P) (: den (Integer))) P V (Segment P))) (SIGNATURE sum ((Record (: num P) (: den (Integer))) P V)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20013: LAUPOL}
\begin{verbatim}

>compiling LAUPOL.spad to LAUPOL.nrlib
 
   Warnings: 
      [1] not known that (Ring) is of mode (CATEGORY domain (SIGNATURE separate ((Record (: polyPart $) (: fracPart (Fraction UP))) (Fraction UP))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20012: LEADCDET}
\begin{verbatim}

>compiling LEADCDET.spad to LEADCDET.nrlib
 
   Warnings: 
      [1] distFact:  c has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20011: LGROBP}
\begin{verbatim}

>compiling LGROBP.spad to LGROBP.nrlib
 
   Warnings: 
      [1] totolex:  result has no value
      [2] minPol: :(NonNegativeInteger) -- should replace by pretend
      [3] intcompBasis:  part has no value
      [4] linGenPos: :(PositiveInteger) -- should replace by pretend
      [5] linGenPos:  result has no value
      [6] groebgen: :(NonNegativeInteger) -- should replace by pretend
      [7] groebgen: not known that (Ring) is of mode (CATEGORY package (SIGNATURE linGenPos ((Record (: gblist (List (DistributedMultivariatePolynomial lv F))) (: gvlist (List (Integer)))) (List (HomogeneousDistributedMultivariatePolynomial lv F)))) (SIGNATURE groebgen ((Record (: glbase (List (DistributedMultivariatePolynomial lv F))) (: glval (List (Integer)))) (List (DistributedMultivariatePolynomial lv F)))) (SIGNATURE totolex ((List (DistributedMultivariatePolynomial lv F)) (List (HomogeneousDistributedMultivariatePolynomial lv F)))) (SIGNATURE minPol ((HomogeneousDistributedMultivariatePolynomial lv F) (List (HomogeneousDistributedMultivariatePolynomial lv F)) (List (HomogeneousDistributedMultivariatePolynomial lv F)) (OrderedVariableList lv))) (SIGNATURE minPol ((HomogeneousDistributedMultivariatePolynomial lv F) (List (HomogeneousDistributedMultivariatePolynomial lv F)) (OrderedVariableList lv))) (SIGNATURE computeBasis ((List (HomogeneousDistributedMultivariatePolynomial lv F)) (List (HomogeneousDistributedMultivariatePolynomial lv F)))) (SIGNATURE coord ((Vector F) (HomogeneousDistributedMultivariatePolynomial lv F) (List (HomogeneousDistributedMultivariatePolynomial lv F)))) (SIGNATURE anticoord ((DistributedMultivariatePolynomial lv F) (List F) (DistributedMultivariatePolynomial lv F) (List (DistributedMultivariatePolynomial lv F)))) (SIGNATURE intcompBasis ((List (HomogeneousDistributedMultivariatePolynomial lv F)) (OrderedVariableList lv) (List (HomogeneousDistributedMultivariatePolynomial lv F)) (List (HomogeneousDistributedMultivariatePolynomial lv F)))) (SIGNATURE choosemon ((DistributedMultivariatePolynomial lv F) (DistributedMultivariatePolynomial lv F) (List (DistributedMultivariatePolynomial lv F)))) (SIGNATURE transform ((HomogeneousDistributedMultivariatePolynomial lv F) (DistributedMultivariatePolynomial lv F))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20010: LIMITRF}
\begin{verbatim}

>compiling LIMITRF.spad to LIMITRF.nrlib
 
   Warnings: 
      [1] limit:  y has no value
      [2] complexLimit:  y has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20009: LINDEP}
\begin{verbatim}

>compiling LINDEP.spad to LINDEP.nrlib
   Warnings: 
      [1] linearlyDependent?: not known that (Ring) is of mode (CATEGORY package (SIGNATURE linearlyDependent? ((Boolean) (Vector R))) (SIGNATURE linearDependence ((Union (Vector S) failed) (Vector R))) (IF (has S (Field)) (SIGNATURE solveLinear ((Union (Vector S) failed) (Vector R) R)) (SIGNATURE solveLinear ((Union (Vector (Fraction S)) failed) (Vector R) R))))
      [2] solveLinear:  z has no value
      [3] solveLinear:  z1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20008: LISYSER}
\begin{verbatim}

>compiling LISYSER.spad to LISYSER.nrlib
 
   Warnings: 
      [1] finiteSeries2LinSys: pretend(NonNegativeInteger) -- should replace by @
      [2] finiteSeries2LinSysWOVectorise: pretend(NonNegativeInteger) -- should replace by @


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20007: LPEFRAC}
\begin{verbatim}

>compiling LPEFRAC.spad to LPEFRAC.nrlib

   Warnings: 
      [1] solveLinearPolynomialEquationByFractions:  x has no value
      [2] solveLinearPolynomialEquationByFractions: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solveLinearPolynomialEquationByFractions ((Union (List (SparseUnivariatePolynomial R)) failed) (List (SparseUnivariatePolynomial R)) (SparseUnivariatePolynomial R))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20006: LSPP}
\begin{verbatim}

>compiling LSPP.spad to LSPP.nrlib
 
   Warnings: 
      [1] poly2vect: not known that (Ring) is of mode (CATEGORY package (SIGNATURE linSolve ((Record (: particular (Union (Vector (Fraction P)) failed)) (: basis (List (Vector (Fraction P))))) (List P) (List OV))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20005: MATLIN}
\begin{verbatim}

>compiling MATLIN.spad to MATLIN.nrlib
 
   Warnings: 
      [1] minorDet:  ans has no value
      [2] elRow2!:  r1 has no value
      [3] elColumn2!:  r1 has no value
      [4] nullSpace:  r2 has no value
      [5] nullSpace:  r1 has no value
      [6] rowEchelon:  xnj has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20004: MCDEN}
\begin{verbatim}

>compiling MCDEN.spad to MCDEN.nrlib
 
   Warnings: 
      [1] clearDenominator:  x has no value
      [2] splitDenominator:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20003: MDDFACT}
\begin{verbatim}

>compiling MDDFACT.spad to MDDFACT.nrlib
 
   Warnings: 
      [1] reduction:  i1 has no value
      [2] ddfact:  ans has no value
      [3] ddfact: :(Integer) -- should replace by @
      [4] sepFact1:  ans has no value
      [5] sepFact1:  stack has no value
      [6] probSplit: :(NonNegativeInteger) -- should replace by pretend
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20002: MFINFACT}
\begin{verbatim}

>compiling MFINFACT.spad to MFINFACT.nrlib

   Warnings: 
      [1] pretendOV -- should replace by @
      [2] supFactor:  p1 has no value
      [3] supFactor: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored PG) PG)) (SIGNATURE factor ((Factored (SparseUnivariatePolynomial PG)) (SparseUnivariatePolynomial PG))))
      [4] supFactor:  p has no value
      [5] factor:  p1 has no value
      [6] mFactor:  irr has no value
      [7] mFactor:  pow has no value
      [8] mFactor: not known that (Ring) is of mode (CATEGORY package (SIGNATURE factor ((Factored PG) PG)) (SIGNATURE factor ((Factored (SparseUnivariatePolynomial PG)) (SparseUnivariatePolynomial PG))))
      [9] mFactor:  ffactor has no value
      [10] mFactor:  factorlist has no value
      [11] pushdcoef:  f1 has no value
      [12] intfact:  unifact has no value
      [13] intfact:  lpol has no value
      [14] intfact:  factfin has no value
      [15] intChoose:  newm has no value
      [16] intChoose:  unifact has no value
      [17] intChoose:  int has no value
      [18] simplify:  pol1 has no value
      [19] simplify:  factorlist has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{warnings 20000: MLIFT}
\begin{verbatim}

>compiling MLIFT.spad to MLIFT.nrlib
 
   Warnings: 
      [1] Use: import (GenExEuclid R (SparseUnivariatePolynomial R))
      [2] Use: import (NPCoef (SparseUnivariatePolynomial R) E OV R P)
      [3] Use: import (IntegerCombinatoricFunctions (Integer))
      [4] corrPoly:  p1 has no value
      [5] corrPoly:  p has no value
      [6] lifting1:  p1 has no value
      [7] lifting:  nplist has no value
      [8] normalDerivM: not known that (Ring) is of mode (CATEGORY package (SIGNATURE corrPoly ((Union (List (SparseUnivariatePolynomial P)) failed) (SparseUnivariatePolynomial P) (List OV) (List R) (List (NonNegativeInteger)) (List (SparseUnivariatePolynomial P)) (Vector (List (SparseUnivariatePolynomial R))) R)) (SIGNATURE lifting ((Union (List (SparseUnivariatePolynomial P)) failed) (SparseUnivariatePolynomial P) (List OV) (List (SparseUnivariatePolynomial R)) (List R) (List P) (List (NonNegativeInteger)) R)) (SIGNATURE lifting1 ((Union (List (SparseUnivariatePolynomial P)) failed) (SparseUnivariatePolynomial P) (List OV) (List (SparseUnivariatePolynomial P)) (List R) (List P) (List (List (Record (: expt (NonNegativeInteger)) (: pcoef P)))) (List (NonNegativeInteger)) (Vector (List (SparseUnivariatePolynomial R))) R)))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10000: FT}
\begin{verbatim}

>compiling FT.spad to FT.nrlib
 
   Semantic Errors: 
      [1]  void is not a known type

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10001: ASP34}
\begin{verbatim}

>compiling ASP34.spad to ASP34.nrlib
 
   Semantic Errors: 
      [1] coerce:  code is BOTH a variable and a literal
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10002: MOEBIUS}
\begin{verbatim}

>compiling MOEBIUS.spad to MOEBIUS.nrlib
 
   Semantic Errors: 
      [1]  a is BOTH a variable and a literal
      [2]  b is BOTH a variable and a literal
      [3]  c is BOTH a variable and a literal
      [4]  d is BOTH a variable and a literal
      [5] eval:  a is BOTH a variable and a literal
      [6] eval:  b is BOTH a variable and a literal
      [7] eval:  c is BOTH a variable and a literal
      [8] eval:  d is BOTH a variable and a literal
      [9] proportional?:  a is BOTH a variable and a literal
      [10] proportional?:  b is BOTH a variable and a literal
      [11] proportional?:  c is BOTH a variable and a literal
      [12] proportional?:  d is BOTH a variable and a literal
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10003: POLYVEC}
\begin{verbatim}

>compiling POLYVEC.spad to POLYVEC.nrlib
 
   Semantic Errors: 
      [1] vectorcombination:  i has two modes: 
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10004: EQ}
\begin{verbatim}

>compiling EQ.spad to EQ.nrlib
 
   Semantic Errors: 
      [1] factorAndSplit:  rcf has two modes: 
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10005: MULTSQFR}
\begin{verbatim}

>compiling MULTSQFR.spad to MULTSQFR.nrlib

   Semantic Errors: 
      [1] squareFree:  ff has two modes: 
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10006: ASP30}
\begin{verbatim}

>compiling ASP30.spad to ASP30.nrlib
 
   Semantic Errors: 
      [1] coerce:  code is BOTH a variable and a literal
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10007: ASP8}
\begin{verbatim}

>compiling ASP8.spad to ASP8.nrlib
 
   Semantic Errors: 
      [1] coerce:  code is BOTH a variable and a literal
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10008: ASP9}
\begin{verbatim}

>compiling ASP9.spad to ASP9.nrlib
 
   Semantic Errors: 
      [1] coerce:  code is BOTH a variable and a literal
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10009: ISUPS}
\begin{verbatim}

>compiling ISUPS.spad to ISUPS.nrlib
 
   Semantic Errors: 
      [1] compose0:  k is BOTH a variable and a literal
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10010: SYMS}
\begin{verbatim}

>compiling SYMS.spad to SYMS.nrlib
 
   Semantic Errors: 
      [1]  Domain is not a known type
      [2]  void is not a known type
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10011: ASP31}
\begin{verbatim}

>compiling ASP31.spad to ASP31.nrlib
 
   Semantic Errors: 
      [1] coerce:  code is BOTH a variable and a literal
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10012: ASP77}
\begin{verbatim}

>compiling ASP77.spad to ASP77.nrlib
 
   Semantic Errors: 
      [1] coerce:  code is BOTH a variable and a literal
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10013: FC}
\begin{verbatim}

>compiling FC.spad to FC.nrlib
 
   Semantic Errors: 
      [1] common:  name is BOTH a variable and a literal
      [2] common:  contents is BOTH a variable and a literal
      [3] forLoop:  body is BOTH a variable and a literal
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10014: ODERTRIC}
\begin{verbatim}

>compiling ODERTRIC.spad to ODERTRIC.nrlib
 
   Semantic Errors: 
      [1]  RatODETools is not a known type
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{errors 10015: NORMPK}
\begin{verbatim}

>compiling NORMPK.spad to NORMPK.nrlib
 
   Semantic Errors: 
      [1] recip:  hesrg has two modes: 
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7233: fill! operation from U8Vector does not show up}
\begin{verbatim}

)d op fill!

There are 2 exposed functions called fill! :
   [1] (D,D1) -> D from D
            if D has ARR2CAT(D1,D2,D3) and D1 has TYPE and D2 has FLAGG
            (D1) and D3 has FLAGG(D1)
   [2] (D,D1) -> D from D
            if D has shallowlyMutable and D has IXAGG(D2,D1) and D2 has
            SETCAT and D1 has TYPE

Examples of fill! from TwoDimensionalArrayCategory

arr : ARRAY2 INT := new(5,4,0) 
fill!(arr,10)


Examples of fill! from IndexedAggregate


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7232: Cannot convert from type Symbol to PI for value \#3}
\begin{verbatim}

)clear all
foo(E:PI,totient:INT,N:INT):LIST(INT) ==
  modN:=IntegerMod(N)
  modtotient:=IntegerMod(totient)
  D:=[x for x in 1..totient | (x*E)::modtotient = 1].1
  secret:=(42^E)::modN 
  clear:=(secret^D)::modN 
  [secret,D,E,N]

P:=11
Q:=17
N:=P*Q
totient:=(P-1)*(Q-1)
t1:=[x for x in 1..totient | gcd(totient,x) = 1]
[foo(t1.y,totient,N) for y in 1..#t1]
-- fails with 
--  Connot convert from type Symbol to PositiveInteger for value #3


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7231: D2 is not of type SEQUENCE}
\begin{verbatim}

see dop.input.pamphlet S 69
)d op coerce

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7230: richhyper1000-1098 S 272 failed}
\begin{verbatim}

Bisect to see when this started

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7229: )show FortranCode has NIL for the containing file}
\begin{verbatim}

similarly
FortranProgram, FortranType, ROIRC

)show InfClsPt simply fails
)show MyExpression simply fails
)show MyUnivariatePolynomial simply fails

)show PackageForAlgebraicFunctionField fails with:
  listSort: second argument must be a list

)show BSD lists the source file as Makefile.pamphlet

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7228: graphics crash running space3}
\begin{verbatim}

The src/input/space3.input causes an early exit

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7227: Unexpected end of \#<input stream }
\begin{verbatim}

see exampleagcode.output, test 3. Now gives the result

Unexpected end of 
  #<input stream "/research/test/mnt/ubuntu/algebra/interp.daase">

This is caused by the removal of PAFFFF from the current system.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7226: )d op coerce regression caused by waldek format update.}
\begin{verbatim}

correct in git 95402C

see src/input/dop test 69
appears to be in ALGSC
[4] Vector D2 -> AlgebraGivenByStructuralConstants(D2,D3,D4,D5)
    from AlgebraGivenByStructuralConstants(D2,D3,D4,D5)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7225: Lasagna Larga Doppia Riccia does not plot 0.0}
\begin{verbatim}

See bookvol8.1, section Lasagna Larga Doppia Riccia

given:

X(i,j) == _
  if ((8 <= i) and (i <= 42)) _
   then 5.0/6.0+(5.0*i-40.0)/34.0 _
   else if (i <= 8) _
         then 5.0*i/48.0 _
         else 5.0/6.0*(7+(i-42.0)/8)
Y(i,j) == j/15.0
Z(i,j) == _
  if ((8 <= i) and (i <= 42)) _
   then 0.0 _
   else if (i <= 8) _
         then (8.0-i)/32.0*cos((j+3)*%pi/6) _
         else 0.25*(i-42)/8.0*cos((j+9)*%pi/6)
v3d:=draw(surface(X(i,j),Y(i,j),Z(i,j)),i=0..50,j=0..150,_
           style=="smooth",title=="Lasagna Larga Doppia Riccia")
colorDef(v3d,yellow(),yellow())
axes(v3d,"off")
zoom(v3d,3.0,3.0,3.0)

The middle part of the image should generate 0.0 for the Z value
but the drawn image does not show a flat plane. Calling Z(30.0,30.0)
shows that the values of 0.0 is generated.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7224: Axiom2D PS save function clips right side of image}
\begin{verbatim}

draw(sin(4*t/7),t=0..14*%pi,coordinates==elliptic(1$DFLOAT))

menu -> ps 
use gimp to look at ps

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7223: Bind stack overflow}
\begin{verbatim}

-- (defun |*2;dot;5;frame1394| is being compiled
-- The variable |*2;dot;5;frame1394;MV is undefined
-- The compiler will assume this variable is a global
-- Internal error
-- The function coerce with signature OrderedCompletion Integer ->
--   Expression OrderedCompletion Integer is missing from domain
--   Expression(OrderedCompletion(Integer))
--
--   Internal Error
--   The function coerce with signature hashcode is missing from domain 
--      Expression(OrderedCompletion (Integer)) 
dot(f,g) == integrate(f*g*x^2,x=-1..1)
proj(f,g) == dot(f,g)*f/dot(f,f)
p0:=1
p1:=x-proj(p0,x)
p2:=x^2-proj(p0,x^2)-proj(p1,x^2)
-- this give bind stack overflow
p(0) == 1
p(n | n > 0) == x^n-sum(proj(p(k),x^n),k=0..n-1)
p(1)

(7) -> )clear all
(1) -> dot(f,g) == integrate(f*g*x^2,x=-1..1)
                                                                   Type: Void
(2) -> proj(f,g) == dot(f,g)*f/dot(f,f)
                                                                   Type: Void
(3) -> p0:=1

   (3)  1
                                                        Type: PositiveInteger
(4) -> p1:=x-proj(p0,x)
   Compiling function dot with type (PositiveInteger,Variable x) -> 
      Union(f1: OrderedCompletion Expression Integer,f2: List 
      OrderedCompletion Expression Integer,fail: failed,pole: 
      potentialPole) 
   There are 34 exposed and 23 unexposed library operations named * 
      having 2 argument(s) but none was determined to be applicable. 
      Use HyperDoc Browse, or issue
                                )display op *
      to learn more about the available operations. Perhaps 
      package-calling the operation or using coercions on the arguments
      will allow you to apply the operation.
   Cannot find a definition or applicable library operation named * 
      with argument type(s) 
Union(f1: OrderedCompletion Expression Integer,f2: List OrderedCompletion Expression Integer,fail: failed,pole: potentialPole)
                               PositiveInteger
      
      Perhaps you should use "@" to indicate the required return type, 
      or "$" to specify which version of the function you need.
   AXIOM will attempt to step through and interpret the code.
   Compiling function dot with type (PositiveInteger,PositiveInteger)
       -> Union(f1: OrderedCompletion Expression Integer,f2: List 
      OrderedCompletion Expression Integer,fail: failed,pole: 
      potentialPole) 

   (4)  x
                                                     Type: Expression Integer
(5) -> p2:=x^2-proj(p0,x^2)-proj(p1,x^2)
   Compiling function dot with type (PositiveInteger,Polynomial Integer
      ) -> Union(f1: OrderedCompletion Expression Integer,f2: List 
      OrderedCompletion Expression Integer,fail: failed,pole: 
      potentialPole) 
   Compiling function dot with type (Expression Integer,Polynomial 
      Integer) -> Union(f1: OrderedCompletion Expression Integer,f2: 
      List OrderedCompletion Expression Integer,fail: failed,pole: 
      potentialPole) 
   Internal Error
   The function coerce with signature hashcode is missing from domain 
      Expression(OrderedCompletion (Integer)) 

(5) -> p(0) == 1
                                                                   Type: Void
(6) -> p(n | n > 0) == x^n-sum(proj(p(k),x^n),k=0..n-1)
                                                                   Type: Void
(7) -> p(1)
   Cannot compile map: proj 
   We will attempt to interpret the code.
   Cannot compile map: p 
   We will attempt to interpret the code.
 
   >> System error:
   Bind stack overflow.

(7) -> 



\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7222: errors while compiling bookvol7}
\begin{verbatim}

make[3]: Entering directory `/research/test/int/hyper'
1 making /research/test/mnt/ubuntu/lib/spadbuf from /research/test/books/bookvol7.pamphlet
spadbuf.c: In function `interpIO':
spadbuf.c:89: warning: ignoring return value of `write', declared with attribute warn_unused_result
2 making /research/test/mnt/ubuntu/lib/ex2ht from /research/test/books/bookvol7.pamphlet
3 making /research/test/mnt/ubuntu/bin/htadd from /research/test/books/bookvol7.pamphlet
htadd.c: In function `buildHtFilename':
htadd.c:1314: warning: ignoring return value of `getcwd', declared with attribute warn_unused_result
4 making /research/test/mnt/ubuntu/bin/hthits from /research/test/books/bookvol7.pamphlet
hthits.c: In function `handleFile':
hthits.c:65: warning: ignoring return value of `fgets', declared with attribute warn_unused_result
hthits.c: In function `handlePage':
hthits.c:166: warning: ignoring return value of `fread', declared with attribute warn_unused_result
5 making /research/test/mnt/ubuntu/bin/htsearch from /research/test/books/bookvol7.pamphlet
6 making /research/test/mnt/ubuntu/lib/presea from /research/test/books/bookvol7.pamphlet
7 /research/test/mnt/ubuntu/bin/hypertex from /research/test/books/bookvol7.pamphlet
hypertex.c: In function `buildHtFilename':
hypertex.c:2029: warning: ignoring return value of `getcwd', declared with attribute warn_unused_result
hypertex.c: In function `handleKey':
hypertex.c:8748: warning: ignoring return value of `system', declared with attribute warn_unused_result
hypertex.c: In function `issueUnixcommand':
hypertex.c:13808: warning: ignoring return value of `system', declared with attribute warn_unused_result
10 making /research/test/mnt/ubuntu/doc/axbook/xhtml from /research/test/books/axbook.tgz
8 making /research/test/mnt/ubuntu/doc/bigbayou.png from /research/test/books/bigbayou.png
9 making /research/test/mnt/ubuntu/doc/doctitle.png from /research/test/books/d

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7221: The variable IDENTITY is undefined.}
\begin{verbatim}

; (DEFUN |Pattern;| ...) is being compiled.
;; The variable IDENTITY is undefined.
;; The compiler will assume this variable is a global.
------------------------------------------------------------------------
   Pattern is now explicitly exposed in frame initial 
   Pattern will be automatically loaded when needed from 
      /research/test/int/algebra/PATTERN.nrlib/code


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7220: Manicotti only draws 1/2 of image}
\begin{verbatim}

See bookvol8.1.pamphlet vs Pasta by Design book

Not clear if the problem is the equations or the graphics

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7219: Funghini draws only lines}
\begin{verbatim}

See bookvol8.1.pamphlet vs Pasta by Design book

Not clear if the problem is the equations or the graphics

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7218: makeViewport3D closed unexpectedly}
\begin{verbatim}

given:

A(i)    == sin(i*%pi/2000)^0.5
X1(i,j) == _
  if (i <= 2000) _
   then 2.1*cos((2*A(i)+1)*%pi)+0.65*cos((2*A(i)+0.5)*%pi)+_
        2.5*sin((A(i)+1.83)*%pi)^500 _
   else -2.1
Y1(i,j) == _
  if (i <= 2000) _
   then 2.5*sin((2*A(i)+1)*%pi)+0.1*sin(A(i)*2*%pi)+_
        3*sin((A(i)+1.83)*%pi)^500 _
   else 0.0
Z(i,j) == j/4.0
vsp:=createThreeSpace()
makeObject(surface(X1(i,j),Y1(i,j),Z(i,j)),i=0..3000,j=0..4,space==vsp)
vp:=makeViewport3D(vsp,style=="smooth",title=="Racchette")
axes(vp,"off")

>> Error detected within library code: 
This viewport has already been closed

See section{Racchette} in bookvol8.1.pamphlet

Note that if the whole example is run the viewport is still open.
Only when the subset involves just (X1,Y1,Z) does it fail.

Note the same error occurs in Rotelle.

X1(i,j) == _
  if (i <= 666) _
   then 2*cos(3*i*%pi/1000)+0.03*cos(93*i*%pi/1000) _
   else 2.03
Y1(i,j) == _
  if (i <= 666) _
   then 2.05*sin(3*i*%pi/1000)+0.03*sin(93*i*%pi/1000) _
   else 0.0
Z(i,j) == j/5.0
vsp:=createThreeSpace()
makeObject(surface(X1(i,j),Y1(i,j),Z(i,j)),i=0..2000,j=0..5,space==vsp)
vp:=makeViewport3D(vsp,style=="smooth",title=="Rotelle")
axes(vp,"off")

>> Error detected within library code: 
This viewport has already been closed

draw(surface(X1(i,j),Y1(i,j),Z(i,j)),i=0..2000,j=0..5)

succeeds with a wildly strange float
"float(149787561878521559122,-66,2)/float(1,0,2)

so I suspect the equations are wrong in some way. --tpd


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7216: Sorry - cannot handle that integrand yet}
\begin{verbatim}

t0207:= -a^3*(a+b*x)*Ei(log(c*(a+b*x)^n)/n)/((c*(a+b*x)^n)^(1/n))/b^4/n+3*a^2*(a+b*x)^2*Ei(2*log(c*(a+b*x)^n)/n)/((c*(a+b*x)^n)^(2/n))/b^4/n-3*a*(a+b*x)^3*Ei(3*log(c*(a+b*x)^n)/n)/((c*(a+b*x)^n)^(3/n))/b^4/n+(a+b*x)^4*Ei(4*log(c*(a+b*x)^n)/n)/((c*(a+b*x)^n)^(4/n))/b^4/n
 

   (32)
                                                               1              2
                                                               -              -
           4 4       3 3     2 2 2     3       4             n n            n n
         (b x  + 4a b x  + 6a b x  + 4a b x + a )(c (b x + a) ) (c (b x + a) )
      *
                       3
                       -                   n
                     n n   4log(c (b x + a) )
         (c (b x + a) ) Ei(------------------)
                                    n
     + 
                                                           1              2
                                                           -              -
                3 3     2 2 2     3        4             n n            n n
         (- 3a b x  - 9a b x  - 9a b x - 3a )(c (b x + a) ) (c (b x + a) )
      *
                       4
                       -                   n
                     n n   3log(c (b x + a) )
         (c (b x + a) ) Ei(------------------)
                                    n
     + 
                                               1              3              4
                                               -              -              -
            2 2 2     3        4             n n            n n            n n
         (3a b x  + 6a b x + 3a )(c (b x + a) ) (c (b x + a) ) (c (b x + a) )
      *
                            n
            2log(c (b x + a) )
         Ei(------------------)
                     n
     + 
                                     2              3              4
                                     -              -              -
             3       4             n n            n n            n n
         (- a b x - a )(c (b x + a) ) (c (b x + a) ) (c (b x + a) )
      *
                           n
            log(c (b x + a) )
         Ei(-----------------)
                    n
  /
                       1              2              3              4
                       -              -              -              -
      4              n n            n n            n n            n n
     b n (c (b x + a) ) (c (b x + a) ) (c (b x + a) ) (c (b x + a) )
                                                     Type: Expression Integer
a0207:= integrate(t0207,x)
 
 
   >> Error detected within library code:
   Sorry - cannot handle that integrand yet

   Continuing to read the file...

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7215: integration bug?}
\begin{verbatim}

t0317:= (-1+tanh(x)^2)^(3/2)
 

                        +------------+
                 2      |       2
   (85)  (tanh(x)  - 1)\|tanh(x)  - 1
                                                     Type: Expression Integer
r0317:= -1/2*cosh(x)*(-sech(x)^2)^(1/2)*(atan(sinh(x))+sech(x)*tanh(x))
 

                                                          +----------+
                                                          |         2
         (- cosh(x)atan(sinh(x)) - cosh(x)sech(x)tanh(x))\|- sech(x)
   (86)  -------------------------------------------------------------
                                       2
                                                     Type: Expression Integer
a0317:= integrate(t0317,x)
 

   (87)  0
                                          Type: Union(Expression Integer,...)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7214: integration bug?}
\begin{verbatim}

(1) -> t0062:= x*(sin(x)^2)^(1/2)

          +-------+
          |      2
   (1)  x\|sin(x)

(2) -> r0062:= -csc(x)*(x*cos(x)-sin(x))*(sin(x)^2)^(1/2)

                                        +-------+
                                        |      2
   (2)  (csc(x)sin(x) - x cos(x)csc(x))\|sin(x)

(3) -> a0062:= integrate(t0062,x)

   (3)  sin(x) - x cos(x)

Axiom's answer seems simpler 

(4) -> t1:=D(a0062,x)

   (4)  x sin(x)

But it is not equivalent to the integrand

(5) -> t2:=t0062-t1

          +-------+
          |      2
   (5)  x\|sin(x)   - x sin(x)

And it does not differ by a constant

(6) -> t3:=D(t2,x)

                              +-------+
                              |      2          2
        (- sin(x) - x cos(x))\|sin(x)   + sin(x)  + x cos(x)sin(x)
   (6)  ----------------------------------------------------------
                                 +-------+
                                 |      2
                                \|sin(x)

Of course, Rich's answer does not differentiate to the closed form

(7) -> t4:=D(r0062,x)

   (7)
                                 3                                        2
       (- cot(x) + x)csc(x)sin(x)  + (x cos(x)cot(x) + cos(x))csc(x)sin(x)
     + 
                 2
       - x cos(x) csc(x)sin(x)
  /
      +-------+
      |      2
     \|sin(x)

And it does not differ by a constant

(8) -> t5:=t4-t1

   (8)
                  +-------+
                  |      2                              3
       - x sin(x)\|sin(x)   + (- cot(x) + x)csc(x)sin(x)
     + 
                                            2           2
       (x cos(x)cot(x) + cos(x))csc(x)sin(x)  - x cos(x) csc(x)sin(x)
  /
      +-------+
      |      2
     \|sin(x)
                                                    Type: Expression(Integer)


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7213: different result appear}
\begin{verbatim}

--   >> Error detected within library code:
--   Imaginary part is nonzero. Cannot retract.
--
--S 488 of 520 sometimes Imaginary part is nonzero. Cannot retract.
a0093:= integrate(t0093,x)
--R 
--R
--R                       +--------+
--R                       |  2
--R                       |%R b - a
--R               sin(%R) |--------
--R             x         |     2
--R           ++         \|   %R
--R   (360)   |   ------------------ d%R
--R          ++       +----------+
--R                   |    2
--R                  \|- %R b + a
--R                                          Type: Union(Expression Integer,...)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7212: differing integration? due to random algorithm?}
\begin{verbatim}

t0404:= (-1+x)^(1/2)/x^(1/2)
integrate(t0404,x)
 

   (23)
            +-----+ +-+               +-+    +-----+             +-----+ +-+
       (- 2\|x - 1 \|x  - 2x + 1)log(\|x  + \|x - 1 ) + (2x - 1)\|x - 1 \|x
     + 
         2
       2x  - 2x
  /
       +-----+ +-+
     2\|x - 1 \|x  + 2x - 1
                                          Type: Union(Expression Integer,...)
--R 
--R
--R                   +-----+ +-+               +-----+ +-+
--R         - log(- 2\|x - 1 \|x  - 2x + 1) + 2\|x - 1 \|x
--R   (23)  -----------------------------------------------
--R                                2
--R                                          Type: Union(Expression Integer,...)

another example:

tt:=sqrt(x)/sqrt(x+1)
integrate(tt,x)

                   +-+ +-----+               +-+ +-----+
         - log(- 2\|x \|x + 1  - 2x - 1) + 2\|x \|x + 1
   (22)  -----------------------------------------------
                                2
                                          Type: Union(Expression Integer,...)

but sometimes we get:

 

   (18)
            +-+ +-----+               +-----+    +-+             +-+ +-----+
       (- 2\|x \|x + 1  - 2x - 1)log(\|x + 1  + \|x ) + (2x + 1)\|x \|x + 1
     + 
         2
       2x  + 2x
  /
       +-+ +-----+
     2\|x \|x + 1  + 2x + 1
                                          Type: Union(Expression Integer,...)


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 329: axiom reference info update}
\begin{verbatim}

get all http://axiom-portal.newsynthesis.org/refs/articles

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7210: but in partial fraction }
\begin{verbatim}

Axiom gets a different answer than Fricas.

Is the following close to what you have in mind?  (two problems: you
need to know the extension in advance, and I don't see a way to factor
over extensions of degree higher than one right now.  Possibly Waldek
knows.)

(1) -> SAEs5 := SAE(FRAC INT,UP(s5,FRAC INT),s5^2-5)

   (1)
  SimpleAlgebraicExtension(Fraction(Integer),UnivariatePolynomial(s5,Fra
  ction(Integer)),s5^2+-5)
                                                            Type: Type
(2) -> p:UP(x,SAEs5) :=(x^5-1)*(x^2-1)*(x-1)

         8    7    6    5    3    2
   (2)  x  - x  - x  + x  - x  + x  + x - 1
Type:
   UnivariatePolynomial(x,SimpleAlgebraicExtension(Fraction(Integer),UnivariatePolynomial(s5,Fraction(Integer)),s5^2+-5))
(3) -> factor p

               3         2      1      1         2    1      1
   (3)  (x - 1) (x + 1)(x  + (- - s5 + -)x + 1)(x  + (- s5 + -)x + 1)
                                2      2              2      2
Type:
   Factored(UnivariatePolynomial(x,SimpleAlgebraicExtension(Fraction(Integer),UnivariatePolynomial(s5,Fraction(Integer)),s5^2+-5)))
(4) -> partialFraction(1/p, x)

   (4)
     13  2    9     27     1         1       1      1       1
     -- x  - -- x + --     -     (- -- s5 - --)x + -- s5 - --
     40      10     40     8        50      10     50      10
     ----------------- - ----- + ----------------------------
                 3       x + 1       2      1      1
          (x - 1)                   x  + (- - s5 + -)x + 1
                                            2      2
   +
       1       1      1       1
     (-- s5 - --)x - -- s5 - --
      50      10     50      10
     --------------------------
         2    1      1
        x  + (- s5 + -)x + 1
              2      2
Type:
     PartialFraction(UnivariatePolynomial(x,Fraction(Polynomial(SimpleAlgebraicExtension(Fraction(Integer),UnivariatePolynomial(s5,Fraction(Integer)),s5^2+-5)))))

Apart from that: Gröbner bases are in Axiom (FriCAS, OpenAxiom), and a
rather good implementation, too. 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7209: Factoring in LODOF is incorrect}
\begin{verbatim}

    rfactor(op, r, zeros, ezfactor, adj?) ==
--      degree r > 1 or not one? leadingCoefficient r =>
      degree r > 1 or not ((leadingCoefficient r) = 1) =>
        recurfactor(op, r, zeros, ezfactor, adj?)
      op1 := opeval(op, dd - coefficient(r, 0)::L)
      map_!((z:L):L+->opeval(z,r), recurfactor(op1, dd, zeros, ezfactor, adj?))

Waldek claims this should read:

    rfactor(op, r, zeros, ezfactor, adj?) ==
      recurfactor(op, r, zeros, ezfactor, adj?)

Martin comments:

 I reworked lodof.input into the unittest framework, including 
 additionally a simplified version of the bug and a new product of two
 irreducible degree 2 factors, which fails, of course. Unfortunately,
 your patched rfactor seems to go into an infinite loop with

-- reducible order 3 operator (1-1-1)
testFactor [(t^9 + t^3)*d +(-sqrt 91+7)*t^8+(-sqrt 91 + 1)*t^2,_
            d + ((sqrt 91 + 6)*t^6 + sqrt 91)/(t^7+t),_
            d + (5*t^6 - 1)/(t^7 + t)]

Waldek comments:

 The real problem seems to be that

 op2 := (t^9+t^3)*d^2 + (13*t^8+t^2)*d - 55*t^7 - 91*t
 factor(op2)

 is extremely slow. I am looking at this -- one problem is
 that we spend a lot of time computing gcd-s of polynomials
 with algebraic coefficients

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7207: integrate(1/(2-3*x)\texttt{\^}(1/2)/(2+3*x)\texttt{\^}(1/2),x)}
\begin{verbatim}

should be 1/3*asin(3/2*x)
but causes an infinite loop in integration

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7206: from http://bugs.debian.org/349877}
\begin{verbatim}

X-Debbugs-CC: Jiri Palecek <jpalecek@web.de>
Package: axiom
Version: 20050901-4
Severity: normal

When I enter in axiom

> p:(NonNegativeInteger)->Polynomial AlgebraicNumber
> p i==if i=0 then 1 else x^i-reduce(+,[integrate(x^i*p k,x=0..1)*p k for  
> k in 0..i-1])

and then

> p 1

I get this error:

   Internal Error
   Interpreter code generation failed for expression
      (IF (= |#1| 0) 1
          (- (^ |x| |#1|)
             (|reduce| +
                 (|construct|
                     (COLLECT (STEP |k| 0 1 (- |#1| 1))
                              (* (|integrate|
                                     (* (^ |x| |#1|) (|p| |k|))
                                     (= |x| (SEGMENT 0 1)))
                                 (|p| |k|)))))))



-- System Information:
Debian Release: testing/unstable
  APT prefers testing
  APT policy: (500, 'testing'), (500, 'stable')
Architecture: i386 (i686)
Shell:  /bin/sh linked to /bin/dash
Kernel: Linux 2.6.15
Locale: LANG=C, LC_CTYPE=C (charmap=ISO-8859-2) (ignored: LC_ALL set to  
cs_CZ)

Versions of packages axiom depends on:
ii  axiom-databases               20050901-4 A general purpose computer  
algebra
ii  libc6                         2.3.5-8    GNU C Library: Shared  
libraries an
ii  libgmp3c2                     4.1.4-10   Multiprecision arithmetic  
library
ii  libncurses5                   5.5-1      Shared libraries for terminal  
hand
ii  libreadline5                  5.1-5      GNU readline and history  
libraries

Versions of packages axiom recommends:
ii  axiom-doc                     20050901-4 A general purpose computer  
algebra
ii  axiom-graphics                20050901-4 A general purpose computer  
algebra
ii  axiom-hypertex                20050901-4 A general purpose computer  
algebra
pn  axiom-source                  <none>     (no description available)

-- no debconf information
-- 
Using Opera's revolutionary e-mail client: http://www.opera.com/mail/



\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7205: interval is not recognized:}
\begin{verbatim}

)d op interval

There are 3 exposed functions called interval :
   [1] Fraction Integer -> D from D
            if D has INTCAT D2 and D2 has Join(FloatingPointSystem,
            TranscendentalFunctionCategory)
   [2] D1 -> D from D
            if D has INTCAT D1 and D1 has Join(FloatingPointSystem,
            TranscendentalFunctionCategory)
   [3] (D1,D1) -> D from D
            if D has INTCAT D1 and D1 has Join(FloatingPointSystem,
            TranscendentalFunctionCategory)

Examples of interval from IntervalCategory

(31) -> fi:=1/4::FRAC(INT)

         1
   (31)  -
         4
                                                       Type: Fraction Integer
(32) -> interval(fi)$INTERVAL(FRAC(INT))
   There are 2 exposed and 0 unexposed library operations named 
      interval having 1 argument(s) but none was determined to be 
      applicable. Use HyperDoc Browse, or issue
                            )display op interval
      to learn more about the available operations. Perhaps 
      package-calling the operation or using coercions on the arguments
      will allow you to apply the operation.
 
   Cannot find a definition or applicable library operation named 
      interval with argument type(s) 
                              Fraction Integer
      
      Perhaps you should use "@" to indicate the required return type, 
      or "$" to specify which version of the function you need.


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7204: bug in this rule form?}
\begin{verbatim}

-- bug in this rule form?  int(x+ :y,z) == int(x,z)+int(y,z)
-- and also this one?    int(x+y,z) == int(x,z)+int(y,z)
intRules:=rule 
   int(x+y,z) == int(x,z)+int(y,z)
   int(k*x | freeOf?(k,z),z) == k*int(x,z)
   int(y | integer? y, z) == y*z
   int(x^(?p | D(p,x)=0),x) == x^(p+1)/(p+1)
intRules int(a^2*b+a^b+3*a-5,a)
intRules int(a^(a+1),a)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7203: in GRAS the line}
\begin{verbatim}

       vType:SINT := xor(op2type,uType) -- remaining ^factors

fails to compile. It expects op2type to be boolean even though
op2type and uType are SINT and the target vType is SINT. The line

   XOR(x:SINT,y:SINT):SINT == LOGXOR(x,y)$Lisp

was temporarily added to work around the bug.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7201: sin(x) drawing error}
\begin{verbatim}

drawing tubeplots does not always work as expected

s:=create3Space()$(ThreeSpace DFLOAT)
draw(curve(x,sin(x),0),x=0..4,style="shade",tubeRadius=0.3,tubePoints=20,
    space==s)
draw(curve(x,sin(x),1),x=-4..4,style="shade",tubeRadius=0.3,tubePoints=20,
    space==s)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7200: Improper syntax after browse}
\begin{verbatim}

in hyperdoc click on browse
enter draw
click operations
select descriptions
enter any command in main window: e.g. 1+1
and you get

line  1: 1+1
Error A: Improper syntax
Error A: Improper syntax
Error A: syntax error at top level 
...

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7199: real/imag giving wrong answers}
\begin{verbatim}

a:=(-1*%i)^(1/2)
b:=(%i)^(3/2)
real(a)
imag(a)
real(b)
imag(b)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7198: missing coerce function in OrderedCompletion Integer}
\begin{verbatim}

-- (defun |*2;dot;5;frame1394| is being compiled
-- The variable |*2;dot;5;frame1394;MV is undefined
-- The compiler will assume this variable is a global
-- Internal error
-- The function coerce with signature OrderedCompletion Integer ->
--   Expression OrderedCompletion Integer is missing from domain
--   Expression(OrderedCompletion(Integer))
--
--   Internal Error
--   The function coerce with signature hashcode is missing from domain 
--      Expression(OrderedCompletion (Integer)) 
dot(f,g) == integrate(f*g*x^2,x=-1..1)
proj(f,g) == dot(f,g)*f/dot(f,f)
p0:=1
p1:=x-proj(p0,x)
p2:=x^2-proj(p0,x^2)-proj(p1,x^2)
-- this give bind stack overflow
p(0) == 1
p(n | n > 0) == x^n-sum(proj(p(k),x^n),k=0..n-1)
p(1)


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 326: Guess.tex needs to be used to document the guess package}
\begin{verbatim}

todo 326: Guess.tex needs to be used to document the guess package

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 326: in LODOOPS the fricas version}
\begin{verbatim}


todo 326: in LODOOPS the fricas version of the killer function differs
          and the nonTrivial function is missing

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 325: permute list of anything}
\begin{verbatim}

n:=[1,2,3,4]
permutations n
p:=[x.[i] for i in 1..4]
permutations p

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7197: hyperdoc/graphics failure}
\begin{verbatim}

Basic Commands -> Draw -> exit

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7196: factor is partial}
\begin{verbatim}

n:= 1303 * 16927 * 157543
factor(n)

occasionally only partially factors, returning

1303 * 2666730361

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 324: integrate: implementation incomplete (constant residues)}
\begin{verbatim}

integrate(
 (x^2+2*x+1*(3*x+1)*sqrt(x+log(x)))/
    (x*sqrt(x+log(x))*(x+sqrt(x+log(x)))),x)

the antiderivative is

 2*(sqrt(x+log(x))+log(x+sqrt(x+log(x))))

or, a shorter example is:

integrate(sqrt(x+log(x)),x)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7195: draw bug}
\begin{verbatim}

i tried to draw a surface, typing 'z' instead of 'y':
   draw(surface(x,x*x,y),x=0..5,z=0..3)
axiom responds with
Loading .... opensus/algebra/PALETTE.o for domain Palette
Unrecoverable error: Segmentation violation.

)set function compile off
   draw(surface(x,x*x,y),x=0..5,z=0..3)
generates 
 >> System error:
 The variable |y| is unbound.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7194: .fn files are not used during first compile phase}
\begin{verbatim}

should be loaded from previous build cache into compile image?

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7193: src/algebra/*.pamphlet files are not copied.}
\begin{verbatim}

bug 7193: src/algebra/*.pamphlet files are not copied.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{7190: integrate(sqrt(1+sec(x)),x) returns 0}
\begin{verbatim}


7190: integrate(sqrt(1+sec(x)),x) returns 0

MMA returns a huge expression
Bug poster claims the Maple and cacl101.com return closed forms

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7189: browsing 'eigenMatrix' works only with 'Operations'}
\begin{verbatim}

bug 7189: browsing 'eigenMatrix' works only with 'Operations'
Michael Becker <Michael.Becker@coconet.de>

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7188: hyperdoc browsing with wildcards does not work}
\begin{verbatim}

bug 7188: hyperdoc browsing with wildcards does not work
Michael Becker <Michael.Becker@coconet.de>

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7187: hyperdoc cat* bug}
\begin{verbatim}

Michael Becker <Michael.Becker@coconet.de>

Entering 'cat*' in the input area of 'Glossary' gives:
'no glossary items match d*'

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7186: ACPLOT missing functions}
\begin{verbatim}

sketch:=makeSketch(x+y,x,y,-1/2..1/2,-1/2..1/2)$ACPLOT
xRange(sketch)
   Internal Error
   The function xRange with signature hashcode is missing from domain 
      PlaneAlgebraicCurvePlot 
yRange(sketch)
   Internal Error
   The function yRange with signature hashcode is missing from domain 
      PlaneAlgebraicCurvePlot 


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7181: SQMATRIX(2,INT) has coerce Integer $->$ \%}
\begin{verbatim}


bug 7181: SQMATRIX(2,INT) has coerce Integer -> %

  is not a valid type

even if:

)expose SQMATRIX

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7169: Matrix printing/parsing bug (notice the - in E21)}
\begin{verbatim}


E21:=matrix([[1,0,0],[-2,1,-],[0,0,1]])

        + 1   0  0+
        |         |
   (6)  |- 2  1  -|
        |         |
        + 0   0  1+
                                              Type: Matrix Polynomial Integer
(7) -> E32:=matrix([[1,0,0],[0,1,0],[0,-5,1]])

        +1   0   0+
        |         |
   (7)  |0   1   0|
        |         |
        +0  - 5  1+
                                                         Type: Matrix Integer
(8) -> E32*E21

        + 1    0      0    +
        |                  |
   (8)  |- 2   1      -    |
        |                  |
        +10   - 5  - 5- + 1+
                                              Type: Matrix Polynomial Integer
(9) -> 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 322: use charts.jpg to guide axiom graphing}
\begin{verbatim}


todo 322: use charts.jpg to guide axiom graphing

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 321: try to use raphael to scale graphs}
\begin{verbatim}

todo 321: try to use raphael to scale graphs

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 320: pick up FLINT package}
\begin{verbatim}

todo 320: pick up FLINT package

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7169: algebra bug}
\begin{verbatim}

)co RESLATC

RESLATC;coerce;ES;2 is replaced by errorBug: 
  Should not be able to obtain value of type Exit 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7167: KeyedAccessFile fails because}
\begin{verbatim}

 (a) readable? in defstream is checking the directory name, not the file
 (b) BINARY_OPEN_INPUT does not exist

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7166: library doesn't seem to work}
\begin{verbatim}

stuff := library "/tmp/Neat.stuff"
stuff.int    := 32**2
stuff."poly" := x**2 + 1
stuff.str    := "Hello"
keys stuff
stuff.poly
stuff("poly")
)system rm -rf /tmp/Neat.stuff

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7165: this rule does not match}
\begin{verbatim}

--S
sininv:=rule(sin(%i*x) == %i*sinh(x))
--R
--R   (1)  sin(%i x) == %i sinh(x)
--R        Type: RewriteRule(Integer,Complex Integer,Expression Complex Integer)
--E

--S
t1:=sin(x*%i) - %i*sinh(x)
--R
--R   (2)  - %i sinh(x) + sin(%i x)
--R                                             Type: Expression Complex Integer
--E

--S
t2:=sininv t1
--R
--R   (3)  - %i sinh(x) + sin(%i x)
--R                                             Type: Expression Complex Integer
--E

(1) -> cosinv:=rule(cos(x*%i) == cosh(x))
(2) -> t1:=cos(x*%i) - cosh(x)
(3) -> t2:=cosinv t1

(1) -> taninv:=rule(tan(x*%i) == %i*tanh(x))
(2) -> t1:=tan(x*%i) - %i*tanh(x)
(3) -> t2:=taninv t1

(1) -> cscinv:=rule(csc(x*%i) == -%i*csch(x))
(2) -> t1:=csc(x*%i) - -%i*csch(x)
(3) -> t2:=cscinv t1

(1) -> secinv:=rule(sec(x*%i) == sech(x))
(2) -> t1:=sec(x*%i) - sech(x)
(3) -> t2:=secinv t1

(1) -> cotinv:=rule(cot(x*%i) == -%i*coth(x))
(2) -> t1:=cot(x*%i) - -%i*coth(x)
(3) -> t2:=cotinv t1

(1) -> sinhinv:=rule(sinh(x*%i) == %i*sin(x))
(2) -> t1:=sinh(x*%i) - %i*sin(x)
(3) -> t2:=sinhinv t1

(1) -> coshinv:=rule(cosh(x*%i) == cos(x))
(2) -> t1:=cosh(x*%i) - cos(x)
(3) -> t2:=coshinv t1

(1) -> tanhinv:=rule(tanh(x*%i) == %i*tan(x))
(2) -> t1:=tanh(x*%i) - %i*tan(x)
(3) -> t2:=tanhinv t1

(1) -> cschinv:=rule(x*%i == -%i*csc(x))
(2) -> t1:=x*%i - -%i*csc(x)
(3) -> t2:=cschinv t1

(1) -> sechinv:=rule(sech(x*i) == sec(x))
(2) -> t1:=sech(x*i) - sec(x)
(3) -> t2:=sechinv t1

(1) -> cothinv:=rule(coth(x*%i) == -%i*cot(x))
(2) -> t1:=coth(x*%i) - -%i*cot(x)
(3) -> t2:=cothinv t1

(1) -> coshperiod:=rule(cosh(x+2*k*%pi*%i) == cosh(x))
(2) -> t1:=cosh(x+2*k*%pi*%i) - cosh(x)
(3) -> t2:=coshperiod t1

(1) -> tanhperiod:=rule(tanh(x+k*%pi*%i) == tanh(x))
(2) -> t1:=tanh(x+k*%pi*%i) - tanh(x)
(3) -> t2:=tanhperiod t1

(1) -> sechperiod:=rule(sech(x+2*k*%pi*%i) == sech(x))
(2) -> t1:=sech(x+2*k*%pi*%i) - sech(x)
(3) -> t2:=sechperiod t1

(1) -> sinsinh:=rule(sin(%i*x)^(-1) == %i*sinh(x)^(-1))
(2) -> t1:=sin(%i*x)^(-1) - %i*sinh(x)^(-1)
(3) -> t2:=sinsinh t1

(1) -> sinhsin:=rule(sinh(%i*x)^(-1) == %i*sin(x)^(-1))
(2) -> t1:=sinh(%i*x)^(-1) - %i*sin(x)^(-1)
(3) -> t2:=sinhsin t1

(1) -> coscosh:=rule(cos(x)^(-1) == %i*cosh(x)^(-1))
(2) -> t1:=cos(x)^(-1) - %i*cosh(x)^(-1)
(3) -> t2:=coscosh t1

(1) -> coscosh2:=rule(cos(x)^(-1) == -%i*cosh(x)^(-1))
(2) -> t1:=cos(x)^(-1) - -%i*cosh(x)^(-1)
(3) -> t2:=coscosh2 t1

(1) -> coshcos:=rule(cosh(x)^(-1) == %i*cos(x)^(-1))
(2) -> t1:=cosh(x)^(-1) - %i*cos(x)^(-1)
(3) -> t2:=coshcos t1

(1) -> coshcos2:=rule(cosh(x)^(-1) == -%i*cos(x)^(-1))
(2) -> t1:=cosh(x)^(-1) - -%i*cos(x)^(-1)
(3) -> t2:=coshcos2 t1

(1) -> tantanh:=rule(tan(%i*x)^(-1) == %i*tanh(x)^(-1))
(2) -> t1:=tan(%i*x)^(-1) - %i*tanh(x)^(-1)
(3) -> t2:=tantanh t1

(1) -> tanhtan:=rule(tanh(%i*x)^(-1) == %i*tan(x)^(-1))
(2) -> t1:=tanh(%i*x)^(-1) - %i*tan(x)^(-1)
(3) -> t2:=tanhtan t1

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7164: this rule does not match}
\begin{verbatim}

--S
cschinv:=rule(csch(x)^(-1) == sinh(1/x)^(-1))
--R
--R           1          1
--R   (1)  ------- == -------
--R        csch(x)         1
--R                   sinh(-)
--R                        x
--R                        Type: RewriteRule(Integer,Integer,Expression Integer)
--E

--S
t1:=csch(x)^(-1) - sinh(1/x)^(-1)
--R
--R             1
--R        sinh(-) - csch(x)
--R             x
--R   (2)  -----------------
--R                      1
--R          csch(x)sinh(-)
--R                      x
--R                                                     Type: Expression Integer
--E

--S
t2:=cschinv t1
--R
--R             1
--R        sinh(-) - csch(x)
--R             x
--R   (3)  -----------------
--R                      1
--R          csch(x)sinh(-)
--R                      x
--R                                                     Type: Expression Integer
--E

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7163: tanhneg rule fails}
\begin{verbatim}

The first 5 succeed, but the 6th (tanhneg t3) loops forever

(1) -> tanhadd:=rule(tanh(x+y) == (tanh(x)+tanh(y))/(1+tanh(x)*tanh(y)))
(2) -> t1:=tanh(x+y) - (tanh(x)+tanh(y))/(1+tanh(x)*tanh(y))
(3) -> t2:=tanhadd t1
(4) -> tanhneg:=rule(tanh(x-y) == (tanh(x)-tanh(y))/(1-tanh(x)*tanh(y)))
(5) -> t3:=tanh(x-y) - (tanh(x)-tanh(y))/(1-tanh(x)*tanh(y))
(6) -> t4:=tanhneg t3

(1) -> cothadd:=rule(coth(x+y) == (coth(x)*coth(y)+1)/(coth(y)+coth(x)))
(2) -> t1:=coth(x+y) - (coth(x)*coth(y)+1)/(coth(y)+coth(x))
(3) -> t2:=cothadd t1
(4) -> cothneg:=rule(coth(x-y) == (coth(x)*coth(y)-1)/(coth(y)-coth(x)))
(5) -> t3:=coth(x-y) - (coth(x)*coth(y)-1)/(coth(y)-coth(x))
(6) -> t4:=cothneg t3

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7162: (p,q):UP(x,INT) fails only in fixed.input.pamphlet}
\begin{verbatim}

p:UnivariatePolynomial(x,Integer); q:UnivariatePolynomial(x,Integer)
                                                                   Type: Void
 
 
Daly Bug
   Category, domain or package constructor : is not available.


The expression

  (p,q):UP(x,INT)

generates the error

Daly Bug
   Category, domain or package constructor : is not available.

works fine at the top of the fixed.input file but not further down. 
Which means that some property is not being cleared properly. 
The symbol ``p'' does get properly declared despite the error message.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7160: numeric(erf(0.1))}
\begin{verbatim}

the erf function is defined as:

erf(x) == 1/sqrt(2*%pi)*integrate(exp(-1/2*t^2),t=0..x) 

ref: CRC Standard Mathematical Tables and Formulae p547

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7159: rootsOf(2*z\texttt{\^}4+z\texttt{\^}3-z-2) is wrong}
\begin{verbatim}

   (1)  [%z0,%z1,%z1,- %z1]
                                                   Type: List AlgebraicNumber

(2) -> (z^2-1)*(2*z^2+z+2)

          4    3
   (2)  2z  + z  - z - 2
                                                     Type: Polynomial Integer
(3) -> rootsOf(z^2-1)

   (3)  [%z3,- %z3]
                                                   Type: List AlgebraicNumber
(4) -> rootsOf(2*z^2+z+2)

             - 2%z5 - 1
   (4)  [%z5,----------]
                  2
                                                   Type: List AlgebraicNumber
so no two roots are equal

(5) -> f(z)==(z^2-1)*(2*z^2+z+2)
                                                                   Type: Void
(6) -> m1:=%%(3).1

   (6)  %z3
                                                        Type: AlgebraicNumber
(7) -> m2:=%%(3).2

   (7)  - %z3
                                                        Type: AlgebraicNumber
(8) -> m3:=%%(4).1

   (8)  %z5
                                                        Type: AlgebraicNumber
(9) -> m4:=%%(4).2

        - 2%z5 - 1
   (9)  ----------
             2
                                                        Type: AlgebraicNumber
(10) -> f(m1)
   Compiling function f with type AlgebraicNumber -> AlgebraicNumber 

   (10)  0
                                                        Type: AlgebraicNumber
(11) -> f(m2)

   (11)  0
                                                        Type: AlgebraicNumber
(12) -> f(m3)

   (12)  0
                                                        Type: AlgebraicNumber
(13) -> f(m4)

   (13)  0
                                                        Type: AlgebraicNumber
(14) -> n1:=%%(1).1

   (14)  %z0
                                                        Type: AlgebraicNumber
(15) -> n2:=%%(1).2

   (15)  %z1
                                                        Type: AlgebraicNumber
(16) -> n3:=%%(1).3

   (16)  %z1
                                                        Type: AlgebraicNumber
(17) -> n4:=$$(1).4
 
   Category, domain or package constructor 1 is not available.
(17) -> n4:=%%(1).4

   (17)  - %z1
                                                        Type: AlgebraicNumber
(18) -> f(n1)

   (18)  0
                                                        Type: AlgebraicNumber
(19) -> f(n2)

   (19)  0
                                                        Type: AlgebraicNumber
(20) -> f(n3)

   (20)  0
                                                        Type: AlgebraicNumber
(21) -> f(n4)

                      2        2                     3      2
   (21)  (2%z0 + 1)%z1  + (2%z0  + %z0 + 2)%z1 + 2%z0  + %z0  - 1
                                                        Type: AlgebraicNumber

so %%(1).4 is not a root?


rootsOf(2*z^4  + z^3  - z - 2) wrong
rootsOf(2*z^4  + z^3  - z - 2, z) correct
rootsOf(z^4  + z^3  + z - 1) wrong
rootsOf(z^4  + z^3  + z - 1,z) correct


Sat 22 May 2004 01:48:36 PM GMT, comment #1:

Maybe I should have added why rootsOf(2*z^4 + z^3 - z - 2) is wrong:
2z^4+z^3-z-2=(z^2-1)(2*z^2+z+2),
thus no two roots are equal, contrary to axioms result.

Martin
	Martin Rubey <kratt6>


Wed 10 Mar 2004 09:06:43 AM GMT, original submission:

a fresh Axiom says

(1) -> rootsOf(2*z^4 + z^3 - z - 2,z)

- 2%z2 - 2%z1 - 2%z0 - 1
(1) [%z0,%z1,%z2,------------------------]
2
Type: List Expression Integer

(2) -> rootsOf(2*z^4 + z^3 - z - 2)

(2) [%z4,%z5,%z5,- %z5]
Type: List AlgebraicNumber

which is wrong.

Same thing for zerosOf, same thing for z^4+z^3+z-1

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7158: patch 3127 is wrong fix}
\begin{verbatim}

currently Axiom gives:

product(summation(i*j,i=a..b),j=c..d)

          d     b
        ++-++  --+
   (1)   | |   >     i j
         | |   --+
        j= c   i= a
                                                     Type: Expression Integer

but NAG version gives

      b        d - c + 1
     --+      2
     >       i
     --+
     i=a

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7157: 0::CARD\texttt{\^}0::CARD should be 1?}
\begin{verbatim}

(1) -> 0::CARD

   (1)  0
                                                         Type: CardinalNumber
(2) -> 0::CARD^0::CARD
 
   >> Error detected within library code:
   0**0 not defined for cardinal numbers.

(2) -> complex(0,0)^complex(0,0.0)
 
   >> Error detected within library code:
   log 0 generated

(2) -> complex(0,0)^complex(2,2.0)
 
   >> Error detected within library code:
   log 0 generated

(2) -> 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7156: nonsense result}
\begin{verbatim}

(1) -> matrix([[0,0],[0,0]])^0.1

   (1)  0.0
                                                                  Type: Float
(2) -> matrix([[0,0],[0,0]])^x

         x
   (2)  0
                                                     Type: Expression Integer

(3) -> matrix([[0,0],[0,1]])^0.1
   There are 4 exposed and 0 unexposed library operations named ^ 
      having 2 argument(s) but none was determined to be applicable. 
      Use HyperDoc Browse, or issue
                                )display op ^
      to learn more about the available operations. Perhaps 
      package-calling the operation or using coercions on the arguments
      will allow you to apply the operation.
 
   Cannot find a definition or applicable library operation named ^ 
      with argument type(s) 
                               Matrix Integer
                                    Float
      
      Perhaps you should use "@" to indicate the required return type, 
      or "$" to specify which version of the function you need.
(3) -> matrix([[0,0],[0,1]])^x
   There are 4 exposed and 0 unexposed library operations named ^ 
      having 2 argument(s) but none was determined to be applicable. 
      Use HyperDoc Browse, or issue
                                )display op ^
      to learn more about the available operations. Perhaps 
      package-calling the operation or using coercions on the arguments
      will allow you to apply the operation.
 
   Cannot find a definition or applicable library operation named ^ 
      with argument type(s) 
                               Matrix Integer
                                 Variable x
      
      Perhaps you should use "@" to indicate the required return type, 
      or "$" to specify which version of the function you need.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7155: fatal error}
\begin{verbatim}

(1) -> a:=series sin(x)
   Loading /research2/test/mnt/fedora5/algebra/EXPR2UPS.o for package 
      ExpressionToUnivariatePowerSeries 

            1  3    1   5     1   7      1    9       1     11      12
   (1)  x - - x  + --- x  - ---- x  + ------ x  - -------- x   + O(x  )
            6      120      5040      362880      39916800
                        Type: UnivariatePuiseuxSeries(Expression Integer,x,0)
(2) -> a*1.0
   Loading /research2/test/mnt/fedora5/algebra/EXPR2.o for package 
      ExpressionFunctions2 
 
   >> System error:
   Caught fatal error [memory may be damaged]


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7154: strange handling of args outside -\%pi/2 < x < \$pi/2}
\begin{verbatim}

(1) -> atan(tan(3))

   (1)  3
                                                     Type: Expression Integer
(2) -> atan(tan(3.0))

   (2)  - 0.1415926535 8979323846
                                                                  Type: Float
(3) -> atan(tan(1))

   (3)  1
                                                     Type: Expression Integer
(4) -> atan(tan(1.0))

   (4)  1.0
                                                                  Type: Float
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7153: division by zero due to definition problem}
\begin{verbatim}

asin(complex(1.0,0.0))
>> Error detected within library code:
   catdef: division by zero


trigcat.spad.pamphlet => 
asin x == atan(x/sqrt(1-x**2))


asin(1.0) => %pi/2.0
but not for Complex(Float) 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7152: integration bug}
\begin{verbatim}

integrate((1/x)::UTS(FRAC POLY INT, x, 0),x)
integrate((1/y)::UTS(FRAC POLY INT, x, 0),z)

The first bug is an indication that 1/x should not be of type 
UTS(x,FRAC POLY INT), UP(x, FRAC POLY INT) and so on. The second is an
indication that QFCAT should have a function variables: % -> List
Symbol.

Sat 02 Oct 2004 12:09:22 PM GMT, comment #2:

I disagree with the previous comment; x should be captured and not
allowed in the FRAC POLY INT. (I agree that the second example in the
original report is not a bug.)

But surely we can all agree that 
integrate((1/x)::ULS(FRAC POLY INT,x, 0),x) 
is a bug? The problem is the same: the 1/x is being treated
in the coefficient domain. Note that 
integrate(1/(x::ULS(FRAC POLYINT, x, 0)),x) 
produces a correct result.

Dylan (dpt@math.harvard.edu)

Sat 02 Oct 2004 08:33:01 AM GMT, comment #1:

Neither of these is a bug. In the first one, Axiom coerced 1/x into
FRAC POLY INT correctly: the only / operation available in UTS is one
induced from the coefficient domain, which requires the denominator to
be in the coefficient domain, and the division is done termwise to the
coefficients of the series. So 1/x ends up in FRAC POLY INT. Note that
to obtain a Taylor series at x = 0 is mathematically is wrong, since
1/x is not defined at x=0. Also the way to obtain a Taylor series is
taylor(func, x=a). If you do integrate(taylor(1/x,x=1),x), that would
cause no problems. Note that the domain of this command is UTS(EXPR
INT, x,1), so such towers are valid and necessary in Axiom. Note also
there are only two exported[coerce] in UTS and they do NOT apply to
1/x. The x in UTS is like the x in UP and is different from the x in
FRAC POLY INT. The representation is Stream Coef (no variable
specified because it is univariate).

For the same reason, in the second command, 1/y is correctly coerced
into FRAC POLY INT. However, in UTS(,x,), the only integrations
allowed are with respect to x. If you want to do integration in 
FRAC POLY INT, then you should do so without coercing 1/y into UTS.

So your examples do not illustrate the problem about mixed up
variables. In fact, it supports use of towers like UTS(EXPR INT, x,a).

William (wyscc@cunyvm.cuny.edu)

Sat 11 Sep 2004 12:34:23 PM GMT, original submission:

integrate((1/x)::UTS(FRAC POLY INT, x, 0),x)

1
(11) - x
x
Type: UnivariateTaylorSeries(Fraction Polynomial Integer,x,0)

integrate((1/y)::UTS(FRAC POLY INT, x, 0),z)

Cannot find a definition or applicable library operation named
integrate with argument type(s)
UnivariateTaylorSeries(Fraction Polynomial Integer,x,0)
Variable z


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7151: bind stack overflow}
\begin{verbatim}

(1) -> ?::Symbol

   (1)  ?
                                                                 Type: Symbol
(2) -> ?::Symbol::SAOS
 
   >> System error:
   Bind stack overflow.

(2) -> x::Symbol::SAOS

   (2)  "?"
                                                  Type: SingletonAsOrderedSet

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7150: exquo cannot detect zero equivalence?}
\begin{verbatim}

gcd((A-2^a)::UP(A,EXPR INT),(A^2-2^(2*a))::UP(A,EXPR INT))

Cause:
In EXPR INT, 2^a and 2^(2*a) are treated as two variables without
relatoins in EXPR INT. Therefore exquo in
gcdPrimitive(p1:SUPP,p2:SUPP)$PGCD fails.


(+) Discussion
Thu 30 Sep 2004 09:31:59 AM GMT, comment #3:

>> Sorry, this is not correct. It is in FIELD (for EXPR INT)

Excuse me, I was to quick again. Here is the (hopefully correct) anaylysis:

exquo(simplify((A-2^a)*(A+2^a))::UP(A,EXPR INT),(A-2^a)::UP(A,EXPR INT))

calls exquo$SUP(EXPR INT). This implements exact division of
polynomials p1 by p2 as usual. After each subtraction - done via
fmecg$SUP - the result is again stored in p1. exquo terminates when p1
is the empty list - note that SUPs are stored as lists of pairs
(degree, coefficient) - or the degree of p2 is larger than p1. In the
latter case, exquo fails.

Thus, in our case, at one point p1 is 4^a-2^(2*a), which is zero
mathematically, but axiom does not know it. In particular, p1 is not
the empty list, but rather a constant polynomial...

It would be interesting to see how MuPAD or Aldor handle this.
	Martin Rubey <kratt6>

Wed 29 Sep 2004 04:20:16 PM GMT, comment #2:

>> The instance of exquo involved is the one in SMP.

Sorry, this is not correct. It is in FIELD (for EXPR INT)
	Martin Rubey <kratt6>

Wed 29 Sep 2004 04:02:03 PM GMT, comment #1:

I should have added:

(1) -> exquo(normalize(simplify(((A-2^a)*(A+2^a)))::EXPR INT),normalize((A-2^a)::EXPR INT))

a log(4) 2
 %e   - A
(1) ---------------
a log(2)
 %e -   A
Type: Union(Expression Integer,...)

(2) -> exquo(simplify((A-2^a)*(A+2^a))::UP(A,EXPR INT),(A-2^a)::UP(A,EXPR INT))

(2) "failed"
Type: Union("failed",...)

I'm afraid that this cannot be fixed easily, since there is no general
mechanism to determine whether an expression is zero or not, which is
needed in exquo. The instance of exquo involved is the one in SMP.
	Martin Rubey <kratt6>


Wed 29 Sep 2004 03:36:55 PM GMT, original submission:

gcd((x-2^a)::UP(x, EXPR INT), simplify((x-2^a)*(x+2^a))::UP(x, EXPR INT))

gives 1, while the correct answer should be x-2^a, as given by

gcd((x-2^a)::UP(x, EXPR INT),((x-2^a)*(x+2^a))::UP(x, EXPR INT))

A workaround is presented on
http://page.axiom-developer.org/zope/mathaction/EXPR_GCD


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7149: bad choice of signature by interpreter}
\begin{verbatim}

y x == (1+x)^x/x
                                                                   Type: Void
interpolate(x,[1,2,3],[1/z(i) for i in 1..3])$PINTERP(x,FRAC POLY INT)
   Compiling function y with type PositiveInteger -> Polynomial Integer
      
   Conversion failed in the compiled user function y .
   Loading /research2/test/mnt/fedora5/algebra/UNISEG.o for domain 
      UniversalSegment 
 
   Cannot convert from type Float to Polynomial Integer for value
   4.5

y(2)
   Conversion failed in the compiled user function y .
 
   Cannot convert from type Float to Polynomial Integer for value
   4.5


HOWEVER:

z(x) == (1+x)^x/x
                                                                   Type: Void
z(2)
   Compiling function z with type PositiveInteger -> Fraction Integer 

        9
   (3)  -
        2
                                                       Type: Fraction Integer
interpolate(x,[1,2,3],[1/z(i) for i in 1..3])$PINTERP(x,FRAC POLY INT)

         59   2    497     169
   (4)  ---- x  - ---- x + ---
        1152      1152     192
                    Type: UnivariatePolynomial(x,Fraction Polynomial Integer)

)clear all

y(x:PositiveInteger):Fraction(Integer) == (1+x)^x/x
   Function declaration y : PositiveInteger -> Fraction Integer has 
      been added to workspace.
                                                                   Type: Void
interpolate(x,[1,2,3],[1/y(i) for i in 1..3])$PINTERP(x,FRAC POLY INT)
   Compiling function y with type PositiveInteger -> Fraction Integer 

         59   2    497     169
   (2)  ---- x  - ---- x + ---
        1152      1152     192
                    Type: UnivariatePolynomial(x,Fraction Polynomial Integer)


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7147: integrate(1/(1+x\texttt{\^}4),x=\%minusInfinity..\%plusInfinity)}
\begin{verbatim}


bug 7147: integrate(1/(1+x^4),x=%minusInfinity..%plusInfinity)
NOTE: fixed in Fricas prior to fork

returns 0
should return %pi*sqrt(2)/2

integrate(1/(4+x^4),x=%minusInfinity..%plusInfinity)
returns %pi/4
should return %pi/4

integrate(1/(1+x^6),x=%minusInfinity..%plusInfinity) 
returns 0
should return 2*%pi/3

integrate(1/(1+x^2),x=%minusInfinity..%plusInfinity) 
returns %pi
should return %pi

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7145: fxiedPointExquo bug}
\begin{verbatim}

see: 
http://groups.google.com/group/fricas-commit/browse_thread/thread/1befef363e8c02be?hl=en#

exprode.spad.pamphlet
  opex := operator("exquo"::Symbol)$OP
  opex := operator("fixedPointExquo"::Symbol)$OP


a:=operator 'a
sol:=seriesSolve((2*x-2)*D(a(x),x)+4*a(x),a,x=0,[1])

[coefficient(sol,i) for i in 0..7] = [1,2,3,4,5,6,7,8]?

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 319: construct coerce graph}
\begin{verbatim}

todo 319: construct coerce graph

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7144: bug in eval}
\begin{verbatim}

http://groups.google.com/group/fricas-devel/browse_thread/thread/964c156e5925db15

y:=operator 'y
  (1) y
deq:=differentiate(y x, x) + y x
       '
  (2) y (x) + y(x)
res:=first(solve(deq, y, x).basis)
        - x
  (3) %e
eval(deq, y, x+->res)
        - x
  (4) %e

instead:

y:=operator 'y
  (1) y
deq:=differentiate(y x, x) + y x
       '
  (2) y (x) + y(x)
res:=first(solve(deq, y, x).basis)
        - x
  (3) %e
function(res,f::Symbol,variables(res))
  (4) f
f(1)
       1
  (5) --
      %e
eval(deq,y,f)
  (6) 0

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7143: asq cannot find AHYP}
\begin{verbatim}

bug 7143: asq cannot find AHYP

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 318: do a plucker/grassman example}
\begin{verbatim}

todo 318: do a plucker/grassman example

Hi,

The Grassmannian G(d,n) is the set of all d-dimensional subspaces of
k^n. Such a subspace can be represented as a d*n matrix whose d rows
are a basis for the subspace. The d*d minors of this matrix are the
Plucker coordinates for the subspace, which gives an embedding of the
the Grassmannian into projective space.

(For example, a 2-dimensional subspace of k^4 can be represented as a
2*4 matrix, and the minors are the determinants of the 2*2 matrices we
get by taking pairs of columns 12, 13, 14, 23, 24, 34. The values of
these minors can be used for form a point [p12:p13:p14:p23:p24:p34] in
projective 5-space, where pij is the ijth Plucker coordinate.)

It is claimed that the Grassmannian is a variety - in other words, the
zero set of a set of polynomials. How do I go about listing these
polynomials (ie generators for the ideal), in terms of the Plucker
coordinates? (In other words, what relations must hold between the
minors of a matrix, given that the rows are linearly independent?)

(I'm aware that there's a way to think about this in terms of the
exterior algebra, but I'm hoping that there's a more straightforward
way to see it.)

Thanks, David

Daniel Lichtblau   	

Newsgroups: sci.math.symbolic
From: Daniel Lichtblau <d...@wolfram.com>
Date: Wed, 10 Sep 2008 15:05:51 -0700 (PDT)
Local: Wed, Sep 10 2008 6:05 pm
Subject: Re: Defining relations for Grassmannian in Plucker coordinates?
Reply | Reply to author | Forward | Print | Individual message | Show original | Report this message | Find messages by this author
On Sep 10, 3:56 pm, DavidA <polyom...@f2s.com> wrote:

- Hide quoted text -
- Show quoted text -
> Hi,

> The Grassmannian G(d,n) is the set of all d-dimensional subspaces of
> k^n. Such a subspace can be represented as a d*n matrix whose d rows
> are a basis for the subspace. The d*d minors of this matrix are the
> Plucker coordinates for the subspace, which gives an embedding of the
> the Grassmannian into projective space.

> (For example, a 2-dimensional subspace of k^4 can be represented as a
> 2*4 matrix, and the minors are the determinants of the 2*2 matrices we
> get by taking pairs of columns 12, 13, 14, 23, 24, 34. The values of
> these minors can be used for form a point [p12:p13:p14:p23:p24:p34] in
> projective 5-space, where pij is the ijth Plucker coordinate.)

> It is claimed that the Grassmannian is a variety - in other words, the
> zero set of a set of polynomials. How do I go about listing these
> polynomials (ie generators for the ideal), in terms of the Plucker
> coordinates? (In other words, what relations must hold between the
> minors of a matrix, given that the rows are linearly independent?)

> (I'm aware that there's a way to think about this in terms of the
> exterior algebra, but I'm hoping that there's a more straightforward
> way to see it.)

> Thanks, David

I don't know if this helps, but such a generating set can be computed
explicitly for fixed (d,n). One uses an elimination order on
polynomials of the form {y1-p1,y2-p2,...} and the result comprises
polynomial relations between the yj.

Here is code for this in Mathematica. It is simple enough that it
should not be too hard to translate to other languages if so desired
(I mean by you; I do not intend to do that).

relationsGrassman[dims_List] := Module[
  {x, xmat, y, yvars, pcoords},
  xmat = Array[x,dims];
  pcoords = First[Minors[xmat,dims[[1]]]];
  yvars = Array[y,Length[pcoords]];
  GroebnerBasis[yvars-pcoords, yvars,
    Flatten[xmat], MonomialOrder->EliminationOrder]
  ]

In[5]:= relationsGrassman[{2,4}]
Out[5]= {y$19[3] y$19[4] - y$19[2] y$19[5] + y$19[1] y$19[6]}

In[6]:= relationsGrassman[{2,5}]
Out[6]= {y$20[7] y$20[8] - y$20[6] y$20[9] + y$20[5] y$20[10],
    y$20[4] y$20[8] - y$20[3] y$20[9] + y$20[2] y$20[10],
    y$20[4] y$20[6] - y$20[3] y$20[7] + y$20[1] y$20[10],
    y$20[4] y$20[5] - y$20[2] y$20[7] + y$20[1] y$20[9],
    y$20[3] y$20[5] - y$20[2] y$20[6] + y$20[1] y$20[8]}

I note that use of Minors probably changes ordering of the p_jk minors
from what you have in mind, so the order of the y variables would need
to be altered accordingly.

Daniel Lichtblau
Wolfram Research

		
David L. Johnson   	

	 More options Sep 10, 10:37 pm
Newsgroups: sci.math.symbolic
From: "David L. Johnson" <david.john...@lehigh.edu>
Date: Wed, 10 Sep 2008 22:37:18 -0400
Local: Wed, Sep 10 2008 10:37 pm
Subject: Re: Defining relations for Grassmannian in Plucker coordinates?
Reply | Reply to author | Forward | Print | Individual message | Show original | Report this message | Find messages by this author

- Hide quoted text -
- Show quoted text -
DavidA wrote:
> Hi,

> The Grassmannian G(d,n) is the set of all d-dimensional subspaces of
> k^n. Such a subspace can be represented as a d*n matrix whose d rows
> are a basis for the subspace. The d*d minors of this matrix are the
> Plucker coordinates for the subspace, which gives an embedding of the
> the Grassmannian into projective space.

> (For example, a 2-dimensional subspace of k^4 can be represented as a
> 2*4 matrix, and the minors are the determinants of the 2*2 matrices we
> get by taking pairs of columns 12, 13, 14, 23, 24, 34. The values of
> these minors can be used for form a point [p12:p13:p14:p23:p24:p34] in
> projective 5-space, where pij is the ijth Plucker coordinate.)

> It is claimed that the Grassmannian is a variety - in other words, the
> zero set of a set of polynomials. How do I go about listing these
> polynomials (ie generators for the ideal), in terms of the Plucker
> coordinates? (In other words, what relations must hold between the
> minors of a matrix, given that the rows are linearly independent?)

> (I'm aware that there's a way to think about this in terms of the
> exterior algebra, but I'm hoping that there's a more straightforward
> way to see it.)

Well, that is what I was going to mention.  It is also the source of the
Pluecker coordinates.  A k-plane in R^n is a unit, decomposable k-vector
in \Lambda_k (R^n).  For G(2,n), the relationship is simpler than for
larger subspace dimensions, because a bivector \xi \in \Lambda_2 (R^n)
is decomposable if and only if \xi \wedge \xi = 0.  You can then write
that out explicitly as equations in the coordinates in \Lambda_2 (R^n),
and they will be quadratics.  For k>2, certainly \xi \wedge \xi =0, but
that is not sufficient for \xi to be decomposable.  Instead, the kernel
of the map R^n --> \Lambda_(k+1) (R^n) given by v --> \xi \wedge v  has
to be k-dimensional, but that still is polynomial in the coordinates.

 From that description, though, it is not clear that G(2,n) is smooth,
and of the right dimension, since it is not a complete intersection, but
of course it is.

-- 

David L. Johnson

When you are up to your ass in alligators, it's hard to remember that
your initial objective was to drain the swamp.
                -- LBJ

		
DavidA   	

	 More options Sep 11, 8:55 am
Newsgroups: sci.math.symbolic
From: DavidA <polyom...@f2s.com>
Date: Thu, 11 Sep 2008 05:55:51 -0700 (PDT)
Local: Thurs, Sep 11 2008 8:55 am
Subject: Re: Defining relations for Grassmannian in Plucker coordinates?
Reply | Reply to author | Forward | Print | Individual message | Show original | Report this message | Find messages by this author
Ah yes, thanks, that should have been obvious.

However, that still leaves a couple of questions:

- Clearly the Grassmannian is contained in the zero-set of those
relations, but how do we know that they coincide? That is, how do we
know that there aren't other zeroes of those relations, which are not
the image of a d*n matrix under the Pluecker embedding.

- Is there any way we could have written down the relations a priori,
without Groebner basis computations (and without exterior algebra)?

		
David L. Johnson   	

	 More options Sep 11, 10:45 am
Newsgroups: sci.math.symbolic
From: "David L. Johnson" <david.john...@lehigh.edu>
Date: Thu, 11 Sep 2008 10:45:21 -0400
Local: Thurs, Sep 11 2008 10:45 am
Subject: Re: Defining relations for Grassmannian in Plucker coordinates?
Reply | Reply to author | Forward | Print | Individual message | Show original | Report this message | Find messages by this author

DavidA wrote:
> Ah yes, thanks, that should have been obvious.

> However, that still leaves a couple of questions:

> - Clearly the Grassmannian is contained in the zero-set of those
> relations, but how do we know that they coincide? That is, how do we
> know that there aren't other zeroes of those relations, which are not
> the image of a d*n matrix under the Pluecker embedding.

Because of the nature of the Pluecker embedding.  These coordinates are
  only the exterior algebra with respect to an explicit basis.  In
particular, as Lichtblau wrote, in the case of 2-planes, the condition
\xi \wedge \xi = 0 is exactly equivalent to \xi being decomposable, \xi
= v \wedge w.  In higher dimensions the conditions are more complicated,
but nevertheless completely describe the Grassmannian.

> - Is there any way we could have written down the relations a priori,
> without Groebner basis computations (and without exterior algebra)?

I can't imagine it, but I also can't imagine why you would want it.
Exterior algebra is the natural setting for this question.  For the
price of making sense of the mechanics, it clarifies exactly these
relationships and makes clear what the relations are.

-- 

David L. Johnson

Some people used to claim that, if enough monkeys sat in front of
enough typewriters and typed long enough, eventually one of them would
reproduce the collected works of Shakespeare.  The internet has
proven this not to be the case.

		
DavidA   	

	 More options Sep 11, 4:14 pm
Newsgroups: sci.math.symbolic
From: DavidA <polyom...@f2s.com>
Date: Thu, 11 Sep 2008 13:14:36 -0700 (PDT)
Local: Thurs, Sep 11 2008 4:14 pm
Subject: Re: Defining relations for Grassmannian in Plucker coordinates?
Reply | Reply to author | Forward | Print | Individual message | Show original | Report this message | Find messages by this author
Perhaps the problem is that I don't understand the connection between
the exterior algebra description of the Grassmannian and the Plucker
coordinates (matrix minors) description. Please can someone spell it
out.

		
Maarten Bergvelt   	

	 More options Sep 11, 4:35 pm
Newsgroups: sci.math.symbolic
From: Maarten Bergvelt <be...@math.uiuc.edu>
Date: Thu, 11 Sep 2008 20:35:47 +0000 (UTC)
Local: Thurs, Sep 11 2008 4:35 pm
Subject: Re: Defining relations for Grassmannian in Plucker coordinates?
Reply | Reply to author | Forward | Print | Individual message | Show original | Report this message | Find messages by this author
On 2008-09-11, DavidA <polyom...@f2s.com> wrote:

> Perhaps the problem is that I don't understand the connection between
> the exterior algebra description of the Grassmannian and the Plucker
> coordinates (matrix minors) description. Please can someone spell it
> out.

The matrix minors are the coefficients of the exterior products
of the basis elements.

So let v, w be vectors in C^4, and consider the
wedge product v^w. It can be expanded in terms of the standard basis
e_i^e_j, for i<j of the second exterior power of C^4, where e_i are
the standard basis vectors of C^4. Just write it
out and you will see the 2x2 minors appear. In some detail:
v=v_1e_1+v_2e_2+v_3e_3+v_4e_4, w=w_1e_1+w_2e_2+w_3e_3+w_4e_4,
so
v^w=(v_1w_2-v_2w_1) e_1^e_2 + ......

The pattern still holds for k vectors in C^n.

Hope that helps.
-- 
Maarten Bergvelt                 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 317: update INFORM notes}
\begin{verbatim}

PRETTYPRINT((matrix [[1,2],[3,4]])::INFORM)$Lisp

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 316: CircularList domain}
\begin{verbatim}

make a new CircularList domain that handles length (#) properly.
Move the destructive operations out of list and into here.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7140: this returns the wrong answers}
\begin{verbatim}

p:=(x:EXPR(INT)):EXPR(INT)+->3*x
q:=(x:EXPR(INT)):EXPR(INT)+->2*x+3
(p+q)(4) => 23     (correct)
(p+q)(x) => 5x + 3 (correct)
(p-q)(4) => 1      (correct)
(p-q)(x) => x-3    (correct)
(p*q)(4) => 33     (wrong)
(p*q)(x) => 6x+9   (wrong)

\subsection{package FUNMAPS FunctionMaps}
<<package FUNMAPS FunctionMaps>>=
)abbrev package FUNMAPS FunctionMaps
++ Description: Functional composition
++ Given functions f and g, returns the function composition (f op g)
FunctionMaps(A:SetCategory, B:IntegralDomain): cat == def where
 EXP ==> Expression(Integer)
 cat == with
   "+": (A->B, A->B) -> (A->B) 
        ++ \spad(+) does functional addition
   "-": (A->B, A->B) -> (A->B) 
        ++ \spad(-) does functional addition
   "*": (A->B, A->B) -> (A->B) 
        ++ \spad(*) does functional addition
 def == add
    funcAdd: (A->B, A->B, A) -> B 
    funcSub: (A->B, A->B, A) -> B 
    funcMul: (A->B, A->B, A) -> B 

    funcAdd(g,h,x) == ((g x) + (h x))$B
    funcSub(g,h,x) == ((g x) - (h x))$B
    funcMul(g,h,x) == ((g x) * (h x))$B

    (a:(A -> B))+(b:(A -> B)) == funcAdd(a,b,#1)
    (a:(A -> B))-(b:(A -> B)) == funcSub(a,b,#1)
    (a:(A -> B))*(b:(A -> B)) == funcMul(a,b,#1)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7139: this crashes Axiom when compiled}
\begin{verbatim}

\subsection{package FUNMAPS FunctionMaps}
<<package FUNMAPS FunctionMaps>>=
)abbrev package FUNMAPS FunctionMaps
++ Description: Functional composition
++ Given functions f and g, returns the function composition (f op g)
FunctionMaps(A:SetCategory, B:IntegralDomain): cat == def where
 EXP ==> Expression(Integer)
 cat == with
   "+": (A->B, A->B) -> (A->B) 
        ++ \spad(+) does functional addition
        ++
        ++E f:=(x:INT):INT +-> 3*x
        ++E g:=(x:INT):INT +-> 2*x+3
        ++E (f+g)(4)
   "-": (A->B, A->B) -> (A->B) 
        ++ \spad(+) does functional addition
        ++
        ++E f:=(x:INT):INT +-> 3*x
        ++E g:=(x:INT):INT +-> 2*x+3
        ++E (f-g)(4)
   "*": (A->B, A->B) -> (A->B) 
        ++ \spad(+) does functional addition
        ++
        ++E f:=(x:INT):INT +-> 3*x
        ++E g:=(x:INT):INT +-> 2*x+3
        ++E (f*g)(4)
   "/": (A->EXP, A->EXP) -> (A->EXP)
        ++ \spad(+) does functional addition
        ++
        ++E p:=(x:EXPR(INT)):EXPR(INT)+->3*x
        ++E q:=(x:EXPR(INT)):EXPR(INT)+->2*x+3
        ++E (p/q)(4)
        ++E (p/q)(x)
 def == add
    fab ==> (A -> B)
    faei ==> (A -> Expression(Integer))
    EXP ==> Expression(Integer)

    funcAdd: (A->B, A->B, A) -> B 
    funcSub: (A->B, A->B, A) -> B 
    funcMul: (A->B, A->B, A) -> B 
    funcDiv: (A -> EXP, A -> EXP, A) -> EXP
    funcAdd(g,h,x) == ((g x) + (h x))$B
    funcSub(g,h,x) == ((g x) - (h x))$B
    funcMul(g,h,x) == ((g x) * (h x))$B
    funcDiv(g,h,x) == ((g x) / (h x))$EXP

    (a:fab)+(b:fab) == funcAdd(a,b,#1)
    (a:fab)-(b:fab) == funcSub(a,b,#1)
    (a:fab)*(b:fab) == funcMul(a,b,#1)
    (a:faei)/(b:faei) == funcDiv(a,b,#1)


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7138: unravel in CartesianTensor does not work}
\begin{verbatim}

n:SquareMatrix(2,Integer):=matrix [[2,3],[0,1]]
tn:CartesianTensor(1,2,Integer):=n
unravel ravel tn

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7137: \{\}\$(List INT)}
\begin{verbatim}


The function SEQ is not implemented in List Integer .

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{meh 4: as of aug 2008, changecount/name/percent in changelog}
\begin{verbatim}

tpd 4485 Tim Daly          82.55
gdr  452 Gabriel Dos Reis   8.31
wxh  216 Waldek Hebisch     3.97
mxm   46 Mark Murray        0.84
wsp   28 Bill Page          0.51
mxr   24 Martin Rubey       0.44
acr   21 Arthur C. Ralfs    0.38
gxv   19 Gregory Vanuxem    0.34
sxw   19 Stephen Wilson     0.34
rhx   13 Ralf Hemmecke      0.23
pab   11 Peter Broadbery    0.20
cxc    8 Christophe Conil   0.01
cxm    8 Camm Maguire       0.01
dxm    8 David Mentre       0.01
mxt    6 Mike Thomas        0.01
fxl    5 Frederic Lehobey   0.00
rxr    5 Renaud Rioboo
cys    4 Chris Yapp
jap    3 Jose Alfredo Portes
jxw    3 Juergen Weiss
mmm    3 Marc Moreno Maza
wys    3 William Sit
axh    2 Antoine Hersen
bmt    2 Barry Trager
bsm    2 Bob McElrath
bxt    2 Baldir Thomas
hoz    2 Humberto Ortiz-Zuazaga
exs    2 Eugene Surowitz
dxh    2 Dan Hatton
mvz    2 Matijs van Zuijlen
rxh    2 Richard Harke
tst    2 Themos Tsikas
axr    1 Anatoly Raportirenko
dpt    1 Dylan Thurston
fxm    1 Francois Maltey
kxo    1 Kostas Oikonomou


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7136: uncommenting --output("") changes behavior}
\begin{verbatim}

bug 7136: uncommenting --output("") changes behavior (greg vanuxem)

Further investigation shows that it is a bug in PARSE-Conditional

This appears to be a problem only when you have a nested one-armed
if-statement (gaby)

)abb package FOO Foo
Foo(R,VCR): Exports == Implementation where
 R : FloatingPointSystem
 VCR : VectorCategory R
 Exports == with
   bar: (Boolean,VCR) -> Integer
   ++ bar(b,v)
   bad: (Boolean,VCR) -> Integer
   ++ bad(b,v)
 Implementation == add
   import OutputPackage
   bar(b,v)==
    if b then
      --output("")
      for i in minIndex v..maxIndex v repeat
        if v.i <= 0 then return -1
    else
      for i in minIndex.v..maxIndex.v repeat
        v.i:=1
    output(v::OutputForm)
    0

   bad(b,v)==
    if b then
      output("")
      for i in minIndex v..maxIndex v repeat
        if v.i <= 0 then return -1
    else
      for i in minIndex.v..maxIndex.v repeat
        v.i:=1
    output(v::OutputForm)
    0

v:=new(5,0)$Vector(SF)
bar(false,v)
   [0.,0.,0.,0.,0.]

   (7)  0
                                                     Type: NonNegativeInteger
v:=new(5,0)$Vector(SF)
bad(false,v)
   [1.,1.,1.,1.,1.]

   (3)  0


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{meh 3: from Bill Page}
\begin{verbatim}

I just wanted to mention something here that I just learned about how
the Axiom interpreter handles option arguments. When discovering how
the 'draw' operations in Axiom processes optional arguments, e.g.

  draw(sin(x), x=1..10, title=="sin function")

I realized the interpreter does something rather clever but probably
quite unexpected. The problem is that (unlike Aldor) SPAD does not
provide built-in support for calling functions with optional
arguments. Instead what it does is collect all the arguments
containing == into a List *and* then it applies the name to the left
of == as a function to the value on the right. So much to my surprize:

(1) -> (x+->x)(sin==x,cos==y)

   (1)  [sin(x),cos(y)]

                                  Type: List Expression Integer

is equivalent to:

(2) -> (x+->x)([sin(x),cos(y)])

   (2)  [sin(x),cos(y)]

                                   Type: List Expression Integer

The list of optional arguments is always passed as the last argument
to the function. This is completely general so one can write for
example:

(3) -> ((x,y)+->[x,y])(sin==x,n,cos==y)

   (3)  [n,[sin(x),cos(y)]]

                                     Type: List Any

What do you think? Do you like that, or is this something that should
be implemented in a deeper way?



\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 316: EGADS Evolutionary Gaussian Automatic Decomposition}
\begin{verbatim}

look at implementing such an algorithm for axiom

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 315: missing input files}
\begin{verbatim}

/research/research/Axiom.NAG/development/int/doc/htex/input

  LAZM3PK.input
  bios.input
  copyright.input
  cover.input
  foreword.input
  intro.input
  redo.input
  sum.input
  tecintro.input
  ug00.input
  ug01.input
  ug02.input
  ug03.input
  ug04.input
  ug05.input
  ug06.input
  ug07.input
  ug08.input
  ug10.input
  ug11.input
  ug12.input
  ug13.input
  ug14.input
  ug15.input
  ug16.input
  ug17.input
  ug18.input
  ug19.input
  ug20.input
  ug21.input

/research/research/Axiom.NAG/development/int/input

  .input.record
  ANNA-ES.input
  CPHelp.input
  HTXAdvPage1.input
  HTXAdvPage2.input
  HTXAdvPage3.input
  HTXAdvPage4.input
  HTXAdvPage5.input
  HTXAdvPage6.input
  HTXAdvTopPage.input
  HTXFormatPage1.input
  HTXFormatPage2.input
  HTXFormatPage3.input
  HTXFormatPage4.input
  HTXFormatPage5.input
  HTXFormatPage6.input
  HTXFormatPage7.input
  HTXFormatPage8.input
  HTXFormatTopPage.input
  HTXIntroPage1.input
  HTXIntroPage2.input
  HTXIntroPage3.input
  HTXIntroTopPage.input
  HTXLinkPage1.input
  HTXLinkPage2.input
  HTXLinkPage3.input
  HTXLinkPage4.input
  HTXLinkPage5.input
  HTXLinkPage6.input
  HTXLinkTopPage.input
  HTXTopPage.input
  HTXTryPage.input
  HTXplay.input
  LAZM3PK.input
  Link.input
  algebra.input
  aspex.input
  basic.input
  bmcat.input
  coverex.input
  exmatrix.input
  expose.input
  gloss.input
  hilbert.input
  hilbert0.input
  hyperdoc.input
  images6a.input
  man0.input
  mapping.input
  matops.input
  nagaux.input
  nagc.input
  nagd.input
  nage.input
  nagf.input
  nagm.input
  nags.input
  nagx.input
  newuser.input
  patch.input
  r2.0_bugs.input
  r2.0a_bugs.input
  r2.1_bugs.input
  r2.1_bugs_big.input
  record.input
  romnum.input
  rootpage.input
  srchkey.input
  topics.input
  type.input
  ug.input
  ug00.input
  ug01.input
  ug02.input
  ug03.input
  ug04.input
  ug05.input
  ug06.input
  ug07.input
  ug08.input
  ug10.input
  ug11.input
  ug12.input
  ug13.input
  ug14.input
  ug15.input
  ug16.input
  ug20.input
  ug21.input
  union.input
  util.input
  xmpexp.input

/research/research/Axiom.NAG/development/int/newpaste/

  ANNA-ES.input
  CPHelp.input
  HTXAdvPage1.input
  HTXAdvPage2.input
  HTXAdvPage3.input
  HTXAdvPage4.input
  HTXAdvPage5.input
  HTXAdvPage6.input
  HTXAdvTopPage.input
  HTXFormatPage1.input
  HTXFormatPage2.input
  HTXFormatPage3.input
  HTXFormatPage4.input
  HTXFormatPage5.input
  HTXFormatPage6.input
  HTXFormatPage7.input
  HTXFormatPage8.input
  HTXFormatTopPage.input
  HTXIntroPage1.input
  HTXIntroPage2.input
  HTXIntroPage3.input
  HTXIntroTopPage.input
  HTXLinkPage1.input
  HTXLinkPage2.input
  HTXLinkPage3.input
  HTXLinkPage4.input
  HTXLinkPage5.input
  HTXLinkPage6.input
  HTXLinkTopPage.input
  HTXTopPage.input
  HTXTryPage.input
  HTXplay.input
  Link.input
  algebra.input
  asug.input
  asug01.input
  asug02.input
  asug03.input
  asug04.input
  asug05.input
  asug06.input
  asug07.input
  asug08.input
  asug0A.input
  asug0B.input
  asug0C.input
  asutil.input
  basic.input
  bmcat.input
  coverex.input
  exmatrix.input
  expose.input
  gloss.input
  hyperdoc.input
  man0.input
  mapping.input
  nagaux.input
  nagc.input
  nagd.input
  nage.input
  nagf.input
  nagm.input
  nags.input
  nagx.input
  newuser.input
  patch.input
  record.input
  redo.input
  rootpage.input
  srchkey.input
  topics.input
  type.input
  ug.input
  ug00.input
  ug01.input
  ug02.input
  ug03.input
  ug04.input
  ug05.input
  ug06.input
  ug07.input
  ug08.input
  ug10.input
  ug11.input
  ug12.input
  ug13.input
  ug14.input
  ug15.input
  ug20.input
  union.input
  util.input
  xmpexp.input

/research/research/Axiom.NAG/development/int/paste/

  ANNA-ES.input
  CPHelp.input
  HTXAdvPage1.input
  HTXAdvPage2.input
  HTXAdvPage3.input
  HTXAdvPage4.input
  HTXAdvPage5.input
  HTXAdvPage6.input
  HTXAdvTopPage.input
  HTXFormatPage1.input
  HTXFormatPage2.input
  HTXFormatPage3.input
  HTXFormatPage4.input
  HTXFormatPage5.input
  HTXFormatPage6.input
  HTXFormatPage7.input
  HTXFormatPage8.input
  HTXFormatTopPage.input
  HTXIntroPage1.input
  HTXIntroPage2.input
  HTXIntroPage3.input
  HTXIntroTopPage.input
  HTXLinkPage1.input
  HTXLinkPage2.input
  HTXLinkPage3.input
  HTXLinkPage4.input
  HTXLinkPage5.input
  HTXLinkPage6.input
  HTXLinkTopPage.input
  HTXTopPage.input
  HTXTryPage.input
  HTXplay.input
  LAZM3PK.input
  Link.input
  algebra.input
  aspex.input
  basic.input
  bmcat.input
  mapping.input
  redo.input
  topics.input
  ug00.input
  ug01.input
  ug02.input
  ug03.input
  ug04.input
  ug05.input
  ug06.input
  ug07.input
  ug08.input
  ug10.input
  ug11.input
  ug12.input
  ug13.input
  ug14.input
  ug15.input
  ug16.input
  ug21.input

/research/research/Axiom.NAG/development/src/algebra_marc

  benchs.input

/research/research/Axiom.NAG/development/src/htex/input.awk

  input.awk
  mktinput.c
  tinput.awk
  tinput.awk.old

/research/research/Axiom.NAG/development/src/input

  as-eg7.input
  hilbert.input
  hilbert0.input
  images6a.input
  matops.input
  romnum.input

/research/research/gold/src/input

  images6a.input.pamphlet

/research/research/integration/src/input

  1.input
  10.input
  100.input
  101.input
  102.input
  103.input
  104.input
  105.input
  106.input
  107.input
  108.input
  109.input
  11.input
  110.input
  111.input
  112.input
  113.input
  114.input
  115.input
  116.input
  117.input
  118.input
  119.input
  12.input
  120.input
  121.input
  122.input
  123.input
  124.input
  125.input
  126.input
  127.input
  128.input
  129.input
  13.input
  130.input
  131.input
  132.input
  133.input
  134.input
  135.input
  136.input
  137.input
  138.input
  139.input
  14.input
  140.input
  141.input
  142.input
  143.input
  144.input
  145.input
  146.input
  147.input
  148.input
  149.input
  15.input
  150.input
  151.input
  152.input
  153.input
  154.input
  155.input
  156.input
  157.input
  158.input
  159.input
  16.input
  160.input
  161.input
  162.input
  163.input
  164.input
  165.input
  166.input
  167.input
  168.input
  169.input
  17.input
  170.input
  171.input
  172.input
  173.input
  174.input
  175.input
  176.input
  177.input
  178.input
  179.input
  18.input
  180.input
  181.input
  182.input
  183.input
  184.input
  185.input
  186.input
  187.input
  188.input
  189.input
  19.input
  190.input
  191.input
  192.input
  193.input
  194.input
  195.input
  196.input
  197.input
  198.input
  199.input
  2.input
  20.input
  200.input
  201.input
  202.input
  203.input
  204.input
  205.input
  206.input
  207.input
  208.input
  209.input
  21.input
  210.input
  211.input
  212.input
  213.input
  214.input
  215.input
  216.input
  217.input
  218.input
  219.input
  22.input
  220.input
  221.input
  222.input
  223.input
  224.input
  225.input
  226.input
  227.input
  228.input
  229.input
  23.input
  230.input
  231.input
  232.input
  24.input
  25.input
  26.input
  27.input
  28.input
  29.input
  3.input
  30.input
  31.input
  32.input
  33.input
  34.input
  35.input
  36.input
  37.input
  38.input
  39.input
  4.input
  40.input
  41.input
  42.input
  43.input
  44.input
  45.input
  46.input
  47.input
  48.input
  49.input
  5.input
  50.input
  51.input
  52.input
  53.input
  54.input
  55.input
  56.input
  57.input
  58.input
  59.input
  6.input
  60.input
  61.input
  62.input
  63.input
  64.input
  65.input
  66.input
  67.input
  68.input
  69.input
  7.input
  70.input
  71.input
  72.input
  73.input
  74.input
  75.input
  76.input
  77.input
  78.input
  79.input
  8.input
  80.input
  81.input
  82.input
  83.input
  84.input
  85.input
  86.input
  87.input
  88.input
  89.input
  9.input
  90.input
  91.input
  92.input
  93.input
  94.input
  95.input
  96.input
  97.input
  98.input
  99.input
  Xinf.input
  Xinfinite.input
  demo.input
  f.input
  foo.input
  foo1.input
  redo.input

/research/research/integration/src/provisos/foo.input

/research/research/journal/bailey/cl-f2cl-1.0+cvs.2002.11.11/packages/minpack/lmdif-input.dat

/research/newdatabase/src/input

  images6a.input.pamphlet

/research/newdatabase

  intparfrac.input.pamphlet
  improper.input.pamphlet
  typeconv.input.pamphlet
  doit.input

/research/axiom/src/input

  xpr.input.pamphlet
  images6a.input.pamphlet

/research/may07/wh-sandbox/src/input

  images6a.input.pamphlet

/research/pending

  improper.input.pamphlet
  intparfrac.input.pamphlet
  ioutput.input.pamphlet
  typeconv.input.pamphlet
  doit.input
  bonda.input
  bug361.input
  expint.input
  r.input

/research/pending/ODE/input

  f.input
  keep/f.input
  keep/kamke10.input
  keep/kamke2a.input
  keep/kamke2.input
  keep/kamke3.input
  keep/kamke4.input
  keep/kamke5.input
  keep/kamke6.input
  keep/kamke7.input
  keep/kamke8.input
  keep/kamke9.input
  keep/k.input
  keep/kamke3a.input
  k.input
  ODES.input
  ODESzero.input
  #ODES.input#
  krantz.input
  decomp.input
  bronson.input

/research/pending/p.input

  hyper/input.pamphlet
  hyper/parse_input.pamphlet
  storevar.input.txt
  storevar1.input.txt
  des.input
  debug.input
  strang.input
  magma/magmafirst.input
  guessrec.input
  redblack.input
  vb/vb1-20.input
  vb/vb1001-1020.input
  vb/vb101-120.input
  vb/vb1021-1040.input
  vb/vb1041-1060.input
  vb/vb1061-1080.input
  vb/vb1081-1100.input
  vb/vb1101-1120.input
  vb/vb1121-1140.input
  vb/vb1141-1160.input
  vb/vb1161-1180.input
  vb/vb1181-1200.input
  vb/vb1201-1220.input
  vb/vb121-140.input
  vb/vb1221-1240.input
  vb/vb1241-1260.input
  vb/vb1261-1280.input
  vb/vb1281-1300.input
  vb/vb1301-1320.input
  vb/vb1321-1340.input
  vb/vb1341-1360.input
  vb/vb1361-1380.input
  vb/vb1381-1400.input
  vb/vb1401-1420.input
  vb/vb141-160.input
  vb/vb1421-1440.input
  vb/vb1441-1460.input
  vb/vb1461-1480.input
  vb/vb1481-1500.input
  vb/vb1501-1520.input
  vb/vb1521-1540.input
  vb/vb1541-1560.input
  vb/vb1561-1580.input
  vb/vb1581-1600.input
  vb/vb1601-1620.input
  vb/vb161-180.input
  vb/vb1621-1640.input
  vb/vb1641-1660.input
  vb/vb1661-1680.input
  vb/vb1681-1700.input
  vb/vb1701-1720.input
  vb/vb1721-1740.input
  vb/vb1741-1760.input
  vb/vb1761-1780.input
  vb/vb1781-1800.input
  vb/vb1801-1820.input
  vb/vb181-200.input
  vb/vb1821-1840.input
  vb/vb1841-1860.input
  vb/vb1861-1880.input
  vb/vb1881-1900.input
  vb/vb1901-1920.input
  vb/vb1921-1940.input
  vb/vb1941-1960.input
  vb/vb1961-1980.input
  vb/vb1981-2000.input
  vb/vb2001-2020.input
  vb/vb201-220.input
  vb/vb2021-2040.input
  vb/vb2041-2060.input
  vb/vb2061-2080.input
  vb/vb2081-2100.input
  vb/vb21-40.input
  vb/vb2101-2120.input
  vb/vb2121-2140.input
  vb/vb2141-2160.input
  vb/vb2161-2180.input
  vb/vb2181-2200.input
  vb/vb2201-2220.input
  vb/vb221-240.input
  vb/vb2221-2240.input
  vb/vb2241-2260.input
  vb/vb2261-2280.input
  vb/vb2281-2300.input
  vb/vb2301-2320.input
  vb/vb2321-2340.input
  vb/vb2341-2360.input
  vb/vb2361-2380.input
  vb/vb2381-2400.input
  vb/vb2401-2420.input
  vb/vb241-260.input
  vb/vb2421-2440.input
  vb/vb2441-2460.input
  vb/vb2461-2480.input
  vb/vb2481-2500.input
  vb/vb2501-2520.input
  vb/vb2521-2540.input
  vb/vb2541-2560.input
  vb/vb2561-2580.input
  vb/vb2581-2600.input
  vb/vb2601-2620.input
  vb/vb261-280.input
  vb/vb2621-2640.input
  vb/vb2641-2660.input
  vb/vb2641-2760.input
  vb/vb2661-vb2680.input
  vb/vb2661a-2680a.input
  vb/vb2681-2700.input
  vb/vb2701-2720.input
  vb/vb2721-2740.input
  vb/vb2761-2780.input
  vb/vb2781-2800.input
  vb/vb2801-2820.input
  vb/vb281-300.input
  vb/vb2821-2840.input
  vb/vb2841-2860.input
  vb/vb2861-2880.input
  vb/vb2881-2900.input
  vb/vb2901-2920.input
  vb/vb2921-2940.input
  vb/vb2941-2960.input
  vb/vb2961-2980.input
  vb/vb2981-3000.input
  vb/vb3001-3020.input
  vb/vb301-320.input
  vb/vb3021-3040.input
  vb/vb3041-3060.input
  vb/vb3061-3080.input
  vb/vb3081-3100.input
  vb/vb3101-3120.input
  vb/vb3121-3140.input
  vb/vb3141-3160.input
  vb/vb3161-3180.input
  vb/vb3181-3200.input
  vb/vb3201-3220.input
  vb/vb321-340.input
  vb/vb3221-3240.input
  vb/vb3241-3260.input
  vb/vb3261-3280.input
  vb/vb3281-3300.input
  vb/vb3301-3320.input
  vb/vb3321-3340.input
  vb/vb3341-3360.input
  vb/vb3361-3380.input
  vb/vb3381-3400.input
  vb/vb3401-3420.input
  vb/vb341-360.input
  vb/vb3421-3440.input
  vb/vb3441-3460.input
  vb/vb3461-3480.input
  vb/vb3481-3500.input
  vb/vb3501-3520.input
  vb/vb3521-3540.input
  vb/vb3541-3560.input
  vb/vb3561-3580.input
  vb/vb3581-3600.input
  vb/vb3601-3620.input
  vb/vb361-380.input
  vb/vb3621-3640.input
  vb/vb3641-3660.input
  vb/vb3661-3680.input
  vb/vb3681-3700.input
  vb/vb3701-3720.input
  vb/vb3721-3740.input
  vb/vb3741-3760.input
  vb/vb3761-3780.input
  vb/vb3781-3800.input
  vb/vb3801-3820.input
  vb/vb381-400.input
  vb/vb3821-3840.input
  vb/vb3841-3860.input
  vb/vb3861-3880.input
  vb/vb3881-3900.input
  vb/vb3901-3920.input
  vb/vb3921-3940.input
  vb/vb3941-3960.input
  vb/vb3961-3980.input
  vb/vb3981-4000.input
  vb/vb4001-4020.input
  vb/vb401-420.input
  vb/vb4021-4040.input
  vb/vb4041-4060.input
  vb/vb4061-4080.input
  vb/vb4081-4100.input
  vb/vb41-60.input
  vb/vb4101-4120.input
  vb/vb4121-4140.input
  vb/vb4141-4160.input
  vb/vb4161-4180.input
  vb/vb4181-4200.input
  vb/vb4201-4220.input
  vb/vb421-440.input
  vb/vb4221-4440.input
  vb/vb4241-4260.input
  vb/vb4261-4280.input
  vb/vb4281-4300.input
  vb/vb4301-4320.input
  vb/vb4321-4340.input
  vb/vb4341-4360.input
  vb/vb4361-4380.input
  vb/vb4381-4400.input
  vb/vb4401-4420.input
  vb/vb441-460.input
  vb/vb4422-4440.input
  vb/vb4441-4460.input
  vb/vb4461-4480.input
  vb/vb4481-4500.input
  vb/vb4501-4520.input
  vb/vb4521-4540.input
  vb/vb4541-4560.input
  vb/vb4561-4580.input
  vb/vb4581-4600.input
  vb/vb4601-4620.input
  vb/vb461-480.input
  vb/vb4621-4640.input
  vb/vb4641-4660.input
  vb/vb4661-4680.input
  vb/vb4681-4700.input
  vb/vb4701-4720.input
  vb/vb4721-4740.input
  vb/vb4741-4760.input
  vb/vb4761-4772.input
  vb/vb481-500.input
  vb/vb501-520.input
  vb/vb521-540.input
  vb/vb541-560.input
  vb/vb561-580.input
  vb/vb581-600.input
  vb/vb601-620.input
  vb/vb61-80.input
  vb/vb621-640.input
  vb/vb641-660.input
  vb/vb661-680.input
  vb/vb681-700.input
  vb/vb701-720.input
  vb/vb721-740.input
  vb/vb741-760.input
  vb/vb761-780.input
  vb/vb781-800.input
  vb/vb801-820.input
  vb/vb81-100.input
  vb/vb821-840.input
  vb/vb841-860.input
  vb/vb861-880.input
  vb/vb881-900.input
  vb/vb901-920.input
  vb/vb921-940.input
  vb/vb941-960.input
  vb/vb961-980.input
  vb/vb980-1000.input
  factor/twister.input
  groebner.input
  testgrob.input
  factor.input
  gcd.input
  twister.input
  outofmemory.input
  redo.input
  kkttest.input
  cannotsolve.input
  normalizeBug.input
  sinaxminusaxBUG.input
  cannotsolve.input~
  integrationBUG.input
  integrateBUG.input
  mail.input
  mail.input~
  mathmlbug.input.pamphlet

/research/int/input

  ACPLOT.input
  REALSOLV.input
  TESTFR.input
  VIEW2D.input
  images6a.input


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 314: Tiny programs for computing constants}
\begin{verbatim}

http://numbers.computation.free.fr/Constants/TinyPrograms/tinycodes.html

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7135: hyperdoc bug}
\begin{verbatim}

topics -> calculus -> integrate -> first integral
(close the integration popup window kills axiom) with:
(1) -> (HyperDoc) Unknown command from SessionServer -1

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{meh 2: Fonts available at www.dafont.com}
\begin{verbatim}

meh 2: Fonts available at www.dafont.com

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7134: lodo.spad LinearOrdinaryDifferentialOperator1}
\begin{verbatim}

% NOTE: the book has a different answer
  f := rightLcm(a,b)

% NOTE: the book has a different answer
  rightRemainder(f, b)

% NOTE: the book has a different answer
  leftRemainder(f, b)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7133: files.spad Library}
\begin{verbatim}

)spool Library.output
 
Starts dribbling to Library.output (2007/8/31, 12:8:10).
)set message test on
 
)set message auto off
 
)clear all
 
   All user variables and function definitions have been cleared.
stuff := library "Neat.stuff"
 
 
Daly Bug
   >> Error detected within library code:
   File is not readable
   "Neat.stuff"

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7132: numtheor.spad IntegerNumberTheoryFunctions}
\begin{verbatim}

check the text against the book


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7131: -- files.spad.pamphlet KeyedAccessFile}
\begin{verbatim}

ey: KeyedAccessFile(Integer) := open("editor.year", "output")
 

   (1)  "editor.year"
                                                Type: KeyedAccessFile Integer
ey."Char":= 1986
 

   (2)  1986
                                                        Type: PositiveInteger
ey."Caviness" := 1985
 

   (3)  1985
                                                        Type: PositiveInteger
ey."Fitch"    := 1984
 

   (4)  1984
                                                        Type: PositiveInteger
ey."Char"
 
 
Daly Bug
   >> Error detected within library code:
   File is not readable
   "editor.year"



\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7130: -- table.spad.pamphlet GeneralSparseTable.input}
\begin{verbatim}

)spool GeneralSparseTable.output
)set message test on
)set message auto off
)clear all
patrons: GeneralSparseTable(String, Integer, KeyedAccessFile(Integer), 0) := table() ; 
patrons: GeneralSparseTable(String, Integer, KeyedAccessFile(Integer), 0) := table() ; 
 
 
Daly Bug
   >> Error detected within library code:
   File is not readable
   "kaf1405.sdata"

(1) -> 
patrons."Smith" := 10500 
patrons."Jones" := 22000
patrons."Jones" 
patrons."Stingy"
reduce(+, entries patrons) 
)system rm -r kaf*.sdata
)spool
)lisp (bye)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7129: these take a long time}
\begin{verbatim}

ode97 := x*D(y(x),x) + a*y(x)**2 - y(x) + b*x**2
ode104 := x*D(y(x),x) + a*x*y(x)**2 + 2*y(x) + b*x
ode105 := x*D(y(x),x) + a*x*y(x)**2 + b*y(x) + c*x + d

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 313: put PolynomialCategory, etc into front matter diagram}
\begin{verbatim}

todo 313: put PolynomialCategory, etc into front matter diagram

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 312: maple routines}
\begin{verbatim}

sharelib.zip
maplenuts.zip

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7128: This kills Axiom}
\begin{verbatim}

draw(1/a*log(a*x+b),x=-1..1)

; (DEFUN %A ...) is being compiled.
;; The variable |a| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |b| is undefined.
;; The compiler will assume this variable is a global.
   Compiling function %B with type DoubleFloat -> DoubleFloat 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{meh 1: script for exploring domain relationships}
\begin{verbatim}

getDomains(cat: Symbol): Set Symbol ==
  set map(d +-> symbol first destruct first destruct d,
                destruct domainsOf(cat, nil)$Lisp)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7127: Schaums 14:472 fails to integrate properly}
\begin{verbatim}

(1) -> t1:=x*asin(x/a)

               x
   (1)  x asin(-)
               a
                                                     Type: Expression Integer
(2) -> t2:=integrate(t1,x)

                            +---------+
                            |   2    2        +---------+
             2    2      2x\|- x  + a         |   2    2
        (- 2x  + a )atan(--------------) + 2x\|- x  + a
                              2    2
                            2x  - a
   (2)  -------------------------------------------------
                                8
                                          Type: Union(Expression Integer,...)
(3) -> t3:=D(t2,x)

                    +---------+
                    |   2    2
                 2x\|- x  + a
          x atan(--------------)
                      2    2
                    2x  - a
   (3)  - ----------------------
                     2
                                                     Type: Expression Integer
(4) -> t4:=(x^2/2-a^2/4)*asin(x/a)+(x*sqrt(a^2-x^2))/4

          +---------+
          |   2    2       2    2      x
        x\|- x  + a   + (2x  - a )asin(-)
                                       a
   (4)  ---------------------------------
                        4
                                                     Type: Expression Integer
(5) -> t5:=D(t4,x)

   (5)
                                           +---------+
                 +---------+               |   2    2               +---------+
              x  |   2    2        2    3  |- x  + a        2    2  |   2    2
   (4a x asin(-)\|- x  + a   - 2a x  + a ) |---------  + (2x  - a )\|- x  + a
              a                            |     2
                                          \|    a
   ----------------------------------------------------------------------------
                                           +---------+
                               +---------+ |   2    2
                               |   2    2  |- x  + a
                            4a\|- x  + a   |---------
                                           |     2
                                          \|    a
                                                     Type: Expression Integer
(6) -> f:=makeFloatFunction(t1,x,a)
   Compiling function %BF with type (DoubleFloat,DoubleFloat) -> 
      DoubleFloat 

   (6)  theMap(MKBCFUNC;binaryFunction;SM;2!0,120)
                             Type: ((DoubleFloat,DoubleFloat) -> DoubleFloat)

(7) -> axiom:=makeFloatFunction(t3,x,a)
   Compiling function %BJ with type (DoubleFloat,DoubleFloat) -> 
      DoubleFloat 

   (7)  theMap(MKBCFUNC;binaryFunction;SM;2!0,996)
                             Type: ((DoubleFloat,DoubleFloat) -> DoubleFloat)
(8) -> schaums:=makeFloatFunction(t5,x,a)
   Compiling function %BK with type (DoubleFloat,DoubleFloat) -> 
      DoubleFloat 

   (8)  theMap(MKBCFUNC;binaryFunction;SM;2!0,62)
                             Type: ((DoubleFloat,DoubleFloat) -> DoubleFloat)
(9) -> [ [f(i::Float,i::Float+1.0::Float)::Float,axiom(i::Float,i::Float+1.0::Float)::Float,schaums(i::Float,i::Float+1.0::Float)::Float] for i in 1..4]

   (9)
   [[0.5235987755 9829892668,0.5235987755 9829892668,0.5235987755 9829881566],
    [1.4594553124 539326738,1.4594553124 539326738,1.4594553124 539324518],
    [2.5441862369 444430136,- 2.1682027434 402466604,2.5441862369 444430136],
    [3.7091808720 064496363,- 2.5740044351 731374839,3.7091808720 064500804]]
                                                        Type: List List Float
(10) -> 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7126: sinaxminusaxBUG.input shows a bug}
\begin{verbatim}

why does sin(a x-ax) not become sin(0) then 0?

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7125: normalizeBug.input shows a bug}
\begin{verbatim}

bug 7125: normalizeBug.input shows a bug

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7124: why is the superscript not in smallest terms?}
\begin{verbatim}

--S 100
aa:=integrate(1/(x^2*(x^2-a^2)^(3/2)),x)
--R 
--R
--R                           1
--R   (1)  - -----------------------------------
--R                      +-------+
--R             3    2   | 2    2      4     2 2
--R          (2x  - a x)\|x  - a   - 2x  + 2a x
--R                                          Type: Union(Expression Integer,...)
--E 

--S 101
bb:=-sqrt(x^2-a^2)/(a^4*x)-x/(a^4*sqrt(x^2-a^2))
--R
--R              2    2
--R          - 2x  + a
--R   (2)  -------------
--R            +-------+
--R         4  | 2    2
--R        a x\|x  - a
--R                                                     Type: Expression Integer
--E

--S 102    14:228 Schaums and Axiom differ by a constant
cc:=aa-bb
--R
--R           2
--R   (3)  - --
--R           4
--R          a
--R                                                     Type: Expression Integer
--E

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 311: integerMathLibrary FFLAS\_technical\_report.ps.gz}
\begin{verbatim}

todo 311: integerMathLibrary FFLAS_technical_report.ps.gz

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 310: /research/femlisp (finite element meshes)}
\begin{verbatim}

todo 310: /research/femlisp (finite element meshes)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7123: cannot simplify forms (ax+b)(ax+b)\texttt{\^}n into (ax+b)\texttt{\^}(n+1)}
\begin{verbatim}

bug 7123: cannot simplify forms like (ax+b)(ax+b)^n into (ax+b)^(n+1)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{wish 1010: look at ocalc.tex for big-O notation by Knuth}
\begin{verbatim}

wish 1010: look at ocalc.tex for big-O notation by Knuth

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 309: huh?}
\begin{verbatim}

in2360a:=integrate(1/(1-%i*z^2)^(1/2)-csch(z-1), z= -1..1,"noPole")
 

   (175)  [ + infinity, + infinity]
       Type: Union(f2: List OrderedCompletion Expression Complex Integer,...)

Note: verified against NAG

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 309: these won't integrate}
\begin{verbatim}

in13:=integrate(cos(z)^2*sin(z)^n, z)
in160:=integrate((-z^2-z)^sin(z), z)
in163:=integrate(log(z)*abs(exp(z)/z), z)
in166:=integrate((1+z)^z, z)


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7122: "failed"}
\begin{verbatim}

in106a:=integrate(((%i+z)^%i)^%i, z= 0..1,"noPole")
in1029a:=integrate((%i*z/(%i*z+1))^(1/2), z= 0..%plusInfinity,"noPole")
in1107a:=integrate(-log(z)/(-1+z^(1/2))^3, z= 0..1/2*%i,"noPole")
in1108a:=integrate(log(z)/(-1+z^(1/2))^3, z= 0..1/2*%i,"noPole")
in159a:=integrate(log(z)/z^2, z= -%i..-1,"noPole")
in1859a:=integrate(1/(z^2-1)*(1+1/z^3)^(1/2), z= 0..1,"noPole")
in1867a:=integrate(1/(z^2-1)*(1-(%i*z)^(1/2))^(1/2), z= 0..1,"noPole")
in1869a:=integrate(1/(z^2-1)*(1-1/(%i*z)^(1/2))^(1/2), z= 0..1,"noPole")
in2109a:=integrate((1+%i*z)^(1/2)+cot(z-1), z= 0..1,"noPole")
in2179a:=integrate((z^3-%i*(1-z^4)^(1/2))^4, z= -1..1,"noPole")
in2247a:=integrate(1/(z^2-%i*z+2)^(1/2)+csc(z), z= 0..1,"noPole")
in2340a:=integrate(exp(%i*(%i*z)^(1/2))+cot(z-1), z= -1..1,"noPole")
in2527a:=integrate(1/(1+%i*z^(1/3))+cosh(z), z= %minusInfinity..0,"noPole")
in2567a:=integrate(1/(%i*z)^(1/3)*log(abs(z-1)), z= 0..1/2*%pi,"noPole")
in2597a:=integrate((1+%i/z)^(1/2)-log(1-1/z^2), z= 0..%plusInfinity,"noPole")
in2963a:=integrate(cosh(-1+(1-z)^(1/2))+(z^2+%i*z-3)^(1/2), z= -1..1,"noPole")

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7121: Imaginary part is nonzero. Cannot retract.}
\begin{verbatim}

in2691a:=integrate(1/(z^2+%i*z-1)^(1/2)+(1-%i*z)^(1/2), z= -1..1,"noPole")

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7120: Zero divisor}
\begin{verbatim}

in2307a:=integrate(tan(z)-1/(z^2+%i*z-3)^(1/2), z= -1..1,"noPole")

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7119: Cannot take first of an empty list}
\begin{verbatim}

in1278a:=integrate((1+1/(%i*z)^(1/2))^(1/2), z= 0..%plusInfinity,"noPole")
in1433a:=integrate(-1/((%i*z)^(1/2)-1)*(-2+(%i*z)^(1/2)), z= 0..%plusInfinity,"noPole")
in1435a:=integrate(-1/(1+(%i*z)^(1/2))*(%i*z)^(1/2), z= 0..%plusInfinity,"noPole")
in1436a:=integrate(-((%i*z)^(1/2)-1)/(-2+(%i*z)^(1/2)), z= 0..%plusInfinity,"noPole")
in1463a:=integrate(1-(%i*z)^(1/2)/(1-%i*z), z= 0..%plusInfinity,"noPole")
in1563a:=integrate(log(1-z^3)*(%i*z)^(1/2), z= 0..1,"noPole")
in1638a:=integrate(-z/(z-1)/(1-%i*z)^(1/2), z= 0..1,"noPole")
in1724a:=integrate(-z^2/(z^2-1)*(1-(%i*z)^(1/2))^(1/2), z= 0..1,"noPole")
in183:=integrate(1/z, z= %i..2*%i)
in2108a:=integrate((1-%i/(1+%i/z)^2)^(1/2), z= -1..1,"noPole")
in2124a:=integrate(-1/z-1/(%i/(z+%i))^(1/2), z= -1..0,"noPole")
in2815a:=integrate((%i*z)^(1/2)-(1+1/(%i*z)^(1/2))^(1/2), z= -1..1,"noPole")
in2924a:=integrate(1/(%i*z)^(1/2)+(1+1/(%i*z)^(1/2))^(1/2), z= -1..1,"noPole")
in3001a:=integrate(((%i*z)^(1/2)-1)/(-2+(%i*z)^(1/2)), z= 0..%plusInfinity,"noPole")


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{wish 1009: integrate computational geometry algorithms (CGAL)}
\begin{verbatim}

bounding volumes
polyhedral surfaces
boolean operators
triangulations
voronoi diagrams
mesh generation
subdivision
simplification
parametrization
streamlines
ridge detection
neighbor search
kinetic data structures
lower envelope
arrangement
intersection detection
minkowski sum
PCA
polytope distance
QP solver

geometric objects in 2d, 3d, nd: point, segment, ray, line, circle,
sphere, iso-rectangle, predicates (orientation, in_circle),
constructions (intersection, circumcenter)

delaunay triangles and regular, fully dynamic, 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 308: combinat}
\begin{verbatim}

todo 308: combinat

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 307: elliptic}
\begin{verbatim}

todo 307: elliptic

figure this stuff out

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 306: fastmatrix.spad}
\begin{verbatim}

todo 306: fastmatrix.spad

follow Waldek's lead on this

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7118: Factored AlgebraicNumber}
\begin{verbatim}

 sqrt(2^32)

   (1)  65536
                                                        Type: AlgebraicNumber
(2) -> %^2

   (2)  4294967296
                                                        Type: AlgebraicNumber
(3) -> factor %

   (3)  4294967296
                                               Type: Factored AlgebraicNumber
(4) -> factor 4294967296

         32
   (4)  2
                                                       Type: Factored Integer
(5) ->

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 305: in bookvol11, in graphviewport.xhtml}
\begin{verbatim}

make graphics automatically pop up when the image is clicked

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 304: make graphics be saved as .bmp during build}
\begin{verbatim}

todo 304: make graphics be saved as .bmp during build

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 303: remove .Z format }
\begin{verbatim}

todo 303: remove .Z format 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7116: hyperdoc title does not show}
\begin{verbatim}

bug 7116: topics -> graphics -> 3D graphics -> building object -> cube

makeViewport3D(spaceC,title=="Cube") never appears

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{wish 1008: ArbitraryConstant domain}
\begin{verbatim}

  C+3 => C

or potentially

 C+3+5 => C[3+5]

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7114: "possible missing then" bug}
\begin{verbatim}

insert(h:NODE,key:KEY,value:VALUE):NODE
  if h = null then return node(key,value,red)
  if isRed(h.left) and isRed(h.left.left) then h:=splitFourNode(h)
  if h.key = key 
   then h.value:=value
   else if h.key < key then h.left := insert(h.left,key,value)
    else h.right:= insert(h.right,key,value)
  if isRed(h.right) then h:=leanLeft(h)
  h

insert(h:NODE,key:KEY,value:VALUE):NODE
  if h = null then return node(key,value,red)
  if isRed(h.left) and isRed(h.left.left) then h:=splitFourNode(h)
  if h.key = key then h.value:=value
   else if h.key < key then h.left := insert(h.left,key,value)
    else h.right:= insert(h.right,key,value)
  if isRed(h.right) then h:=leanLeft(h)
  h

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{wish 1007: probe-file vs truename}
\begin{verbatim}

maybe use (defun my-probe-file (path) (ignore-errors (truename path)))

camm writes, the way to test if a directory exists without error...

(defun pathname-pop-slash (pn)
 (let ((pn (pathname pn)))
  (if (or (pathname-name pn) (pathname-type pn)) pn
   (merge-pathnames
    (make-pathname :directory (butlast (pathname-directory pn)))
    (merge-pathnames (pathname (car (last (pathname-directory pn)))) pn)))))

(defun directory-exists-p (pm)
 (let ((pn (pathname-pop-slash pn)))
  (and (not (probe-file pn)) (member pn (directory pn) :test 'equal) t)))

or, in GCL

(defun directory-exists-p (pn)
 (unless (fboundp 'si::stat) (error "no stat"))
 (eq :directory (car (si::stat (namestring pn)))))
  

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7112: t3:=coerce([i for i in 1..10])\$Tuple(Integer)}
\begin{verbatim}

t3:=coerce([i for i in 1..10])$Tuple(Integer)

   (1)  (1,2,3,4,5,6,7,8,9,10)
                                  Type: OutputForm

should be Type: Tuple(Integer)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7111: NIL is not of type CONS.}
\begin{verbatim}

fun:=(a:IntegralDomain):IntegralDomain +-> a**2
 
   >> System error:
   NIL is not of type CONS.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 302: getdatabase information unit tests}
\begin{verbatim}

todo 302: getdatabase information unit tests

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7110: ramifiedAtInfinity? not implemented}
\begin{verbatim}

bug 7110: RadicalFunctionField(Integer) ramifiedAtInfinity? not implemented

ramifiedAtInfinity()$R
   The function ramifiedAtInfinity is not implemented in 
      RadicalFunctionField(Integer,UnivariatePolynomial(x,Integer),
      UnivariatePolynomial(y,Fraction UnivariatePolynomial(x,Integer)),
      x*x,1) .

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7109: singularAtInfinity? not implemented}
\begin{verbatim}

bug 7109: RadicalFunctionField(Integer) singularAtInfinity? not implemented

singularAtInfinity?()$R
   Internal Error
   The function singularAtInfinity? with signature hashcode is missing 
      from domain RadicalFunctionField(Integer)
      (UnivariatePolynomial x (Integer))
      (UnivariatePolynomial y (Fraction (UnivariatePolynomial x (Integer))))
      (((2 . 1)) (0 . 1))1 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7108: axiom crashes if draw does not include all variables}
\begin{verbatim}

(1) -> draw(5*y^2+(-4*x+4)*y+8*x^2+2*x-1,x=-5..5)
; (DEFUN %A ...) is being compiled.
;; The variable |y| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7107: function xRange with hashcode is missing from ACPLOT}
\begin{verbatim}

m:=makeSketch(x+y,x,y,-1/2..1/2,-1/2..1/2)$ACPLOT
xRange m
   Internal Error
   The function xRange with signature hashcode is missing from domain 
      PlaneAlgebraicCurvePlot 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{wish 1006: API domain for lisp functions}
\begin{verbatim}

wish 1006: API domain for lisp functions

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{wish 1005: algebra graph}
\begin{verbatim}

wish 1005: algebra graph

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{wish 1004: create )example for all functions in all domains}
\begin{verbatim}

wish 1004: create )example for all functions in all domains

construct set of all domains

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7105: [print [i,i*exp(-i)*Ei(i/10.0)] for i in 20..70]}
\begin{verbatim}

bug 7105: [print [i,i*exp(-i)*Ei(i/10.0)] for i in 20..70]
   Internal Error
   The function coerce with signature hashcode is missing from domain 
      Expression(OnePointCompletion (DoubleFloat)) 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7104: integrate(\%e\texttt{\^}(a*x)/x\texttt{\^}2,x)}
\begin{verbatim}

bug 7104: integrate(%e^(a*x)/x^2,x)


           x   %I a
         ++  %e
   (5)   |   ------ d%I
        ++       2
               %I
                                          Type: Union(Expression Integer,...)
 
should be
     ax
    e
  - --- + aEi(ax)
     x

but integrate(%e^(a*x)/x,x)

   (4)  Ei(a x)


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{wish 1003: )help limit, integrate, etc}
\begin{verbatim}

wish 1003: )help limit, integrate, etc

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7103/47: complexForm(log(-\%i))}
\begin{verbatim}

bug 7103/47: complexForm(log(-%i))

        %pi
   (4)  --- %i
         2
                                             Type: Complex Expression Integer

should be 

         %pi
   (4) - --- %i
          2


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 301: etags}
\begin{verbatim}

etags `find . -name "*.pamphlet"`

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7098: numeric(Si(0.01))}
\begin{verbatim}

   >> Error detected within library code:
   Can only compute the numerical value of a constant, real-valued Expression

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7097: numeric(Ci(0.01))}
\begin{verbatim}

   >> Error detected within library code:
   Can only compute the numerical value of a constant, real-valued Expression

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{wish 1000: WHERE form}
\begin{verbatim}

a:= b+c
  where
    b = 3x
    c = 4y


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7095: occasional failure of is.input}
\begin{verbatim}

)clear all
 
--S 1 of 4
 f n ==
   not empty?(u := Is(n, 2*m%)) => integer eval(m%, u)
   3 * n + 1
 
                                                                   Type: Void
--R 
--R                                                                   Type: Void
--E 1

)set stream showall on
 
 
--S 2 of 4
g(n:INT):STREAM(INT) == generate(f, n)
 
   Function declaration g : Integer -> Stream Integer has been added to
      workspace.
                                                                   Type: Void
--R 
--R   Function declaration g : Integer -> Stream Integer has been added to
--R      workspace.
--R                                                                   Type: Void
--E 2

--S 3 of 4
s := g 27
 
   There are 3 exposed and 0 unexposed library operations named 
      generate having 2 argument(s) but none was determined to be 
      applicable. Use HyperDoc Browse, or issue
                            )display op generate
      to learn more about the available operations. Perhaps 
      package-calling the operation or using coercions on the arguments
      will allow you to apply the operation.
   Cannot find a definition or applicable library operation named 
      generate with argument type(s) 
                                 Variable f
                                   Integer
      
      Perhaps you should use "@" to indicate the required return type, 
      or "$" to specify which version of the function you need.
   AXIOM will attempt to step through and interpret the code.
   Compiling function g with type Integer -> Stream Integer 
   There are 3 exposed and 0 unexposed library operations named 
      generate having 2 argument(s) but none was determined to be 
      applicable. Use HyperDoc Browse, or issue
                            )display op generate
      to learn more about the available operations. Perhaps 
      package-calling the operation or using coercions on the arguments
      will allow you to apply the operation.
 
Daly Bug
   Cannot find a definition or applicable library operation named 
      generate with argument type(s) 
                                 Variable f
                                   Integer
      
      Perhaps you should use "@" to indicate the required return type, 
      or "$" to specify which version of the function you need.
--R 
--R   Compiling function f with type Integer -> Integer 
--R   Compiling function g with type Integer -> Stream Integer 
--R
--R   (3)  [27,82,41,124,62,31,94,47,142,71,...]
--R                                                         Type: Stream Integer
--E 3

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{todo 300: pending/besselk.input.pamphlet}
\begin{verbatim}

todo 300: pending/besselk.input.pamphlet

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7092: .axiom.input screws up builds}
\begin{verbatim}

bug 7092: .axiom.input screws up builds

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7091: bootstrap bugs}
\begin{verbatim}

Only in .: boo1.input
Only in .: boo2.input
Only in .: boo3.input
Only in .: boo4.input
Only in .: boo5.input
Only in .: boo6.input
Only in .: boo-cat.input
Only in .: boo-dom1.input
Only in .: boo-dom2.input
Only in .: boo-nilcat.spad
Only in .: boo-nildom.spad
Only in .: boo-pack1.input
Only in .: boo-pack2.input
Only in .: bootstrap.spad
Only in .: boot-sum.in

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7088/347: bug in map\$Set}
\begin{verbatim}

-- bug in map$Set (issue 347)
A:Set Integer:=set [-2,-1,0]
B:Set Integer:=set [0,1,4]
C:=map(x +-> x^2,A)
test(C=B)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7087/312: Bug in sqrt() for UnivariateTaylorSeries (issue 312)}
\begin{verbatim}

-- Bug in sqrt() for UnivariateTaylorSeries (issue 312)
UTSx := UTS(FRAC INT,x,0)
monx2 := monomial(1,2)$UTSx
sqrt(monx2)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7086/340:'divisors\$IntegerNumberTheoryFunctions' incorrect }
\begin{verbatim}

-- issue 340 'divisors$IntegerNumberTheoryFunctions' incorrect for units,
-- i.e., 1, -1
divisors 1
divisors (-1)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7085/15: integration}
\begin{verbatim}

integrate(1/(1+z^4), z=0..1)::Complex Float

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7084/293: integration}
\begin{verbatim}

integrate (1/(1+x^4),x = %minusInfinity..%plusInfinity)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7083/314: integration}
\begin{verbatim}

integrate(2*atan(x)/(1+x^2),x)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7081/184: argument}
\begin{verbatim}

argument (-%i)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7078/114: function fail}
\begin{verbatim}

dom:=(INT->INT)
g(f:dom):dom== x+->(f(x))^2
p(x:INT):INT == x-1
q:= g p

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7077/156: maketaylor}
\begin{verbatim}

)clear all
)set function compile off
u := operator `u;
multidiff(expr, variable, count) == if count > 0 then D(multidiff(expr, variable, count-1), variable) else expr
maketaylor(expr) == series( n +-> multidiff(expr, x, n), x=0)
maketaylor(u(x))
)set function compile on


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7076/176: D(factor)}
\begin{verbatim}

p := -x*y^2+x*y+x^3-x^2
D(factor(p),x)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7075/182: round}
\begin{verbatim}

round(3.77623)
round(-3.77623)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7074/186: compose}
\begin{verbatim}

)clear all
E := Expression Integer
F := E -> E
compose(f:F, g:F):F == (e:E):E +-> f(g(e))
p(e:E):E == 2*e+1
q(e:E):E == 3*e+1
compose(p,q)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7071/211: D(product)}
\begin{verbatim}

)clear all
D(product((1-q^(n-i))/(1-q^(m-i)),i=0..m-1),q)
f:=operator `f;
D(product(f(i,q),i=0..m),q)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7070/278: simplifyLog}
\begin{verbatim}

simplifyLog(2*sqrt(2)*log(2))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7069/83: DMP}
\begin{verbatim}

1::DMP([x],FRAC INT)::POLY FRAC INT
1::DMP([x],INT)::POLY INT
vv := 1::DMP([x],FRAC INT)
uu := vv ::POLY FRAC INT
1 * uu

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7068/371: trace fails}
\begin{verbatim}

iprint("Release the hounds!")$IPRNTPK
for i in 1..10 repeat (iprint$IPRNTPK)(i::String)

-- tracing sanity check
)trace Integer )math
-1
)trace Integer )off

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7067/102: solve(sinh(z)=cosh(z),z)}
\begin{verbatim}

solve(sinh(z)=cosh(z), z)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7066/187: missing exports}
\begin{verbatim}

(INT, INT)
Tuple Any

-- missing exports
MyFD := DirectProduct(3, PrimeField(100000000000000006579))
myv := [3, 2, 1]::MyFD
ii := lookup(myv)
index(ii)$MyFD
ii := lookup([1, 1, 1]::MyFD)
index(ii)$MyFD
ii := lookup([1, 1, 0]::MyFD)
index(ii)$MyFD
ii := lookup([1, 2, 3]::MyFD)
index(ii)$MyFD
hash([3, 2, 1]::MyFD)

MyFD:= Product(PrimeField(100000000000000006579), PrimeField(257))
myv := makeprod(1, 1)$MyFD
ii := lookup(myv)
index(ii)$MyFD
ii := lookup(makeprod(2, 1)$MyFD)
index(ii)$MyFD
ii := lookup(makeprod(1, 2)$MyFD)
index(ii)$MyFD
ii := lookup(makeprod(2, 128)$MyFD)
index(ii)$MyFD
hash(myv)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7064/258: every?}
\begin{verbatim}

R==>RectangularMatrix(2,4, PF 2)
every?(zero?, [lookup(index(i)$R)$R - i for i in 1..2^8])

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7063/198: zero?}
\begin{verbatim}

zero?(complexIntegrate(%i/2*e^(-%i*x^2),x)-_
      (sqrt %pi * sqrt(%i * log e)*erf(x*sqrt(%i*log e)))/(4*log e))

zero?(complexIntegrate(-%i/2*e^(%i*x^2),x)-_
      (sqrt %pi * sqrt(-%i * log e)*erf(x*sqrt(-%i*log e)))/(4*log e))

zero?(complexIntegrate(log(x)/(x-1),x)+dilog x)

zero?(complexIntegrate(2*log(x)/(x-1),x)+2*dilog x)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7062/408: abs}
\begin{verbatim}

abs(Gamma(1/5::EXPR INT)::EXPR DFLOAT - 4.59084) < 0.00001
abs(digamma(1/5::EXPR INT)::EXPR DFLOAT+5.28904) < 0.000001
abs(besselJ(1,1::EXPR INT)::EXPR DFLOAT - 0.440051) < 0.000001
-- fails, because airyAi yields complex results even for real arguments
abs(airyAi(1/5::EXPR INT)::EXPR DFLOAT - 0.303703) < 0.00001


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7061: integrate sqrt}
\begin{verbatim}

integrate(sqrt(z+sqrt(1+z))/(1+z)^2,z=0..%plusInfinity,"noPole")

                 3
         - 5atan(-) + 4
                 4
   (12)  --------------
                4
                    Type: Union(f1: OrderedCompletion Expression Integer,...)


   (3)  0.1956236140 0839451649
                                                       Type: Expression Float

but MMA6/Maple11/Derive gives

   1+5*atan(1/2)/2 = 2.1591190




\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7060: integration bug (different answer in fricas)}
\begin{verbatim}


bug 7060: integration bug (different answer in fricas)

 -> ex1:=integrate(sqrt(1+sqrt(1+z))/(1+z^2),z);

                                          Type: Union(Expression Integer,...)
 -> ex2:=eval(ex1,z=0);

                                                     Type: Expression Integer
 -> numeric ex2

  1.0243175471 308082709
                                                                  Type: Float

fricas returns:

  -2.5898455408 37987845


curiously

ex3:=limit(ex1,z=%plusInfinity) 

   (11)  0
                        Type: Union(OrderedCompletion Expression Integer,...)

but fricas doesn't return???


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7059: integration bug (different answer in fricas)}
\begin{verbatim}

integrate(sqrt(1+sqrt(1+z))/(1+z^2),z=0..%plusInfinity,"noPole")::EXPR Float

gives the wrong answer:

   (3)  - 1.0243175471 308082709
                                                       Type: Expression Float

the correct answer:

(5*atan(3)-5*atan(1/3)+4)/4

                         1
        5atan(3) - 5atan(-) + 4
                         3
   (4)  -----------------------
                   4
                                                     Type: Expression Integer
(5) -> numeric %

   (5)  2.1591190225 020152905
                                                                  Type: Float
(6) -> 


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7058: calling AXIOMsys segfaults}
\begin{verbatim}


bug 7058: calling AXIOMsys from anywhere on the path without giving
          full path name sometimes causes a segfault

which AXIOMsys
/research2/test/mnt/fedora5/bin/AXIOMsys
[root@localhost test]# AXIOMsys
                        AXIOM Computer Algebra System 
                         Version: Axiom (Sept 2007)
              Timestamp: Tuesday October 16, 2007 at 09:21:36 
-----------------------------------------------------------------------------
   Issue )copyright to view copyright notices.
   Issue )summary for a summary of useful system commands.
   Issue )quit to leave AXIOM and return to shell.
-----------------------------------------------------------------------------
 
   Re-reading compress.daase   Re-reading interp.daase
   Re-reading operation.daase
   Re-reading category.daase
   Re-reading browse.daase
(1) -> )lisp (bye)
[root@localhost test]# echo $AXIOM
/research2/test/mnt/fedora5
[root@localhost test]# AXIOMsys
Segmentation fault
[root@localhost test]# which AXIOMsys
/research2/test/mnt/fedora5/bin/AXIOMsys
[root@localhost test]# AXIOMsys
Segmentation fault
[root@localhost test]# `which AXIOMsys`
                        AXIOM Computer Algebra System 
                         Version: Axiom (Sept 2007)
              Timestamp: Tuesday October 16, 2007 at 09:21:36 
-----------------------------------------------------------------------------
   Issue )copyright to view copyright notices.
   Issue )summary for a summary of useful system commands.
   Issue )quit to leave AXIOM and return to shell.
-----------------------------------------------------------------------------
 
   Re-reading compress.daase   Re-reading interp.daase
   Re-reading operation.daase
   Re-reading category.daase
   Re-reading browse.daase
(1) -> 


[root@localhost test]# strace AXIOMsys
execve("/research2/test/mnt/fedora5/bin/AXIOMsys", ["AXIOMsys"], [/* 39 vars */]) = 0
brk(0)                                  = 0x96a1000
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f73000
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=67432, ...}) = 0
mmap2(NULL, 67432, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb7f62000
close(3)                                = 0
open("/lib/libm.so.6", O_RDONLY)        = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0`Cv\000"..., 512) = 512
fstat64(3, {st_mode=S_IFREG|0755, st_size=199700, ...}) = 0
mmap2(0x761000, 147584, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x761000
mmap2(0x784000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x22) = 0x784000
close(3)                                = 0
open("/usr/lib/sse2/libgmp.so.3", O_RDONLY) = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\0fv\000"..., 512) = 512
fstat64(3, {st_mode=S_IFREG|0644, st_size=842637, ...}) = 0
mmap2(0x761000, 186848, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x110000
mmap2(0x13d000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2c) = 0x13d000
close(3)                                = 0
open("/usr/lib/libreadline.so.5", O_RDONLY) = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0@D|\000"..., 512) = 512
fstat64(3, {st_mode=S_IFREG|0755, st_size=197832, ...}) = 0
mmap2(0x7b9000, 199036, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7b9000
mmap2(0x7e5000, 16384, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2c) = 0x7e5000
mmap2(0x7e9000, 2428, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7e9000
close(3)                                = 0
open("/usr/lib/libncurses.so.5", O_RDONLY) = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0 \265\35"..., 512) = 512
fstat64(3, {st_mode=S_IFREG|0755, st_size=304280, ...}) = 0
mmap2(0x71cd000, 296964, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x71cd000
mmap2(0x720d000, 32768, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x40) = 0x720d000
mmap2(0x7215000, 2052, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7215000
close(3)                                = 0
open("/lib/libc.so.6", O_RDONLY)        = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\n\31d\000"..., 512) = 512
fstat64(3, {st_mode=S_IFREG|0755, st_size=1528292, ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f61000
mmap2(0x62c000, 1254780, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x62c000
mmap2(0x758000, 16384, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x12b) = 0x758000
mmap2(0x75c000, 9596, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x75c000
close(3)                                = 0
open("/lib/libdl.so.2", O_RDONLY)       = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0@\214x\000"..., 512) = 512
fstat64(3, {st_mode=S_IFREG|0755, st_size=16352, ...}) = 0
mmap2(0x788000, 12412, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x788000
mmap2(0x78a000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1) = 0x78a000
close(3)                                = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f60000
set_thread_area({entry_number:-1 -> 6, base_addr:0xb7f606b0, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0
mprotect(0x78a000, 4096, PROT_READ)     = 0
mprotect(0x758000, 12288, PROT_READ)    = 0
mprotect(0x784000, 4096, PROT_READ)     = 0
mprotect(0x628000, 4096, PROT_READ)     = 0
munmap(0xb7f62000, 67432)               = 0
personality(0xffffffff /* PER_??? */)   = 0
personality(0x40000 /* PER_??? */)      = 0
execve("AXIOMsys", ["AXIOMsys"], [/* 39 vars */]) = -1 ENOENT (No such file or directory)
getpid()                                = 25855
stat64("/proc/25855/exe", {st_mode=S_IFREG|0755, st_size=16188532, ...}) = 0
lstat64("/proc", {st_mode=S_IFDIR|0555, st_size=0, ...}) = 0
lstat64("/proc/25855", {st_mode=S_IFDIR|0555, st_size=0, ...}) = 0
lstat64("/proc/25855/exe", {st_mode=S_IFLNK|0777, st_size=0, ...}) = 0
readlink("/proc/25855/exe", "/research2/test/mnt/fedora5/bin/AXIOMsys", 4096) = 40
lstat64("/research2", {st_mode=S_IFDIR|0777, st_size=4096, ...}) = 0
lstat64("/research2/test", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
lstat64("/research2/test/mnt", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
lstat64("/research2/test/mnt/fedora5", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
lstat64("/research2/test/mnt/fedora5/bin", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
lstat64("/research2/test/mnt/fedora5/bin/AXIOMsys", {st_mode=S_IFREG|0755, st_size=16188532, ...}) = 0
rt_sigaction(SIGSEGV, {0x807ae70, [SEGV], SA_RESTART}, {SIG_DFL}, 8) = 0
getrlimit(RLIMIT_STACK, {rlim_cur=10240*1024, rlim_max=RLIM_INFINITY}) = 0
setrlimit(RLIMIT_STACK, {rlim_cur=8192*1024, rlim_max=RLIM_INFINITY}) = 0
getrlimit(RLIMIT_DATA, {rlim_cur=RLIM_INFINITY, rlim_max=RLIM_INFINITY}) = 0
mprotect(0x8403000, 10555392, PROT_READ|PROT_WRITE|PROT_EXEC) = 0
rt_sigaction(SIGSEGV, {0x807ae70, [SEGV], SA_RESTART}, {0x807ae70, [SEGV], SA_RESTART}, 8) = 0
getrlimit(RLIMIT_DATA, {rlim_cur=RLIM_INFINITY, rlim_max=RLIM_INFINITY}) = 0
brk(0)                                  = 0x96a1000
brk(0xc765000)                          = 0xc765000
rt_sigaction(SIGFPE, {0x80b3740, [FPE], SA_RESTART|SA_SIGINFO}, NULL, 8) = 0
rt_sigaction(SIGPIPE, {0x80b37f0, [PIPE], SA_RESTART|SA_SIGINFO}, NULL, 8) = 0
rt_sigaction(SIGINT, {0x80b3410, [INT], SA_RESTART|SA_SIGINFO}, NULL, 8) = 0
rt_sigaction(SIGUSR1, {0x80b3410, [USR1], SA_RESTART|SA_SIGINFO}, NULL, 8) = 0
rt_sigaction(SIGIO, {0x80b3410, [IO], SA_RESTART|SA_SIGINFO}, NULL, 8) = 0
rt_sigaction(SIGALRM, {0x80b3410, [ALRM], SA_RESTART|SA_SIGINFO}, NULL, 8) = 0
ioctl(0, SNDCTL_TMR_TIMEBASE or TCGETS, {B38400 opost isig icanon -echo ...}) = 0
--- SIGSEGV (Segmentation fault) @ 0 (0) ---
rt_sigaction(SIGSEGV, {0x807ae70, [SEGV], SA_RESTART}, {0x807ae70, [SEGV], SA_RESTART}, 8) = 0
--- SIGSEGV (Segmentation fault) @ 0 (0) ---
+++ killed by SIGSEGV +++
Process 25855 detached


[root@localhost test]# echo $AXIOM
/research2/test/mnt/fedora5


[root@localhost test]# echo $PATH
/research2/test/mnt/fedora5/bin:/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/X11R6/bin:/root/bin

[root@localhost test]# uname -a
Linux localhost.localdomain 2.6.18-1.2239.fc5 #1 Fri Nov 10 13:04:06 EST 2006 i686 i686 i386 GNU/Linux

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7056: )browse has a bug}
\begin{verbatim}

)browse
   Your argument list is not valid.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7055: cd doesn't start from the current location}
\begin{verbatim}

)cd pending
 
   >> System error:
   Can't change the current directory to "/usr/local/axiom/mnt/fedora5/NIL/".

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7053: close(viewport) dumps core}
\begin{verbatim}

bug 7053: close(viewport) dumps core

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7051: is.input intermittent failures}
\begin{verbatim}

)set message test on
 
)set message auto off
 
)clear all
 
--S 1 of 4
 f n == ( not empty?(u := Is(n, 2*m%)) => integer eval(m%, u) ;  3 * n + 1 )
 
                                                                   Type: Void
--R 
--R                                                                   Type: Void
--E 1

)set stream showall on
 
 
--S 2 of 4
g(n:INT):STREAM(INT) == generate(f, n)
 
   Function declaration g : Integer -> Stream Integer has been added to
      workspace.
                                                                   Type: Void
--R 
--R   Function declaration g : Integer -> Stream Integer has been added to
--R      workspace.
--R                                                                   Type: Void
--E 2

--S 3 of 4
s := g 27
 
   There are 3 exposed and 0 unexposed library operations named 
      generate having 2 argument(s) but none was determined to be 
      applicable. Use HyperDoc Browse, or issue
                            )display op generate
      to learn more about the available operations. Perhaps 
      package-calling the operation or using coercions on the arguments
      will allow you to apply the operation.
   Cannot find a definition or applicable library operation named 
      generate with argument type(s) 
                                 Variable f
                                   Integer
      
      Perhaps you should use "@" to indicate the required return type, 
      or "$" to specify which version of the function you need.
   AXIOM will attempt to step through and interpret the code.
   Compiling function g with type Integer -> Stream Integer 
   There are 3 exposed and 0 unexposed library operations named 
      generate having 2 argument(s) but none was determined to be 
      applicable. Use HyperDoc Browse, or issue
                            )display op generate
      to learn more about the available operations. Perhaps 
      package-calling the operation or using coercions on the arguments
      will allow you to apply the operation.
 
Daly Bug
   Cannot find a definition or applicable library operation named 
      generate with argument type(s) 
                                 Variable f
                                   Integer
      
      Perhaps you should use "@" to indicate the required return type, 
      or "$" to specify which version of the function you need.
--R 
--R   Compiling function f with type Integer -> Integer 
--R   Compiling function g with type Integer -> Stream Integer 
--R
--R   (3)  [27,82,41,124,62,31,94,47,142,71,...]
--R                                                         Type: Stream Integer
--E 3

--S 4 of 4
extend(s, 150)
 
   There are 11 exposed and 0 unexposed library operations named extend
      having 2 argument(s) but none was determined to be applicable. 
      Use HyperDoc Browse, or issue
                             )display op extend
      to learn more about the available operations. Perhaps 
      package-calling the operation or using coercions on the arguments
      will allow you to apply the operation.
 
Daly Bug
   Cannot find a definition or applicable library operation named 
      extend with argument type(s) 
                                 Variable s
                               PositiveInteger
      
      Perhaps you should use "@" to indicate the required return type, 
      or "$" to specify which version of the function you need.
--R 
--R
--R   (4)
--R   [27, 82, 41, 124, 62, 31, 94, 47, 142, 71, 214, 107, 322, 161, 484, 242,
--R    121, 364, 182, 91, 274, 137, 412, 206, 103, 310, 155, 466, 233, 700, 350,
--R    175, 526, 263, 790, 395, 1186, 593, 1780, 890, 445, 1336, 668, 334, 167,
--R    502, 251, 754, 377, 1132, 566, 283, 850, 425, 1276, 638, 319, 958, 479,
--R    1438, 719, 2158, 1079, 3238, 1619, 4858, 2429, 7288, 3644, 1822, 911, 2734,
--R    1367, 4102, 2051, 6154, 3077, 9232, 4616, 2308, 1154, 577, 1732, 866, 433,
--R    1300, 650, 325, 976, 488, 244, 122, 61, 184, 92, 46, 23, 70, 35, 106, 53,
--R    160, 80, 40, 20, 10, 5, 16, 8, 4, 2, 7, 22, 11, 34, 17, 52, 26, 13, 40, 20,
--R    10, 5, 16, 8, 4, 2, 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4,
--R    2, 7, 22, 11, 34, 17, 52, 26, ...]
--R                                                         Type: Stream Integer
--E 4


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7050: DFLOAT ignores outputFixed}
\begin{verbatim}

outputFixed() 
(11) -> 0.0004

   (11)  0.0004
                                                                  Type: Float
(12) -> 0.0004::DFLOAT

   (12)  4.0000000000000002E-4
                                                            Type: DoubleFloat
(13) ->

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7049: Ei isn't computing correctly}
\begin{verbatim}

integrate(e^u/u,u=%minusInfinity..-1,"noPole")

   (19)  potentialPole
                                         Type: Union(pole: potentialPole,...)
(20) -> integrate(e^u/u,u=%minusInfinity..-1,"noPole")
   Loading /usr/local/axiom/mnt/fedora5/algebra/RDETR.o for package 
      TranscendentalRischDE 

   (20)  "failed"
                                                Type: Union(fail: failed,...)
(21) -> integrate(e^u/u,u)

   (21)  Ei(u log(e))
                                          Type: Union(Expression Integer,...)
(22) -> Ei(13)

   (22)  Ei(13)
                                                     Type: Expression Integer
(23) -> 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7048: cannot simplify expression using e\texttt{\^}(x log e)}
\begin{verbatim}

integrate(e^x,x)

           x log(e)
         %e
   (18)  ----------
           log(e)
                                          Type: Union(Expression Integer,...)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7047: Gamma returns a random garbage value}
\begin{verbatim}

Gamma 1000/1000

   (7)  i.nfE+0
                                                            Type: DoubleFloat

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7046: radix has wrong ragits}
\begin{verbatim}

;;;  radix(5/24,39)  ==> 0 . 8 4 34
;;;
;;;                            _
;;;  radix(5/24,40)  ==> 0 . 8 D
;;;
;;;                          ____
;;;  radix(5/24,43)  ==> 0 . 8 41
;;;
;;;  radix(35,36)    ==> Z
;;;
;;;  radix(36,37)    ==> Error ... index out of range
;;;
;;;  radix(10,16)    ==> A
;;;

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{idea: )example command taken from regression test chunks}
\begin{verbatim}

1) identify (using --S comment tags) the functions being demonstrated
2) move the regression chunks near the example function in the algebra
3) dynamically pull the chunks from the sources
4) remove the regression test comment prefix

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7044: why?}
\begin{verbatim}

generic 16 making /research2/test/int/input/iprntpk.input from /research2/test/src/input/iprntpk.input.pamphlet

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7043: FAILED 1 of 139 stanzas file kamke3}
\begin{verbatim}

MISMATCH
expected:"           (9216a  - 7168a )b - 2048a  + 2048a"
     got:"           (18432a  - 57344a )b - 2048a  + 8192a"
MISMATCH
expected:"                 8        6          9        7"
     got:"                  8         6          9        7"
MISMATCH
expected:"           (- 20736a  + 34048a  - 6400a )b  + (4608a  - 22016a  + 9728a )b"
     got:"           (- 41472a  + 272384a  - 204800a )b  + (4608a  - 88064a  + 155648a )b"
MISMATCH
expected:"                    8         6        4  3         9         7        5  2"
     got:"                    8          6          4  3         9         7          5  2"
MISMATCH
expected:"           (- 3072a  + 45312a  - 35840a  + 2048a )b"
     got:"           (- 3072a  + 181248a  - 573440a  + 131072a )b"
MISMATCH
expected:"                   9         7         5        3  4"
     got:"                   9          7          5          3  4"
MISMATCH
expected:"           (13824a  - 61824a  + 25984a  - 256a )b"
     got:"           (27648a  - 494592a  + 831488a  - 32768a )b"
MISMATCH
expected:"                  8         6         4       2  5"
     got:"                  8          6          4         2  5"
MISMATCH
expected:"           (512a  - 28416a  + 56736a  - 12800a )b"
     got:"           (512a  - 113664a  + 907776a  - 819200a )b"
MISMATCH
expected:"                9         7         5         3  6"
     got:"                9          7          5          3  6"
MISMATCH
expected:"           (- 2304a  + 34944a  - 35664a  + 4096a )b"
     got:"           (- 4608a  + 279552a  - 1141248a  + 524288a )b"
MISMATCH
expected:"                   8         6         4        2  7"
     got:"                   8          6           4          2  7"
MISMATCH
expected:"           (4608a  - 28224a  + 15168a  - 768a)b"
     got:"           (18432a  - 451584a  + 970752a  - 196608a)b"
MISMATCH
expected:"                 7         5         3         8"
     got:"                  7          5          3            8"
MISMATCH
expected:"           (- 5376a  + 15456a  - 4176a  + 64)b"
     got:"           (- 43008a  + 494592a  - 534528a  + 32768)b"
MISMATCH
expected:"                   6         4        2       9"
     got:"                    6          4          2          9"
MISMATCH
expected:"           (- 2016a  + 1368a  - 48)b   + (4032a  - 5712a  + 672a)b"
     got:"           (- 64512a  + 175104a  - 24576)b   + (64512a  - 365568a  + 172032a)b"
MISMATCH
expected:"                   4        2       11         5        3         10"
     got:"                    4          2          11          5          3            10"
MISMATCH
expected:"           - b   + 18a b   + (- 144a  + 12)b   + (672a  - 192a)b"
     got:"           - 512b   + 4608a b   + (- 18432a  + 6144)b   + (43008a  - 49152a)b"
MISMATCH
expected:"              15        14          2       13        3         12"
     got:"                 15          14            2         13          3           12"
MISMATCH
expected:"               (82944a  - 50176a  - 10240a )b - 18432a   + 14336a  + 4096a"
     got:"               (165888a  - 401408a  - 327680a )b - 18432a   + 57344a  + 65536a"
MISMATCH
expected:"                      9         7         5           10         8        6"
     got:"                       9          7          5           10         8         6"
MISMATCH
expected:"               (24576a   - 196608a  + 82432a  + 9216a )b"
     got:"               (24576a   - 786432a  + 1318912a  + 589824a )b"
MISMATCH
expected:"                      10          8         6        4  2"
     got:"                      10          8           6          4  2"
MISMATCH
expected:"               (- 110592a  + 301056a  - 80640a  - 3584a )b"
     got:"               (- 221184a  + 2408448a  - 2580480a  - 458752a )b"
MISMATCH
expected:"                         9          7         5        3  3"
     got:"                         9           7           5          3  3"
MISMATCH
expected:"               (- 6144a   + 230400a  - 309888a  + 49664a  + 512a )b"
     got:"               (- 6144a   + 921600a  - 4958208a  + 3178496a  + 131072a )b"
MISMATCH
expected:"                       10          8          6         4       2  4"
     got:"                       10          8           6           4          2  4"
MISMATCH
expected:"               (27648a  - 290304a  + 215616a  - 18944a )b"
     got:"               (55296a  - 2322432a  + 6899712a  - 2424832a )b"
MISMATCH
expected:"                      9          7          5         3  5"
     got:"                      9           7           5           3  5"
MISMATCH
expected:"               (- 55296a  + 241920a  - 100032a  + 4096a )b"
     got:"               (- 221184a  + 3870720a  - 6402048a  + 1048576a )b"
MISMATCH
expected:"                        8          6          4        2  6"
     got:"                         8           6           4           2  6"
MISMATCH
expected:"               (64512a  - 137088a  + 29664a  - 384a)b"
     got:"               (516096a  - 4386816a  + 3796992a  - 196608a)b"
MISMATCH
expected:"                      7          5         3         7"
     got:"                       7           5           3            7"
MISMATCH
expected:"               (24192a  - 12960a  + 384a)b  + (- 48384a  + 52416a  - 5088a )b"
     got:"               (- 774144a  + 3354624a  - 1302528a )b"
MISMATCH
expected:"                      5         3         9            6         4        2  8"
     got:"                         6           4           2  8"
MISMATCH
expected:"               12a b   - 216a b   + (1728a  - 120a)b   + (- 8064a  + 1872a )b"
     got:"               (- 516096a  + 479232a )b   + (774144a  - 1658880a  + 196608a)b"
MISMATCH
expected:"                    13       2 12         3         11           4        2  10"
     got:"                         4          2  10           5           3            9"
MISMATCH
expected:"         + "
     got:"             + "
MISMATCH
expected:"             c"
     got:"               6144a b   - 55296a b   + (221184a  - 61440a)b"
MISMATCH
expected:"              2"
     got:"                      13         2 12           3           11"
MISMATCH
expected:"          *"
     got:"         + "
MISMATCH
expected:"               - 14336a  + 2048a"
     got:"             c"
MISMATCH
expected:"                       7        5"
     got:"              2"
MISMATCH
expected:"             + "
     got:"          *"
MISMATCH
expected:"               (221184a   - 215040a  + 35840a  - 3072a )b - 49152a   + 61440a"
     got:"               245760a  - 229376a  + 131072a"
MISMATCH
expected:"                       10          8         6        4           11         9"
     got:"                      9          7          5"
MISMATCH
expected:"               (24576a   - 479232a  + 336384a  - 37376a  + 1536a )b"
     got:"               (442368a   - 1720320a  + 1146880a  - 393216a )b - 49152a"
MISMATCH
expected:"                      11          9          7         5        3  2"
     got:"                       10           8           6          4           11"
MISMATCH
expected:"               (- 110592a   + 645120a  - 303360a  + 20224a  - 256a )b"
     got:"               (24576a   - 1916928a  + 5382144a  - 2392064a  + 393216a )b"
MISMATCH
expected:"                         10          8          6         4       2  3"
     got:"                      11           9           7           5          3  2"
MISMATCH
expected:"               (221184a  - 580608a  + 168960a  - 5632a )b"
     got:"               (- 221184a   + 5160960a  - 9707520a  + 2588672a  - 131072a )b"
MISMATCH
expected:"                       9          7          5        3  4"
     got:"                         10           8           6           4          2  3"
MISMATCH
expected:"               (- 258048a  + 354816a  - 57600a  + 640a )b"
     got:"               (884736a  - 9289728a  + 10813440a  - 1441792a )b"
MISMATCH
expected:"                         8          6         4       2  5"
     got:"                       9           7            5           3  4"
MISMATCH
expected:"               (193536a  - 145152a  + 11040a )b"
     got:"               (- 2064384a  + 11354112a  - 7372800a  + 327680a )b"
MISMATCH
expected:"                       7          5         3  6"
     got:"                          8            6           4          2  5"
MISMATCH
expected:"               (32256a  - 5760a )b  + (- 96768a  + 38016a  - 912a )b"
     got:"               (3096576a  - 9289728a  + 2826240a )b"
MISMATCH
expected:"                      5        3  8            6         4       2  7"
     got:"                        7           5           3  6"
MISMATCH
expected:"               - 48a b   + 864a b   + (- 6912a  + 384a )b"
     got:"               (- 3096576a  + 4866048a  - 466944a )b"
MISMATCH
expected:"                    2 11       3 10           4       2  9"
     got:"                          6           4          2  7"
MISMATCH
expected:"         + "
     got:"             + "
MISMATCH
expected:"             c"
     got:"               (2064384a  - 1474560a )b"
MISMATCH
expected:"              3"
     got:"                        5           3  8"
MISMATCH
expected:"          *"
     got:"             + "
MISMATCH
expected:"               - 18432a  + 2048a"
     got:"               - 24576a b   + 221184a b   + (- 884736a  + 196608a )b"
MISMATCH
expected:"                       8        6"
     got:"                       2 11          3 10             4          2  9"
MISMATCH
expected:"             + "
     got:"         + "
MISMATCH
expected:"               (147456a   - 172032a  + 46080a  - 3072a )b - 32768a   + 49152a"
     got:"             c"
MISMATCH
expected:"                       11          9         7        5           12         10"
     got:"              3"
MISMATCH
expected:"             + "
     got:"          *"
MISMATCH
expected:"               (- 294912a   + 258048a  - 46080a  + 1536a )b"
     got:"               196608a   - 294912a  + 131072a"
MISMATCH
expected:"                         10          8         6        4  2"
     got:"                      10          8          6"
MISMATCH
expected:"               (344064a  - 215040a  + 23040a  - 256a )b"
     got:"               (294912a   - 1376256a  + 1474560a  - 393216a )b - 32768a"
MISMATCH
expected:"                       9          7         5       3  3"
     got:"                       11           9           7          5           12"
MISMATCH
expected:"               (- 258048a  + 107520a  - 5760a )b"
     got:"               (- 1179648a   + 4128768a  - 2949120a  + 393216a )b"
MISMATCH
expected:"                         8          6        4  4"
     got:"                          10           8           6          4  2"
MISMATCH
expected:"               (129024a  - 32256a  + 576a )b"
     got:"               (2752512a  - 6881280a  + 2949120a  - 131072a )b"
MISMATCH
expected:"                       7         5       3  5"
     got:"                        9           7           5          3  3"
MISMATCH
expected:"               64a b  - 1152a b  + (9216a  - 384a )b  + (- 43008a  + 5376a )b"
     got:"               (- 4128768a  + 6881280a  - 1474560a )b"
MISMATCH
expected:"                  3 9        4 8         5       3  7            6        4  6"
     got:"                          8           6           4  4"
MISMATCH
expected:"     + "
     got:"             + "
MISMATCH
expected:"         ?"
     got:"               (4128768a  - 4128768a  + 294912a )b"
MISMATCH
expected:"      *"
     got:"                        7           5          3  5"
MISMATCH
expected:"           64a  c  - 48a  b c  + 12a b c - a b"
     got:"             + "
MISMATCH
expected:"              11 3      10 2 2      9 4     8 6"
     got:"               (- 2752512a  + 1376256a )b"
MISMATCH
expected:"        /"
     got:"                          6           4  6"
MISMATCH
expected:"             (- 12288a  + 3072a )b + 3072a  - 1024a"
     got:"             + "
MISMATCH
expected:"                      7        5          8        6"
     got:"               32768a b  - 294912a b  + (1179648a  - 196608a )b"
MISMATCH
expected:"           + "
     got:"                     3 9          4 8            5          3  7"
MISMATCH
expected:"             (46080a  - 37632a  + 1536a )b  + (- 11520a  + 26880a  - 3328a )b"
     got:"     + "
MISMATCH
expected:"                    7         5        3  3            8         6        4  2"
     got:"         ?"
MISMATCH
expected:"           + "
     got:"      *"
MISMATCH
expected:"             (10752a  - 90240a  + 34944a  - 256a )b"
     got:"           64a  c  - 48a  b c  + 12a b c - a b"
MISMATCH
expected:"                    8         6         4       2  4"
     got:"              11 3      10 2 2      9 4     8 6"
MISMATCH
expected:"           + "
     got:"        /"
MISMATCH
expected:"             (- 43008a  + 109440a  - 21504a )b"
     got:"             3072a  - 4096a"
MISMATCH
expected:"                      7          5         3  5"
     got:"                  8        6"
MISMATCH
expected:"             (- 2304a  + 77952a  - 87120a  + 8448a )b"
     got:"             (- 11520a  + 107520a  - 53248a )b  + (- 24576a  + 24576a )b"
MISMATCH
expected:"                     8         6         4        2  6"
     got:"                      8          6         4  2            7         5"
MISMATCH
expected:"             (9216a  - 83328a  + 45600a  - 1920a)b"
     got:"             (92160a  - 301056a  + 49152a )b"
MISMATCH
expected:"                   7         5         3          7"
     got:"                    7          5         3  3"
MISMATCH
expected:"             (- 16128a  + 57120a  - 15120a  + 192)b"
     got:"             (10752a  - 360960a  + 559104a  - 16384a )b"
MISMATCH
expected:"                      6         4         2        8"
     got:"                    8          6          4         2  4"
MISMATCH
expected:"             (- 10080a  + 7224a  - 240)b   + (16128a  - 25536a  + 2880a)b"
     got:"             (- 86016a  + 875520a  - 688128a )b"
MISMATCH
expected:"                      4        2        10          5         3          9"
     got:"                      7          5          3  5"
MISMATCH
expected:"             - 9b   + 144a b   + (- 1008a  + 84)b   + (4032a  - 1176a)b"
     got:"             (- 2304a  + 311808a  - 1393920a  + 540672a )b"
MISMATCH
expected:"                 14         13           2       12         3          11"
     got:"                     8          6           4          2  6"
MISMATCH
expected:"               c"
     got:"             (18432a  - 666624a  + 1459200a  - 245760a)b"
MISMATCH
expected:"            *"
     got:"                    7          5           3            7"
MISMATCH
expected:"                 (- 184320a  + 64512a  + 4096a )b + 46080a  - 21504a  - 2048a"
     got:"           + "
MISMATCH
expected:"                           8         6        4           9         7        5"
     got:"             (- 64512a  + 913920a  - 967680a  + 49152)b"
MISMATCH
expected:"               + "
     got:"                      6          4          2          8"
MISMATCH
expected:"                 (- 86016a  + 399360a  - 91392a  - 2560a )b"
     got:"           + "
MISMATCH
expected:"                          9          7         5        3  2"
     got:"             (129024a  - 817152a  + 368640a)b"
MISMATCH
expected:"               + "
     got:"                     5          3            9"
MISMATCH
expected:"                 (344064a  - 552960a  + 75264a  + 512a )b"
     got:"           + "
MISMATCH
expected:"                         8          6         4       2  3"
     got:"             (129024a  - 150528a)b   + (- 161280a  + 462336a  - 61440)b"
MISMATCH
expected:"               + "
     got:"                     3            11             4          2          10"
MISMATCH
expected:"                 (27648a  - 634368a  + 498240a  - 36864a )b"
     got:"           + "
MISMATCH
expected:"                        9          7          5         3  4"
     got:"             - 2304b   + 18432a b   + (- 64512a  + 21504)b"
MISMATCH
expected:"               + "
     got:"                    14           13            2          12"
MISMATCH
expected:"                 (- 110592a  + 698880a  - 289920a  + 9984a )b"
     got:"           + "
MISMATCH
expected:"                           8          6          4        2  5"
     got:"               c"
MISMATCH
expected:"               + "
     got:"            *"
MISMATCH
expected:"                 (193536a  - 497280a  + 105120a  - 1152a)b"
     got:"               (- 368640a  + 516096a  + 131072a )b + 46080a  - 86016a  - 32768a"
MISMATCH
expected:"                         7          5          3          6"
     got:"                         8          6          4           9         7         5"
MISMATCH
expected:"                 (- 193536a  + 231168a  - 21600a )b"
     got:"                 (- 86016a  + 1597440a  - 1462272a  - 163840a )b"
MISMATCH
expected:"                           6          4         2  7"
     got:"                          9           7           5          3  2"
MISMATCH
expected:"                 (- 48384a  + 11424a )b  + (120960a  - 67872a  + 1920a)b"
     got:"                 (688128a  - 4423680a  + 2408448a  + 65536a )b"
MISMATCH
expected:"                          4         2  9           5         3          8"
     got:"                         8           6           4         2  3"
MISMATCH
expected:"                 108a b   - 1728a b   + (12096a  - 840a)b"
     got:"                 (27648a  - 2537472a  + 7971840a  - 2359296a )b"
MISMATCH
expected:"                       12        2 11          3         10"
     got:"                        9           7           5           3  4"
MISMATCH
expected:"           + "
     got:"               + "
MISMATCH
expected:"               c"
     got:"                 (- 221184a  + 5591040a  - 9277440a  + 1277952a )b"
MISMATCH
expected:"                2"
     got:"                           8           6           4           2  5"
MISMATCH
expected:"            *"
     got:"               + "
MISMATCH
expected:"                 - 153600a  + 21504a  - 1024a"
     got:"                 (774144a  - 7956480a  + 6727680a  - 294912a)b"
MISMATCH
expected:"                          8         6        4"
     got:"                         7           5           3            6"
MISMATCH
expected:"                 (- 688128a  + 460800a  - 43008a  + 1024a )b + 172032a"
     got:"                 (- 1548288a  + 7397376a  - 2764800a )b"
MISMATCH
expected:"                           9          7         5        3            10"
     got:"                            6           4           2  7"
MISMATCH
expected:"                 (- 110592a   + 1333248a  - 610560a  + 34560a  - 256a )b"
     got:"                 (1935360a  - 4343808a  + 491520a)b"
MISMATCH
expected:"                           10           8          6         4       2  2"
     got:"                          5           3            8"
MISMATCH
expected:"                 (442368a  - 1591296a  + 453120a  - 13056a )b"
     got:"                 (- 1548288a  + 1462272a )b"
MISMATCH
expected:"                         9           7          5         3  3"
     got:"                            4           2  9"
MISMATCH
expected:"                 (- 774144a  + 1236480a  - 195840a  + 1920a )b"
     got:"                 27648a b   - 221184a b   + (774144a  - 215040a)b"
MISMATCH
expected:"                           8           6          4        2  4"
     got:"                         12          2 11           3            10"
MISMATCH
expected:"               + "
     got:"           + "
MISMATCH
expected:"                 (774144a  - 623616a  + 46080a )b"
     got:"               c"
MISMATCH
expected:"                         7          5         3  5"
     got:"                2"
MISMATCH
expected:"               + "
     got:"            *"
MISMATCH
expected:"                 (193536a  - 34944a )b  + (- 483840a  + 196224a  - 4560a )b"
     got:"                 - 614400a  + 344064a  - 65536a"
MISMATCH
expected:"                         5         3  7             6          4        2  6"
     got:"                          8          6         4"
MISMATCH
expected:"                 - 432a b   + 6912a b  + (- 48384a  + 2688a )b"
     got:"                 (- 1376256a  + 3686400a  - 1376256a  + 131072a )b + 172032a"
MISMATCH
expected:"                       2 10        3 9            4        2  8"
     got:"                            9           7           5          3            10"
MISMATCH
expected:"           + "
     got:"               + "
MISMATCH
expected:"               c"
     got:"                 (- 110592a   + 5332992a  - 9768960a  + 2211840a  - 65536a )b"
MISMATCH
expected:"                3"
     got:"                           10           8           6           4         2  2"
MISMATCH
expected:"            *"
     got:"               + "
MISMATCH
expected:"                 - 172032a  + 46080a  - 3072a"
     got:"                 (884736a  - 12730368a  + 14499840a  - 1671168a )b"
MISMATCH
expected:"                          9         7        5"
     got:"                         9            7            5           3  3"
MISMATCH
expected:"                 (- 589824a   + 516096a  - 92160a  + 3072a )b + 147456a"
     got:"                 (- 3096576a  + 19783680a  - 12533760a  + 491520a )b"
MISMATCH
expected:"                           10          8         6        4            11"
     got:"                            8            6            4          2  4"
MISMATCH
expected:"                 (1032192a  - 645120a  + 69120a  - 768a )b"
     got:"                 (6193152a  - 19955712a  + 5898240a )b"
MISMATCH
expected:"                          9          7         5       3  2"
     got:"                          7            5           3  5"
MISMATCH
expected:"                 (- 1032192a  + 430080a  - 23040a )b"
     got:"                 (- 7741440a  + 12558336a  - 1167360a )b"
MISMATCH
expected:"                            8          6         4  3"
     got:"                            6            4           2  6"
MISMATCH
expected:"                 (- 258048a  + 32256a )b  + (645120a  - 161280a  + 2880a )b"
     got:"                 (6193152a  - 4472832a )b"
MISMATCH
expected:"                           6         4  5           7          5        3  4"
     got:"                          5           3  7"
MISMATCH
expected:"                 576a b  - 9216a b  + (64512a  - 2688a )b"
     got:"                 - 110592a b   + 884736a b  + (- 3096576a  + 688128a )b"
MISMATCH
expected:"                     3 8        4 7          5        3  6"
     got:"                          2 10          3 9              4          2  8"
MISMATCH
expected:"     + "
     got:"           + "
MISMATCH
expected:"         ?"
     got:"               c"
MISMATCH
expected:"          2"
     got:"                3"
MISMATCH
expected:"      *"
     got:"            *"
MISMATCH
expected:"           64a  c  - 48a b c  + 12a b c - a b"
     got:"                 - 688128a  + 737280a  - 196608a"
MISMATCH
expected:"              10 3      9 2 2      8 4     7 6"
     got:"                          9          7          5"
MISMATCH
expected:"        /"
     got:"               + "
MISMATCH
expected:"             (- 40320a  + 13440a )b  + (11520a  - 10752a )b  + 5376a b - 1536a"
     got:"                 (- 1179648a   + 4128768a  - 2949120a  + 393216a )b + 147456a"
MISMATCH
expected:"                      6         4  3          7         5  2        6         7"
     got:"                            10           8           6          4            11"
MISMATCH
expected:"           + "
     got:"               + "
MISMATCH
expected:"             (56448a  - 74400a  + 5376a )b  + (- 16128a  + 70080a  - 10752a )b"
     got:"                 (4128768a  - 10321920a  + 4423680a  - 196608a )b"
MISMATCH
expected:"                    6         4        2  5            7         5         3  4"
     got:"                          9            7           5          3  2"
MISMATCH
expected:"           + "
     got:"               + "
MISMATCH
expected:"             (4608a  - 88704a  + 49920a  - 1536a)b"
     got:"                 (- 8257536a  + 13762560a  - 2949120a )b"
MISMATCH
expected:"                   7         5         3          6"
     got:"                            8            6           4  3"
MISMATCH
expected:"           + "
     got:"               + "
MISMATCH
expected:"             (- 16128a  + 80640a  - 20640a  + 192)b"
     got:"                 (10321920a  - 10321920a  + 737280a )b"
MISMATCH
expected:"                      6         4         2        7"
     got:"                           7            5          3  4"
MISMATCH
expected:"           + "
     got:"               + "
MISMATCH
expected:"             (- 20160a  + 15624a  - 480)b  + (24192a  - 45360a  + 4800a)b"
     got:"                 (- 8257536a  + 4128768a )b"
MISMATCH
expected:"                      4         2        9          5         3          8"
     got:"                            6           4  5"
MISMATCH
expected:"           + "
     got:"               + "
MISMATCH
expected:"             - 36b   + 504a b   + (- 3024a  + 252)b   + (10080a  - 3024a)b"
     got:"                 147456a b  - 1179648a b  + (4128768a  - 688128a )b"
MISMATCH
expected:"                  13         12           2        11          3          10"
     got:"                        3 8           4 7            5          3  6"
MISMATCH
expected:"           + "
     got:"     + "
MISMATCH
expected:"               c"
     got:"         ?"
MISMATCH
expected:"            *"
     got:"          2"
MISMATCH
expected:"                 - 46080a  + 10752a"
     got:"      *"
MISMATCH
expected:"                         8         6"
     got:"           64a  c  - 48a b c  + 12a b c - a b"
MISMATCH
expected:"               + "
     got:"              10 3      9 2 2      8 4     7 6"
MISMATCH
expected:"                 (129024a  - 318720a  + 32256a )b  + (161280a  - 26880a )b"
     got:"        /"
MISMATCH
expected:"                         8          6         4  2           7         5"
     got:"             (11520a  - 43008a )b  + 10752a b - 1536a"
MISMATCH
expected:"               + "
     got:"                    7         5  2         6         7"
MISMATCH
expected:"                 (- 451584a  + 393600a  - 21504a )b"
     got:"           + "
MISMATCH
expected:"                           7          5         3  3"
     got:"             (- 16128a  + 280320a  - 172032a )b  + (- 80640a  + 107520a )b"
MISMATCH
expected:"               + "
     got:"                      7          5          3  4            6          4  3"
MISMATCH
expected:"                 (- 55296a  + 725760a  - 301440a  + 7680a )b"
     got:"           + "
MISMATCH
expected:"                          8          6          4        2  4"
     got:"             (112896a  - 595200a  + 172032a )b"
MISMATCH
expected:"               + "
     got:"                     6          4          2  5"
MISMATCH
expected:"                 (193536a  - 685440a  + 139200a  - 1152a)b"
     got:"           + "
MISMATCH
expected:"                         7          5          3          5"
     got:"             (4608a  - 354816a  + 798720a  - 98304a)b"
MISMATCH
expected:"               + "
     got:"                   7          5          3           6"
MISMATCH
expected:"                 (- 290304a  + 403200a  - 35520a )b"
     got:"           + "
MISMATCH
expected:"                           6          4         2  6"
     got:"             (- 32256a  + 645120a  - 660480a  + 24576)b"
MISMATCH
expected:"               + "
     got:"                      6          4          2          7"
MISMATCH
expected:"                 (- 120960a  + 29232a )b  + (241920a  - 145152a  + 3840a)b"
     got:"           + "
MISMATCH
expected:"                           4         2  8           5          3          7"
     got:"             (96768a  - 725760a  + 307200a)b"
MISMATCH
expected:"               + "
     got:"                    5          3            8"
MISMATCH
expected:"                 432a b   - 6048a b   + (36288a  - 2520a)b"
     got:"           + "
MISMATCH
expected:"                       11        2 10          3          9"
     got:"             (161280a  - 193536a)b   + (- 161280a  + 499968a  - 61440)b"
MISMATCH
expected:"           + "
     got:"                     3            10             4          2          9"
MISMATCH
expected:"               c"
     got:"           + "
MISMATCH
expected:"                2"
     got:"             - 4608b   + 32256a b   + (- 96768a  + 32256)b"
MISMATCH
expected:"            *"
     got:"                    13           12            2          11"
MISMATCH
expected:"               (903168a  - 384000a  + 16128a )b - 258048a  + 153600a  - 10752a"
     got:"           + "
MISMATCH
expected:"                       8          6         4            9          7         5"
     got:"               c"
MISMATCH
expected:"               + "
     got:"            *"
MISMATCH
expected:"                 (221184a  - 1548288a  + 418560a  - 9216a )b"
     got:"                 - 46080a  + 43008a"
MISMATCH
expected:"                         9           7          5        3  2"
     got:"                         8         6"
MISMATCH
expected:"                 (- 774144a  + 1612800a  - 243840a  + 1920a )b"
     got:"                 (129024a  - 1274880a  + 516096a )b  + (322560a  - 215040a )b"
MISMATCH
expected:"                           8           6          4        2  3"
     got:"                         8           6          4  2           7          5"
MISMATCH
expected:"                 (1161216a  - 1048320a  + 73920a )b"
     got:"                 (- 903168a  + 3148800a  - 688128a )b"
MISMATCH
expected:"                          7           5         3  4"
     got:"                           7           5          3  3"
MISMATCH
expected:"                 (483840a  - 88704a )b  + (- 967680a  + 411264a  - 9120a )b"
     got:"                 (- 55296a  + 2903040a  - 4823040a  + 491520a )b"
MISMATCH
expected:"                         5         3  6             6          4        2  5"
     got:"                          8           6           4          2  4"
MISMATCH
expected:"                 - 1728a b  + 24192a b  + (- 145152a  + 8064a )b"
     got:"                 (387072a  - 5483520a  + 4454400a  - 147456a)b"
MISMATCH
expected:"                        2 9         3 8             4        2  7"
     got:"                         7           5           3            5"
MISMATCH
expected:"           + "
     got:"               + "
MISMATCH
expected:"               c"
     got:"                 (- 1161216a  + 6451200a  - 2273280a )b"
MISMATCH
expected:"                3"
     got:"                            6           4           2  6"
MISMATCH
expected:"            *"
     got:"               + "
MISMATCH
expected:"                 258048a  - 46080a  + 1536a"
     got:"                 (1935360a  - 4644864a  + 491520a)b"
MISMATCH
expected:"                        8         6        4"
     got:"                          5           3            7"
MISMATCH
expected:"                 (1032192a  - 645120a  + 69120a  - 768a )b - 294912a"
     got:"                 (- 1935360a  + 1870848a )b"
MISMATCH
expected:"                          9          7         5       3            10"
     got:"                            4           2  8"
MISMATCH
expected:"                 (- 1548288a  + 645120a  - 34560a )b"
     got:"                 55296a b   - 387072a b   + (1161216a  - 322560a)b"
MISMATCH
expected:"                            8          6         4  2"
     got:"                         11          2 10            3            9"
MISMATCH
expected:"               + "
     got:"           + "
MISMATCH
expected:"                 (- 645120a  + 80640a )b  + (1290240a  - 322560a  + 5760a )b"
     got:"               c"
MISMATCH
expected:"                           6         4  4            7          5        3  3"
     got:"                2"
MISMATCH
expected:"               + "
     got:"            *"
MISMATCH
expected:"                 2304a b  - 32256a b  + (193536a  - 8064a )b"
     got:"                 - 172032a"
MISMATCH
expected:"                      3 7         4 6           5        3  5"
     got:"                          5"
MISMATCH
expected:"     + "
     got:"               + "
MISMATCH
expected:"         ?"
     got:"                 (1806336a  - 3072000a  + 516096a )b - 258048a  + 614400a"
MISMATCH
expected:"          3"
     got:"                          8           6          4            9          7"
MISMATCH
expected:"      *"
     got:"               + "
MISMATCH
expected:"           64a c  - 48a b c  + 12a b c - a b"
     got:"                 (221184a  - 6193152a  + 6696960a  - 589824a )b"
MISMATCH
expected:"              9 3      8 2 2      7 4     6 6"
     got:"                         9           7           5          3  2"
MISMATCH
expected:"        /"
     got:"               + "
MISMATCH
expected:"             (17280a  - 1536a )b  + (- 5760a  + 1408a )b  - 768a b + 256a"
     got:"                 (- 1548288a  + 12902400a  - 7802880a  + 245760a )b"
MISMATCH
expected:"                    5        3  3           6        4  2       5        6"
     got:"                            8            6           4          2  3"
MISMATCH
expected:"           + "
     got:"               + "
MISMATCH
expected:"             (- 40320a  + 24000a  - 384a)b  + (13440a  - 26400a  + 1024a )b"
     got:"                 (4644864a  - 16773120a  + 4730880a )b"
MISMATCH
expected:"                      5         3         5          6         4        2  4"
     got:"                          7            5           3  4"
MISMATCH
expected:"           + "
     got:"               + "
MISMATCH
expected:"             (- 5376a  + 53760a  - 12960a  + 64)b"
     got:"                 (- 7741440a  + 13160448a  - 1167360a )b"
MISMATCH
expected:"                     6         4         2       6"
     got:"                            6            4           2  5"
MISMATCH
expected:"           + "
     got:"               + "
MISMATCH
expected:"             (- 20160a  + 17640a  - 480)b  + (16128a  - 40320a  + 3840a)b"
     got:"                 (7741440a  - 5677056a )b"
MISMATCH
expected:"                      4         2        8          5         3          7"
     got:"                          5           3  6"
MISMATCH
expected:"           + "
     got:"               + "
MISMATCH
expected:"             - 84b   + 1008a b   + (- 5040a  + 420)b   + (13440a  - 4200a)b"
     got:"                 - 221184a b  + 1548288a b  + (- 4644864a  + 1032192a )b"
MISMATCH
expected:"                  12          11           2        10          3          9"
     got:"                          2 9           3 8              4           2  7"
MISMATCH
expected:"            *"
     got:"                3"
MISMATCH
expected:"                 23040a  - 1792a"
     got:"            *"
MISMATCH
expected:"                       7        5"
     got:"                 1032192a  - 737280a  + 98304a"
MISMATCH
expected:"               + "
     got:"                         8          6         4"
MISMATCH
expected:"                 (- 107520a  + 124800a  - 3584a )b  + (- 69120a  + 3584a )b"
     got:"               + "
MISMATCH
expected:"                           7          5        3  2            6        4"
     got:"                 (2064384a  - 5160960a  + 2211840a  - 98304a )b - 294912a"
MISMATCH
expected:"               + "
     got:"                          9           7           5         3            10"
MISMATCH
expected:"                 (322560a  - 134400a  + 1792a )b"
     got:"               + "
MISMATCH
expected:"                         6          4        2  3"
     got:"                 (- 6193152a  + 10321920a  - 2211840a )b"
MISMATCH
expected:"               + "
     got:"                            8            6           4  2"
MISMATCH
expected:"                 (64512a  - 443520a  + 83520a  - 384a)b"
     got:"               + "
MISMATCH
expected:"                        7          5         3         4"
     got:"                 (10321920a  - 10321920a  + 737280a )b"
MISMATCH
expected:"               + "
     got:"                           7            5          3  3"
MISMATCH
expected:"                 (- 193536a  + 349440a  - 27840a )b"
     got:"               + "
MISMATCH
expected:"                           6          4         2  5"
     got:"                 (- 10321920a  + 5160960a )b"
MISMATCH
expected:"               + "
     got:"                             6           4  4"
MISMATCH
expected:"                 (- 161280a  + 40320a )b  + (241920a  - 161280a  + 3840a)b"
     got:"               + "
MISMATCH
expected:"                           4         2  7           5          3          6"
     got:"                 294912a b  - 2064384a b  + (6193152a  - 1032192a )b"
MISMATCH
expected:"               + "
     got:"                        3 7           4 6            5           3  5"
MISMATCH
expected:"                 1008a b   - 12096a b  + (60480a  - 4200a)b"
     got:"     + "
MISMATCH
expected:"                        10         2 9          3          8"
     got:"         ?"
MISMATCH
expected:"           + "
     got:"          3"
MISMATCH
expected:"               c"
     got:"      *"
MISMATCH
expected:"                2"
     got:"           64a c  - 48a b c  + 12a b c - a b"
MISMATCH
expected:"            *"
     got:"              9 3      8 2 2      7 4     6 6"
MISMATCH
expected:"               (- 645120a  + 153600a  - 1792a )b + 215040a  - 76800a  + 1792a"
     got:"        /"
MISMATCH
expected:"                         7          5        3            8         6        4"
     got:"             (- 5760a  + 5632a )b  - 1536a b + 256a"
MISMATCH
expected:"               + "
     got:"                     6        4  2        5        6"
MISMATCH
expected:"                 (- 258048a  + 967680a  - 132480a  + 640a )b"
     got:"           + "
MISMATCH
expected:"                           8          6          4       2  2"
     got:"             (13440a  - 105600a  + 16384a )b  + (34560a  - 12288a )b"
MISMATCH
expected:"               + "
     got:"                    6          4         2  4          5         3  3"
MISMATCH
expected:"                 (774144a  - 860160a  + 55680a )b"
     got:"           + "
MISMATCH
expected:"                         7          5         3  3"
     got:"             (- 80640a  + 192000a  - 12288a)b"
MISMATCH
expected:"               + "
     got:"                      5          3           5"
MISMATCH
expected:"                 (645120a  - 120960a )b  + (- 967680a  + 443520a  - 9120a )b"
     got:"           + "
MISMATCH
expected:"                         5          3  5             6          4        2  4"
     got:"             (- 5376a  + 215040a  - 207360a  + 4096)b"
MISMATCH
expected:"               + "
     got:"                     6          4          2         6"
MISMATCH
expected:"                 - 4032a b  + 48384a b  + (- 241920a  + 13440a )b"
     got:"           + "
MISMATCH
expected:"                        2 8         3 7             4         2  6"
     got:"             (32256a  - 322560a  + 122880a)b"
MISMATCH
expected:"           + "
     got:"                    5          3            7"
MISMATCH
expected:"               c"
     got:"           + "
MISMATCH
expected:"                3"
     got:"             (107520a  - 134400a)b  + (- 80640a  + 282240a  - 30720)b"
MISMATCH
expected:"            *"
     got:"                     3            9            4          2          8"
MISMATCH
expected:"                 23040a  - 256a"
     got:"           + "
MISMATCH
expected:"                       5       3"
     got:"             - 5376b   + 32256a b   + (- 80640a  + 26880)b"
MISMATCH
expected:"               + "
     got:"                    12           11            2          10"
MISMATCH
expected:"                 (- 1032192a  + 430080a  - 23040a )b + 344064a  - 215040a"
     got:"           + "
MISMATCH
expected:"                            8          6         4            9          7"
     got:"               c"
MISMATCH
expected:"               + "
     got:"            *"
MISMATCH
expected:"                 (- 860160a  + 107520a )b  + (1290240a  - 322560a  + 5760a )b"
     got:"                 23040a  - 7168a"
MISMATCH
expected:"                           6          4  3            7          5        3  2"
     got:"                       7        5"
MISMATCH
expected:"                 5376a b  - 64512a b  + (322560a  - 13440a )b"
     got:"                 (- 107520a  + 499200a  - 57344a )b  + (- 138240a  + 28672a )b"
MISMATCH
expected:"                      3 6         4 5           5         3  4"
     got:"                           7          5         3  2             6         4"
MISMATCH
expected:"     + "
     got:"               + "
MISMATCH
expected:"         ?"
     got:"                 (645120a  - 1075200a  + 57344a )b"
MISMATCH
expected:"          4"
     got:"                         6           4         2  3"
MISMATCH
expected:"      *"
     got:"               + "
MISMATCH
expected:"           16a c  - 8a b c + a b"
     got:"                 (64512a  - 1774080a  + 1336320a  - 24576a)b"
MISMATCH
expected:"              7 2     6 2     5 4"
     got:"                        7           5           3           4"
MISMATCH
expected:"        /"
     got:"               + "
MISMATCH
expected:"             (- 16800a  + 3600a )b  + (6720a  - 4800a )b  + 3600a b - 1440a"
     got:"                 (- 387072a  + 2795520a  - 890880a )b"
MISMATCH
expected:"                      4        2  3         5        3  2        4         5"
     got:"                           6           4          2  5"
MISMATCH
expected:"           + "
     got:"               + "
MISMATCH
expected:"             (10080a  - 10920a  + 240)b  + (- 4032a  + 18480a  - 1440a)b"
     got:"                 (967680a  - 2580480a  + 245760a)b"
MISMATCH
expected:"                    4         2        5           5         3          4"
     got:"                         5           3            6"
MISMATCH
expected:"           + "
     got:"               + "
MISMATCH
expected:"             126b  - 1260a b  + (5040a  - 420)b  + (- 10080a  + 3360a)b"
     got:"                 (- 1290240a  + 1290240a )b"
MISMATCH
expected:"                 9          8         2        7            3          6"
     got:"                            4           2  7"
MISMATCH
expected:"           + "
     got:"               + "
MISMATCH
expected:"               c"
     got:"                 64512a b   - 387072a b  + (967680a  - 268800a)b"
MISMATCH
expected:"            *"
     got:"                         10          2 9           3            8"
MISMATCH
expected:"                 4800a"
     got:"           + "
MISMATCH
expected:"                      4"
     got:"               c"
MISMATCH
expected:"               + "
     got:"                2"
MISMATCH
expected:"                 (32256a  - 80640a  + 4320a )b  + (67200a  - 7200a )b - 26880a"
     got:"            *"
MISMATCH
expected:"                        6         4        2  2          5        3           6"
     got:"                 28672a"
MISMATCH
expected:"               + "
     got:"                       4"
MISMATCH
expected:"                 (80640a  - 18480a )b  + (- 80640a  + 53760a  - 960a)b"
     got:"               + "
MISMATCH
expected:"                        4         2  4            5         3         3"
     got:"                 (- 1290240a  + 1228800a  - 57344a )b + 215040a  - 307200a"
MISMATCH
expected:"               + "
     got:"                            7           5         3            8          6"
MISMATCH
expected:"                 - 1008a b  + 10080a b  + (- 40320a  + 2520a)b"
     got:"               + "
MISMATCH
expected:"                          7         2 6            3          5"
     got:"                 (- 258048a  + 3870720a  - 2119680a  + 40960a )b"
MISMATCH
expected:"           + "
     got:"                           8           6           4         2  2"
MISMATCH
expected:"               c"
     got:"               + "
MISMATCH
expected:"                2"
     got:"                 (1548288a  - 6881280a  + 1781760a )b"
MISMATCH
expected:"            *"
     got:"                          7           5           3  3"
MISMATCH
expected:"                 - 64512a  + 26880a  - 1440a"
     got:"               + "
MISMATCH
expected:"                         7         5        3"
     got:"                 (- 3870720a  + 7096320a  - 583680a )b"
MISMATCH
expected:"               + "
     got:"                            6           4          2  4"
MISMATCH
expected:"                 (- 161280a  + 20160a )b  + (161280a  - 40320a  + 720a )b"
     got:"               + "
MISMATCH
expected:"                           5         3  2           6         4       2"
     got:"                 (5160960a  - 3870720a )b"
MISMATCH
expected:"               + "
     got:"                          5           3  5"
MISMATCH
expected:"                 2016a b  - 20160a b  + (80640a  - 3360a )b"
     got:"               + "
MISMATCH
expected:"                      2 5         3 4          4        2  3"
     got:"                 - 258048a b  + 1548288a b  + (- 3870720a  + 860160a )b"
MISMATCH
expected:"     + "
     got:"                          2 8           3 7              4          2  6"
MISMATCH
expected:"         ?"
     got:"           + "
MISMATCH
expected:"          5"
     got:"               c"
MISMATCH
expected:"      *"
     got:"                3"
MISMATCH
expected:"           16a c  - 8a b c + a b"
     got:"            *"
MISMATCH
expected:"              6 2     5 2     4 4"
     got:"                 368640a  - 16384a"
MISMATCH
expected:"        /"
     got:"                        5         3"
MISMATCH
expected:"             - 288a b + 144a"
     got:"               + "
MISMATCH
expected:"                   3        4"
     got:"                 (- 2064384a  + 3440640a  - 737280a )b + 344064a  - 860160a"
MISMATCH
expected:"           + "
     got:"                            8           6          4            9          7"
MISMATCH
expected:"             (2016a  - 3528a  + 48)b  + (4032a  - 192a)b  + (- 2016a  + 336a )b"
     got:"               + "
MISMATCH
expected:"                   4        2       4         3         3           4       2  2"
     got:"                 (5160960a  - 5160960a  + 368640a )b"
MISMATCH
expected:"           + "
     got:"                          7           5          3  2"
MISMATCH
expected:"             126b  - 1008a b  + (3024a  - 252)b  + (- 4032a  + 1512a)b"
     got:"               + "
MISMATCH
expected:"                 8          7         2        6           3          5"
     got:"                 (- 6881280a  + 3440640a )b"
MISMATCH
expected:"           + "
     got:"                            6           4  3"
MISMATCH
expected:"               c"
     got:"               + "
MISMATCH
expected:"            *"
     got:"                 344064a b  - 2064384a b  + (5160960a  - 860160a )b"
MISMATCH
expected:"                 (- 16128a  + 480a )b + 8064a  - 480a"
     got:"                        3 6           4 5            5          3  4"
MISMATCH
expected:"                          4       2          5       3"
     got:"     + "
MISMATCH
expected:"               + "
     got:"         ?"
MISMATCH
expected:"                 (32256a  - 8064a )b  + (- 16128a  + 16128a  - 192a)b"
     got:"          4"
MISMATCH
expected:"                        4        2  3            5         3         2"
     got:"      *"
MISMATCH
expected:"               + "
     got:"           16a c  - 8a b c + a b"
MISMATCH
expected:"                 - 1008a b  + 8064a b  + (- 24192a  + 1512a)b"
     got:"              7 2     6 2     5 4"
MISMATCH
expected:"                          6        2 5            3          4"
     got:"        /"
MISMATCH
expected:"           + "
     got:"             (- 33600a  + 28800a )b  + (6720a  - 19200a )b  + 7200a b - 1440a"
MISMATCH
expected:"               c"
     got:"                      4         2  3         5         3  2        4         5"
MISMATCH
expected:"                2"
     got:"           + "
MISMATCH
expected:"            *"
     got:"             (20160a  - 87360a  + 7680)b  + (- 4032a  + 73920a  - 23040a)b"
MISMATCH
expected:"                 (- 64512a  + 8064a )b + 32256a  - 8064a  + 144a"
     got:"                    4         2         5           5         3           4"
MISMATCH
expected:"                          5        3           6        4       2"
     got:"           + "
MISMATCH
expected:"               + "
     got:"             4032b  - 20160a b  + (40320a  - 13440)b  + (- 40320a  + 53760a)b"
MISMATCH
expected:"                 2016a b  - 16128a b  + (48384a  - 2016a )b"
     got:"                  9           8          2          7            3           6"
MISMATCH
expected:"                      2 4         3 3          4        2  2"
     got:"           + "
MISMATCH
expected:"     + "
     got:"               c"
MISMATCH
expected:"         ?"
     got:"            *"
MISMATCH
expected:"          6"
     got:"                 - 26880a  + 19200a"
MISMATCH
expected:"      *"
     got:"                         6         4"
MISMATCH
expected:"           4a c - a b"
     got:"               + "
MISMATCH
expected:"             4     3 2"
     got:"                 (32256a  - 322560a  + 69120a )b  + (134400a  - 57600a )b"
MISMATCH
expected:"        /"
     got:"                        6          4         2  2           5         3"
MISMATCH
expected:"             504a b  + (- 1008a  + 84)b  + (672a  - 336a)b  + 504a b - 336a"
     got:"               + "
MISMATCH
expected:"                   4           2       3        3         2       2        3"
     got:"                 (322560a  - 295680a )b  + (- 161280a  + 430080a  - 30720a)b"
MISMATCH
expected:"           + "
     got:"                         4          2  4             5          3           3"
MISMATCH
expected:"             (336a b  - 2016a b  + (4032a  - 168a)b - 2688a  + 336a )c - 84b"
     got:"               + "
MISMATCH
expected:"                    3        2 2         3                 4       2        5"
     got:"                 - 32256a b  + 161280a b  + (- 322560a  + 80640a)b"
MISMATCH
expected:"     + "
     got:"                           7          2 6             3           5"
MISMATCH
expected:"         ?"
     got:"           + "
MISMATCH
expected:"          7"
     got:"               c"
MISMATCH
expected:"      *"
     got:"                2"
MISMATCH
expected:"           4a c - a b"
     got:"            *"
MISMATCH
expected:"             3     2 2"
     got:"                 - 64512a  + 107520a  - 23040a"
MISMATCH
expected:"        /"
     got:"                         7          5         3"
MISMATCH
expected:"             (- 144a  + 12)b  - 24a b + 24a"
     got:"               + "
MISMATCH
expected:"                    2       2              2"
     got:"                 (- 645120a  + 322560a )b  + (322560a  - 322560a  + 23040a )b"
MISMATCH
expected:"           + "
     got:"                           5          3  2           6          4         2"
MISMATCH
expected:"             (144a b  - 576a b + 576a  - 24a)c - 36b  + 144a b"
     got:"               + "
MISMATCH
expected:"                    2       2        3              4         3"
     got:"                 64512a b  - 322560a b  + (645120a  - 107520a )b"
MISMATCH
expected:"     + "
     got:"                       2 5          3 4           4          2  3"
MISMATCH
expected:"                a"
     got:"     + "
MISMATCH
expected:"       ?  + -------- ?"
     got:"         ?"
MISMATCH
expected:"        9   9b - 18a  8"
     got:"          5"
MISMATCH
expected:"   WARNING (genufact): No known algorithm to factor"
     got:"      *"
MISMATCH
expected:"     , trying square-free."
     got:"           16a c  - 8a b c + a b"
MISMATCH
expected:"         64a  c  - 48a  b c  + 12a  b c - a b"
     got:"              6 2     5 2     4 4"
MISMATCH
expected:"            12 3      11 2 2      10 4     9 6"
     got:"        /"
MISMATCH
expected:"      /"
     got:"             (- 2016a  + 1344a )b  - 576a b + 144a"
MISMATCH
expected:"           - 64b"
     got:"                     4        2  2       3        4"
MISMATCH
expected:"                9"
     got:"           + "
MISMATCH
expected:"         + "
     got:"             (2016a  - 14112a  + 768)b  + (8064a  - 1536a)b"
MISMATCH
expected:"           (- 12a b   + 120a b   - 384a b  + 384a b )c + b   - 12b   + 48b"
     got:"                   4         2        4         3          3"
MISMATCH
expected:"                   13         11         9         7      15      13      11"
     got:"           + "
MISMATCH
expected:"         + "
     got:"             2016b  - 8064a b  + (12096a  - 4032)b  + (- 8064a  + 12096a)b"
MISMATCH
expected:"           (48a b   - 384a b  + 912a b  - 640a b  + 256a b )c"
     got:"                  8          7          2         6           3           5"
MISMATCH
expected:"               2 11       2 9       2 7       2 5       2 3  2"
     got:"           + "
MISMATCH
expected:"         + "
     got:"               c"
MISMATCH
expected:"           (- 64a b  + 384a b  - 576a b  + 256a b )c"
     got:"            *"
MISMATCH
expected:"                 3 9       3 7       3 5       3 3  3"
     got:"                 (- 32256a  + 3840a )b + 8064a  - 1920a"
MISMATCH
expected:"     + "
     got:"                          4        2          5        3"
MISMATCH
expected:"         ?"
     got:"               + "
MISMATCH
expected:"      *"
     got:"                 (64512a  - 64512a )b  + (- 16128a  + 64512a  - 3072a)b"
MISMATCH
expected:"           64a  c  - 48a  b c  + 12a b c - a b"
     got:"                        4         2  3            5         3          2"
MISMATCH
expected:"              11 3      10 2 2      9 4     8 6"
     got:"               + "
MISMATCH
expected:"        /"
     got:"                 - 16128a b  + 64512a b  + (- 96768a  + 24192a)b"
MISMATCH
expected:"             - 240b   + 192b"
     got:"                           6         2 5            3           4"
MISMATCH
expected:"                   10       8"
     got:"           + "
MISMATCH
expected:"           + "
     got:"               c"
MISMATCH
expected:"             (108a b   - 840a b   + 1920a b  - 1152a b )c - 9b   + 84b"
     got:"                2"
MISMATCH
expected:"                    12         10          8          6       14      12"
     got:"            *"
MISMATCH
expected:"           + "
     got:"                 (- 129024a  + 64512a )b + 32256a  - 32256a  + 2304a"
MISMATCH
expected:"             (- 432a b   + 2688a b  - 4560a b  + 1920a b  - 256a b )c"
     got:"                           5         3           6         4        2"
MISMATCH
expected:"                    2 10        2 8        2 6        2 4       2 2  2"
     got:"               + "
MISMATCH
expected:"           + "
     got:"                 32256a b  - 129024a b  + (193536a  - 32256a )b"
MISMATCH
expected:"             (576a b  - 2688a b  + 2880a b  - 768a b )c"
     got:"                       2 4          3 3           4         2  2"
MISMATCH
expected:"                  3 8        3 6        3 4       3 2  3"
     got:"     + "
MISMATCH
expected:"     + "
     got:"         ?"
MISMATCH
expected:"         ?"
     got:"          6"
MISMATCH
expected:"          2"
     got:"      *"
MISMATCH
expected:"      *"
     got:"           4a c - a b"
MISMATCH
expected:"           64a  c  - 48a b c  + 12a b c - a b"
     got:"             4     3 2"
MISMATCH
expected:"              10 3      9 2 2      8 4     7 6"
     got:"        /"
MISMATCH
expected:"        /"
     got:"             1008a b - 336a"
MISMATCH
expected:"             480b  - 192b"
     got:"                  2        3"
MISMATCH
expected:"                 9       7"
     got:"           + "
MISMATCH
expected:"           + "
     got:"             - 672b  + 2016a b  + (- 2016a  + 672)b  + (672a  - 1344a)b"
MISMATCH
expected:"             (- 432a b   + 2520a b  - 3840a b  + 1152a b )c + 36b   - 252b"
     got:"                   5          4           2        3        3          2"
MISMATCH
expected:"                      11          9          7          5        13       11"
     got:"           + "
MISMATCH
expected:"           + "
     got:"             (2688a b  - 8064a b  + (8064a  - 1344a)b - 2688a  + 1344a )c"
MISMATCH
expected:"             (1728a b  - 8064a b  + 9120a b  - 1920a b )c"
     got:"                     3        2 2         3                  4        2"
MISMATCH
expected:"                   2 9        2 7        2 5        2 3  2"
     got:"     + "
MISMATCH
expected:"           + "
     got:"         ?"
MISMATCH
expected:"             (- 2304a b  + 8064a b  - 5760a b  + 768a b)c"
     got:"          7"
MISMATCH
expected:"                     3 7        3 5        3 3       3   3"
     got:"      *"
MISMATCH
expected:"     + "
     got:"           4a c - a b"
MISMATCH
expected:"         ?"
     got:"             3     2 2"
MISMATCH
expected:"          3"
     got:"        /"
MISMATCH
expected:"      *"
     got:"             (- 144a  + 48)b  - 48a b + 24a"
MISMATCH
expected:"           64a c  - 48a b c  + 12a b c - a b"
     got:"                    2       2              2"
MISMATCH
expected:"              9 3      8 2 2      7 4     6 6"
     got:"           + "
MISMATCH
expected:"        /"
     got:"             (576a b  - 1152a b + 576a  - 96a)c - 144b  + 288a b"
MISMATCH
expected:"             - 480b  + 64b"
     got:"                    2        2        3               4         3"
MISMATCH
expected:"                   8      6"
     got:"     + "
MISMATCH
expected:"           + "
     got:"                a"
MISMATCH
expected:"             (1008a b   - 4200a b  + 3840a b  - 384a b )c - 84b   + 420b"
     got:"       ?  + --------- ?"
MISMATCH
expected:"                     10          8          6         4        12       10"
     got:"        9   18b - 18a  8"
MISMATCH
expected:"           + "
     got:"   WARNING (genufact): No known algorithm to factor"
MISMATCH
expected:"             (- 4032a b  + 13440a b  - 9120a b  + 640a b )c"
     got:"     , trying square-free."
MISMATCH
expected:"                     2 8         2 6        2 4       2 2  2"
     got:"         64a  c  - 48a  b c  + 12a  b c - a b"
MISMATCH
expected:"           + "
     got:"            12 3      11 2 2      10 4     9 6"
MISMATCH
expected:"             (5376a b  - 13440a b  + 5760a b  - 256a )c"
     got:"      /"
MISMATCH
expected:"                   3 6         3 4        3 2       3  3"
     got:"           - 64b"
MISMATCH
expected:"     + "
     got:"                9"
MISMATCH
expected:"         ?"
     got:"         + "
MISMATCH
expected:"          4"
     got:"           (- 12a b   + 120a b   - 384a b  + 384a b )c + b   - 12b   + 48b"
MISMATCH
expected:"      *"
     got:"                   13         11         9         7      15      13      11"
MISMATCH
expected:"           16a c  - 8a b c + a b"
     got:"         + "
MISMATCH
expected:"              7 2     6 2     5 4"
     got:"           (48a b   - 384a b  + 912a b  - 640a b  + 256a b )c"
MISMATCH
expected:"        /"
     got:"               2 11       2 9       2 7       2 5       2 3  2"
MISMATCH
expected:"             (1008a b  - 2520a b  + 960a b )c - 126b  + 420b  - 240b"
     got:"         + "
MISMATCH
expected:"                     7          5         3         9       7       5"
     got:"           (- 64a b  + 384a b  - 576a b  + 256a b )c"
MISMATCH
expected:"           + "
     got:"                 3 9       3 7       3 5       3 3  3"
MISMATCH
expected:"             (- 2016a b  + 3360a b  - 720a b)c"
     got:"     + "
MISMATCH
expected:"                     2 5        2 3       2   2"
     got:"         ?"
MISMATCH
expected:"     + "
     got:"      *"
MISMATCH
expected:"         ?"
     got:"           64a  c  - 48a  b c  + 12a b c - a b"
MISMATCH
expected:"          5"
     got:"              11 3      10 2 2      9 4     8 6"
MISMATCH
expected:"      *"
     got:"        /"
MISMATCH
expected:"           16a c  - 8a b c + a b"
     got:"             - 240b   + 192b"
MISMATCH
expected:"              6 2     5 2     4 4"
     got:"                   10       8"
MISMATCH
expected:"        /"
     got:"           + "
MISMATCH
expected:"             (- 1008a b  + 1512a b  - 192a b )c + 126b  - 252b  + 48b"
     got:"             (108a b   - 840a b   + 1920a b  - 1152a b )c - 9b   + 84b"
MISMATCH
expected:"                       6          4         2         8       6      4"
     got:"                    12         10          8          6       14      12"
MISMATCH
expected:"             (2016a b  - 2016a b  + 144a )c"
     got:"             (- 432a b   + 2688a b  - 4560a b  + 1920a b  - 256a b )c"
MISMATCH
expected:"                   2 4        2 2       2  2"
     got:"                    2 10        2 8        2 6        2 4       2 2  2"
MISMATCH
expected:"     + "
     got:"           + "
MISMATCH
expected:"                   4a c - a b"
     got:"             (576a b  - 2688a b  + 2880a b  - 768a b )c"
MISMATCH
expected:"                     4     3 2"
     got:"                  3 8        3 6        3 4       3 2  3"
MISMATCH
expected:"       ----------------------------------- ?"
     got:"     + "
MISMATCH
expected:"       (- 336a b  + 168a b)c + 84b  - 84b   6"
     got:"         ?"
MISMATCH
expected:"                3                 5      3"
     got:"          2"
MISMATCH
expected:"     + "
     got:"      *"
MISMATCH
expected:"                              4a c - a b"
     got:"           64a  c  - 48a b c  + 12a b c - a b"
MISMATCH
expected:"             a                  3     2 2"
     got:"              10 3      9 2 2      8 4     7 6"
MISMATCH
expected:"       ?  - -- ?  + ------------------------------ ?"
     got:"        /"
MISMATCH
expected:"        9   9b  8   (144a b  - 24a)c - 36b  + 12b   7"
     got:"             480b  - 192b"
MISMATCH
expected:"                           2              4      2"
     got:"                 9       7"
MISMATCH
expected:"   WARNING (genufact): No known algorithm to factor"
     got:"           + "
MISMATCH
expected:"                 4a c - a b                 4a c - a b"
     got:"             (- 432a b   + 2520a b  - 3840a b  + 1152a b )c + 36b   - 252b"
MISMATCH
expected:"                   3     2 2                  5     4 2"
     got:"                      11          9          7          5        13       11"
MISMATCH
expected:"     ?  + ------------------------- ?  + -----------------, trying square-free."
     got:"           + "
MISMATCH
expected:"      4   - 4a c + 2b  - 4a b + 4a   2   - b  + 4a b - 4a"
     got:"             (1728a b  - 8064a b  + 9120a b  - 1920a b )c"
MISMATCH
expected:"                     2            2         2            2"
     got:"                   2 9        2 7        2 5        2 3  2"
MISMATCH
expected:"   WARNING (genufact): No known algorithm to factor"
     got:"           + "
MISMATCH
expected:"           4a c - a b       4a c - a b"
     got:"             (- 2304a b  + 8064a b  - 5760a b  + 768a b)c"
MISMATCH
expected:"             3     2 2        5     4 2"
     got:"                     3 7        3 5        3 3       3   3"
MISMATCH
expected:"     ?  + ------------ ?  - -----------, trying square-free."
     got:"     + "
MISMATCH
expected:"      4   - 4a c + 2b   2        b"
     got:"         ?"
MISMATCH
expected:"                     2            2"
     got:"          3"
MISMATCH
expected:"   WARNING (genufact): No known algorithm to factor"
     got:"      *"
MISMATCH
expected:" "
     got:"           64a c  - 48a b c  + 12a b c - a b"
FAILED kamke3  85 of 139

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7040: warning: missing sentinel in function call}
\begin{verbatim}

edible.c: In function `main':
edible.c:226: warning: missing sentinel in function call

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7039: suggest explicit braces to avoid ambiguous}
\begin{verbatim}

/research2/test/int/hyper/spadint.c: In function `print_source_to_string1':
/research2/test/int/hyper/spadint.c:990: warning: suggest explicit braces to avoid ambiguous `else'

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7038: suggest explicit braces to avoid ambiguous}
\begin{verbatim}

/research2/test/int/hyper/spadint.c: In function `print_to_string1':
/research2/test/int/hyper/spadint.c:503: warning: suggest explicit braces to avoid ambiguous `else'
/research2/test/int/hyper/spadint.c:511: warning: suggest explicit braces to avoid ambiguous `else'

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7037: passing arg 2 makes pointer from integer}
\begin{verbatim}

/research2/test/int/hyper/parse-types.c: In function `parse_condnode':
/research2/test/int/hyper/parse-types.c:159: warning: passing argument 2 of `htperror' makes pointer from integer without a cast

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7036: dereferencing type-punned pointer will break rules}
\begin{verbatim}

/research2/test/int/hyper/event.c: In function `handle_event':
/research2/test/int/hyper/event.c:244: warning: dereferencing type-punned pointer will break strict-aliasing rules

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7035: defined but not used}
\begin{verbatim}

/research2/test/int/sman/sman.c:752: warning: `clean_up_terminal' defined but not used

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{bug 7034: session.c defined but not used}
\begin{verbatim}

/research2/test/int/sman/session.c:58: warning: `pr' defined but not used

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7033:
/research2/test/obj/fedora5/graph/gdraws/gfun.o: In function `PSInit':gfun.c:(.text+0x237f): warning: the use of `tmpnam' is dangerous, better use `mkstemp'
/research2/test/obj/fedora5/graph/gdraws/gfun.o: In function `PSGlobalInit':gfun.c:(.text+0xd21): warning: the use of `tempnam' is dangerous, better use `mkstemp'

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7032: 
/research2/test/src/graph/view3d/static.h:42: warning: `labels' defined but not used

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7031: 
/research2/test/int/graph/view3d/surface3d.c: In function `drawRenderedPolygon':
/research2/test/int/graph/view3d/surface3d.c:392: warning: `col_rgb.r' may be used uninitialized in this function
/research2/test/int/graph/view3d/surface3d.c:392: warning: `col_rgb.g' may be used uninitialized in this function
/research2/test/int/graph/view3d/surface3d.c:392: warning: `col_rgb.b' may be used uninitialized in this function

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7030:
/research2/test/int/graph/view3d/stuff3d.c: In function `norm_dist':
/research2/test/int/graph/view3d/stuff3d.c:126: warning: `pert.z' is used uninitialized in this function

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7029:
/research2/test/int/graph/view3d/process3d.c: In function `processEvents':
/research2/test/int/graph/view3d/process3d.c:855: warning: `linearMouseXY.x' may be used uninitialized in this function
/research2/test/int/graph/view3d/process3d.c:855: warning: `linearMouseXY.y' may be used uninitialized in this function
/research2/test/int/graph/view3d/process3d.c:855: warning: `mouseXY.x' may be used uninitialized in this function
/research2/test/int/graph/view3d/process3d.c:855: warning: `mouseXY.y' may be used uninitialized in this function

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7028:
/research2/test/int/graph/view3d/control3d.c: In function `getControlXY':
/research2/test/int/graph/view3d/control3d.c:798: warning: `cXY.putX' may be used uninitialized in this function
/research2/test/int/graph/view3d/control3d.c:798: warning: `cXY.putY' may be used uninitialized in this function

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7027:
/research2/test/obj/fedora5/graph/gdraws/gfun.o: In function `PSInit':gfun.c:(.text+0x237f): warning: the use of `tmpnam' is dangerous, better use `mkstemp'
/research2/test/obj/fedora5/graph/gdraws/gfun.o: In function `PSGlobalInit':gfun.c:(.text+0xd21): warning: the use of `tempnam' is dangerous, better use `mkstemp'

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7026:
/research2/test/int/graph/view2d/process2d.c: In function `processEvents':
/research2/test/int/graph/view2d/process2d.c:491: warning: `mouseXY.x' may be used uninitialized in this function
/research2/test/int/graph/view2d/process2d.c:491: warning: `mouseXY.y' may be used uninitialized in this function

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7025: 
/research2/test/int/graph/view2d/control2d.c: In function `getControlXY':
/research2/test/int/graph/view2d/control2d.c:367: warning: `cXY.putX' may be used uninitialized in this function
/research2/test/int/graph/view2d/control2d.c:367: warning: `cXY.putY' may be used uninitialized in this function

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7024: edible.c:226: warning: missing sentinel in function call

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7022: NewDistributedMultivariatePolynomial does not exist
Hyperdoc bug Topics>Polynomials>Specific Types>Polynomial
likely this is XDistributedPolynomial... change all refs in help 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7021: vertical bar is not implemented properly.

m1:=matrix [[1,2,1],[2,1,-2],[1,-2,4]]
eigenvalues(m1)
  should be
                 2
     [5,%DA | %DA  - %DA - 5]

  but instead prints as:
                 2
     [5,%DA ? %DA  - %DA - 5]
            ?

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7018: mathml does not render "failed" properly
limit(x*log(x),x=0)
  [leftHandLimit=~failed~,rightHandLimit=0]

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7017: time screws the regression tests
add )set mes time off 
to all regression tests

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7013: DirectProduct harms matrix multiply by constant
(9) -> k

        + 2   - 1   0 +
        |             |
   (9)  |- 1   2   - 1|
        |             |
        + 0   - 1   2 +
                                       Type: SquareMatrix(3,Fraction Integer)
(10) -> k*4

   (10)  [4,0,4]
                                      Type: DirectProduct(3,Fraction Integer)


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug 7012 (SF/1795259): Error printing lists
fixed in OpenAxiom by changing:
  aggcat.spad
  array1.spad
  list.spad
  tree.spad

)abbrev domain FOO foo

foo(): with
   makeFoo: () -> %
   coerce: % -> OutputForm
 == add 
   makeFoo() == "a foo" pretend %

   coerce x == (x pretend String)::OutputForm

)co foo.spad

                                                               Type: List foo
(7) -> makeFoo()

   (7)  "a foo"
                                                                    Type: foo
(8) -> [makeFoo()]

 LISP output:
(a foo)
                                                               Type: List foo
The reason is that the List functor is defined
to have a coercion to OutputForm only if its argument
is of tyep SetCategory. This is clearly wrong. There is
no reason to associate prettyprinting with SetCategory 
membership.

changing the signature line to read:
   foo(): SetCategory with
causes 
                                                               Type: List foo
(10) -> [makeFoo()]

   (10)  ["a foo"]
                                                               Type: List foo

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug7009 (SF/1790563): fatal error (fixed in openaxiom rev 135)
(1) -> Insn == Enumeration(New, Move, Line, Close)
                                                                   Type: Void
(2) -> Insn
   Compiling body of rule Insn to compute value of type Domain 

 
   >> System error:
   Caught fatal error [memory may be damaged]

in i-output.boot function outputDomainConstructor change
  if VECTORP form then form := devaluate form
  if VECTORP CAR form then form := devaluate form

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug7008: never completes
y:=operator 'y
ode360 := D(y(x),x)*cos(a*y(x))-b*(1-c*cos(a*y(x)))*_
           sqrt(cos(a*y(x))**2-(1-c*cos(a*y(x))))
solve(ode360,y,x)

IDEA: write a new axiom output for
        X+Y+Z
       where X=
       where Y=
       where Z=
and it linebreaks properly

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug7007: never completes
y:=operator 'y
ode184 := (a*x**2+b*x+c)**2*(D(y(x),x)+y(x)**2) + A
ode184a:=solve(ode184,y,x)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug7006: never completes
y:=operator 'y
ode182 := x*(x**3-1)*D(y(x),x) - 2*x*y(x)**2 + y(x) + x**2
ode182a:=solve(ode182,y,x)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug7005: infinite loop trying to factor
y:=operator 'y
ode162 := (x-a)*(x-b)*D(y(x),x) + y(x)**2 + k*(y(x)+x-a)*(y(x)+x-b)
ode162a:=solve(ode162,y,x)
 
   WARNING (genufact): No known algorithm to factor
      3     2       2          2
     ?  - 3?  + (- k  + 3)? + k  - 1, trying square-free.


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug7004: plugging the particular solution into the ODE using eval fails
         to take the derivative. And eval will not let you use y'(x)
y:=operator 'y
ode2 := D(y(x),x) + a*y(x) - c*exp(b*x)
ode2a:=solve(ode2,y,x)
mm:=ode2a.particular
eval(ode2,y(x)=mm)                        <= should be zero
D(mm,x)-c*exp(b*x)+a*mm

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug7003:
ode73 := D(y(x),x) - ((a3*x**3+a2*x**2+a1*x+a0)/_
                       (a3*y(x)**3+a2*y(x)**2+a1*y(x)+a0))**(2/3)
 

                 +----------------------------------+2
                 |         3       2
         ,       |     a3 x  + a2 x  + a1 x + a0
   (4)  y (x) -  |----------------------------------
                3|       3          2
                \|a3 y(x)  + a2 y(x)  + a1 y(x) + a0
                                                     Type: Expression Integer
solve(ode73,y,x)
 
 
   >> Error detected within library code:
   Table construction failed in MLIFT

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug7002: infinite loop
  ode59 := D(y(x),x) - a*sqrt(y(x)**2+1) - b
  solve(ode59,y,x)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug7001:
B0 n == matrix [[(if i=j+1 and odd? j then -1 else _
                   if i=j-1 and odd? i then 1 else 0) _
                     for j in 1..n] for i in 1..n]

PfChar(lambda, A) ==
    n := nrows A
    (n = 2) => lambda^2 + A.(1,2)
    M := subMatrix(A, 3, n, 3, n)
    r := subMatrix(A, 1, 1, 3, n)
    s := subMatrix(A, 3, n, 2, 2)

    p := PfChar(lambda, M)
    d := degree(p, lambda)

    B := B0(n-2)
    C := r*B
    g := [(C*s).(1,1), A.(1,2), 1]
    if d >= 4 then 
        B := M*B
        for i in 4..d by 2 repeat
            C := C*B
            g := cons((C*s).(1,1), g)
    g := reverse! g

    res := 0
    for i in 0..d by 2 for j in 2..d+2 repeat
        c := coefficient(p, lambda, i)
        for e in first(g, j) for k in 2..-d by -2 repeat
            res := res +  c * e * lambda^(k+i)

    res

pfaffian A == eval(PfChar(l, A), l=0)

makepfaff(seq,n) == 
  m:= matrix [[(if i<j then (seq.(j-i)) _
                 else if i>j then -(seq.(i-j))    
                  else 0) for j in 1..n] for i in 1..n]

seq:=[2 for i in 1..]
mp:=[makepfaff(seq,k) for k in 2..10 by 2]
[pfaffian mp.i for i in 1..5]

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}



question: can we represent portions of n-dimensional space in provisos?

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug7000:
 m0:=[[0,0],[0,0]]
 m1:Matrix(Integer):=[[0,3],[-3,0]]
 m2:Matrix(Integer):=[[0,5],[-5,0]]
 m3:Matrix(Integer):=[[0,7],[-7,0]]
 mn:Matrix(Integer):=[[m1,m0,m0],[m0,m2,m0],[m0,m0,m3]]

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug102:
solve(sinh(z)=cosh(z),z)
 
   >> Error detected within library code:
   No identity element for reduce of empty list using operation
   append

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


bug104:
solve(cos(z)/sin(z)=0,z)

   (2)  []
                                       Type: List Equation Expression Integer
should be %pi/2

(3) -> solve(cot(z)=0,z)

            %pi
   (3)  [z= ---]
             2
                                       Type: List Equation Expression Integer


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


why do these differ?
diff -Naur ./viewdef.spad.pamphlet /research/may07/build-improvements/src/algebra/viewdef.spad.pamphlet
diff -Naur ./view3d.spad.pamphlet /research/may07/build-improvements/src/algebra/view3d.spad.pamphlet
diff -Naur ./view2d.spad.pamphlet /research/may07/build-improvements/src/algebra/view2d.spad.pamphlet


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


--- src/algebra/intrf.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/intrf.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -478,7 +478,7 @@
                           else notelm := notelm + monomial(missing, n)
         p   := reductum p
       zero? notelm => [answr, coef0]
-      [answr, notelm + monomial(coef0, 0)]
+      [answr, notelm]
 
 -- f is either 0 or of the form p(t)/(1 + t**2)**n
 -- returns either


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


--- src/algebra/intfact.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/intfact.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -401,51 +401,27 @@
        r:I := 1
        q:I := 1
        G:I := 1
-       l:I
-       k:I
        until G > 1 repeat
           x := y
-          ys := y
           for i in 1..convert(r)@Integer repeat
              y := (y*y+5::I) rem n
              q := (q*abs(x-y)) rem n
-          k := 0::I
-          G := gcd(q,n)
+             k:I := 0
           until (k>=r) or (G>1) repeat
              ys := y
              for i in 1..convert(min(m,r-k))@Integer repeat
                 y := (y*y+5::I) rem n
-                q := (q*abs(x-y)) rem n
+                q := q*abs(x-y) rem n
              G := gcd(q,n)
              k := k+m
-          k := k + r
           r := 2*r
        if G=n then
-          l := k - m
-          G := 1::I
           until G>1 repeat
              ys := (ys*ys+5::I) rem n
              G := gcd(abs(x-ys),n)
-             l := l + 1
-          if G = n then
-             y := x0
-             x := x0
-             for i in 1..convert(l)@Integer repeat
-               y := (y*y+5::I) rem n
-             G := gcd(abs(x-y), n)
-             until G>1 repeat
-               y := (y*y+5::I) rem n
-               x := (x*x+5::I) rem n
-               G := gcd(abs(x-y), n)
        G=n => "failed"
        G
 
-    PollardSmallFactor20(n:I):Union(I,"failed") ==
-       for i in 1..20 repeat
-          r := PollardSmallFactor n
-          r case I => return r
-       r
-
     BasicSieve(r, lim) ==
        l:List(I) :=
           [1::I,2::I,2::I,4::I,2::I,4::I,2::I,4::I,6::I,2::I,6::I]
@@ -494,7 +470,7 @@
           (y:=perfectSqrt (x**2-n)) case I =>
                 insert_!(x+y,a,c)
                 insert_!(x-y,a,c)
-          (d := PollardSmallFactor20 n) case I =>
+          (d := PollardSmallFactor n) case I =>
              for m in 0.. while zero?(n rem d) repeat n := n quo d
              insert_!(d, a, m * c)
              if n > 1 then insert_!(n, a, c)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


--- src/algebra/gaussian.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/gaussian.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -367,18 +367,10 @@
            argument x == atan2loc(imag x, real x)
 
          else
-           if R has RadicalCategory then
-             argument x ==
-               n1 := sqrt(norm(x))
-               x1 := real(x) + n1
-               (2::R)*atan(imag(x) * recip(x1)::R)
-
-           else
-             -- Emulate sqrt using exp and log
-             argument x ==
-               n1 := exp(half*log(norm(x)))
-               x1 := real(x) + n1
-               (2::R)*atan(imag(x) * recip(x1)::R)
+           -- Not ordered so dictate two quadrants
+           argument x ==
+             zero? real x => pi()$R * half
+             atan(imag(x) * recip(real x)::R)
 
          pi()  == pi()$R :: %
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


--- src/algebra/free.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/free.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -531,21 +531,21 @@
       inmax l ==
         mx := first l
         for t in rest l repeat
-          if mx.gen < t.gen then mx := t
+          if t.gen > mx.gen then mx := t
         mx
 
-      -- lexicographic order
       a < b ==
         zero? a  =>
           zero? b => false
-          0 < (inmax terms b).exp
+          (inmax terms b).exp > 0
         ta := inmax terms a
         zero? b => ta.exp < 0
+        ta := inmax terms a
         tb := inmax terms b
-        ta.gen < tb.gen => 0 < tb.exp
-        tb.gen < ta.gen => ta.exp < 0
+        ta.gen < tb.gen => true
+        ta.gen > tb.gen => false
         ta.exp < tb.exp => true
-        tb.exp < ta.exp => false
+        ta.exp > tb.exp => false
         lc := ta.exp * ta.gen
         (a - lc) < (b - lc)
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


--- src/algebra/files.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/files.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -389,8 +389,10 @@
  
         defstream(fn: Name, mode: IOMode): FileState ==
             mode = "input"  =>
+              not readable? fn => error ["File is not readable", fn]
               RDEFINSTREAM(fn::String)$Lisp
             mode = "output" =>
+              not writable? fn => error ["File is not writable", fn]
               RDEFOUTSTREAM(fn::String)$Lisp
             error ["IO mode must be input or output", mode]
  
@@ -407,7 +409,9 @@
             mode = "either" =>
                 exists? fname =>
                     open(fname, "input")
-                reopen_!(open(fname, "output"), "input")
+                writable? fname =>
+                    reopen_!(open(fname, "output"), "input")
+                error "File does not exist and cannot be created"
             [fname, defstream(fname, mode), mode]
         reopen_!(f, mode) ==
             close_! f
@@ -502,10 +506,6 @@
              ++ \spad{lib.k := v} saves the value \spad{v} in the library
              ++ \spad{lib}.  It can later be extracted using the key \spad{k}.
 
-         close_!: % -> %
-          ++ close!(f) returns the library f closed to input and output.
-
-
     == KeyedAccessFile(Any) add
          Rep := KeyedAccessFile(Any)
          library f == open f

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


--- src/algebra/efstruc.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/efstruc.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -2,7 +2,7 @@
 \usepackage{axiom}
 \begin{document}
 \title{\$SPAD/src/algebra efstruc.spad}
-\author{Manuel Bronstein, Waldek Hebisch}
+\author{Manuel Bronstein}
 \maketitle
 \begin{abstract}
 \end{abstract}
@@ -101,9 +101,9 @@
 <<package EFSTRUC ElementaryFunctionStructurePackage>>=
 )abbrev package EFSTRUC ElementaryFunctionStructurePackage
 ++ Risch structure theorem
-++ Author: Manuel Bronstein, Waldek Hebisch
+++ Author: Manuel Bronstein
 ++ Date Created: 1987
-++ Date Last Updated: 9 October 2006
+++ Date Last Updated: 16 August 1995
 ++ Description:
 ++   ElementaryFunctionStructurePackage provides functions to test the
 ++   algebraic independence of various elementary functions, using the
@@ -346,102 +346,9 @@
           return false
       true

\end{verbatim}
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}

1) the patch correct problem in goodCoef, there are other bugs in
   integrator, I will work on them separately.
2) AFAICS goodCoef is an optimization, it should be safe to return
   "failed" always (but since we take different path in the other
   part we hit different bugs).  I tried to preserve optimization
   done by goodCoef whenever it is safe.
3) I would like to use higher level constructs, but I keept hitting
   into problems with SPAD compiler, so finally I used a rather low
   level way
4) without the patch the AXIOM recurses infinitely handling the 
   few integrals below (first I previosly gave in the bug report).
   With the patch the first two are correctly handled, the other
   two quickly hit into unimplemented part of Risch algorithm:

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}

integrate(
 simplify(
  D((log((x)+1)+a)
       / (2*((((x*(exp(exp(x)/2)))-(a*(x+exp(-x/2))))*(2/x))-3)),
    x)),
   x)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}

integrate(
 simplify(
  D(((((
    (sqrt((sqrt((x)/(x)))/(a)))
       / (sqrt(x)))
        * ((((x)-(1))*(1))-(1)))
         * (a))
      * (((log((x)
       * ((a)/(log(sqrt((x)/(((x)*(x))*(x))))))))
        + (((x)/(sqrt(2)))*(exp(exp(x)))))
         + ((x)-(exp(2)))))
     + ((1)*(2)), x)),
  x)

This fails with ``Function not supported by Risch d.e.''
\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}

integrate(
 simplify(
  D(((((((a)/(sqrt((sqrt(x))-(x))))+(x))*(x))+(1))
     * ((((((1)-(log(x)))+(1))*(exp(exp(2))))*(2))
      * (((1)*((log((a)*(1)))*(a)))
       * (exp(((exp(x))*(x))
        - (exp(x)))))))
   * (a), x)),
  x)

This fails with ``intef: failed1 - cannot handle that integrand''

\end{verbatim}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}

integrate(
 simplify(
  D((((((((x)+(log(x)))*(((x)/(x))/(sqrt(x))))
     / ((a)*(x)))
      - (sqrt(sqrt(((exp(x))/((x)-(sqrt(x))))-(log(x))))))
       - (x))
    - (((exp((sqrt(log(1)))*((x)*((x)/(log(x))))))
       / (exp((1)+((2)-((x)-(x))))))
      * (((((x)/(1))-(log(x)))*(1))+(((2)+(a))/(exp(sqrt(x)))))))
  / (2), x)), 
 x)


If k1 is part of k2 we should not express k1 in terms of k2
(othewise we would get infinite recursion).
Below we impose a stronger condition: we require
height(k1) to be maximal


<<package EFSTRUC ElementaryFunctionStructurePackage>>=
     goodCoef(v, l, s) ==
      h:NonNegativeInteger := 0
      j:Integer := 0
      ll : List K := [];
      for k in l repeat
        if (is?(k, "log"::SY) or is?(k, "exp"::SY)
            or is?(k, "tan"::SY) or is?(k, "atan"::SY)) then
              ll := [k, :ll]
              h := h + 1
      not (h = (maxIndex(v) - minIndex(v) + 1)) => "failed"
      h := 0
      ll := reverse(ll)
      for i in minIndex v .. maxIndex v for k in ll repeat
        h1 := height(k)
        if (h1 > h) then
          j := i
          h := h1
      for i in minIndex v .. maxIndex v for k in ll repeat
        is?(k, s) and (i >= j) and
      for i in minIndex v .. maxIndex v for k in l repeat
        is?(k, s) and
            ((r:=recip(qelt(v,i))) case Q) and
             (retractIfCan(r::Q)@Union(Z, "failed") case Z)
               and gdCoef?(qelt(v, i), v) => return([i, k])

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


--- src/algebra/draw.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/draw.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -318,10 +318,9 @@
     myTrap1: (SF-> SF, SF) -> SF
     myTrap1(ff:SF-> SF, f:SF):SF ==
       s := trapNumericErrors(ff(f))$Lisp :: Union(SF, "failed")
-      s case "failed" => 0
+      s case "failed" => _$NaNvalue$Lisp
       r:=s::SF
-      r >max()$SF => max()$SF
-      r < min()$SF => min()$SF
+      r >max()$SF or r < min()$SF => _$NaNvalue$Lisp
       r
 
     makePt2: (SF,SF) -> Point SF
@@ -494,10 +493,9 @@
     myTrap2: ((SF, SF) -> SF, SF, SF) -> SF
     myTrap2(ff:(SF, SF) -> SF, u:SF, v:SF):SF ==
       s := trapNumericErrors(ff(u, v))$Lisp :: Union(SF, "failed")
-      s case "failed" =>  0
+      s case "failed" =>  _$NaNvalue$Lisp
       r:SF := s::SF
-      r >max()$SF => max()$SF
-      r < min()$SF => min()$SF
+      r >max()$SF or r < min()$SF => _$NaNvalue$Lisp
       r
 
     recolor(ptFunc,colFunc) ==


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


--- src/algebra/plot3d.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/plot3d.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -192,11 +192,11 @@
  
     select(l,f,g) ==
       m := f first l
-      -- if (EQL(m, _$NaNvalue$Lisp)$Lisp) then m := 0
+      if (EQL(m, _$NaNvalue$Lisp)$Lisp) then m := 0
 --      for p in rest l repeat m := g(m,fp)
       for p in rest l repeat
         fp : F := f p
-        -- if (EQL(fp, _$NaNvalue$Lisp)$Lisp) then fp := 0
+        if (EQL(fp, _$NaNvalue$Lisp)$Lisp) then fp := 0
         m := g(m,fp)
       m
  
@@ -447,7 +447,7 @@
     myTrap(ff:F-> F, f:F):F ==
       s := trapNumericErrors(ff(f))$Lisp :: Union(F, "failed")
       if (s) case "failed" then
-        r:F := 0
+        r:F := _$NaNvalue$Lisp
       else
         r:F := s
       r

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


--- src/algebra/numtheor.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/numtheor.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -432,50 +432,18 @@
     for entry in factors factor n repeat
       r := ((entry.factor - 1) /$RN entry.factor) * r
     numer(n * r)
-@
 
-<<package INTHEORY IntegerNumberTheoryFunctions>>=
   divisors n ==
-    oldList : List Integer := [1]
+    oldList : List Integer := concat(1,nil())
     for f in factors factor n repeat
-      newList : List Integer := oldList
-      for k in 1..f.exponent repeat
+      newList : List Integer := nil()
+      for k in 0..f.exponent repeat
         pow := f.factor ** k
         for m in oldList repeat
-          newList := concat(pow * m, newList)
+          newList := concat(pow * m,newList)
       oldList := newList
+    sort(#1 < #2,newList)
 
-    sort(#1 < #2, oldList)
-@
-
-[[divisors]] generates the list of positive divisors of an integer. We proceed
-in an inductive manner: [[oldList]] contains the list of all possible divisors
-containing only the first few factors of [[n]]. We then prepend all possible
-divisors containing the new factor [[f]] by multiplying the [[oldList]] with
-all possible positive powers of [[f]].
-
-Up to [[patch--50]] the last line read
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}

-    sort(#1 < #2, newList)
-\end{verbatim}
-which fails when [[n]] equals $1$ or $-1$, since in this case %
-[[factors factor n]] returns the empty list, and thus the loop in which
-[[newlist]] is initialised is never entered. (issue 340)
-
-Furthermore, we took the opportunity to make the function slightly more
-efficient. Up to [[patch--50]], we had
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}

    ...
      newList : List Integer := []
      for k in 0..f.exponent repeat
        ...


Thus, the [[oldList]] was copied element by element every time a new factor was
added.  Since we \emph{prepend} the new elements of [[newList]], the two list
can safely share memory.

<<package INTHEORY IntegerNumberTheoryFunctions>>=
   numberOfDivisors n ==
     n = 0 => 0
     */[1+entry.exponent for entry in factors factor n]


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


--- src/algebra/newdata.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/newdata.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -10,21 +10,6 @@
 \tableofcontents
 \eject
 \subsection{package IPRNTPK InternalPrintPackage}
-Putting (or omitting) the final call to {\bf FORCE-OUPUT} in {\bf iprint}
-is controversial:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}

Waldek: iprint is used to print (regular) triangular sets.
  Unconditional flush defeats buffering optimizations, so IMHO
  it should be done only for some streams (for example streams
  connected to terminals).
  Flushing output should be done when the outupt is complete,
  while iprint clearly is used to compose bigger units from small parts.
Tim: unless the princ contains a newline there is no guarantee that
  the output will appear. if the output is intended to be a prompt,
  for instance, which does not contain a newline then the flush
  is needed to force the output to appear.
  Deleting the call to flush breaks the existing semantics of the package.

 <<package IPRNTPK InternalPrintPackage>>=
 )abbrev package IPRNTPK InternalPrintPackage
 ++ Author: Themos Tsikas
@@ -49,7 +34,7 @@
   Implementation == add
      iprint(s:String) == 
           PRINC(coerce(s)@Symbol)$Lisp
-          FORCE_-OUTPUT$Lisp
+          FLUSH()$Lisp
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


--- src/algebra/manip.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/manip.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -623,13 +623,10 @@
         -- like to combine it with a log term.
         terms :List F := [simplifyLog(term) for term in termList::List(F)]
         exprs :List F := []
-        nterms :List F := []
-        for term in terms repeat
-          if retractIfCan(term)@Union(FPR,"failed") case FPR then
-            exprs := cons(term, exprs)
-          else
-            nterms := cons(term, nterms)
-        terms := nterms
+        for i in 1..#terms repeat
+          if retractIfCan(terms.i)@Union(FPR,"failed") case FPR then
+            exprs := cons(terms.i,exprs)
+            terms := delete!(terms,i)
         if not empty? exprs then
           foundLog := false
           i : NonNegativeInteger := 0

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


--- src/algebra/plot.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/plot.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -477,10 +477,9 @@
     myTrap: (F-> F, F) -> F
     myTrap(ff:F-> F, f:F):F ==
       s := trapNumericErrors(ff(f))$Lisp :: Union(F, "failed")
-      s case "failed" => 0
+      s case "failed" => _$NaNvalue$Lisp
       r:F:=s::F
-      r > max()$F => max()$F
-      r < min()$F => min()$F
+      r > max()$F or r < min()$F => _$NaNvalue$Lisp
       r
 
     plot(f:F -> F,xRange:R) ==

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Files src/algebra/sttaylor.spad.pamphlet and /research/may07/build-improvements/src/algebra/sttaylor.spad.pamphlet differ
--- src/algebra/sttaylor.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/sttaylor.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -434,8 +434,6 @@
         (ord := (order exquo denom(rn))) case "failed" =>
           error "**: rational power does not exist"
         co := frst x
-        if ord > 0 and rn < 0 then
-           error "**: negative power does not exist" 
         (invCo := recip co) case "failed" =>
            error "** rational power of coefficient undefined"
 -- This error message is misleading, isn't it? see sups.spad/cRationalPower
@@ -450,7 +448,6 @@
 
           RATPOWERS => co**rn * YS(powerrn(rn,(invCo :: A) * x,#1))
           error "** rational power of coefficient undefined"
-        monom(1,(ord :: I) * numer(rn)) * power
 
     if A has Field then
       mapdiv(x,y) == delay

 \subsection{domain DFLOAT DoubleFloat}
 Greg Vanuxem has added some functionality to allow the user to modify
 the printed format of floating point numbers. The format of the numbers
@@ -422,7 +846,7 @@
          ++ (that is, \spad{|(r-f)/f| < b**(-n)}).
 
  == add
-   format: String := "~A"
+   format: String := "~G"
    MER ==> Record(MANTISSA:Integer,EXPONENT:Integer)
 
    manexp: % -> MER
@@ -481,17 +905,16 @@
      base() = 2 => precision()
      base() = 16 => 4*precision()
      wholePart(precision()*log2(base()::%))::PositiveInteger
-   max()            == MOST_-POSITIVE_-DOUBLE_-FLOAT$Lisp
-   min()            == MOST_-NEGATIVE_-DOUBLE_-FLOAT$Lisp
+   max()            == MOST_-POSITIVE_-LONG_-FLOAT$Lisp
+   min()            == MOST_-NEGATIVE_-LONG_-FLOAT$Lisp
    order(a) == precision() + exponent a - 1
-   0                == FLOAT(0$Lisp,MOST_-POSITIVE_-DOUBLE_-FLOAT$Lisp)$Lisp
-   1                == FLOAT(1$Lisp,MOST_-POSITIVE_-DOUBLE_-FLOAT$Lisp)$Lisp
+   0                == FLOAT(0$Lisp,MOST_-POSITIVE_-LONG_-FLOAT$Lisp)$Lisp
+   1                == FLOAT(1$Lisp,MOST_-POSITIVE_-LONG_-FLOAT$Lisp)$Lisp
    -- rational approximation to e accurate to 23 digits
-   exp1()           == FLOAT(534625820200,MOST_-POSITIVE_-DOUBLE_-FLOAT$Lisp)$Lisp / FLOAT(196677847971,MOST_-POSITIVE_-DOUBLE_-FLOAT$Lisp)$Lisp
+   exp1()           == FLOAT(534625820200,MOST_-POSITIVE_-LONG_-FLOAT$Lisp)$Lisp / FLOAT(196677847971,MOST_-POSITIVE_-LONG_-FLOAT$Lisp)$Lisp
    pi()             == PI$Lisp
    coerce(x:%):OutputForm == 
-     x >= 0 => message(FORMAT(NIL$Lisp,format,x)$Lisp pretend String)
-     - (message(FORMAT(NIL$Lisp,format,-x)$Lisp pretend String))
+     outputForm(FORMAT(NIL$Lisp,format,x)$Lisp pretend DoubleFloat)
    convert(x:%):InputForm == convert(x pretend DoubleFloat)$InputForm
    x < y            == (x<y)$Lisp
    - x              == (-x)$Lisp
@@ -507,7 +930,7 @@
    log10 x          == checkComplex log(x)$Lisp
    x:% ** i:Integer == EXPT(x,i)$Lisp
    x:% ** y:%       == checkComplex EXPT(x,y)$Lisp
-   coerce(i:Integer):% == FLOAT(i,MOST_-POSITIVE_-DOUBLE_-FLOAT$Lisp)$Lisp
+   coerce(i:Integer):% == FLOAT(i,MOST_-POSITIVE_-LONG_-FLOAT$Lisp)$Lisp
    exp x            == EXP(x)$Lisp
    log x            == checkComplex LN(x)$Lisp
    log2 x           == checkComplex LOG2(x)$Lisp
@@ -650,7 +1073,286 @@
       x ** (n::% / d::%)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


--- src/algebra/sets.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/sets.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -22,14 +22,14 @@
 ++ Keywords:
 ++ References:
 ++ Description:
-++ A set over a domain S models the usual mathematical notion of a finite set
-++ of elements from S.
+++ A set over a domain D models the usual mathematical notion of a finite set
+++ of elements from D.
 ++ Sets are unordered collections of distinct elements
 ++ (that is, order and duplication does not matter).
 ++ The notation \spad{set [a,b,c]} can be used to create
 ++ a set and the usual operations such as union and intersection are available
 ++ to form new sets.
-++ If S has OrderdSet, \Language{} maintains the entries in
+++ In our implementation, \Language{} maintains the entries in
 ++ sorted order.  Specifically, the parts function returns the entries
 ++ as a list in ascending order and
 ++ the extract operation returns the maximum entry.
@@ -59,6 +59,10 @@
 
    map(f, s) == map_!(f,copy s)
 
+   map_!(f,s) ==
+     map_!(f,s)$Rep
+     removeDuplicates_! s
+
    reduce(f, s) == reduce(f, s)$Rep
 
    reduce(f, s, x) == reduce(f, s, x)$Rep
@@ -75,11 +79,6 @@
      max s == inspect s
      min s == (empty? s => error "Empty set"; s(minIndex s))
 
-     map_!(f,s) ==
-        map_!(f,s)$Rep
-        sort_!(s)$Rep
-        removeDuplicates_! s
-
      construct l ==
        zero?(n := #l) => empty()
        a := new(n, first l)
@@ -188,10 +187,6 @@
           k := inc k
         s
 
-      map_!(f,s) ==
-        map_!(f,s)$Rep
-        removeDuplicates_! s
-

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


--- src/algebra/polycat.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/polycat.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -162,7 +162,7 @@
        x/r == map(#1/r,x)
     if R has IntegralDomain then
        x exquo r ==
-          zero? r => error "Division by 0"
+          -- probably not a very good definition in most special cases
           zero? x => 0
           ans:% :=0
           t:=leadingCoefficient x exquo r
@@ -568,10 +568,8 @@
         unit(s := squareFree p) * */[f.factor for f in factors s]
       content(p,v) == content univariate(p,v)
       primitivePart p ==
-        zero? p => p
         unitNormal((p exquo content p) ::%).canonical
       primitivePart(p,v) ==
-        zero? p => p
         unitNormal((p exquo content(p,v)) ::%).canonical
     if R has OrderedSet then
       p:% < q:% ==
@@ -608,7 +606,2117 @@
                     p)$PolynomialCategoryLifting(E,VarSet,R,%,InputForm)
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


--- src/algebra/combfunc.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/combfunc.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -1,5 +1,5 @@
 \documentclass{article}
-\usepackage{axiom, amsmath, amsfonts}
+\usepackage{axiom}
 \begin{document}
 \title{\$SPAD/src/algebra combfunc.spad}
 \author{Manuel Bronstein, Martin Rubey}
@@ -88,53 +88,6 @@
     binomial   : (F, F) -> F
       ++ binomial(n, r) returns the number of subsets of r objects
       ++ taken among n objects, i.e. n!/(r! * (n-r)!);
-@
-
-We currently simplify binomial coefficients only for non-negative integral
-second argument, using the formula
-$$ \binom{n}{k}=\frac{1}{k!}\prod_{i=0..k-1} (n-i),$$
-except if the second argument is symbolic: in this case [[binomial(n,n)]] is
-simplified to one.
- 
-Note that there are at least two different ways to define binomial coefficients
-for negative integral second argument. One way, particular suitable for
-combinatorics, is to set the binomial coefficient equal to zero for negative
-second argument. This is, partially, also the approach taken in
-[[combinat.spad]], where we find
-
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}

   binomial(n, m) ==
      n < 0 or m < 0 or m > n => 0
      m = 0 => 1


Of course, here [[n]] and [[m]] are integers. This definition agrees with the
recurrence

$$\binom{n}{k}+\binom{n}{k+1}=\binom{n+1}{k+1}.$$

Alternatively, one can use the formula
$$ \binom{n}{k}=\frac{\Gamma(n+1)}{\Gamma(k+1)\Gamma(n-k+1)}, $$
and leave the case where $k\in\mathbb Z$, $n\in\mathbb Z$ and $k \leq n < 0$
undefined, since the limit does not exist in this case:

Since we then have that $n-k+1\geq 1$, $\Gamma(n-k+1)$ is finite. So it is
sufficient to consider $\frac{\Gamma(n+1)}{\Gamma(k+1)}$. On the one hand, we
have
$$\lim_{n_0\to n} \lim_{k_0\to k}\frac{\Gamma(n_0+1)}{\Gamma(k_0+1)} = 0,$$
since for any non-integral $n_0$, $\Gamma(n_0+1)$ is finite. On the other
hand,
$$\lim_{k_0\to k} \lim_{n_0\to n}\frac{\Gamma(n_0+1)}{\Gamma(k_0+1)}$$
does not exist, since for non-integral $k_0$, $\Gamma(k_0+1)$ is finite while
$\Gamma(n_0+1)$ is unbounded.

However, since for $k\in\mathbb Z$, $n\in\mathbb Z$ and $0 < k < n$ both
definitions agree, one could also combine them. This is what, for example,
Mathematica does. It seems that MuPAD sets [[binomial(n,n)=1]] for all
arguments [[n]], and returns [[binomial(-2, n)]] unevaluated. Provisos may help
here.

<<package COMBF CombinatorialFunction>>=
     permutation: (F, F) -> F
       ++ permutation(n, r) returns the number of permutations of
       ++ n objects taken r at a time, i.e. n!/(n-r)!;
@@ -569,33 +522,17 @@
 
       if R has RetractableTo(Z) and F has Algebra(Fraction(Z)) then
          iibinom l ==
-           (s:=retractIfCan(second l)@Union(R,"failed")) case R and
-              (t:=retractIfCan(s)@Union(Z,"failed")) case Z and t>0 =>
-                ans:=1::F
-                for i in 0..t-1 repeat
-                    ans:=ans*(first l - i::R::F)
-                (1/factorial t) * ans
            (s:=retractIfCan(first l-second l)@Union(R,"failed")) case R and
-             (t:=retractIfCan(s)@Union(Z,"failed")) case Z and t>0 =>
-                ans:=1::F
-                for i in 1..t repeat
-                    ans:=ans*(second l+i::R::F)
-                (1/factorial t) * ans
+             (t:=retractIfCan(s)@Union(Z,"failed")) case Z and s>0=>
+              ans:=1::F
+              for i in 1..t repeat
+                  ans:=ans*(second l+i::R::F)
+              (1/factorial t) * ans
            (r1 := retractIfCan(first l)@Union(R,"failed")) case "failed" or
              (r2 := retractIfCan(second l)@Union(R,"failed")) case "failed"
                => ibinom l
            binomial(r1::R, r2::R)::F
 
-@
-
-[[iibinom]] checks those cases in which the binomial coefficient may be
-evaluated explicitly. Note that up to [[patch--51]], the case where the second
-argument is a positive integer was not checked.(Issue~\#336) Currently, the
-naive iterative algorithm is used to calculate the coefficient, there is room
-for improvement here.
-
-<<package COMBF CombinatorialFunction>>=
-
       else
          iibinom l ==
            (r1 := retractIfCan(first l)@Union(R,"failed")) case "failed" or


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


maybe this fixes bug 100?
--- ./defintrf.spad.pamphlet	2007-04-27 21:29:46.000000000 -0400
+++ /research/may07/build-improvements/src/algebra/defintrf.spad.pamphlet	2007-04-27 21:34:07.000000000 -0400
@@ -182,10 +182,7 @@
           ["min"/[t.left for t in l], i.halfinf.endpoint]
         l := [u::REC for t in l | (u := refine(p, t, bounds)) case REC]
         incl? => l
-        -- greg, FIXME dirty workaround
-        -- select_!(keeprec?(i.halfinf.endpoint, #1), l)
-        ep := i.halfinf.endpoint
-        select_!(keeprec?(ep, #1), l)
+        select_!(keeprec?(i.halfinf.endpoint, #1), l)
       error "findRealZero: should not happpen"
 
     checkBudan(p, a, b, incl?) ==

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Find who fixes bug 100 in wh-sandbox

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Remove any bootstrap code that is not actually needed

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


fix src/algebra/exprode.spad.pamphlet

    diffRhsK(k, g) ==
      h := univariate(g, k)
      (degree(numer h) <= 1) and ground? denom h =>
        zero? coefficient(numer h, 1) => 
            error "EXPRODE:diffRhsK:Division by zero"
        - coefficient(numer h, 0) / coefficient(numer h, 1)
      error "Improper differential equation"

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


rewrite trig functions using a simplest notion supplied by user "fructer"

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


fix file write bug regression result 0 of 0

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


change )help to 
  (0) handle abbrev and synonym
  (1) show all topics
  (2) use min prefix
  (3) be case sensitive Eg library vs Library
  (4) )help name )function to show the docs on a function
  (5) )view file should fire up a dvi reader on the appropriate dvi file
  (6) create help files on the fly from axiom commands so help
      expands as the user works
  (8) )drag should auto-create help for newly drag-and-dropped files
  (9) )document should update help
 (10) )weave should update help
 (11) )lib should update help
 (12) )co  should update help

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


make sure that savesystem works

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


develop a "where" syntax, eg. a_b where a=2 and b=3

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


get configure from oaxiom, run on mac and windows

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


document ThreeDimensionalViewport, e.g. to generate pixmaps:
port:=draw(5*besselJ(0,sqrt(x^2+y^2)),x=-20..20,y=-20..20)
drawStyle(port,"shade")
outlineRender(port,"on")
write(port,"temp",["pixmap"])
write(port,"temp1",["postscript"])


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


document how to document algebra with input files

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


apply fracas patch 32

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(\end occurred inside a group at level 1)

### simple group (level 1) entered at line 17255 ({)
### bottom level
(see the transcript file for additional information)
Output written on book.dvi (1134 pages, 2650492 bytes).

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


)spool intlf.output
this file should be in REGRESS, not OUTS

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


special note: 
   compiling exported coerce : String -> $
      FNAME;coerce;S$;4 is replaced by PARSE-NAMESTRING 


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


remove member function from boot:
 Files /research/may07/wh-sandbox/src/boot/typrops.boot.pamphlet and silver/src/boot/typrops.boot.pamphlet differ

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


package handling:
 Files /research/may07/wh-sandbox/src/boot/ptyout.boot.pamphlet and silver/src/boot/ptyout.boot.pamphlet differ
 Files /research/may07/wh-sandbox/src/boot/typars.boot.pamphlet and silver/src/boot/typars.boot.pamphlet differ

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


no idea:
 Files /research/may07/wh-sandbox/src/boot/tytree1.boot.pamphlet and silver/src/boot/tytree1.boot.pamphlet differ
 Files /research/may07/wh-sandbox/src/boot/btscan2.boot.pamphlet and silver/src/boot/btscan2.boot.pamphlet differ
 Files /research/may07/wh-sandbox/src/boot/btpile2.boot.pamphlet and silver/src/boot/btpile2.boot.pamphlet differ

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


call graph documentation
 Files /research/may07/wh-sandbox/src/boot/btincl2.boot.pamphlet and silver/src/boot/btincl2.boot.pamphlet differ

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


fix htsearch
 Files /research/may07/wh-sandbox/src/hyper/pages/man0.ht and silver/src/hyper/pages/man0.ht differ

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


no idea
 Files /research/may07/wh-sandbox/src/hyper/pages/MSET.ht and silver/src/hyper/pages/MSET.ht differ

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


dead file?
 Only in silver/src/interp: nag-e02b.boot.pamphlet
 Only in silver/src/interp: postprop.lisp.pamphlet

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


missing $ERASE function?

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


call to (OBEY "ERASE ... is nonsense

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


document PLEQN

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


gclweb latex rewrite
 needs chunk environment
 needs standalone pass

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


find/fix factor bug
  factor 3474749660383 = 1303 * 2666730361 = 1303 * 16927 * 157543

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


rewrite graphics
  into single file
  into lisp

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


rewrite hyperdoc
  into single file
  into lisp

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


split out X11 functionality 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


clean up latex files

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


check libs
 src/algebra/Makefile libcheck

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


interp.exposed seems to have disappeared.
 src/interp/exposed.lsp is involved.
 )lisp (libcheck "absolute path to algebra")
 the interp.exposed file is missing from int/algebra
 also fix bookvol4 documentation for this

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


gclweb weave
  \spadcommand{a+b=c} -> (spadcommand ("a+b=c")

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


run ./configure everywhere, make new Makefile stanzas

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


radix(36,37) fails

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Jon Claerbout (Stanford University) as quoted in
Buckheit, Jonathan B., Donoho, David L. "WaveLab and Reproducible Research"
http://www.stat.stanford.edu/~donoho/Reports/1995/wavelab.pdf
"An article about computational science in a scientific publication is not the
scholarship itself, it is merely advertising of the scholarship. The actual
scholarship is the complete software development environment and the complete
set of instructions which generated the figures."


\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   initializing nrlib RPOLCAT- for RecursivePolynomialCategory& 
Warning: RPOLCAT-;exactQuo has a duplicate definition in this file
Warning: RPOLCAT-;ZToR has a duplicate definition in this file
Warning: RPOLCAT-;PZToPR has a duplicate definition in this file

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling POLYCAT-.lsp.
Warning: PSETCAT-;exactQuo has a duplicate definition in this file

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


add Stephen's patch:
 width-fix.patch

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Merge Martin's Algebra:
 find Martins algebra examples on the wiki

 SUPEXPR FAMR2 NEWTON UPFS GOPT GUESSF1 UTSSOL FFFG UFPS1 GOPTO EXPRSOL
 FFFGF RECOP GUESS GUESSINT GUESSP GUESSF

 fffg ssolve recop mantepse

 arxiv.org/MartinAlgebra.pdf

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


asq and databases:
 modify asq to add -csvdump switch which outputs the databases as
 comma separated values

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


in src/interp/bootlex.lisp the |$PrettyPrint| variable seems to allow
defuns to be prettyprinted.

(defun print-defun (name body)
   (let* ((sp (assoc 'vmlisp::compiler-output-stream vmlisp::optionlist))
	  (st (if sp (cdr sp) *standard-output*)))
     (if (and (is-console st) (symbolp name) (fboundp name)
	      (not (compiled-function-p (symbol-function name))))
	 (compile name))
     (when (or |$PrettyPrint| (not (is-console st)))
	   (print-full body st) (force-output st))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


unused functions in metalex?
-; (trace skip-blanks)
-; (trace get-special-token)
-; (trace token-lookahead-type)
-; (trace make-adjustable-string)
-; (trace print-package)
-; (trace get-number-token)
-
-(trace next-META-line)
-(trace kill-comments)
-(trace kill-trailing-blanks)
-(trace get-META-token)
-(trace get-identifier-token)
-(trace get-string-token)
-(trace get-bstring-token)
-(trace make-defun)
-(trace print-fluids)
-(trace set-prefix)
-(trace print-rule)
-(trace meta-meta-error-handler)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


4 arguments instead of 3 in build algebra 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


duplicate definition in file
 PSETCAT-;exactQuo 
 REGSET;decompose
 PFO;cmult
 RPOLCAT-;exactQuo
 RPOLCAT-;ZToR
 RPOLCAT-;PZToPR

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


unify
 make tangle accept both syntaxes

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


sbcl
 port

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


STRING
.. String of cat 
(|StringCategory|)    has no  hash : % -> Integer 
   finalizing nrlib STRING 
   Processing String for Browser database:
--->/research2/test0819/mnt/fedora5/../../src/algebra/STRING.spad-->String(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling npextras.lisp.
; (DEFUN COMPILER::CMPNOTE ...) is being compiled.
;; Warning: The variable X is not used.
; (IN-PACKAGE 'BOOTTRAN ...) is being compiled.
;; Warning: The package operation (IN-PACKAGE 'BOOTTRAN :USE
                                      '("LISP" "SYSTEM")) was in a bad place.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/obj/fedora5/interp/parsing.lsp.
; (DEFUN ESCAPE-KEYWORDS ...) is being compiled.
;; The variable KEYWORDS is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN /EMBED-Q ...) is being compiled.
;; The variable /EMBEDNAMES is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN IOCLEAR ...) is being compiled.
;; Warning: The variable IN is not used.
;; Warning: The variable OUT is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/obj/fedora5/interp/clam.lsp.
; (DEFUN |consForHashLookup| ...) is being compiled.
;; The variable |$hashNode| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |mkCircularCountAlist| ...) is being compiled.
;; The variable |$reportFavoritesIfNumber| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |remHashEntriesWith0Count,fn| ...) is being compiled.
;; The variable |$hashTable| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |remHashEntriesWith0Count| ...) is being compiled.
;; The variable |remHashEntriesWith0Count,fn| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |initCache| ...) is being compiled.
;; The variable |$failed| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |addToSlam| ...) is being compiled.
;; The variable |$mutableDomain| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |recordInstantiation1| ...) is being compiled.
;; The variable |$insideCoerceInteractive| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$instantCoerceCount| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$insideCanCoerceFrom| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$instantCanCoerceCount| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$insideEvalMmCondIfTrue| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$instantMmCondCount| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |listTruncate| ...) is being compiled.
;; The variable |$op| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/obj/fedora5/interp/slam.lsp.
; (DEFUN |reportFunctionCompilation| ...) is being compiled.
;; The variable |$compiledOpNameList| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$minivectorNames| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$compilingInputFile| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$minivectorCode| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$minivector| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$compileRecurrence| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |mkCircularAlist| ...) is being compiled.
;; The variable |$failed| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |compileRecurrenceRelation| ...) is being compiled.
;; The variable |$TriangleVariableList| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |junk| is not used.
; (DEFUN |clearAllSlams,fn| ...) is being compiled.
;; The variable |$functorDependencyAlist| is undefined.
;; The compiler will assume this variable is a global.
; (DEFMACRO |clearSlam| ...) is being compiled.
;; Warning: The variable #:G2668 is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/obj/fedora5/interp/g-boot.lsp.
; (DEFUN |bootAbsorbSEQsAndPROGNs,flatten| ...) is being compiled.
;; The variable |$labelsForGO| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |defLetForm| ...) is being compiled.
;; The variable $LET is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |defLET1| ...) is being compiled.
;; The variable |$letGenVarCounter| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |defLET2| ...) is being compiled.
;; The variable |$inDefIS| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |defIS1| ...) is being compiled.
;; The variable |$inDefLET| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$isGenVarCounter| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/obj/fedora5/interp/c-util.lsp.
; (DEFUN |continue| ...) is being compiled.
;; The variable |$x| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$m| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$f| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |level| ...) is being compiled.
;; The variable |$level| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |displayComp| ...) is being compiled.
;; The variable |$bright| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$dim| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$op| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$s| is undefined.
;; The compiler will assume this variable is a global.
;; The variable $X is undefined.
;; The compiler will assume this variable is a global.
;; The variable $M is undefined.
;; The compiler will assume this variable is a global.
;; The variable $F is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |intersectionContour,modeCompare| ...) is being compiled.
;; The variable |$var| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |isAlmostSimple,setAssignment| ...) is being compiled.
;; The variable |$assignmentList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |stackSemanticError| ...) is being compiled.
;; The variable |$initCapsuleErrorCount| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |stackMessage| ...) is being compiled.
;; The variable |$compErrorMessageStack| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |?modemaps| ...) is being compiled.
;; The variable |$CapsuleModemapFrame| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |traverse,traverseInner| ...) is being compiled.
;; The variable |$seen| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$notseen| is undefined.
;; The compiler will assume this variable is a global.
;; The variable SET-PA-SPEC is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/obj/fedora5/interp/g-util.lsp.
; (DEFUN |reshape| ...) is being compiled.
;; Warning: The variable |b| is not used.
; (DEFUN |update| ...) is being compiled.
;; The variable /VERSION is undefined.
;; The compiler will assume this variable is a global.
;; The variable /WSNAME is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |spadThrow| ...) is being compiled.
;; The variable |$interpOnly| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$mapName| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |semchkProplist| ...) is being compiled.
;; Warning: The variable |val| is not used.
; (DEFUN |leftTrim| ...) is being compiled.
;; The variable |$blank| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/vmlisp.lisp.
; (DEFUN UNEMBED ...) is being compiled.
;; Warning: The variable #:G163615 is not used.
;; Warning: The variable #:G163896 is not used.
; (IN-PACKAGE 'BOOT) is being compiled.
;; Warning: The package operation (IN-PACKAGE 'BOOT) was in a bad place.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/buildom.clisp.
; (DEFUN |MappingEqual| ...) is being compiled.
;; Warning: The variable |dom| is not used.
; (DEFUN |MappingPrint| ...) is being compiled.
;; Warning: The variable |dom| is not used.
; (DEFUN |coerceMap2E| ...) is being compiled.
;; The variable |$testingSystem| is undefined.
;; The compiler will assume this variable is a global.
; (DEFMACRO |Enumeration| ...) is being compiled.
;; Warning: The variable #:G154733 is not used.
; (DEFUN |EnumEqual| ...) is being compiled.
;; Warning: The variable |dom| is not used.
; (DEFMACRO |RecordCategory| ...) is being compiled.
;; Warning: The variable #:G154763 is not used.
; (DEFMACRO |EnumerationCategory| ...) is being compiled.
;; Warning: The variable #:G154770 is not used.
; (DEFMACRO |UnionCategory| ...) is being compiled.
;; Warning: The variable #:G154777 is not used.
; (DEFUN |mkMappingFunList| ...) is being compiled.
;; Warning: The variable |mapForm| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/cattable.clisp.
; (DEFUN |showCategoryTable| ...) is being compiled.
;; The variable *HASCATEGORY-HASH* is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |displayCategoryTable| ...) is being compiled.
;; The variable |$ct| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |genCategoryTable| ...) is being compiled.
;; The variable *ANCESTORS-HASH* is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$nonLisplibDomains| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$noCategoryDomains| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |simpHasPred,simp| ...) is being compiled.
;; The variable |$hasArgs| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |simpHasAttribute| ...) is being compiled.
;; The variable |$domain| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$predvec| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |moreGeneralCategoryPredicate| ...) is being compiled.
;; Warning: The variable |id| is not used.
; (DEFUN |catPairUnion| ...) is being compiled.
;; Warning: The variable |op| is not used.
;; Warning: The variable |cat| is not used.
; (DEFUN |categoryParts,exportsOf| ...) is being compiled.
;; The variable |$conslist| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |categoryParts,build| ...) is being compiled.
;; The variable |$oplist| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$attrlist| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |categoryParts| ...) is being compiled.
;; The variable |$TriangleVariableList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |compressSexpr| ...) is being compiled.
;; The variable |$found| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |updateCategoryTable| ...) is being compiled.
;; The variable |$newcompMode| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTflag| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |updateCategoryTableForDomain| ...) is being compiled.
;; The variable |$doNotCompressHashTableIfTrue| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |clearCategoryTable1| ...) is being compiled.
;; The variable |$cname| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |val| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/clammed.clisp.
; (DEFUN |canCoerceFrom| ...) is being compiled.
;; The variable |canCoerceFrom;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |canCoerce| ...) is being compiled.
;; The variable |canCoerce;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |coerceConvertMmSelection| ...) is being compiled.
;; The variable |coerceConvertMmSelection;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |hasFileProperty| ...) is being compiled.
;; The variable |hasFileProperty;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |isValidType| ...) is being compiled.
;; The variable |isValidType;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |isValidType;| ...) is being compiled.
;; The variable |$QuotientField| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |selectMms1| ...) is being compiled.
;; The variable |selectMms1;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |resolveTT| ...) is being compiled.
;; The variable |resolveTT;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |isLegitimateMode| ...) is being compiled.
;; The variable |isLegitimateMode;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |underDomainOf| ...) is being compiled.
;; The variable |underDomainOf;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/compress.clisp.
; (DEFUN |minimalise,HashCheck| ...) is being compiled.
;; The variable |$hash| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/format.clisp.
; (DEFUN |formatOperation| ...) is being compiled.
;; The variable |Undef| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$commentedOps| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |constructorName| ...) is being compiled.
;; The variable |$abbreviateTypes| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |formWrapId| ...) is being compiled.
;; The variable |$formatSigAsTeX| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |formArguments2String,fn| ...) is being compiled.
;; The variable |$OutputForm| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |formDecl2String| ...) is being compiled.
;; The variable |$permitWhere| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |formJoin1| ...) is being compiled.
;; The variable |$abbreviateJoin| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$declVar| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |tuple2String| ...) is being compiled.
;; Warning: The variable |x| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/g-boot.clisp.
; (DEFUN |bootAbsorbSEQsAndPROGNs,flatten| ...) is being compiled.
;; The variable |$labelsForGO| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |defLetForm| ...) is being compiled.
;; The variable $LET is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |defLET1| ...) is being compiled.
;; The variable |$letGenVarCounter| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |defLET2| ...) is being compiled.
;; The variable |$inDefIS| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |defIS1| ...) is being compiled.
;; The variable |$inDefLET| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$isGenVarCounter| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/g-cndata.clisp.
; (DEFUN |mkLowerCaseConTable| ...) is being compiled.
;; The variable |$lowerCaseConTb| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |attribute?| ...) is being compiled.
;; The variable *ATTRIBUTES* is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |installConstructor| ...) is being compiled.
;; Warning: The variable |type| is not used.
; (DEFUN |constructorAbbreviationErrorCheck| ...) is being compiled.
;; Warning: The variable |errmess| is not used.
; (DEFUN |abbreviationError| ...) is being compiled.
;; Warning: The variable |abb| is not used.
; (DEFUN |condAbbrev| ...) is being compiled.
;; Warning: The variable |arg| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/g-error.clisp.
; (DEFUN |argumentDataError| ...) is being compiled.
;; The variable |$AlgebraError| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |errorSupervisor1| ...) is being compiled.
;; The variable |$SystemError| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$UserError| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |returnToTopLevel| ...) is being compiled.
;; The variable CHR is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |returnToReader| ...) is being compiled.
;; The variable |$ReadingFile| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |sayErrorly1| ...) is being compiled.
;; The variable |$testingSystem| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$testingErrorPrefix| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |throwMessage| ...) is being compiled.
;; The variable |$mapName| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$printMsgsToFile| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/g-timer.clisp.
; (DEFUN |peekTimedName| ...) is being compiled.
;; The variable |$timedNameStack| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |makeLongTimeString| ...) is being compiled.
;; The variable |$printTimeIfTrue| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |makeLongSpaceString| ...) is being compiled.
;; The variable |$printStorageIfTrue| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |computeElapsedTime| ...) is being compiled.
;; The variable |$oldElapsedGCTime| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$oldElapsedTime| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |computeElapsedSpace| ...) is being compiled.
;; The variable |$oldElapsedSpace| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |timedOptimization| ...) is being compiled.
;; The variable |$reportOptimization| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/g-util.clisp.
; (DEFUN |reshape| ...) is being compiled.
;; Warning: The variable |b| is not used.
; (DEFUN |update| ...) is being compiled.
;; The variable /VERSION is undefined.
;; The compiler will assume this variable is a global.
;; The variable /WSNAME is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |spadThrow| ...) is being compiled.
;; The variable |$interpOnly| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$mapName| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |semchkProplist| ...) is being compiled.
;; Warning: The variable |val| is not used.
; (DEFUN |leftTrim| ...) is being compiled.
;; The variable |$blank| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |isDomain| ...) is being compiled.
;; The variable |$domainTypeTokens| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/i-analy.clisp.
; (DEFUN |getBasicMode| ...) is being compiled.
;; The variable |$useIntegerSubdomain| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |getBasicMode0| ...) is being compiled.
;; The variable |$DoubleFloat| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |getMinimalVariableTower| ...) is being compiled.
;; The variable |$univariateDomains| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$multivariateDomains| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |polyVarlist| ...) is being compiled.
;; The variable |$QuotientField| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |pushDownTargetInfo| ...) is being compiled.
;; The variable |$OutputForm| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$Any| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$immediateDataSymbol| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |bottomUp| ...) is being compiled.
;; The variable |$localVars| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |bottomUpDefaultCompile| ...) is being compiled.
;; Warning: The variable |isSub| is not used.
; (DEFUN |interpRewriteRule| ...) is being compiled.
;; Warning: The variable |expr| is not used.
; (DEFUN |bottomUpForm| ...) is being compiled.
;; The variable |$inRetract| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |bottomUpFormTuple| ...) is being compiled.
;; Warning: The variable |t| is not used.
;; Warning: The variable |argModeSetList| is not used.
; (DEFUN |printableArgModeSetList| ...) is being compiled.
;; The variable |$origArgModeSetList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |bottomUpForm0| ...) is being compiled.
;; The variable |$HTCompanionWindowID| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/i-code.clisp.
; (DEFUN |intCodeGenCOERCE| ...) is being compiled.
;; The variable |$mapName| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$OutputForm| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |wrapMapBodyWithCatch| ...) is being compiled.
;; The variable |$mapThrowCount| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/i-coerce.clisp.
; (DEFUN |retract1| ...) is being compiled.
;; The variable |$SingleInteger| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |retract2Specialization| ...) is being compiled.
;; The variable |$Any| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$QuotientField| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |coerceRetract| ...) is being compiled.
;; The variable |$OutputForm| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$coerceFailure| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |canCoerceTopMatching| ...) is being compiled.
;; The variable |$univariateDomains| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$multivariateDomains| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |canCoerceLocal| ...) is being compiled.
;; The variable |$CoerceTable| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |canCoerceCommute| ...) is being compiled.
;; The variable |$CommuteTable| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |canConvertByFunction| ...) is being compiled.
;; The variable |$useConvertForCoercions| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |coerceInteractive| ...) is being compiled.
;; The variable |$mapName| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |coerceInt1| ...) is being compiled.
;; The variable |$AnonymousFunction| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |getSubDomainPredicate| ...) is being compiled.
;; The variable |$superHash| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/i-coerfn.clisp.
; (DEFUN |Expr2Complex| ...) is being compiled.
;; The variable |$DoubleFloat| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN I2EI ...) is being compiled.
;; Warning: The variable |source| is not used.
;; Warning: The variable |target| is not used.
; (DEFUN I2OI ...) is being compiled.
;; Warning: The variable |source| is not used.
;; Warning: The variable |target| is not used.
; (DEFUN I2PI ...) is being compiled.
;; Warning: The variable |source| is not used.
;; Warning: The variable |target| is not used.
; (DEFUN I2NNI ...) is being compiled.
;; Warning: The variable |source| is not used.
;; Warning: The variable |target| is not used.
; (DEFUN OV2SE ...) is being compiled.
;; Warning: The variable |target| is not used.
; (DEFUN |OV2Sy| ...) is being compiled.
;; Warning: The variable |target| is not used.
; (DEFUN |Rn2F| ...) is being compiled.
;; Warning: The variable |source| is not used.
;; Warning: The variable |target| is not used.
; (DEFUN |Qf2domain| ...) is being compiled.
;; The variable |$QuotientField| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |Sy2OV| ...) is being compiled.
;; Warning: The variable |source| is not used.
; (DEFUN |Sy2Var| ...) is being compiled.
;; Warning: The variable |source| is not used.
; (DEFUN |commuteComplex| ...) is being compiled.
;; Warning: The variable |source| is not used.
; (DEFUN |commuteQuaternion| ...) is being compiled.
;; Warning: The variable |source| is not used.
; (DEFUN |commuteFraction| ...) is being compiled.
;; Warning: The variable |source| is not used.
; (DEFUN |commuteSparseUnivariatePolynomial| ...) is being compiled.
;; Warning: The variable |source| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/i-eval.clisp.
; (DEFUN |evaluateType1| ...) is being compiled.
;; Warning: The variable |x| is not used.
;; Warning: The variable |m| is not used.
; (DEFUN |throwEvalTypeMsg| ...) is being compiled.
;; The variable |$noEvalTypeMsg| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |evalForm| ...) is being compiled.
;; The variable |$localVars| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTmonitorIfTrue| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |getMappingArgValue| ...) is being compiled.
;; Warning: The variable |t| is not used.
; (DEFUN |getArgValueComp| ...) is being compiled.
;; The variable |$mapName| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |failCheck| ...) is being compiled.
;; The variable |$coerceFailure| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/i-funsel.clisp.
; (DEFUN |selectMms| ...) is being compiled.
;; The variable |$AnonymousFunction| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |defaultTarget| ...) is being compiled.
;; The variable |$DoubleFloat| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$Any| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$QuotientField| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |defaultTargetFE| ...) is being compiled.
;; The variable |$FunctionalExpression| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |getLocalMms| ...) is being compiled.
;; The variable |$useIntegerSubdomain| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$Coerce| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |mmCost0| ...) is being compiled.
;; Warning: The variable |name| is not used.
; (DEFUN |getFunctionFromDomain| ...) is being compiled.
;; The variable |$nonLisplibDomains| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |allOrMatchingMms| ...) is being compiled.
;; Warning: The variable |tar| is not used.
; (DEFUN |findFunctionInDomain1| ...) is being compiled.
;; The variable |$SubDom| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |matchMmSig| ...) is being compiled.
;; The variable $RTC is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |selectMmsGen,exact?| ...) is being compiled.
;; Warning: The variable |tar| is not used.
; (DEFUN |selectMmsGen,matchMms| ...) is being compiled.
;; The variable |$Subst| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |matchTypes| ...) is being compiled.
;; The variable |$SymbolType| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |t1| is not used.
; (DEFUN |evalMmFreeFunction| ...) is being compiled.
;; Warning: The variable |op| is not used.
;; Warning: The variable |mmC| is not used.
; (DEFUN |evalMmCat| ...) is being compiled.
;; Warning: The variable |sig| is not used.
; (DEFUN |evalMmCat1| ...) is being compiled.
;; The variable |$hope| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |hasCateSpecialNew| ...) is being compiled.
;; The variable |$ComplexInteger| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |hasCaty| ...) is being compiled.
;; The variable |$domPvar| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/i-intern.clisp.
; (DEFUN |mkAtreeWithSrcPos| ...) is being compiled.
;; The variable |$useParserSrcPos| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |transferSrcPosInfo| ...) is being compiled.
;; The variable |$transferParserSrcPos| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |mkAtree1| ...) is being compiled.
;; The variable |$immediateDataSymbol| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |transferPropsToNode,transfer| ...) is being compiled.
;; The variable |$localVars| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |atree2Tree1| ...) is being compiled.
;; The variable |$OutputForm| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$mapName| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |get1| ...) is being compiled.
;; The variable |$CapsuleModemapFrame| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |get2| ...) is being compiled.
;; Warning: The variable |e| is not used.
; (DEFUN |objEnv| ...) is being compiled.
;; Warning: The variable |obj| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/i-map.clisp.
; (DEFUN |makeInternalMapName| ...) is being compiled.
;; The variable |$interpreterFrameRing| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$specialMapNameSuffix| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |addDefMap| ...) is being compiled.
;; The variable |$mapName| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |addMap| ...) is being compiled.
;; Warning: The variable |x| is not used.
; (DEFUN |sayDroppingFunctions| ...) is being compiled.
;; The variable |$displayDroppedMap| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |mkFormalArg| ...) is being compiled.
;; The variable |$sl| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |clearDependencies| ...) is being compiled.
;; Warning: The variable |clearLocalModemapsIfTrue| is not used.
; (DEFUN |displayRule| ...) is being compiled.
;; Warning: The variable |op| is not used.
; (DEFUN |outputFormat| ...) is being compiled.
;; The variable |$OutputForm| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |analyzeMap| ...) is being compiled.
;; The variable |$analyzingMapList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |analyzeMap0| ...) is being compiled.
;; The variable |$mapList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |compFailure| ...) is being compiled.
;; The variable |$useCoerceOrCroak| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$reportInterpOnly| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |interpMap| ...) is being compiled.
;; The variable |$timedNameStack| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |analyzeDeclaredMap| ...) is being compiled.
;; The variable |$mapTarget| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |genMapCode| ...) is being compiled.
;; The variable |$whereCacheList| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$localVars| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |compileCoerceMap| ...) is being compiled.
;; The variable |$minivectorNames| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$compilingInputFile| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$minivectorCode| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$minivector| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |analyzeNonRecursiveMap| ...) is being compiled.
;; The variable |$mapThrowCount| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |mkLocalVar| ...) is being compiled.
;; Warning: The variable |op| is not used.
; (DEFUN |isFreeVar| ...) is being compiled.
;; The variable |$freeVars| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |mkFreeVar| ...) is being compiled.
;; Warning: The variable |op| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/i-output.clisp.
; (DEFUN |specialChar| ...) is being compiled.
;; The variable |$specialCharacterAlist| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$specialCharacters| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |appChar| ...) is being compiled.
;; The variable |$highlightDelta| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |outputTran| ...) is being compiled.
;; The variable |$DoubleFloat| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$fractionDisplayType| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |outputMapTran| ...) is being compiled.
;; The variable |$op| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |mkSuperSub| ...) is being compiled.
;; The variable |$linearFormatScripts| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |appSum| ...) is being compiled.
;; Warning: The variable |arg| is not used.
; (DEFUN |isRationalNumber| ...) is being compiled.
;; Warning: The variable |x| is not used.
; (DEFUN |widthSC| ...) is being compiled.
;; Warning: The variable |u| is not used.
; (DEFUN |maprin| ...) is being compiled.
;; The variable |$demoFlag| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |maprinChk| ...) is being compiled.
;; The variable |$MatrixList| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$collectOutput| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |PushMatrix| ...) is being compiled.
;; The variable |$MatrixCount| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |overbarApp| ...) is being compiled.
;; The variable UNDERBAR is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |concatTrouble,fixUp| ...) is being compiled.
;; The variable |$addBlankIfTrue| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |formulaFormat| ...) is being compiled.
;; The variable |$OutputForm| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |texFormat| ...) is being compiled.
;; The variable |$texOutputStream| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |mathmlFormat| ...) is being compiled.
;; The variable |$mathmlOutputStream| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |output| ...) is being compiled.
;; The variable |$mathmlFormat| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |outputNumber| ...) is being compiled.
;; The variable |$outputLines| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |charyTop| ...) is being compiled.
;; The variable |$testOutputLineFlag| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$testOutputLineList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |charySemiColon| ...) is being compiled.
;; Warning: The variable |v| is not used.
; (DEFUN |charyMinus| ...) is being compiled.
;; Warning: The variable |u| is not used.
; (DEFUN |charyBinary| ...) is being compiled.
;; Warning: The variable |u| is not used.
; (DEFUN |charyEquatnum| ...) is being compiled.
;; Warning: The variable |v| is not used.
; (DEFUN |eq0| ...) is being compiled.
;; Warning: The variable |u| is not used.
; (DEFUN |nothingWidth| ...) is being compiled.
;; Warning: The variable |x| is not used.
; (DEFUN |nothingSuper| ...) is being compiled.
;; Warning: The variable |x| is not used.
; (DEFUN |nothingSub| ...) is being compiled.
;; Warning: The variable |x| is not used.
; (DEFUN |nothingApp| ...) is being compiled.
;; Warning: The variable |u| is not used.
;; Warning: The variable |x| is not used.
;; Warning: The variable |y| is not used.
; (DEFUN |remWidth| ...) is being compiled.
;; The variable |remWidth| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |transcomparg| ...) is being compiled.
;; The variable STANDARGLIST is undefined.
;; The compiler will assume this variable is a global.
;; The variable FRLIS* is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |maPrin| ...) is being compiled.
;; The variable |$runTestFlag| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$mkTestFlag| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$mkTestOutputStack| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/i-resolv.clisp.
; (DEFUN |resolveTypeListAny| ...) is being compiled.
;; The variable |$Any| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |acceptableTypesToResolve1| ...) is being compiled.
;; The variable |$DoubleFloat| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$QuotientField| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |resolveTTRed1| ...) is being compiled.
;; The variable |$Res| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |getConditionalCategoryOfType1| ...) is being compiled.
;; The variable |$TriangleVariableList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |resolveTM1| ...) is being compiled.
;; The variable |$Subst| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$Coerce| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |resolveTMTaggedUnion| ...) is being compiled.
;; Warning: The variable |t| is not used.
; (DEFUN |resolveTMSpecial| ...) is being compiled.
;; The variable |$AnonymousFunction| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |resolveTMEq2| ...) is being compiled.
;; Warning: The variable |cm| is not used.
; (DEFUN |resolveTMRed| ...) is being compiled.
;; The variable |$ResMode| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |constructM| ...) is being compiled.
;; The variable |$FunctionalExpression| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/i-spec1.clisp.
; (DEFUN |evalUntargetedADEF| ...) is being compiled.
;; The variable |$AnonymousFunction| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |types| is not used.
; (DEFUN |evalTargetedADEF| ...) is being compiled.
;; The variable |$anonymousMapCounter| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |mkInterpTargetedADEF| ...) is being compiled.
;; The variable |$mapName| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |compileADEFBody| ...) is being compiled.
;; The variable |$compiledOpNameList| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$minivectorNames| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$compilingInputFile| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$minivectorCode| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$minivector| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$freeVariables| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$boundVariables| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |upAlgExtension| ...) is being compiled.
;; The variable |$printTypeIfTrue| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |upTARGET| ...) is being compiled.
;; The variable |$localVars| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |upCOLLECT| ...) is being compiled.
;; The variable |$compilingLoop| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |upCOLLECT1| ...) is being compiled.
;; The variable |$interpOnly| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |falseFun| ...) is being compiled.
;; Warning: The variable |x| is not used.
; (DEFUN |interpIter| ...) is being compiled.
;; The variable |$indexVars| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$indexTypes| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |interpCOLLECTbodyIter| ...) is being compiled.
;; The variable |$collectTypeList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |collectOneStream| ...) is being compiled.
;; Warning: The variable |t| is not used.
; (DEFUN |collectSeveralStreams| ...) is being compiled.
;; Warning: The variable |t| is not used.
; (DEFUN |mkAndApplyZippedPredicates| ...) is being compiled.
;; The variable |$indexList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |mkIterZippedFun| ...) is being compiled.
;; The variable |$index| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |indexList| is not used.
; (DEFUN |replaceSymbols| ...) is being compiled.
;; The variable |$declaredMode| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |upNullList| ...) is being compiled.
;; Warning: The variable |l| is not used.
; (DEFUN |replaceSharps| ...) is being compiled.
;; The variable |$TriangleVariableList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |containsPolynomial| ...) is being compiled.
;; The variable |$univariateDomains| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$multivariateDomains| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/i-spec2.clisp.
; (DEFUN |upDollar| ...) is being compiled.
;; The variable |$localVars| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$immediateDataSymbol| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$OutputForm| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |uperror| ...) is being compiled.
;; The variable |$mapName| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |upfreeWithType| ...) is being compiled.
;; Warning: The variable |type| is not used.
; (DEFUN |uplocalWithType| ...) is being compiled.
;; Warning: The variable |type| is not used.
; (DEFUN |compileIF| ...) is being compiled.
;; The variable |$declaredMode| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |cond| is not used.
; (DEFUN |evalIF| ...) is being compiled.
;; The variable |$lastLineInSEQ| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |evalis| ...) is being compiled.
;; The variable |$opIsIs| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |evalIsPredicate| ...) is being compiled.
;; Warning: The variable |mode| is not used.
; (DEFUN |isPatMatch| ...) is being compiled.
;; The variable |$subs| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |upiterate| ...) is being compiled.
;; The variable |$repeatBodyLabel| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$iterateCount| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |upbreak| ...) is being compiled.
;; The variable |$repeatLabel| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$breakCount| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |getInterpMacroNames| ...) is being compiled.
;; The variable |$InterpreterMacroAlist| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |isInterpMacro| ...) is being compiled.
;; The variable |$specialOps| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |upREPEAT| ...) is being compiled.
;; The variable |$compilingLoop| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |upREPEAT1| ...) is being compiled.
;; The variable |$interpOnly| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |upreturn| ...) is being compiled.
;; The variable |$mapTarget| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$mapThrowCount| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |upNullTuple| ...) is being compiled.
;; Warning: The variable |l| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/i-util.clisp.
; (DEFUN MKPROMPT ...) is being compiled.
;; The variable |$interpreterFrameName| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |Zeros| ...) is being compiled.
;; The variable |$ZeroVecCache| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |variableNumber| ...) is being compiled.
;; The variable |$variableNumberAlist| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |newType?| ...) is being compiled.
;; Warning: The variable |t| is not used.
; (DEFUN |Undef| ...) is being compiled.
;; The variable |Undef| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |addModemap| ...) is being compiled.
;; The variable |$CapsuleModemapFrame| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |orderUnionEntries| ...) is being compiled.
;; The variable |$newCompilerUnionFlag| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/lisplib.clisp.
; (DEFUN |hasFilePropertyNoCache| ...) is being compiled.
;; Warning: The variable |abbrev| is not used.
; (DEFUN |loadLibNoUpdate| ...) is being compiled.
;; Warning: The variable |libName| is not used.
; (DEFUN |autoLoad| ...) is being compiled.
;; Warning: The variable |abb| is not used.
; (DEFUN |compileConstructorLib| ...) is being compiled.
;; The variable /FN is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |compConLib1| ...) is being compiled.
;; The variable /EDITFILE is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$listingDirectory| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |compDefineLisplib| ...) is being compiled.
;; The variable |$compileDocumentation| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$libraryDirectory| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$newConlist| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |initializeLisplib| ...) is being compiled.
;; The variable ERRORS is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$lisplibAbbreviation| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$lisplibAncestors| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$lisplibOpAlist| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$lisplibSuperDomain| is undefined.
;; The compiler will assume this variable is a global.
;; The variable /MAJOR-VERSION is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |finalizeLisplib| ...) is being compiled.
;; The variable |$lisplibCategory| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$lisplibAttributes| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$lisplibPredicates| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$lisplibParents| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$lisplibSlot1| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$profileCompiler| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |transformOperationAlist| ...) is being compiled.
;; The variable |$functionLocations| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |getSlotFromDomain| ...) is being compiled.
;; The variable |Undef| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/match.clisp.
; (DEFUN |patternCheck,subWild| ...) is being compiled.
;; The variable |$oldWild| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$wildCard| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/msg.clisp.
; (DEFUN |putDatabaseStuff| ...) is being compiled.
;; The variable |aL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |posPointers| ...) is being compiled.
;; The variable |getMsgFTTag| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |setMsgCatlessAttr| ...) is being compiled.
;; The variable |catless| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/msgdb.clisp.
; (DEFUN |substituteSegmentedMsg| ...) is being compiled.
;; The variable |$texFormatting| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |noBlankBeforeP| ...) is being compiled.
;; The variable |$msgdbNoBlanksBeforeGroup| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$msgdbListPrims| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |noBlankAfterP| ...) is being compiled.
;; The variable |$msgdbNoBlanksAfterGroup| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |throwPatternMsg| ...) is being compiled.
;; The variable |$testingSystem| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$testingErrorPrefix| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |sayKeyedMsgLocal| ...) is being compiled.
;; The variable |$displayMsgNumber| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$printMsgsToFile| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |returnStLFromKey| ...) is being compiled.
;; The variable |$msgDatabaseName| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |keyedMsgCompFailure| ...) is being compiled.
;; The variable |$useCoerceOrCroak| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$Coerce| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$reportInterpOnly| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |throwKeyedMsgCannotCoerceWithValue| ...) is being compiled.
;; The variable |$OutputForm| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |spadStartUpMsgs| ...) is being compiled.
;; The variable *BUILD-VERSION* is undefined.
;; The compiler will assume this variable is a global.
;; The variable *YEARWEEK* is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$opSysName| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$msgAlist| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |brightPrint0| ...) is being compiled.
;; The variable $MARG is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |escapeSpecialChars| ...) is being compiled.
;; The variable |$htCharAlist| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$htSpecialChars| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/newfort.clisp.
; (DEFUN |newFortranTempVar| ...) is being compiled.
;; The variable |$exp2FortTempVarIndex| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$defaultFortranType| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |exp2FortOptimize| ...) is being compiled.
;; The variable |$fortranOptimizationLevel| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |beenHere| ...) is being compiled.
;; The variable |$fortCsList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |exp2FortOptimizeCS1,pushCsStacks| ...) is being compiled.
;; The variable |$fortCsExprStack| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$fortCsFuncStack| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |exp2FortOptimizeCS1,popCsStacks| ...) is being compiled.
;; Warning: The variable |x| is not used.
; (DEFUN |exp2FortOptimizeCS1| ...) is being compiled.
;; The variable |$fortCsHash| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |exp2FortOptimizeArray| ...) is being compiled.
;; The variable |$fortName| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$exprStack| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |fortran2Lines1| ...) is being compiled.
;; The variable |$fortIndent| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$fortLength| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |fortError1| ...) is being compiled.
;; The variable |$fortError| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |exp2FortSpecial| ...) is being compiled.
;; The variable |$fortranArrayStartingIndex| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |fortranifyIntrinsicFunctionName| ...) is being compiled.
;; The variable |$useIntrinsicFunctions| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$intrinsics| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$fortranPrecision| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |indentFortLevel| ...) is being compiled.
;; The variable |$maximumFortranExpressionLength| is undefined.
;; The compiler will assume this variable is a global.
; (DEFMACRO |changeExprLength| ...) is being compiled.
;; Warning: The variable #:G155164 is not used.
; (DEFMACRO |nameLen| ...) is being compiled.
;; Warning: The variable #:G155334 is not used.
; (DEFUN |currentSP| ...) is being compiled.
;; The variable |$currentSubprogram| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |fortPre1| ...) is being compiled.
;; The variable |$fortInts2Floats| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |segment| ...) is being compiled.
;; The variable |$fortranSegment| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nrunfast.clisp.
; (DEFUN |initNewWorld| ...) is being compiled.
;; The variable |$NRTflag| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTvec| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTmakeCompactDirect| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTquick| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTmakeShortDirect| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$newWorld| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$monitorNewWorld| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTmonitorIfTrue| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$doNotCompressHashTableIfTrue| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |replaceGoGetSlot| ...) is being compiled.
;; The variable |$returnNowhereFromGoGet| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |newLookupInTable| ...) is being compiled.
;; The variable |$lookupDefaults| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |opIsHasCat| ...) is being compiled.
;; The variable |$hasCatOpHash| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |hashNewLookupInTable| ...) is being compiled.
;; The variable |$hashOp1| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$hashOp0| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |hashNewLookupInCategories| ...) is being compiled.
;; The variable |$Slot1DataBase| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |getNewDefaultPackage| ...) is being compiled.
;; The variable |packageVec| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |catVec| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |dom| is not used.
;; Warning: The variable |dollar| is not used.
; (DEFUN |lazyMatchArg2| ...) is being compiled.
;; The variable |$isDefaultingPackage| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |newExpandGoGetTypeSlot| ...) is being compiled.
;; Warning: The variable |dollar| is not used.
; (DEFUN |sigDomainVal| ...) is being compiled.
;; Warning: The variable |dollar| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nrungo.clisp.
; (DEFUN |basicLookup| ...) is being compiled.
;; The variable |$hashOp0| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$hashOp1| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$hashOpApply| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$hashOpSet| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$hashSeg| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |basicLookupCheckDefaults| ...) is being compiled.
;; The variable |$lookupDefaults| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |domain| is not used.
; (DEFUN |lookupInTable| ...) is being compiled.
;; The variable |$predVector| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |lookupInCategories| ...) is being compiled.
;; The variable |$Slot1DataBase| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTcompileEvalForm| ...) is being compiled.
;; The variable |$insideCompileBodyIfTrue| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTgetMinivectorIndex| ...) is being compiled.
;; The variable |$minivector| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$compilingInputFile| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$minivectorCode| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |mkDiffAssoc| ...) is being compiled.
;; The variable |$TriangleVariableList| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nrunopt.clisp.
; (DEFUN |getInfovecCode| ...) is being compiled.
;; The variable |$template| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTslot1Info| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$lookupFunction| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |makeDomainTemplate| ...) is being compiled.
;; The variable |$byteVec| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |makeGoGetSlot| ...) is being compiled.
;; The variable |$byteAddress| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |makeCompactDirect| ...) is being compiled.
;; The variable |$NRTslot1PredicateList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |makeCompactDirect1,fn| ...) is being compiled.
;; The variable |$isOpPackageName| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |makeCompactDirect1| ...) is being compiled.
;; The variable |$byteVecAcc| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |orderBySubsumption| ...) is being compiled.
;; The variable |$op| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTgenInitialAttributeAlist| ...) is being compiled.
;; The variable |$lisplibAttributes| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$pairlis| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTgenFinalAttributeAlist| ...) is being compiled.
;; The variable |$NRTattributeAlist| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |makePredicateBitVector| ...) is being compiled.
;; The variable |$insideCategoryPackageIfTrue| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$categoryPredicateList| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$predGensymAlist| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$lisplibPredicates| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |augmentPredCode| ...) is being compiled.
;; The variable $ is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTmakeCategoryAlist| ...) is being compiled.
;; The variable |$uncondAlist| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$condAlist| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTcatCompare| ...) is being compiled.
;; The variable |$levelAlist| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |depthAssoc| ...) is being compiled.
;; The variable |$depthAssocCache| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |getCodeVector| ...) is being compiled.
;; The variable |$infovec| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |dcOpTable| ...) is being compiled.
;; Warning: The variable |i| is not used.
; (DEFUN |dcOpPrint| ...) is being compiled.
;; The variable |$predvec| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |extendsCategory| ...) is being compiled.
;; The variable |$why| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |templateVal| ...) is being compiled.
;; Warning: The variable |domform| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/record.clisp.
; (DEFUN |inputFile2RecordFile| ...) is being compiled.
;; The variable |$testStream| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |recordAndPrintTest| ...) is being compiled.
;; The variable |$mkTestOutputStack| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$mkTestInputStack| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/rulesets.clisp.
; (DEFUN |createResolveTTRules| ...) is being compiled.
;; The variable |$mpolyTTRules| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$Res| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$nameList| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$abList| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$generalTTRules| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |createResolveTMRules| ...) is being compiled.
;; The variable |$mpolyTMRules| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$ResMode| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$generalTMRules| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |createTypeEquivRules| ...) is being compiled.
;; The variable |$TypeEQ| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$TypeEqui| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |initializeRuleSets| ...) is being compiled.
;; The variable |$newResolveAbbreviations| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$ruleSetsInitialized| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/server.clisp.
; (DEFUN |serverReadLine| ...) is being compiled.
;; The variable |$EndServerSession| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NeedToSignalSessionManager| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$SessionManager| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$EndOfOutput| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$CallInterp| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$CreateFrame| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$frameAlist| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$frameNumber| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$currentFrameNum| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$CreateFrameAnswer| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$SwitchFrames| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$EndSession| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$LispCommand| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$sockBufferLength| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$MenuServer| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$QuietSpadCommand| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$SpadCommand| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NonSmanSession| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$KillLispSystem| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |parseAndInterpret| ...) is being compiled.
;; The variable |$useNewParser| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |serverLoop| ...) is being compiled.
;; The variable |$Prompt| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/sfsfun.clisp.
; (DEFUN |logH| ...) is being compiled.
;; Warning: The variable |z| is not used.
; (DEFUN |BesselIBackRecur| ...) is being compiled.
;; Warning: The variable |largev| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/slam.clisp.
; (DEFUN |reportFunctionCompilation| ...) is being compiled.
;; The variable |$compiledOpNameList| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$minivectorNames| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$compilingInputFile| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$minivectorCode| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$minivector| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$compileRecurrence| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |mkCircularAlist| ...) is being compiled.
;; The variable |$failed| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |compileRecurrenceRelation| ...) is being compiled.
;; The variable |$TriangleVariableList| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |junk| is not used.
; (DEFUN |clearAllSlams,fn| ...) is being compiled.
;; The variable |$functorDependencyAlist| is undefined.
;; The compiler will assume this variable is a global.
; (DEFMACRO |clearSlam| ...) is being compiled.
;; Warning: The variable #:G154929 is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/template.clisp.
; (DEFUN |putPredHash| ...) is being compiled.
;; The variable |$predHash| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$predVectorFrontier| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$predVector| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |mkSigPredVectors| ...) is being compiled.
;; The variable |$consDB| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTdescendCodeTran| ...) is being compiled.
;; The variable |$template| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |measure| ...) is being compiled.
;; The variable |SparseUnivariatePolynomial;| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |SparseUnivariatePolynomial;opDirect| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |SparseUnivariatePolynomial;template| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |measureCommon,fn| ...) is being compiled.
;; The variable HASH is undefined.
;; The compiler will assume this variable is a global.
;; The variable TABLE is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$table| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/fortcall.clisp.
; (DEFUN |makeFort1| ...) is being compiled.
;; The variable |$fortranDirectory| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |makeFortranFun| ...) is being compiled.
;; The variable |$fortranLibraries| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |writeCFile| ...) is being compiled.
;; The variable |$addUnderscoreToFortranNames| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |makeAspGenerators1| ...) is being compiled.
;; Warning: The variable |type| is not used.
; (DEFUN |makeCompilation| ...) is being compiled.
;; The variable |$fortranCompilerName| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |spadify| ...) is being compiled.
;; The variable RESULTS is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |prepareResults,defaultValue| ...) is being compiled.
;; The variable |shortZero| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |longZero| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |generateDataName| ...) is being compiled.
;; The variable |$fortranTmpDir| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |nagCall| ...) is being compiled.
;; The variable |$nagMessages| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$nagHost| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$fortPersistence| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/util.lisp.
; (DEFUN MAKE-DIRECTORY ...) is being compiled.
;; The variable $SPADROOT is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN INTERP-MAKE-DIRECTORY ...) is being compiled.
;; The variable $CURRENT-DIRECTORY is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN TRANSLATE ...) is being compiled.
;; Warning: The variable FN is not used.
; (DEFUN MAKE-DEPSYS ...) is being compiled.
;; Warning: The variable LSP is not used.
;; Warning: The variable SRC is not used.
;; Warning: The variable INT is not used.
;; Warning: The variable MNT is not used.
; (IN-PACKAGE "BOOTTRAN") is being compiled.
;; Warning: The package operation (IN-PACKAGE "BOOTTRAN") was in a bad place.
; (DEFUN BOOTTOCL ...) is being compiled.
;; Warning: The variable FN is not used.
; (IN-PACKAGE "BOOT") is being compiled.
;; Warning: The package operation (IN-PACKAGE "BOOT") was in a bad place.
; (DEFUN BUILD-INTERPSYS ...) is being compiled.
;; The variable COMP-FUNCTIONS is undefined.
;; The compiler will assume this variable is a global.
;; The variable PARSE-FUNCTIONS is undefined.
;; The compiler will assume this variable is a global.
;; The variable BROWSE-FUNCTIONS is undefined.
;; The compiler will assume this variable is a global.
;; The variable TRANSLATE-FUNCTIONS is undefined.
;; The compiler will assume this variable is a global.
;; The variable NAGBR-FUNCTIONS is undefined.
;; The compiler will assume this variable is a global.
;; The variable ASAUTO-FUNCTIONS is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable LSP is not used.
;; Warning: The variable SRC is not used.
;; Warning: The variable INT is not used.
;; Warning: The variable OBJ is not used.
;; Warning: The variable MNT is not used.
;; Warning: The variable SYS is not used.
; (IN-PACKAGE "COMPILER") is being compiled.
;; Warning: The package operation (IN-PACKAGE "COMPILER") was in a bad place.
; (IN-PACKAGE "BOOT") is being compiled.
;; Warning: The package operation (IN-PACKAGE "BOOT") was in a bad place.
; (DEFUN MAKELIB ...) is being compiled.
;; Warning: The variable NOOPTIMIZE is not used.
; (DEFUN LIBCHECK ...) is being compiled.
;; The variable ABBREVS is undefined.
;; The compiler will assume this variable is a global.
;; The variable CONSTRUCTORS is undefined.
;; The compiler will assume this variable is a global.
;; The variable SRCABBREVS is undefined.
;; The compiler will assume this variable is a global.
;; The variable SRCCONSTRUCTORS is undefined.
;; The compiler will assume this variable is a global.
;; The variable SPADS is undefined.
;; The compiler will assume this variable is a global.
;; The variable SHORT is undefined.
;; The compiler will assume this variable is a global.
;; The variable LONG is undefined.
;; The compiler will assume this variable is a global.
;; The variable POINT is undefined.
;; The compiler will assume this variable is a global.
;; The variable MARK is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable END is not used.
;; Warning: The variable START is not used.
;; Warning: The variable IN is not used.
;; Warning: The variable INTERP is not used.
;; Warning: The variable END is not used.
;; Warning: The variable START is not used.
;; Warning: The variable IN is not used.
;; Warning: The variable INTERP is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/c-util.clisp.
; (DEFUN |continue| ...) is being compiled.
;; The variable |$x| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$m| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$f| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |level| ...) is being compiled.
;; The variable |$level| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |displayComp| ...) is being compiled.
;; The variable |$bright| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$dim| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$op| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$s| is undefined.
;; The compiler will assume this variable is a global.
;; The variable $X is undefined.
;; The compiler will assume this variable is a global.
;; The variable $M is undefined.
;; The compiler will assume this variable is a global.
;; The variable $F is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |intersectionContour,modeCompare| ...) is being compiled.
;; The variable |$var| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |isAlmostSimple,setAssignment| ...) is being compiled.
;; The variable |$assignmentList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |stackSemanticError| ...) is being compiled.
;; The variable |$initCapsuleErrorCount| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |stackMessage| ...) is being compiled.
;; The variable |$compErrorMessageStack| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |?modemaps| ...) is being compiled.
;; The variable |$CapsuleModemapFrame| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |traverse,traverseInner| ...) is being compiled.
;; The variable |$seen| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$notseen| is undefined.
;; The compiler will assume this variable is a global.
;; The variable SET-PA-SPEC is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/profile.clisp.
; (DEFUN |profileWrite| ...) is being compiled.
;; The variable |$profileAlist| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |profileTran| ...) is being compiled.
;; The variable |$profileHash| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |profileRecord| ...) is being compiled.
;; The variable |$op| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$signatureOfForm| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/category.clisp.
; (DEFUN |SigListUnion| ...) is being compiled.
;; The variable |$NewCatVec| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |e| is not used.
; (DEFUN |SourceLevelSubset| ...) is being compiled.
;; The variable |$noSubsumption| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$noSubsets| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/functor.clisp.
; (DEFUN |DomainPrint1| ...) is being compiled.
;; The variable |$Sublis| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$WhereList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |DPname| ...) is being compiled.
;; The variable |$WhereCounter| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NewbFVectorCopy| ...) is being compiled.
;; The variable |Undef| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |setVector12| ...) is being compiled.
;; The variable |$extraParms| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$domainShell| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |setVector4| ...) is being compiled.
;; The variable |$HackSlot4| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$getDomainCode| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |setVector4Onecat,Supplementaries| ...) is being compiled.
;; The variable |$supplementaries| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |setVector4part3| ...) is being compiled.
;; The variable |$epilogue| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |mkVectorWithDeferral| ...) is being compiled.
;; The variable |$ConstantAssignments| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |DescendCodeAdd1| ...) is being compiled.
;; The variable |$addFormLhs| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |DescendCode| ...) is being compiled.
;; The variable |$packagesUsed| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$locals| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |ProcessCond| ...) is being compiled.
;; The variable |$pairlis| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTslot1PredicateList| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |viewassoc| is not used.
; (DEFUN |SetFunctionSlots| ...) is being compiled.
;; The variable |$catvecList| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$MissingFunctionInfo| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |LookUpSigSlots| ...) is being compiled.
;; The variable |$insideCategoryPackageIfTrue| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |CheckVector| ...) is being compiled.
;; The variable |$catNames| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$CheckVectorList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |InvestigateConditions,pessimise| ...) is being compiled.
;; The variable |$Conditions| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |InvestigateConditions| ...) is being compiled.
;; Warning: The variable |u| is not used.
; (DEFUN |resolvePatternVars| ...) is being compiled.
;; The variable |$TriangleVariableList| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/info.clisp.
; (DEFUN |addInfo| ...) is being compiled.
;; The variable |$Information| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |actOnInfo| ...) is being compiled.
;; The variable |$functorLocalParameters| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/iterator.clisp.
; (DEFUN |getIdentity| ...) is being compiled.
;; Warning: The variable |e| is not used.
; (DEFUN |compIterator| ...) is being compiled.
;; The variable |$until| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nruncomp.clisp.
; (DEFUN |NRTaddDeltaCode| ...) is being compiled.
;; The variable |$catvecList| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTbase| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTdeltaList| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTdeltaListComp| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$template| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTaddForm| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$addForm| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |optDeltaEntry| ...) is being compiled.
;; The variable |$killOptimizeIfTrue| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$optimizableConstructorNames| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |genDeltaEntry| ...) is being compiled.
;; The variable |$profileCompiler| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$functorLocalParameters| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTdeltaLength| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTassocIndex| ...) is being compiled.
;; The variable |$found| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTgetLocalIndex1| ...) is being compiled.
;; Warning: The variable |killBindingIfTrue| is not used.
; (DEFUN |NRTgetAddForm| ...) is being compiled.
;; The variable |$Slot1DataBase| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTassignCapsuleFunctionSlot| ...) is being compiled.
;; The variable |$insideCategoryPackageIfTrue| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTisExported?| ...) is being compiled.
;; The variable |$domainShell| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |consDomainName| ...) is being compiled.
;; The variable |$devaluateList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |buildFunctor| ...) is being compiled.
;; The variable |$NRTvec| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$uncondAlist| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$condAlist| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTslot1PredicateList| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$setelt| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$CheckVectorList| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTdomainFormList| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$getDomainCode| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTvectorCopy| ...) is being compiled.
;; Warning: The variable |cacheName| is not used.
;; Warning: The variable |domName| is not used.
; (DEFUN |NRTsetVector4| ...) is being compiled.
;; The variable |$lisplibCategoriesExtended| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTsetVector4Part2| ...) is being compiled.
;; The variable |$pairlis| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTsetVector4a| ...) is being compiled.
;; The variable |$uncondList| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$condList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTmakeSlot1| ...) is being compiled.
;; The variable |$NRTmakeCompactDirect| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |domainShell| is not used.
; (DEFUN |NRTmakeSlot1Info| ...) is being compiled.
;; The variable |$lisplibOpAlist| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NRTderivedTargetIfTrue| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRToptimizeHas| ...) is being compiled.
;; The variable |$hasCategoryAlist| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NRTaddToSlam| ...) is being compiled.
;; The variable |$mutableDomain| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |changeDirectoryInSlot1,fn| ...) is being compiled.
;; The variable |$lastPred| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$newEnv| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |genSlotSig| ...) is being compiled.
;; Warning: The variable |pred| is not used.
; (DEFUN |NRTputInHead| ...) is being compiled.
;; The variable |$elt| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/htcheck.clisp.
; (DEFUN |buildHtMacroTable| ...) is being compiled.
;; The variable |$htMacroTable| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$primitiveHtCommands| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/ht-util.clisp.
; (DEFUN |htpDestroyPage| ...) is being compiled.
;; The variable |$activePageList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |iht| ...) is being compiled.
;; The variable |$newPage| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$htLineList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |bcHt| ...) is being compiled.
;; The variable |$curPage| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |doDoitButton| ...) is being compiled.
;; Warning: The variable |htPage| is not used.
; (DEFUN |typeCheckInputAreas| ...) is being compiled.
;; The variable |$bcParseOnly| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |parseAndEval1| ...) is being compiled.
;; The variable |$useNewParser| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |htEscapeString| ...) is being compiled.
;; The variable |$funnyQuote| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$funnyBacks| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/br-con.clisp.
; (DEFUN |conPageFastPath| ...) is being compiled.
;; The variable |$lowerCaseConTb| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |kxPage| ...) is being compiled.
;; Warning: The variable |htPage| is not used.
; (DEFUN |kiPage| ...) is being compiled.
;; The variable |$conformsAreDomains| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |junk| is not used.
; (DEFUN |kePage| ...) is being compiled.
;; Warning: The variable |junk| is not used.
; (DEFUN |ksPage| ...) is being compiled.
;; Warning: The variable |junk| is not used.
; (DEFUN |dbSearchOrder| ...) is being compiled.
;; The variable |$predvec| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |kcPage| ...) is being compiled.
;; The variable |$defaultPackageNamesHT| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |junk| is not used.
; (DEFUN |kcpPage| ...) is being compiled.
;; Warning: The variable |junk| is not used.
; (DEFUN |kcaPage| ...) is being compiled.
;; Warning: The variable |junk| is not used.
; (DEFUN |kcdPage| ...) is being compiled.
;; Warning: The variable |junk| is not used.
; (DEFUN |kcdoPage| ...) is being compiled.
;; Warning: The variable |junk| is not used.
; (DEFUN |kcaPage1| ...) is being compiled.
;; Warning: The variable |article| is not used.
; (DEFUN |kccPage| ...) is being compiled.
;; Warning: The variable |junk| is not used.
; (DEFUN |kcdePage| ...) is being compiled.
;; Warning: The variable |junk| is not used.
; (DEFUN |kcuPage| ...) is being compiled.
;; Warning: The variable |junk| is not used.
; (DEFUN |kcnPage| ...) is being compiled.
;; The variable |conname| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |junk| is not used.
; (DEFUN |conOpPage| ...) is being compiled.
;; Warning: The variable |conform| is not used.
; (DEFUN |conOpPage1| ...) is being compiled.
;; The variable |$Primitives| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |dbConstructorDoc,hn| ...) is being compiled.
;; The variable |$sig| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$args| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |dbConstructorDoc,gn| ...) is being compiled.
;; The variable |$op| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |dbDocTable| ...) is being compiled.
;; The variable |$docTableHash| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |dbAddDocTable| ...) is being compiled.
;; The variable |$docTable| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |dbGetDocTable,hn| ...) is being compiled.
;; The variable |$which| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$conform| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |kTestPred| ...) is being compiled.
;; The variable |$domain| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |dbAddChainDomain| ...) is being compiled.
;; The variable |$infovec| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |dbPresentCons| ...) is being compiled.
;; The variable |$includeUnexposed?| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$exposedOnlyIfTrue| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |dbConsExposureMessage| ...) is being compiled.
;; The variable |$atLeastOneUnexposed| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |dbShowConsDoc1| ...) is being compiled.
;; The variable |$TriangleVariableList| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |dbSelectCon| ...) is being compiled.
;; Warning: The variable |which| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/topics.clisp.
; (DEFUN |mkTopicHashTable| ...) is being compiled.
;; The variable |$defaultsHash| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$topicsDefaults| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$conTopicHash| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$topicHash| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$groupAssoc| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$topicIndex| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |skipBlanks| ...) is being compiled.
;; The variable |$charBlank| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |topicCode| ...) is being compiled.
;; The variable |$topicSynonyms| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |td| ...) is being compiled.
;; The variable |$topicClasses| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/interop.clisp.
; (DEFUN |DNameToSExpr1| ...) is being compiled.
;; The variable |DNameStringID| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |DNameToSExpr| ...) is being compiled.
;; The variable |DNameOtherID| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |SExprToDName| ...) is being compiled.
;; The variable |DNameApplyID| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |DNameTupleID| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |runOldAxiomFunctor| ...) is being compiled.
;; The variable |$oldAxiomPreCategoryDispatch| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |makeLazyOldAxiomDispatchDomain| ...) is being compiled.
;; The variable |$attributeDispatch| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$lazyOldAxiomDomainDispatch| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |makeOldAxiomDispatchDomain| ...) is being compiled.
;; The variable |$oldAxiomDomainDispatch| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |lazyOldAxiomDomainLookupExport| ...) is being compiled.
;; Warning: The variable |env| is not used.
; (DEFUN |lazyOldAxiomDomainHashCode| ...) is being compiled.
;; Warning: The variable |env| is not used.
; (DEFUN |lazyOldAxiomDomainDevaluate| ...) is being compiled.
;; Warning: The variable |env| is not used.
; (DEFUN |lazyOldAxiomAddChild| ...) is being compiled.
;; Warning: The variable |kid| is not used.
;; Warning: The variable |env| is not used.
; (DEFUN |oldAxiomPreCategoryBuild| ...) is being compiled.
;; The variable |$oldAxiomCategoryDispatch| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |env| is not used.
; (DEFUN |oldAxiomPreCategoryHashCode| ...) is being compiled.
;; Warning: The variable |env| is not used.
; (DEFUN |oldAxiomCategoryDefaultPackage| ...) is being compiled.
;; Warning: The variable |dom| is not used.
; (DEFUN |oldAxiomPreCategoryDevaluate| ...) is being compiled.
;; The variable T$ is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |env| is not used.
; (DEFUN |oldAxiomCategoryDevaluate| ...) is being compiled.
;; Warning: The variable |env| is not used.
; (DEFUN |oldAxiomCategoryLookupExport| ...) is being compiled.
;; Warning: The variable |box| is not used.
;; Warning: The variable |env| is not used.
; (DEFUN |oldAxiomCategoryParentCount| ...) is being compiled.
;; Warning: The variable |env| is not used.
; (DEFUN |oldAxiomCategoryNthParent| ...) is being compiled.
;; Warning: The variable |env| is not used.
; (DEFUN |oldAxiomCategoryHashCode| ...) is being compiled.
;; Warning: The variable |env| is not used.
; (DEFUN |attributeDevaluate| ...) is being compiled.
;; Warning: The variable |env| is not used.
; (DEFUN |attributeLookupExport| ...) is being compiled.
;; Warning: The variable |box| is not used.
;; Warning: The variable |env| is not used.
; (DEFUN |attributeHashCode| ...) is being compiled.
;; Warning: The variable |env| is not used.
; (DEFUN |attributeCategoryBuild| ...) is being compiled.
;; Warning: The variable |dom| is not used.
;; Warning: The variable |env| is not used.
; (DEFUN |attributeCategoryParentCount| ...) is being compiled.
;; Warning: The variable |attrObj| is not used.
;; Warning: The variable |env| is not used.
; (DEFUN |attributeNthParent| ...) is being compiled.
;; Warning: The variable |attrObj| is not used.
;; Warning: The variable |env| is not used.
; (DEFUN |oldAxiomDomainLookupExport| ...) is being compiled.
;; The variable |$hashOp1| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$hashOp0| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$hashOpApply| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$hashOpSet| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$hashSeg| is undefined.
;; The compiler will assume this variable is a global.
;; Warning: The variable |env| is not used.
; (DEFUN |oldAxiomDomainHashCode| ...) is being compiled.
;; Warning: The variable |env| is not used.
; (DEFUN |oldAxiomDomainHasCategory| ...) is being compiled.
;; Warning: The variable |env| is not used.
; (DEFUN |oldAxiomDomainDevaluate| ...) is being compiled.
;; Warning: The variable |env| is not used.
; (DEFUN |oldAxiomAddChild| ...) is being compiled.
;; Warning: The variable |child| is not used.
;; Warning: The variable |env| is not used.
; (DEFUN |coerceConvertMmSelection| ...) is being compiled.
;; The variable |coerceConvertMmSelection;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/patches.lisp.
; (DEFUN CATCHALL ...) is being compiled.
;; Warning: The variable B is not used.
; (DEFUN CLEAR-HIGHLIGHT ...) is being compiled.
;; The variable |$specialCharacters| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN RESET-HIGHLIGHT ...) is being compiled.
;; The variable |$saveHighlight| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$saveSpecialchars| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |cd| ...) is being compiled.
;; The variable $CURRENT-DIRECTORY is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN TOPLEVEL ...) is being compiled.
;; Warning: The variable FOO is not used.
; (DEFUN /RF ...) is being compiled.
;; Warning: The variable FOO is not used.
; (DEFUN /RQ ...) is being compiled.
;; Warning: The variable FOO is not used.
; (DEFUN |/RQ,LIB| ...) is being compiled.
;; Warning: The variable FOO is not used.
; (DEFUN /RF-1 ...) is being compiled.
;; The variable /EDITFILE is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$useNewParser| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN /EF ...) is being compiled.
;; Warning: The variable FOO is not used.
; (DEFUN AKCL-VERSION ...) is being compiled.
;; The variable SYSTEM::*AKCL-VERSION* is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN SHAREDITEMS ...) is being compiled.
;; Warning: The variable X is not used.
; (DEFUN WHOCALLED ...) is being compiled.
;; Warning: The variable N is not used.
; (SHADOW 'MAP) is being compiled.
;; Warning: The package operation (SHADOW 'MAP) was in a bad place.
; (DEFUN |spadtestValueHook| ...) is being compiled.
;; Warning: The variable VAL is not used.
;; Warning: The variable TYPE is not used.
; (DEFUN |testError| ...) is being compiled.
;; Warning: The variable ERROTYPE is not used.
;; Warning: The variable ERROVALUE is not used.
; (DEFUN |bootFind| ...) is being compiled.
;; Warning: The variable WORD is not used.
; (DEFUN |fetchKeyedMsg| ...) is being compiled.
;; The variable |$defaultMsgDatabaseName| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |setViewportProcess| ...) is being compiled.
;; The variable |$ViewportProcessToWatch| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |waitForViewport| ...) is being compiled.
;; The variable |$MenuServer| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN PRINT-XDR-STREAM ...) is being compiled.
;; Warning: The variable Z is not used.
; (DEFUN |xdrOpen| ...) is being compiled.
;; Warning: The variable DIR is not used.
; (DEFUN |clearParserMacro| ...) is being compiled.
;; The variable |$pfMacros| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN /VERSIONCHECK ...) is being compiled.
;; The variable /MAJOR-VERSION is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}



Compiling /research2/test0819/int/interp/hashcode.clisp.
; (DEFUN |hashType| ...) is being compiled.
;; The variable |$VoidHash| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$DomainsWithoutLisplibs| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |hashString| ...) is being compiled.
;; The variable |$hashModulus| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nag-c02.clisp.
; (DEFUN |c02affSolve| ...) is being compiled.
;; The variable |$bcParseOnly| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}



Compiling /research2/test0819/int/interp/nag-c05.clisp.
; (DEFUN |c05nbfSolve| ...) is being compiled.
;; The variable |$bcParseOnly| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nag-c06.clisp.
; (DEFUN |c06eafSolve| ...) is being compiled.
;; The variable |$bcParseOnly| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nag-d01.clisp.
; (DEFUN |d01ajfGen| ...) is being compiled.
;; The variable |$bcParseOnly| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nag-d02.clisp.
; (DEFUN |d02bbfSolve| ...) is being compiled.
;; The variable |$bcParseOnly| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nag-d03.clisp.
; (DEFUN |d03edfSolve| ...) is being compiled.
;; The variable |$bcParseOnly| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nag-e01.clisp.
; (DEFUN |e01bafSolve| ...) is being compiled.
;; The variable |$bcParseOnly| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nag-e02.clisp.
; (DEFUN |e02adfSolve| ...) is being compiled.
;; The variable |$bcParseOnly| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nag-e04.clisp.
; (DEFUN |e04dgfSolve| ...) is being compiled.
;; The variable |$bcParseOnly| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nag-f01.clisp.
; (DEFUN |f01brfSolve| ...) is being compiled.
;; The variable |$bcParseOnly| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |f01qcfDefaultSolve| ...) is being compiled.
;; Warning: The variable |lda| is not used.
; (DEFUN |f01qdfDefaultSolve| ...) is being compiled.
;; Warning: The variable |lda| is not used.
;; Warning: The variable |ldb| is not used.
; (DEFUN |f01qefDefaultSolve| ...) is being compiled.
;; Warning: The variable |lda| is not used.
; (DEFUN |f01rdfDefaultSolve| ...) is being compiled.
;; Warning: The variable |lda| is not used.
;; Warning: The variable |ldb| is not used.
; (DEFUN |f01refDefaultSolve| ...) is being compiled.
;; Warning: The variable |lda| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nag-f02.clisp.
; (DEFUN |f02aafSolve| ...) is being compiled.
;; The variable |$bcParseOnly| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |f02aafDefaultSolve| ...) is being compiled.
;; Warning: The variable |ia| is not used.
; (DEFUN |f02abfDefaultSolve| ...) is being compiled.
;; Warning: The variable |ia| is not used.
;; Warning: The variable |iv| is not used.
; (DEFUN |f02adfDefaultSolve| ...) is being compiled.
;; Warning: The variable |ia| is not used.
;; Warning: The variable |ib| is not used.
; (DEFUN |f02aefDefaultSolve| ...) is being compiled.
;; Warning: The variable |ia| is not used.
;; Warning: The variable |ib| is not used.
;; Warning: The variable |iv| is not used.
; (DEFUN |f02affDefaultSolve| ...) is being compiled.
;; Warning: The variable |ia| is not used.
; (DEFUN |f02agfDefaultSolve| ...) is being compiled.
;; Warning: The variable |ia| is not used.
;; Warning: The variable |ivr| is not used.
;; Warning: The variable |ivi| is not used.
; (DEFUN |f02ajfDefaultSolve| ...) is being compiled.
;; Warning: The variable |iar| is not used.
;; Warning: The variable |iai| is not used.
; (DEFUN |f02akfDefaultSolve| ...) is being compiled.
;; Warning: The variable |iar| is not used.
;; Warning: The variable |iai| is not used.
;; Warning: The variable |ivr| is not used.
;; Warning: The variable |ivi| is not used.
; (DEFUN |f02awfDefaultSolve| ...) is being compiled.
;; Warning: The variable |iar| is not used.
;; Warning: The variable |iai| is not used.
; (DEFUN |f02axfDefaultSolve| ...) is being compiled.
;; Warning: The variable |iar| is not used.
;; Warning: The variable |iai| is not used.
;; Warning: The variable |ivr| is not used.
;; Warning: The variable |ivi| is not used.
; (DEFUN |f02bbfDefaultSolve| ...) is being compiled.
;; Warning: The variable |ia| is not used.
;; Warning: The variable |iv| is not used.
; (DEFUN |f02bjfDefaultSolve| ...) is being compiled.
;; Warning: The variable |ia| is not used.
;; Warning: The variable |ib| is not used.
;; Warning: The variable |iv| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nag-f04.clisp.
; (DEFUN |f04adfSolve| ...) is being compiled.
;; The variable |$bcParseOnly| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |f04atfDefaultSolve| ...) is being compiled.
;; Warning: The variable |iaa| is not used.
; (DEFUN |f04jgfDefaultSolve| ...) is being compiled.
;; Warning: The variable |nra| is not used.
;; Warning: The variable |lwork| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nag-f07.clisp.
; (DEFUN |f07adfSolve| ...) is being compiled.
;; The variable |$bcParseOnly| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |f07adfDefaultSolve| ...) is being compiled.
;; Warning: The variable |lda| is not used.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


Compiling /research2/test0819/int/interp/nag-s.clisp.
; (DEFUN |s17dcfGen| ...) is being compiled.
;; The variable |$bcParseOnly| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib AHYP 
; (DEFUN |ArcHyperbolicFunctionCategory| ...) is being compiled.
;; The variable |ArcHyperbolicFunctionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ATTREG 
; (DEFUN |AttributeRegistry| ...) is being compiled.
;; The variable |AttributeRegistry;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CFCAT 
; (DEFUN |CombinatorialFunctionCategory| ...) is being compiled.
;; The variable |CombinatorialFunctionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ELTAB 
; (DEFUN |Eltable| ...) is being compiled.
;; The variable |Eltable;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |Eltable;| ...) is being compiled.
;; The variable |Eltable;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib KOERCE 
; (DEFUN |CoercibleTo| ...) is being compiled.
;; The variable |CoercibleTo;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |CoercibleTo;| ...) is being compiled.
;; The variable |CoercibleTo;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib KONVERT 
; (DEFUN |ConvertibleTo| ...) is being compiled.
;; The variable |ConvertibleTo;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |ConvertibleTo;| ...) is being compiled.
;; The variable |ConvertibleTo;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OM 
; (DEFUN |OpenMath| ...) is being compiled.
;; The variable |OpenMath;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PTRANFN 
; (DEFUN |PartialTranscendentalFunctions| ...) is being compiled.
;; The variable |PartialTranscendentalFunctions;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |PartialTranscendentalFunctions;| ...) is being compiled.
;; The variable |PartialTranscendentalFunctions;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SPFCAT 
; (DEFUN |SpecialFunctionCategory| ...) is being compiled.
;; The variable |SpecialFunctionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib TYPE 
; (DEFUN |Type| ...) is being compiled.
;; The variable |Type;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib COMBOPC 
; (DEFUN |CombinatorialOpsCategory| ...) is being compiled.
;; The variable |CombinatorialOpsCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FORTCAT 
; (DEFUN |FortranProgramCategory| ...) is being compiled.
;; The variable |FortranProgramCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. InfiniteTuple #1 of cat 
(|Join| (|CoercibleTo| (|OutputForm|)) (CATEGORY |domain| (SIGNATURE |map| ($ (|Mapping| |#1| |#1|) $)) (SIGNATURE |filterWhile| ($ (|Mapping| (|Boolean|) |#1|) $)) (SIGNATURE |filterUntil| ($ (|Mapping| (|Boolean|) |#1|) $)) (SIGNATURE |select| ($ (|Mapping| (|Boolean|) |#1|) $)) (SIGNATURE |generate| ($ (|Mapping| |#1| |#1|) |#1|)) (SIGNATURE |construct| ((|Stream| |#1|) $))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|LazyStreamAggregate| |#1|)    finalizing nrlib ITUPLE 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PATAB 
; (DEFUN |Patternable| ...) is being compiled.
;; The variable |Patternable;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |Patternable;| ...) is being compiled.
;; The variable |Patternable;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PPCURVE 
; (DEFUN |PlottablePlaneCurveCategory| ...) is being compiled.
;; The variable |PlottablePlaneCurveCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PSCURVE 
; (DEFUN |PlottableSpaceCurveCategory| ...) is being compiled.
;; The variable |PlottableSpaceCurveCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib REAL 
; (DEFUN |RealConstant| ...) is being compiled.
;; The variable |RealConstant;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RETRACT 
; (DEFUN |RetractableTo| ...) is being compiled.
;; The variable |RetractableTo;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |RetractableTo;| ...) is being compiled.
;; The variable |RetractableTo;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SEGCAT 
; (DEFUN |SegmentCategory| ...) is being compiled.
;; The variable |SegmentCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |SegmentCategory;| ...) is being compiled.
;; The variable |SegmentCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FMC 
; (DEFUN |FortranMatrixCategory| ...) is being compiled.
;; The variable |FortranMatrixCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FMFUN 
; (DEFUN |FortranMatrixFunctionCategory| ...) is being compiled.
;; The variable |FortranMatrixFunctionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FORTFN 
; (DEFUN |FortranFunctionCategory| ...) is being compiled.
;; The variable |FortranFunctionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FVC 
; (DEFUN |FortranVectorCategory| ...) is being compiled.
;; The variable |FortranVectorCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FVFUN 
; (DEFUN |FortranVectorFunctionCategory| ...) is being compiled.
;; The variable |FortranVectorFunctionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SEGXCAT 
; (DEFUN |SegmentExpansionCategory| ...) is being compiled.
;; The variable |SegmentExpansionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |SegmentExpansionCategory;| ...) is being compiled.
;; The variable |SegmentExpansionCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib AGG 
; (DEFUN |Aggregate| ...) is being compiled.
;; The variable |Aggregate;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib BASTYPE 
; (DEFUN |BasicType| ...) is being compiled.
;; The variable |BasicType;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ELTAGG 
; (DEFUN |EltableAggregate| ...) is being compiled.
;; The variable |EltableAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |EltableAggregate;| ...) is being compiled.
;; The variable |EltableAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FAMONC 
; (DEFUN |FreeAbelianMonoidCategory| ...) is being compiled.
;; The variable |FreeAbelianMonoidCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FreeAbelianMonoidCategory;| ...) is being compiled.
;; The variable |FreeAbelianMonoidCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FILECAT 
; (DEFUN |FileCategory| ...) is being compiled.
;; The variable |FileCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FileCategory;| ...) is being compiled.
;; The variable |FileCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FINITE 
; (DEFUN |Finite| ...) is being compiled.
;; The variable |Finite;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FNCAT 
; (DEFUN |FileNameCategory| ...) is being compiled.
;; The variable |FileNameCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IDPC 
; (DEFUN |IndexedDirectProductCategory| ...) is being compiled.
;; The variable |IndexedDirectProductCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |IndexedDirectProductCategory;| ...) is being compiled.
;; The variable |IndexedDirectProductCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IEVALAB 
; (DEFUN |InnerEvalable| ...) is being compiled.
;; The variable |InnerEvalable;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |InnerEvalable;| ...) is being compiled.
;; The variable |InnerEvalable;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LMODULE 
; (DEFUN |LeftModule| ...) is being compiled.
;; The variable |LeftModule;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |LeftModule;| ...) is being compiled.
;; The variable |LeftModule;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LOGIC 
; (DEFUN |Logic| ...) is being compiled.
;; The variable |Logic;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MONAD 
; (DEFUN |Monad| ...) is being compiled.
;; The variable |Monad;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NIPROB 
   Warnings: 
      [1] coerce:  nia has no value
      [2] coerce:  mdnia has no value
      [3] retract:  nia has no value
      [4] retract:  mdnia has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NUMINT 
; (DEFUN |NumericalIntegrationCategory| ...) is being compiled.
;; The variable |NumericalIntegrationCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ODECAT 
; (DEFUN |OrdinaryDifferentialEquationsSolverCategory| ...) is being compiled.
;; The variable |OrdinaryDifferentialEquationsSolverCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OPTCAT 
; (DEFUN |NumericalOptimizationCategory| ...) is being compiled.
;; The variable |NumericalOptimizationCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OPTPROB 
   Warnings: 
      [1] coerce:  noa has no value
      [2] coerce:  lsa has no value
      [3] retract:  noa has no value
      [4] retract:  lsa has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ORDSET 
; (DEFUN |OrderedSet| ...) is being compiled.
;; The variable |OrderedSet;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PATMAB 
; (DEFUN |PatternMatchable| ...) is being compiled.
;; The variable |PatternMatchable;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |PatternMatchable;| ...) is being compiled.
;; The variable |PatternMatchable;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PDECAT 
; (DEFUN |PartialDifferentialEquationsSolverCategory| ...) is being compiled.
;; The variable |PartialDifferentialEquationsSolverCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PDEPROB 
--->/research2/test0819/mnt/fedora5/../../src/algebra/PDEPROB.spad-->NumericalPDEProblem(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/PDEPROB.spad-->NumericalPDEProblem(): Missing Description

   REPSQ abbreviates package RepeatedSquaring 
(PUSH (QUOTE |RepeatedSquaring|) |$mutableDomains|)
Value = (|RepeatedSquaring|)

   REPDB abbreviates package RepeatedDoubling 
(PUSH (QUOTE |RepeatedDoubling|) |$mutableDomains|)
Value = (|RepeatedDoubling|)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RMODULE 
; (DEFUN |RightModule| ...) is being compiled.
;; The variable |RightModule;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |RightModule;| ...) is being compiled.
;; The variable |RightModule;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SEXCAT 
; (DEFUN |SExpressionCategory| ...) is being compiled.
;; The variable |SExpressionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |SExpressionCategory;| ...) is being compiled.
;; The variable |SExpressionCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SPACEC 
; (DEFUN |ThreeSpaceCategory| ...) is being compiled.
;; The variable |ThreeSpaceCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |ThreeSpaceCategory;| ...) is being compiled.
;; The variable |ThreeSpaceCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib STEP 
; (DEFUN |StepThrough| ...) is being compiled.
;; The variable |StepThrough;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ATRIG 
; (DEFUN |ArcTrigonometricFunctionCategory| ...) is being compiled.
;; The variable |ArcTrigonometricFunctionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib BMODULE 
; (DEFUN |BiModule| ...) is being compiled.
;; The variable |BiModule;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |BiModule;| ...) is being compiled.
;; The variable |BiModule;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CACHSET 
; (DEFUN |CachableSet| ...) is being compiled.
;; The variable |CachableSet;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CHARNZ 
; (DEFUN |CharacteristicNonZero| ...) is being compiled.
;; The variable |CharacteristicNonZero;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CHARZ 
; (DEFUN |CharacteristicZero| ...) is being compiled.
;; The variable |CharacteristicZero;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DVARCAT 
; (DEFUN |DifferentialVariableCategory| ...) is being compiled.
;; The variable |DifferentialVariableCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |DifferentialVariableCategory;| ...) is being compiled.
;; The variable |DifferentialVariableCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ELEMFUN 
; (DEFUN |ElementaryFunctionCategory| ...) is being compiled.
;; The variable |ElementaryFunctionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib EVALAB 
; (DEFUN |Evalable| ...) is being compiled.
;; The variable |Evalable;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |Evalable;| ...) is being compiled.
;; The variable |Evalable;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FEVALAB 
; (DEFUN |FullyEvalableOver| ...) is being compiled.
;; The variable |FullyEvalableOver;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FullyEvalableOver;| ...) is being compiled.
;; The variable |FullyEvalableOver;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FPATMAB 
; (DEFUN |FullyPatternMatchable| ...) is being compiled.
;; The variable |FullyPatternMatchable;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FullyPatternMatchable;| ...) is being compiled.
;; The variable |FullyPatternMatchable;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GROUP 
; (DEFUN |Group| ...) is being compiled.
;; The variable |Group;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IXAGG 
; (DEFUN |IndexedAggregate| ...) is being compiled.
;; The variable |IndexedAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |IndexedAggregate;| ...) is being compiled.
;; The variable |IndexedAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LALG 
; (DEFUN |LeftAlgebra| ...) is being compiled.
;; The variable |LeftAlgebra;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |LeftAlgebra;| ...) is being compiled.
;; The variable |LeftAlgebra;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LINEXP 
; (DEFUN |LinearlyExplicitRingOver| ...) is being compiled.
;; The variable |LinearlyExplicitRingOver;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |LinearlyExplicitRingOver;| ...) is being compiled.
;; The variable |LinearlyExplicitRingOver;CAT| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. ModuleMonomial(#1,#2,#3) of cat 
(|Join| (|OrderedSet|) (CATEGORY |domain| (SIGNATURE |exponent| (|#2| $)) (SIGNATURE |index| (|#1| $)) (SIGNATURE |coerce| ($ (|Record| (|:| |index| |#1|) (|:| |exponent| |#2|)))) (SIGNATURE |coerce| ((|Record| (|:| |index| |#1|) (|:| |exponent| |#2|)) $)) (SIGNATURE |construct| ($ |#1| |#2|))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|RecordCategory| (|:| |index| |#1|) (|:| |exponent| |#2|))    finalizing nrlib MODMONOM 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MONADWU- 
   Warnings: 
      [1] rightPower: signature of lhs not unique: SS(NonNegativeInteger) chosen
      [2] leftPower: signature of lhs not unique: SS(NonNegativeInteger) chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MONADWU 
; (DEFUN |MonadWithUnit| ...) is being compiled.
;; The variable |MonadWithUnit;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NARNG 
; (DEFUN |NonAssociativeRng| ...) is being compiled.
;; The variable |NonAssociativeRng;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OASGP 
; (DEFUN |OrderedAbelianSemiGroup| ...) is being compiled.
;; The variable |OrderedAbelianSemiGroup;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ORDFIN 
; (DEFUN |OrderedFinite| ...) is being compiled.
;; The variable |OrderedFinite;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ORDMON 
; (DEFUN |OrderedMonoid| ...) is being compiled.
;; The variable |OrderedMonoid;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PATMATCH 
   Warnings: 
      [1] ist: not known that (SetCategory) is of mode (CATEGORY package (SIGNATURE is? ((Boolean) Subject Pat)) (SIGNATURE is? ((Boolean) (List Subject) Pat)) (SIGNATURE Is ((PatternMatchListResult Base Subject (List Subject)) (List Subject) Pat)) (IF (has Subject (RetractableTo (Symbol))) (SIGNATURE Is ((List (Equation Subject)) Subject Pat)) (IF (has Subject (Ring)) (SIGNATURE Is ((List (Equation (Polynomial Subject))) Subject Pat)) (SIGNATURE Is ((PatternMatchResult Base Subject) Subject Pat)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PERMCAT 
; (DEFUN |PermutationCategory| ...) is being compiled.
;; The variable |PermutationCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |PermutationCategory;| ...) is being compiled.
;; The variable |PermutationCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PDRING 
; (DEFUN |PartialDifferentialRing| ...) is being compiled.
;; The variable |PartialDifferentialRing;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |PartialDifferentialRing;| ...) is being compiled.
;; The variable |PartialDifferentialRing;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib TRIGCAT 
; (DEFUN |TrigonometricFunctionCategory| ...) is being compiled.
;; The variable |TrigonometricFunctionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib BGAGG 
; (DEFUN |BagAggregate| ...) is being compiled.
;; The variable |BagAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |BagAggregate;| ...) is being compiled.
;; The variable |BagAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib BRAGG 
; (DEFUN |BinaryRecursiveAggregate| ...) is being compiled.
;; The variable |BinaryRecursiveAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |BinaryRecursiveAggregate;| ...) is being compiled.
;; The variable |BinaryRecursiveAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DIFEXT 
; (DEFUN |DifferentialExtension| ...) is being compiled.
;; The variable |DifferentialExtension;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |DifferentialExtension;| ...) is being compiled.
;; The variable |DifferentialExtension;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DLAGG 
; (DEFUN |DoublyLinkedAggregate| ...) is being compiled.
;; The variable |DoublyLinkedAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |DoublyLinkedAggregate;| ...) is being compiled.
;; The variable |DoublyLinkedAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ELAGG 
; (DEFUN |ExtensibleLinearAggregate| ...) is being compiled.
;; The variable |ExtensibleLinearAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |ExtensibleLinearAggregate;| ...) is being compiled.
;; The variable |ExtensibleLinearAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ES2 
   Warnings: 
      [1] map:  IN has no value
      [2] map:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GRMOD 
; (DEFUN |GradedModule| ...) is being compiled.
;; The variable |GradedModule;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |GradedModule;| ...) is being compiled.
;; The variable |GradedModule;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib HYPCAT 
; (DEFUN |HyperbolicFunctionCategory| ...) is being compiled.
;; The variable |HyperbolicFunctionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MODRING 
   Warnings: 
      [1] coerce: signature of lhs not unique: R$ chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MODULE 
; (DEFUN |Module| ...) is being compiled.
;; The variable |Module;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |Module;| ...) is being compiled.
;; The variable |Module;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NASRING 
; (DEFUN |NonAssociativeRing| ...) is being compiled.
;; The variable |NonAssociativeRing;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ZMOD 
; (DEFUN |IntegerMod;| ...) is being compiled.
;; The variable IDENTITY is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ALGEBRA 
; (DEFUN |Algebra| ...) is being compiled.
;; The variable |Algebra;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |Algebra;| ...) is being compiled.
;; The variable |Algebra;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib BTCAT 
; (DEFUN |BinaryTreeCategory| ...) is being compiled.
;; The variable |BinaryTreeCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |BinaryTreeCategory;| ...) is being compiled.
;; The variable |BinaryTreeCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FMCAT 
; (DEFUN |FreeModuleCat| ...) is being compiled.
;; The variable |FreeModuleCat;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FreeModuleCat;| ...) is being compiled.
;; The variable |FreeModuleCat;CAT| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. InnerFreeAbelianMonoid(#1,#2,#3) of cat 
(|FreeAbelianMonoidCategory| |#1| |#2|)    has no  outputForm : (%,((OutputForm,OutputForm) -> OutputForm),((OutputForm,OutputForm) -> OutputForm),Integer) -> OutputForm 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IFAMON 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GRALG 
; (DEFUN |GradedAlgebra| ...) is being compiled.
;; The variable |GradedAlgebra;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |GradedAlgebra;| ...) is being compiled.
;; The variable |GradedAlgebra;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OCAMON 
; (DEFUN |OrderedCancellationAbelianMonoid| ...) is being compiled.
;; The variable |OrderedCancellationAbelianMonoid;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PRQAGG 
; (DEFUN |PriorityQueueAggregate| ...) is being compiled.
;; The variable |PriorityQueueAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |PriorityQueueAggregate;| ...) is being compiled.
;; The variable |PriorityQueueAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib QUAGG 
; (DEFUN |QueueAggregate| ...) is being compiled.
;; The variable |QueueAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |QueueAggregate;| ...) is being compiled.
;; The variable |QueueAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SKAGG 
; (DEFUN |StackAggregate| ...) is being compiled.
;; The variable |StackAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |StackAggregate;| ...) is being compiled.
;; The variable |StackAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. BinarySearchTree #1 of cat 
(|Join| (|BinaryTreeCategory| |#1|) (CATEGORY |domain| (ATTRIBUTE |shallowlyMutable|) (ATTRIBUTE |finiteAggregate|) (SIGNATURE |binarySearchTree| ($ (|List| |#1|))) (SIGNATURE |insert!| ($ |#1| $)) (SIGNATURE |insertRoot!| ($ |#1| $)) (SIGNATURE |split| ((|Record| (|:| |less| $) (|:| |greater| $)) |#1| $))))    has no  binaryTree : #1 -> % 

--------------non extending category----------------------
.. BinaryTournament #1 of cat 
(|Join| (|BinaryTreeCategory| |#1|) (CATEGORY |domain| (ATTRIBUTE |shallowlyMutable|) (SIGNATURE |binaryTournament| ($ (|List| |#1|))) (SIGNATURE |insert!| ($ |#1| $))))    has no  binaryTree : #1 -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CARD 
   Warnings: 
      [1] **: signature of lhs not unique: $$$ chosen
      [2] **: :(NonNegativeInteger) -- should replace by pretend

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DQAGG 
; (DEFUN |DequeueAggregate| ...) is being compiled.
;; The variable |DequeueAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |DequeueAggregate;| ...) is being compiled.
;; The variable |DequeueAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FACTFUNC 
   Warnings: 
      [1] nthRoot:  radi has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FMTC 
; (DEFUN |FortranMachineTypeCategory| ...) is being compiled.
;; The variable |FortranMachineTypeCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MLO 
; (DEFUN |MonogenicLinearOperator| ...) is being compiled.
;; The variable |MonogenicLinearOperator;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |MonogenicLinearOperator;| ...) is being compiled.
;; The variable |MonogenicLinearOperator;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAALG 
; (DEFUN |NonAssociativeAlgebra| ...) is being compiled.
;; The variable |NonAssociativeAlgebra;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NonAssociativeAlgebra;| ...) is being compiled.
;; The variable |NonAssociativeAlgebra;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NEWTON 
--->-->NewtonInterpolation((newton ((SparseUnivariatePolynomial F) (List F)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OAGROUP 
; (DEFUN |OrderedAbelianGroup| ...) is being compiled.
;; The variable |OrderedAbelianGroup;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OAMONS 
; (DEFUN |OrderedAbelianMonoidSup| ...) is being compiled.
;; The variable |OrderedAbelianMonoidSup;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PID 
; (DEFUN |PrincipalIdealDomain| ...) is being compiled.
;; The variable |PrincipalIdealDomain;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib XALG 
; (DEFUN |XAlgebra| ...) is being compiled.
;; The variable |XAlgebra;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |XAlgebra;| ...) is being compiled.
;; The variable |XAlgebra;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib AMR 
; (DEFUN |AbelianMonoidRing| ...) is being compiled.
;; The variable |AbelianMonoidRing;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |AbelianMonoidRing;| ...) is being compiled.
;; The variable |AbelianMonoidRing;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FAGROUP 
   Warnings: 
      [1] <:  exp has no value
      [2] <:  gen has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FIELD- 
   Warnings: 
      [1] squareFree: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE / (S S S)) (SIGNATURE inv (S S)) (SIGNATURE prime? ((Boolean) S)) (SIGNATURE squareFree ((Factored S) S)) (SIGNATURE factor ((Factored S) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE gcd (S (List S))) (SIGNATURE gcd (S S S)) (SIGNATURE associates? ((Boolean) S S)) (SIGNATURE unitCanonical (S S)) (SIGNATURE unitNormal ((Record (: unit S) (: canonical S) (: associate S)) S)) (SIGNATURE exquo ((Union S failed) S S)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FIELD 
; (DEFUN |Field| ...) is being compiled.
;; The variable |Field;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FLAGG 
; (DEFUN |FiniteLinearAggregate| ...) is being compiled.
;; The variable |FiniteLinearAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FiniteLinearAggregate;| ...) is being compiled.
;; The variable |FiniteLinearAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FLINEXP- 
   Warnings: 
      [1] reducedSystem: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FLINEXP 
; (DEFUN |FullyLinearlyExplicitRingOver| ...) is being compiled.
;; The variable |FullyLinearlyExplicitRingOver;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FullyLinearlyExplicitRingOver;| ...) is being compiled.
;; The variable |FullyLinearlyExplicitRingOver;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FRETRCT 
; (DEFUN |FullyRetractableTo| ...) is being compiled.
;; The variable |FullyRetractableTo;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FullyRetractableTo;| ...) is being compiled.
;; The variable |FullyRetractableTo;CAT| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. FourierSeries(#1,#2) of cat 
(|Join| (|Algebra| |#1|) (CATEGORY |domain| (IF (|has| |#2| (ATTRIBUTE |canonical|)) (IF (|has| |#1| (ATTRIBUTE |canonical|)) (ATTRIBUTE |canonical|) |noBranch|) |noBranch|) (SIGNATURE |coerce| ($ |#1|)) (SIGNATURE |coerce| ($ (|FourierComponent| |#2|))) (SIGNATURE |makeSin| ($ |#2| |#1|)) (SIGNATURE |makeCos| ($ |#2| |#1|))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|IndexedDirectProductCategory| |#1| (|FourierComponent| |#2|))    finalizing nrlib FSERIES 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FT 
   Semantic Errors: 
      [1]  void is not a known type

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IDPAG 
   Warnings: 
      [1] -:  res has no value
      [2] -:  endcell has no value

--------------non extending category----------------------
.. LocalAlgebra(#1,#2,#3) of cat 
(|Join| (|Algebra| |#2|) (CATEGORY |domain| (IF (|has| |#1| (|OrderedRing|)) (ATTRIBUTE (|OrderedRing|)) |noBranch|) (SIGNATURE / ($ $ |#3|)) (SIGNATURE / ($ |#1| |#3|)) (SIGNATURE |numer| (|#1| $)) (SIGNATURE |denom| (|#3| $))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(IF (|has| |#1| (|OrderedAbelianGroup|)) (ATTRIBUTE (|OrderedAbelianGroup|)) |noBranch|)    finalizing nrlib LA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OMLO 
   Warnings: 
      [1] op: :$ -- should replace by @
      [2] po: :P -- should replace by pretend
      [3] *: :P -- should replace by pretend
      [4] coerce: :P -- should replace by pretend

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PADICCT 
; (DEFUN |PAdicIntegerCategory| ...) is being compiled.
;; The variable |PAdicIntegerCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |PAdicIntegerCategory;| ...) is being compiled.
;; The variable |PAdicIntegerCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RADCAT 
; (DEFUN |RadicalCategory| ...) is being compiled.
;; The variable |RadicalCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib XFALG 
; (DEFUN |XFreeAlgebra| ...) is being compiled.
;; The variable |XFreeAlgebra;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |XFreeAlgebra;| ...) is being compiled.
;; The variable |XFreeAlgebra;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib A1AGG 
; (DEFUN |OneDimensionalArrayAggregate| ...) is being compiled.
;; The variable |OneDimensionalArrayAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |OneDimensionalArrayAggregate;| ...) is being compiled.
;; The variable |OneDimensionalArrayAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ARR2CAT 
; (DEFUN |TwoDimensionalArrayCategory| ...) is being compiled.
;; The variable |TwoDimensionalArrayCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |TwoDimensionalArrayCategory;| ...) is being compiled.
;; The variable |TwoDimensionalArrayCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP34 
   Semantic Errors: 
      [1] coerce:  code is BOTH a variable and a literal
 
   Warnings: 
      [1]  IFLAG has no value
      [2]  N has no value
      [3]  X has no value
      [4]  Y has no value
      [5]  LRWORK has no value
      [6]  LIWORK has no value
      [7]  RWORK has no value
      [8]  IWORK has no value
      [9] coerce:  I has no value
      [10] coerce:  J has no value
      [11] coerce:  W1 has no value
      [12] coerce:  W2 has no value
      [13] coerce:  MS has no value

--------------non extending category----------------------
.. BalancedBinaryTree #1 of cat 
(|Join| (|BinaryTreeCategory| |#1|) (CATEGORY |domain| (ATTRIBUTE |finiteAggregate|) (ATTRIBUTE |shallowlyMutable|) (SIGNATURE |balancedBinaryTree| ($ (|NonNegativeInteger|) |#1|)) (SIGNATURE |setleaves!| ($ $ (|List| |#1|))) (SIGNATURE |mapUp!| (|#1| $ (|Mapping| |#1| |#1| |#1|))) (SIGNATURE |mapUp!| ($ $ $ (|Mapping| |#1| |#1| |#1| |#1| |#1|))) (SIGNATURE |mapDown!| ($ $ |#1| (|Mapping| |#1| |#1| |#1|))) (SIGNATURE |mapDown!| ($ $ |#1| (|Mapping| (|List| |#1|) |#1| |#1| |#1|)))))    has no  binaryTree : #1 -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib BFUNCT 
   Processing BasicFunctions for Browser database:
--->/research2/test0819/mnt/fedora5/../../src/algebra/BFUNCT.spad-->BasicFunctions(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/BFUNCT.spad-->BasicFunctions(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib BTREE 
   Warnings: 
      [1] empty: pretend$ -- should replace by @
      [2] node: :Rep -- should replace by pretend
      [3] setvalue!: :Rep -- should replace by pretend
      [4] setleft!: :Rep -- should replace by pretend
      [5] setright!: :(List (Tree S)) -- should replace by pretend

--------------non extending category----------------------
.. Dequeue #1 of cat 
(|Join| (|DequeueAggregate| |#1|) (CATEGORY |domain| (SIGNATURE |dequeue| ($ (|List| |#1|)))))    has no  queue : List #1 -> % 

--------------non extending category----------------------
.. DataList #1 of cat 
(|Join| (|ListAggregate| |#1|) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|List| |#1|))) (SIGNATURE |coerce| ((|List| |#1|) $)) (SIGNATURE |datalist| ($ (|List| |#1|))) (SIGNATURE |elt| ($ $ "unique")) (SIGNATURE |elt| ($ $ "sort")) (SIGNATURE |elt| ((|NonNegativeInteger|) $ "count"))))    has no  nil : () -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DRAWCX 
--->/research2/test0819/mnt/fedora5/../../src/algebra/DRAWCX.spad-->DrawComplex(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/DRAWCX.spad-->DrawComplex(): Missing Description

--------------non extending category----------------------
.. d01gbfAnnaType of cat 
(|NumericalIntegrationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D01GBFA 

--------------non extending category----------------------
.. d02ejfAnnaType of cat 
(|OrdinaryDifferentialEquationsSolverCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D02EJFA 

--------------non extending category----------------------
.. d03fafAnnaType of cat 
(|PartialDifferentialEquationsSolverCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D03FAFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FAMR 
; (DEFUN |FiniteAbelianMonoidRing| ...) is being compiled.
;; The variable |FiniteAbelianMonoidRing;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FiniteAbelianMonoidRing;| ...) is being compiled.
;; The variable |FiniteAbelianMonoidRing;CAT| is undefined.
;; The compiler will assume this variable is a global.

   FLASORT abbreviates package FiniteLinearAggregateSort 
(PUSH (QUOTE |FiniteLinearAggregateSort|) |$mutableDomains|)
Value = (|FiniteLinearAggregateSort|)

--------------non extending category----------------------
.. FreeGroup #1 of cat 
(|Join| (|Group|) (|RetractableTo| |#1|) (CATEGORY |domain| (SIGNATURE * ($ |#1| $)) (SIGNATURE * ($ $ |#1|)) (SIGNATURE ** ($ |#1| (|Integer|))) (SIGNATURE |size| ((|NonNegativeInteger|) $)) (SIGNATURE |nthExpon| ((|Integer|) $ (|Integer|))) (SIGNATURE |nthFactor| (|#1| $ (|Integer|))) (SIGNATURE |mapExpon| ($ (|Mapping| (|Integer|) (|Integer|)) $)) (SIGNATURE |mapGen| ($ (|Mapping| |#1| |#1|) $)) (SIGNATURE |factors| ((|List| (|Record| (|:| |gen| |#1|) (|:| |exp| (|Integer|)))) $))))    has no  outputForm : (%,((OutputForm,OutputForm) -> OutputForm),((OutputForm,OutputForm) -> OutputForm),Integer) -> OutputForm 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FM1 
   Warnings: 
      [1] ListOfTerms: :(List (Record (: k S) (: c R))) -- should replace by pretend

--------------non extending category----------------------
.. FreeModule1(#1,#2) of cat 
(|Join| (|FreeModuleCat| |#1| |#2|) (CATEGORY |domain| (SIGNATURE * ($ |#2| |#1|))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|IndexedDirectProductCategory| |#1| |#2|)    finalizing nrlib FM1 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FPC 
; (DEFUN |FieldOfPrimeCharacteristic| ...) is being compiled.
;; The variable |FieldOfPrimeCharacteristic;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FMONOID 
   Warnings: 
      [1] overlap:  l has no value
      [2] divide:  l has no value
      [3] hclf:  h has no value
      [4] lquo:  gen has no value
      [5] lquo:  exp has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FMONOID 
--------------non extending category----------------------
.. FreeMonoid #1 of cat 
(|Join| (|Monoid|) (|RetractableTo| |#1|) (CATEGORY |domain| (SIGNATURE * ($ |#1| $)) (SIGNATURE * ($ $ |#1|)) (SIGNATURE ** ($ |#1| (|NonNegativeInteger|))) (SIGNATURE |hclf| ($ $ $)) (SIGNATURE |hcrf| ($ $ $)) (SIGNATURE |lquo| ((|Union| $ "failed") $ $)) (SIGNATURE |rquo| ((|Union| $ "failed") $ $)) (SIGNATURE |divide| ((|Union| (|Record| (|:| |lm| $) (|:| |rm| $)) "failed") $ $)) (SIGNATURE |overlap| ((|Record| (|:| |lm| $) (|:| |mm| $) (|:| |rm| $)) $ $)) (SIGNATURE |size| ((|NonNegativeInteger|) $)) (SIGNATURE |factors| ((|List| (|Record| (|:| |gen| |#1|) (|:| |exp| (|NonNegativeInteger|)))) $)) (SIGNATURE |nthExpon| ((|NonNegativeInteger|) $ (|Integer|))) (SIGNATURE |nthFactor| (|#1| $ (|Integer|))) (SIGNATURE |mapExpon| ($ (|Mapping| (|NonNegativeInteger|) (|NonNegativeInteger|)) $)) (SIGNATURE |mapGen| ($ (|Mapping| |#1| |#1|) $)) (IF (|has| |#1| (|OrderedSet|)) (ATTRIBUTE (|OrderedSet|)) |noBranch|)))    has no  outputForm : (%,((OutputForm,OutputForm) -> OutputForm),((OutputForm,OutputForm) -> OutputForm),Integer) -> OutputForm 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IPADIC 
   Warnings: 
      [1] padic: pretend$ -- should replace by @
      [2] =:  st has no value
      [3] intToPAdic:  digit has no value
      [4] intToPAdic:  carry has no value
      [5] intPlusPAdic:  digit has no value
      [6] intPlusPAdic:  carry has no value
      [7] intMinusPAdic:  digit has no value
      [8] intMinusPAdic:  carry has no value
      [9] plusAux:  digit has no value
      [10] plusAux:  carry has no value
      [11] minusAux:  digit has no value
      [12] minusAux:  carry has no value
      [13] intMult:  digit has no value
      [14] intMult:  carry has no value
      [15] timesAux:  digit has no value
      [16] timesAux:  carry has no value
      [17] coerce: pretend(Integer) -- should replace by @
      [18] coerce:  l has no value

--------------non extending category----------------------
.. LieExponentials(#1,#2,#3) of cat 
(|Join| (|Group|) (CATEGORY |domain| (SIGNATURE |exp| ($ (|LiePolynomial| |#1| |#2|))) (SIGNATURE |log| ((|LiePolynomial| |#1| |#2|) $)) (SIGNATURE |ListOfTerms| ((|List| (|Record| (|:| |k| (|PoincareBirkhoffWittLyndonBasis| |#1|)) (|:| |c| |#2|))) $)) (SIGNATURE |coerce| ((|XDistributedPolynomial| |#1| |#2|) $)) (SIGNATURE |coerce| ((|XPBWPolynomial| |#1| |#2|) $)) (SIGNATURE |mirror| ($ $)) (SIGNATURE |varList| ((|List| |#1|) $)) (SIGNATURE |LyndonBasis| ((|List| (|LiePolynomial| |#1| |#2|)) (|List| |#1|))) (SIGNATURE |LyndonCoordinates| ((|List| (|Record| (|:| |k| (|LyndonWord| |#1|)) (|:| |c| |#2|))) $)) (SIGNATURE |identification| ((|List| (|Equation| |#2|)) $ $))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|XPolynomialsCat| |#1| |#2|)    finalizing nrlib LEXP 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LIECAT 
; (DEFUN |LieAlgebra| ...) is being compiled.
;; The variable |LieAlgebra;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |LieAlgebra;| ...) is being compiled.
;; The variable |LieAlgebra;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LMOPS 
   Warnings: 
      [1] mapExpon:  ans has no value
      [2] outputForm: The conditional modes (List (OutputForm)) and $ conflict

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LZSTAGG 
; (DEFUN |LazyStreamAggregate| ...) is being compiled.
;; The variable |LazyStreamAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |LazyStreamAggregate;| ...) is being compiled.
;; The variable |LazyStreamAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MOEBIUS 
   Semantic Errors: 
      [1]  a is BOTH a variable and a literal
      [2]  b is BOTH a variable and a literal
      [3]  c is BOTH a variable and a literal
      [4]  d is BOTH a variable and a literal
      [5] eval:  a is BOTH a variable and a literal
      [6] eval:  b is BOTH a variable and a literal
      [7] eval:  c is BOTH a variable and a literal
      [8] eval:  d is BOTH a variable and a literal
      [9] proportional?:  a is BOTH a variable and a literal
      [10] proportional?:  b is BOTH a variable and a literal
      [11] proportional?:  c is BOTH a variable and a literal
      [12] proportional?:  d is BOTH a variable and a literal
 
   Warnings: 
      [1] recip: signature of lhs not unique: $$ chosen

--------------non extending category----------------------
.. ModuleOperator(#1,#2) of cat 
(|Join| (|Ring|) (|RetractableTo| |#1|) (|RetractableTo| (|BasicOperator|)) (|Eltable| |#2| |#2|) (CATEGORY |domain| (IF (|has| |#1| (|CharacteristicZero|)) (ATTRIBUTE (|CharacteristicZero|)) |noBranch|) (IF (|has| |#1| (|CharacteristicNonZero|)) (ATTRIBUTE (|CharacteristicNonZero|)) |noBranch|) (IF (|has| |#1| (|CommutativeRing|)) (PROGN (ATTRIBUTE (|Algebra| |#1|)) (SIGNATURE |adjoint| ($ $)) (SIGNATURE |adjoint| ($ $ $)) (SIGNATURE |conjug| (|#1| |#1|))) |noBranch|) (SIGNATURE |evaluate| ($ $ (|Mapping| |#2| |#2|))) (SIGNATURE |evaluateInverse| ($ $ (|Mapping| |#2| |#2|))) (SIGNATURE ** ($ (|BasicOperator|) (|Integer|))) (SIGNATURE ** ($ $ (|Integer|))) (SIGNATURE |opeval| (|#2| (|BasicOperator|) |#2|)) (SIGNATURE |makeop| ($ |#1| (|FreeGroup| (|BasicOperator|))))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|Module| (|Integer|))    finalizing nrlib MODOP 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MRING 
   Warnings: 
      [1] index:  ans has no value
      [2] retractIfCan:  coef has no value
      [3] retractIfCan:  monom has no value
      [4] recip:  monom has no value
      [5] recip:  coef has no value
      [6] coerce:  coef has no value
      [7] coerce:  monom has no value
      [8] =:  coef has no value
      [9] =:  monom has no value
      [10] sortAndAdd:  m has no value
      [11] sortAndAdd:  res has no value

--------------non extending category----------------------
.. OrderedFreeMonoid #1 of cat 
(|Join| (|OrderedMonoid|) (|RetractableTo| |#1|) (CATEGORY |domain| (SIGNATURE * ($ |#1| $)) (SIGNATURE * ($ $ |#1|)) (SIGNATURE ** ($ |#1| (|NonNegativeInteger|))) (SIGNATURE |first| (|#1| $)) (SIGNATURE |rest| ($ $)) (SIGNATURE |mirror| ($ $)) (SIGNATURE |lexico| ((|Boolean|) $ $)) (SIGNATURE |hclf| ($ $ $)) (SIGNATURE |hcrf| ($ $ $)) (SIGNATURE |lquo| ((|Union| $ "failed") $ $)) (SIGNATURE |rquo| ((|Union| $ "failed") $ $)) (SIGNATURE |lquo| ((|Union| $ "failed") $ |#1|)) (SIGNATURE |rquo| ((|Union| $ "failed") $ |#1|)) (SIGNATURE |div| ((|Union| (|Record| (|:| |lm| $) (|:| |rm| $)) "failed") $ $)) (SIGNATURE |overlap| ((|Record| (|:| |lm| $) (|:| |mm| $) (|:| |rm| $)) $ $)) (SIGNATURE |size| ((|NonNegativeInteger|) $)) (SIGNATURE |nthExpon| ((|NonNegativeInteger|) $ (|Integer|))) (SIGNATURE |nthFactor| (|#1| $ (|Integer|))) (SIGNATURE |factors| ((|List| (|Record| (|:| |gen| |#1|) (|:| |exp| (|NonNegativeInteger|)))) $)) (SIGNATURE |length| ((|NonNegativeInteger|) $)) (SIGNATURE |varList| ((|List| |#1|) $))))    has no  divide : (%,%) -> Union(Record(lm: %,rm: %),"failed") 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ONECOMP 
; (DEFUN |OnePointCompletion;| ...) is being compiled.
;; The variable IDENTITY is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ORDCOMP 
   Warnings: 
      [1] retract:  fin has no value
      [2] retractIfCan:  fin has no value
      [3] coerce:  fin has no value
      [4] coerce:  inf has no value
      [5] whatInfinity:  inf has no value
      [6] =:  inf has no value
      [7] =:  fin has no value
      [8] *:  inf has no value
      [9] *:  fin has no value
      [10] -:  inf has no value
      [11] -:  fin has no value
      [12] +:  inf has no value
      [13] +:  fin has no value
      [14] recip:  fin has no value
      [15] <:  inf has no value
      [16] <:  fin has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ORDCOMP 
; (DEFUN |OrderedCompletion;| ...) is being compiled.
;; The variable IDENTITY is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OREPCAT 
; (DEFUN |UnivariateSkewPolynomialCategory| ...) is being compiled.
;; The variable |UnivariateSkewPolynomialCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |UnivariateSkewPolynomialCategory;| ...) is being compiled.
;; The variable |UnivariateSkewPolynomialCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PENDTREE 
   Warnings: 
      [1] ptree: pretend$ -- should replace by @
      [2] ptree: :Rep -- should replace by pretend
      [3] ptree: :$ -- should replace by @
      [4] =: :Rep -- should replace by pretend

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PFR 
   Warnings: 
      [1] LessThan: :(Boolean) -- should replace by pretend
      [2] multiplyFracTerms: :Rep -- should replace by pretend
      [3] multiplyFracTerms:  c has no value
      [4] compactFraction: :(NonNegativeInteger) -- should replace by pretend
      [5] compactFraction:  s has no value
      [6] compactFraction:  bf has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PMDOWN 
   Warnings: 
      [1] patternMatch: not known that (SetCategory) is of mode (CATEGORY package (SIGNATURE fixPredicate ((Mapping (Boolean) A) (Mapping (Boolean) B))) (SIGNATURE patternMatch ((PatternMatchResult S B) A (Pattern S) (PatternMatchResult S B))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PRTITION 
   Warnings: 
      [1] coerce: signature of lhs not unique: (List (Integer))$ chosen
      [2] conjugate: pretendRep -- should replace by @
      [3] coerce: pretendRep -- should replace by @
      [4] pdct: pretendRep -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PMLSAGG 
   Warnings: 
      [1] match: not known that (SetCategory) is of mode (CATEGORY package (SIGNATURE patternMatch ((PatternMatchListResult S R L) L (Pattern S) (PatternMatchListResult S R L))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PSCAT 
; (DEFUN |PowerSeriesCategory| ...) is being compiled.
;; The variable |PowerSeriesCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |PowerSeriesCategory;| ...) is being compiled.
;; The variable |PowerSeriesCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. QuadraticForm(#1,#2) of cat 
(|Join| (|AbelianGroup|) (CATEGORY |domain| (SIGNATURE |quadraticForm| ($ (|SquareMatrix| |#1| |#2|))) (SIGNATURE |matrix| ((|SquareMatrix| |#1| |#2|) $)) (SIGNATURE |elt| (|#2| $ (|DirectProduct| |#1| |#2|)))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|SquareMatrixCategory| |#1| |#2| (|DirectProduct| |#1| |#2|) (|DirectProduct| |#1| |#2|))    finalizing nrlib QFORM 

--------------non extending category----------------------
.. Queue #1 of cat 
(|Join| (|QueueAggregate| |#1|) (CATEGORY |domain| (SIGNATURE |queue| ($ (|List| |#1|)))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|StackAggregate| |#1|)    finalizing nrlib QUEUE 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SEXOF 
   Warnings: 
      [1] convert: pretend$ -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib STTAYLOR 
   Warnings: 
      [1] powern:  order has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib TRANFUN 
; (DEFUN |TranscendentalFunctionCategory| ...) is being compiled.
;; The variable |TranscendentalFunctionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib VSPACE 
; (DEFUN |VectorSpace| ...) is being compiled.
;; The variable |VectorSpace;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |VectorSpace;| ...) is being compiled.
;; The variable |VectorSpace;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib XPOLYC 
; (DEFUN |XPolynomialsCat| ...) is being compiled.
;; The variable |XPolynomialsCat;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |XPolynomialsCat;| ...) is being compiled.
;; The variable |XPolynomialsCat;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib XPR 
   Warnings: 
      [1] quasiRegular?:  k has no value
      [2] *:  k has no value
      [3] *:  c has no value

--------------non extending category----------------------
.. XPolynomialRing(#1,#2) of cat 
(|Join| (|Ring|) (|XAlgebra| |#1|) (|FreeModuleCat| |#1| |#2|) (CATEGORY |domain| (SIGNATURE * ($ $ |#1|)) (SIGNATURE |#| ((|NonNegativeInteger|) $)) (SIGNATURE |coerce| ($ |#2|)) (SIGNATURE |maxdeg| (|#2| $)) (SIGNATURE |mindeg| (|#2| $)) (SIGNATURE |reductum| ($ $)) (SIGNATURE |coef| (|#1| $ |#2|)) (SIGNATURE |constant?| ((|Boolean|) $)) (SIGNATURE |constant| (|#1| $)) (SIGNATURE |quasiRegular?| ((|Boolean|) $)) (SIGNATURE |quasiRegular| ($ $)) (SIGNATURE |map| ($ (|Mapping| |#1| |#1|) $)) (IF (|has| |#1| (|Field|)) (SIGNATURE / ($ $ |#1|)) |noBranch|) (IF (|has| |#1| (ATTRIBUTE |noZeroDivisors|)) (ATTRIBUTE |noZeroDivisors|) |noBranch|) (IF (|has| |#1| (ATTRIBUTE |unitsKnown|)) (ATTRIBUTE |unitsKnown|) |noBranch|) (IF (|has| |#1| (ATTRIBUTE |canonicalUnitNormal|)) (ATTRIBUTE |canonicalUnitNormal|) |noBranch|)))    has no  ?*? : (#2,#1) -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib COMBINAT 
   Warnings: 
      [1] binomial:  s has no value
      [2] binomial:  b has no value

--------------non extending category----------------------
.. d01fcfAnnaType of cat 
(|NumericalIntegrationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D01FCFA 

--------------non extending category----------------------
.. e04mbfAnnaType of cat 
(|NumericalOptimizationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib E04MBFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FLALG 
; (DEFUN |FreeLieAlgebra| ...) is being compiled.
;; The variable |FreeLieAlgebra;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FreeLieAlgebra;| ...) is being compiled.
;; The variable |FreeLieAlgebra;CAT| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. Heap #1 of cat 
(|Join| (|PriorityQueueAggregate| |#1|) (CATEGORY |domain| (SIGNATURE |heap| ($ (|List| |#1|)))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|OneDimensionalArrayAggregate| |#1|)    finalizing nrlib HEAP 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IFARRAY 
   Warnings: 
      [1] remove!:  k has no value
      [2] select!:  k has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INTCAT 
; (DEFUN |IntervalCategory| ...) is being compiled.
;; The variable |IntervalCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |IntervalCategory;| ...) is being compiled.
;; The variable |IntervalCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INTHEORY 
   Warnings: 
      [1] fibonacci:  f2 has no value
      [2] jacobi:  j has no value
      [3] eulerPhi: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE bernoulli ((Fraction (Integer)) (Integer))) (SIGNATURE chineseRemainder ((Integer) (Integer) (Integer) (Integer) (Integer))) (SIGNATURE divisors ((List (Integer)) (Integer))) (SIGNATURE euler ((Integer) (Integer))) (SIGNATURE eulerPhi ((Integer) (Integer))) (SIGNATURE fibonacci ((Integer) (Integer))) (SIGNATURE harmonic ((Fraction (Integer)) (Integer))) (SIGNATURE jacobi ((Integer) (Integer) (Integer))) (SIGNATURE legendre ((Integer) (Integer) (Integer))) (SIGNATURE moebiusMu ((Integer) (Integer))) (SIGNATURE numberOfDivisors ((Integer) (Integer))) (SIGNATURE sumOfDivisors ((Integer) (Integer))) (SIGNATURE sumOfKthPowerDivisors ((Integer) (Integer) (NonNegativeInteger))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LFCAT 
; (DEFUN |LiouvillianFunctionCategory| ...) is being compiled.
;; The variable |LiouvillianFunctionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LODOCAT 
; (DEFUN |LinearOrdinaryDifferentialOperatorCategory| ...) is being compiled.
;; The variable |LinearOrdinaryDifferentialOperatorCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |LinearOrdinaryDifferentialOperatorCategory;| ...) is being compiled.
;; The variable |LinearOrdinaryDifferentialOperatorCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LWORD 
   Warnings: 
      [1] factor1:  d has no value
      [2] LyndonWordsList1: :(Integer) -- should replace by pretend
      [3] LyndonWordsList1:  lbase1 has no value

--------------non extending category----------------------
.. LyndonWord #1 of cat 
(|Join| (|OrderedSet|) (|RetractableTo| |#1|) (CATEGORY |domain| (SIGNATURE |retractable?| ((|Boolean|) $)) (SIGNATURE |left| ($ $)) (SIGNATURE |right| ($ $)) (SIGNATURE |length| ((|PositiveInteger|) $)) (SIGNATURE |lexico| ((|Boolean|) $ $)) (SIGNATURE |coerce| ((|OrderedFreeMonoid| |#1|) $)) (SIGNATURE |coerce| ((|Magma| |#1|) $)) (SIGNATURE |factor| ((|List| $) (|OrderedFreeMonoid| |#1|))) (SIGNATURE |lyndon?| ((|Boolean|) (|OrderedFreeMonoid| |#1|))) (SIGNATURE |lyndon| ($ (|OrderedFreeMonoid| |#1|))) (SIGNATURE |lyndonIfCan| ((|Union| $ "failed") (|OrderedFreeMonoid| |#1|))) (SIGNATURE |varList| ((|List| |#1|) $)) (SIGNATURE |LyndonWordsList1| ((|OneDimensionalArray| (|List| $)) (|List| |#1|) (|PositiveInteger|))) (SIGNATURE |LyndonWordsList| ((|List| $) (|List| |#1|) (|PositiveInteger|)))))    has no  ?*? : (%,%) -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LWORD 
--->/research2/test0819/mnt/fedora5/../../src/algebra/LWORD.spad-->LyndonWord(): Spurious comments: \spad{=>} right(\spad{l}) \spad{>=} \spad{u}

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MATCAT 
; (DEFUN |MatrixCategory| ...) is being compiled.
;; The variable |MatrixCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |MatrixCategory;| ...) is being compiled.
;; The variable |MatrixCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. SparseUnivariateSkewPolynomial(#1,#2,#3) of cat 
(|Join| (|UnivariateSkewPolynomialCategory| |#1|) (CATEGORY |domain| (SIGNATURE |outputForm| ((|OutputForm|) $ (|OutputForm|)))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|UnivariatePolynomialCategory| |#1|)    finalizing nrlib ORESUP 
   Processing SparseUnivariateSkewPolynomial for Browser database:

--------------non extending category----------------------
.. UnivariateSkewPolynomial(#1,#2,#3,#4) of cat 
(|Join| (|UnivariateSkewPolynomialCategory| |#2|) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|Variable| |#1|)))))    has no  outputForm : (%,OutputForm) -> OutputForm 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PLOT3D 
   Warnings: 
      [1] select:  fp has no value
      [2] rangeRefine:  c has no value
      [3] rangeRefine:  q has no value
      [4] rangeRefine:  NUMFUNEVALS has no value
      [5] refine:  curves has no value
      [6] plot:  curves has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PLOT3D 
; (DEFUN |PLOT3D;select| ...) is being compiled.
;; The variable |$NaNvalue| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |PLOT3D;myTrap| ...) is being compiled.
;; The variable |$numericFailure| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PR 
   Warnings: 
      [1] times!:  endcell has no value
      [2] times!:  res has no value
      [3] addm!:  newcell has no value
      [4] addm!:  res has no value
      [5] addm!:  endcell has no value
      [6] **: pretend(NonNegativeInteger) -- should replace by @
      [7] ^: pretend(NonNegativeInteger) -- should replace by @
      [8] unitNormal:  lcf has no value
      [9] unitCanonical:  lcf has no value
      [10] fmecg:  rout has no value

--------------non extending category----------------------
.. PolynomialRing(#1,#2) of cat 
(|Join| (|FiniteAbelianMonoidRing| |#1| |#2|) (CATEGORY |domain| (IF (|has| |#1| (|IntegralDomain|)) (IF (|has| |#2| (|CancellationAbelianMonoid|)) (SIGNATURE |fmecg| ($ $ |#2| |#1| $)) |noBranch|) |noBranch|) (IF (|has| |#1| (ATTRIBUTE |canonicalUnitNormal|)) (ATTRIBUTE |canonicalUnitNormal|) |noBranch|)))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|IndexedDirectProductCategory| |#1| |#2|)    finalizing nrlib PR 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SRAGG 
; (DEFUN |StringAggregate| ...) is being compiled.
;; The variable |StringAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib STREAM 
   Warnings: 
      [1] pretendS -- should replace by @
      [2] showAllElements: not known that (LazyStreamAggregate S) is of mode (CATEGORY domain (SIGNATURE repeating? ((Boolean) (List S) $)))
      [3] remove: signature of lhs not unique: $(Mapping (Boolean) S)$ chosen
      [4] lazyEval: :(Mapping $) -- should replace by pretend
      [5] expand!:  d has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib STREAM 
; (DEFUN |STREAM;showAll?;B;12| ...) is being compiled.
;; The variable |$streamsShowAll| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |Stream;| ...) is being compiled.
;; The variable |$NullStream| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NonNullStream| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. TaylorSeries #1 of cat 
(|Join| (|MultivariateTaylorSeriesCategory| |#1| (|Symbol|)) (CATEGORY |domain| (SIGNATURE |coefficient| ((|Polynomial| |#1|) $ (|NonNegativeInteger|))) (SIGNATURE |coerce| ($ (|Symbol|))) (SIGNATURE |coerce| ($ (|Polynomial| |#1|))) (IF (|has| |#1| (|Algebra| (|Fraction| (|Integer|)))) (PROGN (SIGNATURE |integrate| ($ $ (|Symbol|) |#1|)) (SIGNATURE |fintegrate| ($ (|Mapping| $) (|Symbol|) |#1|))) |noBranch|)))    has no  ?*? : (Polynomial #1,%) -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib UPSCAT 
; (DEFUN |UnivariatePowerSeriesCategory| ...) is being compiled.
;; The variable |UnivariatePowerSeriesCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |UnivariatePowerSeriesCategory;| ...) is being compiled.
;; The variable |UnivariatePowerSeriesCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib VECTCAT 
; (DEFUN |VectorCategory| ...) is being compiled.
;; The variable |VectorCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |VectorCategory;| ...) is being compiled.
;; The variable |VectorCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. XDistributedPolynomial(#1,#2) of cat 
(|Join| (|FreeModuleCat| |#2| (|OrderedFreeMonoid| |#1|)) (|XPolynomialsCat| |#1| |#2|))    has no  #? : % -> NonNegativeInteger 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib XF 
; (DEFUN |ExtensionField| ...) is being compiled.
;; The variable |ExtensionField;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |ExtensionField;| ...) is being compiled.
;; The variable |ExtensionField;CAT| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. XPBWPolynomial(#1,#2) of cat 
(|Join| (|XPolynomialsCat| |#1| |#2|) (|FreeModuleCat| |#2| (|PoincareBirkhoffWittLyndonBasis| |#1|)) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|LiePolynomial| |#1| |#2|))) (SIGNATURE |coerce| ((|XDistributedPolynomial| |#1| |#2|) $)) (SIGNATURE |coerce| ((|XRecursivePolynomial| |#1| |#2|) $)) (SIGNATURE |LiePolyIfCan| ((|Union| (|LiePolynomial| |#1| |#2|) "failed") $)) (SIGNATURE |product| ($ $ $ (|NonNegativeInteger|))) (IF (|has| |#2| (|Module| (|Fraction| (|Integer|)))) (PROGN (SIGNATURE |exp| ($ $ (|NonNegativeInteger|))) (SIGNATURE |log| ($ $ (|NonNegativeInteger|)))) |noBranch|)))    has no  ?*? : (PoincareBirkhoffWittLyndonBasis #1,#2) -> % 

--->/research2/test0819/mnt/fedora5/../../src/algebra/XRPOLY.spad-->XRecursivePolynomial(): Spurious comments: a ajouter

--------------non extending category----------------------
.. Bits of cat 
(|Join| (|BitAggregate|) (CATEGORY |domain| (SIGNATURE |bits| ($ (|NonNegativeInteger|) (|Boolean|)))))    has no  Not : % -> % 

--------------non extending category----------------------
.. LiePolynomial(#1,#2) of cat 
(|Join| (|FreeLieAlgebra| |#1| |#2|) (|FreeModuleCat| |#2| (|LyndonWord| |#1|)) (CATEGORY |domain| (SIGNATURE |LiePolyIfCan| ((|Union| $ "failed") (|XDistributedPolynomial| |#1| |#2|))) (SIGNATURE |construct| ($ (|LyndonWord| |#1|) (|LyndonWord| |#1|))) (SIGNATURE |construct| ($ (|LyndonWord| |#1|) $)) (SIGNATURE |construct| ($ $ (|LyndonWord| |#1|)))))    has no  ?*? : (LyndonWord #1,#2) -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PTCAT 
; (DEFUN |PointCategory| ...) is being compiled.
;; The variable |PointCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |PointCategory;| ...) is being compiled.
;; The variable |PointCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib STRICAT 
; (DEFUN |StringCategory| ...) is being compiled.
;; The variable |StringCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CARTEN 
   Warnings: 
      [1] index2int:  n has no value
      [2] permsign!:  nTrans has no value
      [3] elt:  n has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CLIP 
   Warnings: 
      [1] discardAndSplit:  ans has no value
      [2] clip:  yMax has no value
      [3] clip:  yMin has no value

--------------non extending category----------------------
.. Database #1 of cat 
(|Join| (|SetCategory|) (CATEGORY |domain| (SIGNATURE |elt| ($ $ (|QueryEquation|))) (SIGNATURE |elt| ((|DataList| (|String|)) $ (|Symbol|))) (SIGNATURE + ($ $ $)) (SIGNATURE - ($ $ $)) (SIGNATURE |coerce| ($ (|List| |#1|))) (SIGNATURE |display| ((|Void|) $)) (SIGNATURE |fullDisplay| ((|Void|) $)) (SIGNATURE |fullDisplay| ((|Void|) $ (|PositiveInteger|) (|PositiveInteger|)))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|ListAggregate| |#1|)    finalizing nrlib DBASE 

--------------non extending category----------------------
.. DenavitHartenbergMatrix #1 of cat 
(|Join| (|MatrixCategory| |#1| (|Vector| |#1|) (|Vector| |#1|)) (CATEGORY |domain| (SIGNATURE * ((|Point| |#1|) $ (|Point| |#1|))) (SIGNATURE |identity| ($)) (SIGNATURE |rotatex| ($ |#1|)) (SIGNATURE |rotatey| ($ |#1|)) (SIGNATURE |rotatez| ($ |#1|)) (SIGNATURE |scale| ($ |#1| |#1| |#1|)) (SIGNATURE |translate| ($ |#1| |#1| |#1|))))    has no  diagonalMatrix : Vector #1 -> % 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DIOSP 
   Warnings: 
      [1] dioSolve:  c has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DIRPCAT- 
   Warnings: 
      [1] reducedSystem: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE coerce (S (Integer))) (SIGNATURE coerce ((OutputForm) S)) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE coerce (S R)) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE size ((NonNegativeInteger))) (SIGNATURE / (S S R)) (SIGNATURE dimension ((CardinalNumber))) (SIGNATURE coerce ((Vector R) S)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DIRPCAT 
; (DEFUN |DirectProductCategory| ...) is being compiled.
;; The variable |DirectProductCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |DirectProductCategory;| ...) is being compiled.
;; The variable |DirectProductCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. d02bbfAnnaType of cat 
(|OrdinaryDifferentialEquationsSolverCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D02BBFA 
   Processing d02bbfAnnaType for Browser database:

--------------non extending category----------------------
.. d02bhfAnnaType of cat 
(|OrdinaryDifferentialEquationsSolverCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D02BHFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib D02CJFA 
   Warnings: 
      [1] ODESolve:  i has no value

--------------non extending category----------------------
.. d02cjfAnnaType of cat 
(|OrdinaryDifferentialEquationsSolverCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D02CJFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FAXF- 
   Warnings: 
      [1] extensionDegree: signature of lhs not unique: (PositiveInteger) chosen
      [2] minimalPolynomial: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE size ((NonNegativeInteger))) (SIGNATURE charthRoot (S S)) (SIGNATURE linearAssociatedLog ((Union (SparseUnivariatePolynomial F) failed) S S)) (SIGNATURE linearAssociatedLog ((SparseUnivariatePolynomial F) S)) (SIGNATURE linearAssociatedOrder ((SparseUnivariatePolynomial F) S)) (SIGNATURE linearAssociatedExp (S S (SparseUnivariatePolynomial F))) (SIGNATURE normal? ((Boolean) S)) (SIGNATURE createNormalElement (S)) (SIGNATURE trace (S S (PositiveInteger))) (SIGNATURE norm (S S (PositiveInteger))) (SIGNATURE minimalPolynomial ((SparseUnivariatePolynomial S) S (PositiveInteger))) (SIGNATURE trace (F S)) (SIGNATURE norm (F S)) (SIGNATURE degree ((PositiveInteger) S)) (SIGNATURE extensionDegree ((PositiveInteger))) (SIGNATURE minimalPolynomial ((SparseUnivariatePolynomial F) S)) (SIGNATURE represents (S (Vector F))) (SIGNATURE coordinates ((Matrix F) (Vector S))) (SIGNATURE coordinates ((Vector F) S)) (SIGNATURE transcendenceDegree ((NonNegativeInteger))) (SIGNATURE extensionDegree ((OnePointCompletion (PositiveInteger)))) (SIGNATURE degree ((OnePointCompletion (PositiveInteger)) S)) (SIGNATURE transcendent? ((Boolean) S)) (SIGNATURE algebraic? ((Boolean) S)) (SIGNATURE dimension ((CardinalNumber))))
      [3] degree: signature of lhs not unique: (PositiveInteger)S chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FAXF 
; (DEFUN |FiniteAlgebraicExtensionField| ...) is being compiled.
;; The variable |FiniteAlgebraicExtensionField;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FiniteAlgebraicExtensionField;| ...) is being compiled.
;; The variable |FiniteAlgebraicExtensionField;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FFPOLY2 
   Warnings: 
      [1] rootOfIrreduciblePoly:  basispointer has no value
      [2] rootOfIrreduciblePoly:  beta has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FNLA 
   Warnings: 
      [1] have:  hi has no value

--------------non extending category----------------------
.. FreeNilpotentLie(#1,#2,#3) of cat 
(|Join| (|NonAssociativeAlgebra| |#3|) (CATEGORY |domain| (SIGNATURE |dimension| ((|NonNegativeInteger|))) (SIGNATURE |deepExpand| ((|OutputForm|) $)) (SIGNATURE |shallowExpand| ((|OutputForm|) $)) (SIGNATURE |generator| ($ (|NonNegativeInteger|)))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|IndexedDirectProductCategory| |#3| (|OrdSetInts|))    finalizing nrlib FNLA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IRSN 
   Warnings: 
      [1] aIdInverse: :(NonNegativeInteger) -- should replace by @
      [2] signum:  s has no value
      [3] signum:  z has no value
      [4] testPermutation:  n has no value
      [5] testPermutation:  ok has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MHROWRED 
   Warnings: 
      [1] non0:  allZero has no value
      [2] non0:  ans has no value
      [3] mkMat:  STEP has no value
      [4] mkMat:  i has no value
      [5] diagSubMatrix:  IN has no value
      [6] diagSubMatrix:  r has no value
      [7] diagSubMatrix:  STEP has no value
      [8] diagSubMatrix:  z has no value
      [9] rowEchelonLocal:  pivord has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NUMQUAD 
   Warnings: 
      [1] romberg:  change has no value
      [2] simpson:  change has no value
      [3] trapezoidal:  change has no value
      [4] rombergo:  change has no value
      [5] simpsono:  change has no value
      [6] trapezoidalo:  change has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ODESYS 
   Warnings: 
      [1] backsolve:  part has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PERMAN 
   Warnings: 
      [1] permanent3:  a has no value
      [2] permanent: :(Integer) -- should replace by pretend
      [3] permanent: :(PositiveInteger) -- should replace by pretend
      [4] permanent:  a has no value
      [5] permanent2: :(Integer) -- should replace by pretend
      [6] permanent2: :(PositiveInteger) -- should replace by pretend
      [7] permanent2: :(NonNegativeInteger) -- should replace by pretend
      [8] permanent2:  a has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PERMAN 
   Processing Permanent for Browser database:
--->/research2/test0819/mnt/fedora5/../../src/algebra/PERMAN.spad-->Permanent((commutative (attribute *))): Not documented!!!!
--------(permanent (R SM))---------
--->/research2/test0819/mnt/fedora5/../../src/algebra/PERMAN.spad-->Permanent((permanent (R SM))): Mismatch: left pren matches right brace
--->/research2/test0819/mnt/fedora5/../../src/algebra/PERMAN.spad-->Permanent((permanent (R SM))): Mismatch: left brace matches right pren
"\\spad{permanent(x)} computes the permanent of a square matrix \\spad{x}. The {\\em permanent} is equivalent to the \\spadfun{determinant} except that coefficients have no change of sign. This function is much more difficult to compute than the {\\em determinant}. The formula used is by \\spad{H}.\\spad{J}. Ryser,{} improved by [Nijenhuis and Wilf,{} \\spad{Ch}. 19]. Note: permanent(\\spad{x}) choose one of three algorithms,{} depending on the underlying ring \\spad{R} and on \\spad{n},{} the number of rows (and columns) of \\spad{x:}\\begin{items} \\item 1. if 2 has an inverse in \\spad{R} we can use the algorithm of \\indented{3}{[Nijenhuis and Wilf,{} \\spad{ch}.19,{}\\spad{p}.158]; if 2 has no inverse,{}} \\indented{3}{some modifications are necessary:} \\item 2. if {\\em n > 6} and \\spad{R} is an integral domain with characteristic \\indented{3}{different from 2 (the algorithm works if and only 2 is not a} \\indented{3}{zero-divisor of \\spad{R} and {\\em characteristic()\\$R ^= 2},{}} \\indented{3}{but how to check that for any given \\spad{R} ?),{}} \\indented{3}{the local function {\\em permanent2} is called;} \\item 3. else,{} the local function {\\em permanent3} is called \\indented{3}{(works for all commutative rings \\spad{R}).} \\end{items}"

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PFECAT- 
   Warnings: 
      [1] gcdPolynomial: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))))
      [2] charthRoot: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))))
      [3] solveLinearPolynomialEquation: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE charthRoot ((Union S failed) S)) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S) (SparseUnivariatePolynomial S))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PFECAT 
; (DEFUN |PolynomialFactorizationExplicit| ...) is being compiled.
;; The variable |PolynomialFactorizationExplicit;AL| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. Point #1 of cat 
(|PointCategory| |#1|)    has no  vector : List #1 -> % 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib POINT 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PSEUDLIN 
   Warnings: 
      [1] normalForm0:  B has no value
      [2] normalForm0:  Binv has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib REP2 
   Warnings: 
      [1] cyclicSubmodule:  basis has no value
      [2] standardBasisOfCyclicSubmodule:  standardBasis has no value
      [3] splitInternal:  submoduleRepresentation has no value
      [4] splitInternal:  factormoduleRepresentation has no value
      [5] areEquivalent?:  x0 has no value
      [6] areEquivalent?:  x1 has no value
      [7] areEquivalent?:  foundResult has no value
      [8] areEquivalent?:  result has no value
      [9] areEquivalent?:  transitionM has no value
      [10] isAbsolutelyIrreducible?:  result has no value
      [11] meatAxe: :(PositiveInteger) -- should replace by pretend
      [12] meatAxe:  x has no value
      [13] meatAxe:  foundResult has no value
      [14] meatAxe:  result has no value
      [15] meatAxe: signature of lhs not unique: (List (List (Matrix R)))(List (Matrix R))(Boolean) chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SETMN 
   Warnings: 
      [1] elements:  l has no value
      [2] replaceKthElement:  found has no value
      [3] replaceKthElement:  i has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib STRING 
   Warnings: 
      [1] OMwrite: pretend(String) -- should replace by @

--------------non extending category----------------------
.. String of cat 
(|StringCategory|)    has no  hash : % -> Integer 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib STRING 
--->/research2/test0819/mnt/fedora5/../../src/algebra/STRING.spad-->String(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP1 
   Warnings: 
      [1]  X has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP10 
   Warnings: 
      [1]  P has no value
      [2]  Q has no value
      [3]  DQDL has no value
      [4]  X has no value
      [5]  ELAM has no value
      [6]  JINT has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP24 
   Warnings: 
      [1]  N has no value
      [2]  XC has no value
      [3]  FC has no value
      [4] coerce:  FC has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP4 
   Warnings: 
      [1]  NDIM has no value
      [2]  X has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP50 
   Warnings: 
      [1]  M has no value
      [2]  N has no value
      [3]  XC has no value
      [4]  FVECC has no value
      [5]  I has no value
      [6] coerce:  FVECC has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP6 
   Warnings: 
      [1]  N has no value
      [2]  X has no value
      [3]  FVEC has no value
      [4]  IFLAG has no value
      [5] coerce:  FVEC has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP73 
   Warnings: 
      [1]  X has no value
      [2]  Y has no value
      [3]  ALPHA has no value
      [4]  BETA has no value
      [5]  GAMMA has no value
      [6]  DELTA has no value
      [7]  EPSOLN has no value
      [8]  PHI has no value
      [9]  PSI has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib BALFACT 
   Warnings: 
      [1] balancedFactorisation: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE balancedFactorisation ((Factored UP) UP UP)) (SIGNATURE balancedFactorisation ((Factored UP) UP (List UP))))

--------------non extending category----------------------
.. BinaryExpansion of cat 
(|Join| (|QuotientFieldCategory| (|Integer|)) (CATEGORY |domain| (SIGNATURE |coerce| ((|Fraction| (|Integer|)) $)) (SIGNATURE |coerce| ((|RadixExpansion| 2) $)) (SIGNATURE |fractionPart| ((|Fraction| (|Integer|)) $)) (SIGNATURE |binary| ($ (|Fraction| (|Integer|))))))    has no  wholeRagits : % -> List Integer 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib BOUNDZRO 
   Warnings: 
      [1] bringDown: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE integerBound ((Integer) UP)))
      [2] qbound:  bound has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CHVAR 
   Warnings: 
      [1] eval: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE mkIntegral ((Record (: coef (Fraction UP)) (: poly UPUP)) UPUP)) (SIGNATURE radPoly ((Union (Record (: radicand (Fraction UP)) (: deg (NonNegativeInteger))) failed) UPUP)) (SIGNATURE rootPoly ((Record (: exponent (NonNegativeInteger)) (: coef (Fraction UP)) (: radicand UP)) (Fraction UP) (NonNegativeInteger))) (SIGNATURE goodPoint (F UPUP UPUP)) (SIGNATURE eval (UPUP UPUP (Fraction UP) (Fraction UP))) (SIGNATURE chvar ((Record (: func UPUP) (: poly UPUP) (: c1 (Fraction UP)) (: c2 (Fraction UP)) (: deg (NonNegativeInteger))) UPUP UPUP)))
      [2] rootPoly: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE mkIntegral ((Record (: coef (Fraction UP)) (: poly UPUP)) UPUP)) (SIGNATURE radPoly ((Union (Record (: radicand (Fraction UP)) (: deg (NonNegativeInteger))) failed) UPUP)) (SIGNATURE rootPoly ((Record (: exponent (NonNegativeInteger)) (: coef (Fraction UP)) (: radicand UP)) (Fraction UP) (NonNegativeInteger))) (SIGNATURE goodPoint (F UPUP UPUP)) (SIGNATURE eval (UPUP UPUP (Fraction UP) (Fraction UP))) (SIGNATURE chvar ((Record (: func UPUP) (: poly UPUP) (: c1 (Fraction UP)) (: c2 (Fraction UP)) (: deg (NonNegativeInteger))) UPUP UPUP)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CONTFRAC 
   Warnings: 
      [1] =:  whole has no value
      [2] =:  den has no value
      [3] partialQuotients:  whole has no value
      [4] extend:  fract has no value
      [5] complete:  fract has no value
      [6] iGenApproximants:  num has no value
      [7] iGenApproximants:  den has no value
      [8] iGenConvergents:  num has no value
      [9] iGenConvergents:  den has no value
      [10] coerce:  l has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CONTFRAC 
; (DEFUN |CONTFRAC;showAll?| ...) is being compiled.
;; The variable |$streamsShowAll| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CYCLOTOM 
   Warnings: 
      [1] cyclotomic:  l has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DDFACT 
   Warnings: 
      [1] notSqFr: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored FP) FP)) (SIGNATURE factorSquareFree ((Factored FP) FP)) (SIGNATURE distdfact ((Record (: cont F) (: factors (List (Record (: irr FP) (: pow (Integer)))))) FP (Boolean))) (SIGNATURE separateDegrees ((List (Record (: deg (NonNegativeInteger)) (: prod FP))) FP)) (SIGNATURE separateFactors ((List FP) (List (Record (: deg (NonNegativeInteger)) (: prod FP))))) (SIGNATURE exptMod (FP FP (NonNegativeInteger) FP)) (SIGNATURE trace2PowMod (FP FP (NonNegativeInteger) FP)) (SIGNATURE tracePowMod (FP FP (NonNegativeInteger) FP)) (SIGNATURE irreducible? ((Boolean) FP)))
      [2] exptMod: :FP -- should replace by pretend
      [3] ddffact1:  ddfact has no value
      [4] separateFactors:  n1 has no value
      [5] separateFactors:  ris has no value
      [6] separateFactors:  newaux has no value
      [7] distdfact:  factlist has no value

--------------non extending category----------------------
.. DecimalExpansion of cat 
(|Join| (|QuotientFieldCategory| (|Integer|)) (CATEGORY |domain| (SIGNATURE |coerce| ((|Fraction| (|Integer|)) $)) (SIGNATURE |coerce| ((|RadixExpansion| 10) $)) (SIGNATURE |fractionPart| ((|Fraction| (|Integer|)) $)) (SIGNATURE |decimal| ($ (|Fraction| (|Integer|))))))    has no  wholeRagits : % -> List Integer 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DIOPS 
; (DEFUN |DictionaryOperations| ...) is being compiled.
;; The variable |DictionaryOperations;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |DictionaryOperations;| ...) is being compiled.
;; The variable |DictionaryOperations;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DIRPROD 
   Warnings: 
      [1] Zero: pretend$ -- should replace by @
      [2] One: pretend$ -- should replace by @
      [3] subtractIfCan: pretend$ -- should replace by @
      [4] recip: pretend$ -- should replace by @
      [5] unitVector: pretend$ -- should replace by @
 
--------------non extending category----------------------
.. DirectProduct(#1,#2) of cat 
(|DirectProductCategory| |#1| |#2|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|VectorCategory| |#2|)    finalizing nrlib DIRPROD 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DIRPROD 
; (DEFUN |DirectProduct;| ...) is being compiled.
;; The variable IDENTITY is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DISPLAY 
   Warnings: 
      [1] sayLength:  sum has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DPOLCAT- 
   Warnings: 
      [1] degree:  d has no value
      [2] weights:  ws has no value
      [3] initial: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE coerce (A A)) (SIGNATURE coerce (A (Fraction (Integer)))) (SIGNATURE eval (A A (List S) (List R))) (SIGNATURE eval (A A S R)) (SIGNATURE eval (A A (List S) (List A))) (SIGNATURE eval (A A S A)) (SIGNATURE makeVariable ((Mapping A (NonNegativeInteger)) A)) (SIGNATURE separant (A A)) (SIGNATURE initial (A A)) (SIGNATURE leader (V A)) (SIGNATURE isobaric? ((Boolean) A)) (SIGNATURE weight ((NonNegativeInteger) A S)) (SIGNATURE weights ((List (NonNegativeInteger)) A S)) (SIGNATURE weight ((NonNegativeInteger) A)) (SIGNATURE weights ((List (NonNegativeInteger)) A)) (SIGNATURE degree ((NonNegativeInteger) A S)) (SIGNATURE order ((NonNegativeInteger) A)) (SIGNATURE order ((NonNegativeInteger) A S)) (SIGNATURE differentialVariables ((List S) A)) (SIGNATURE makeVariable ((Mapping A (NonNegativeInteger)) S)) (SIGNATURE retractIfCan ((Union S failed) A)) (SIGNATURE coerce (A S)) (SIGNATURE differentiate (A A (Mapping R R))) (SIGNATURE differentiate (A A (Mapping R R) (NonNegativeInteger))) (SIGNATURE differentiate (A A (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE differentiate (A A (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (A A (List (Symbol)))) (SIGNATURE differentiate (A A (Symbol))) (SIGNATURE differentiate (A A (NonNegativeInteger))) (SIGNATURE differentiate (A A)) (SIGNATURE degree ((List (NonNegativeInteger)) A (List V))) (SIGNATURE degree ((NonNegativeInteger) A V)) (SIGNATURE retractIfCan ((Union V failed) A)) (SIGNATURE coerce (A V)) (SIGNATURE eval (A A (List V) (List A))) (SIGNATURE eval (A A V A)) (SIGNATURE eval (A A (List V) (List R))) (SIGNATURE eval (A A V R)) (SIGNATURE eval (A A (List A) (List A))) (SIGNATURE eval (A A A A)) (SIGNATURE eval (A A (Equation A))) (SIGNATURE eval (A A (List (Equation A)))) (SIGNATURE degree (E A)) (SIGNATURE retractIfCan ((Union (Integer) failed) A)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) A)) (SIGNATURE coerce (A R)) (SIGNATURE retractIfCan ((Union R failed) A)) (SIGNATURE differentiate (A A (List V) (List (NonNegativeInteger)))) (SIGNATURE differentiate (A A V (NonNegativeInteger))) (SIGNATURE differentiate (A A (List V))) (SIGNATURE differentiate (A A V)) (SIGNATURE coerce (A (Integer))) (SIGNATURE coerce ((OutputForm) A)))
      [4] eval:  IN has no value
      [5] eval:  s has no value
      [6] eval:  e has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DPOLCAT 
; (DEFUN |DifferentialPolynomialCategory| ...) is being compiled.
;; The variable |DifferentialPolynomialCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |DifferentialPolynomialCategory;| ...) is being compiled.
;; The variable |DifferentialPolynomialCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. d01ajfAnnaType of cat 
(|NumericalIntegrationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D01AJFA 

--------------non extending category----------------------
.. d01akfAnnaType of cat 
(|NumericalIntegrationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D01AKFA 

--------------non extending category----------------------
.. d01alfAnnaType of cat 
(|NumericalIntegrationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D01ALFA 

--------------non extending category----------------------
.. d01amfAnnaType of cat 
(|NumericalIntegrationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D01AMFA 

--------------non extending category----------------------
.. d01apfAnnaType of cat 
(|NumericalIntegrationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D01APFA 

--------------non extending category----------------------
.. d01aqfAnnaType of cat 
(|NumericalIntegrationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D01AQFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib EQ 
extension of ##1 to (Polynomial (Integer)) ignored

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib EQ 
   Semantic Errors: 
      [1] factorAndSplit:  rcf has two modes: 
 
   Warnings: 
      [1] factorAndSplit: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE factorAndSplit ((List $) $)))
      [2] factorAndSplit: not known that (IntegralDomain) is of mode (CATEGORY S (SIGNATURE factor ((Factored S) S)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib EQ 
; (DEFUN |Equation;| ...) is being compiled.
;; The variable IDENTITY is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. e04dgfAnnaType of cat 
(|NumericalOptimizationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib E04DGFA 

--------------non extending category----------------------
.. e04fdfAnnaType of cat 
(|NumericalOptimizationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib E04FDFA 

--------------non extending category----------------------
.. e04gcfAnnaType of cat 
(|NumericalOptimizationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib E04GCFA 

--------------non extending category----------------------
.. e04jafAnnaType of cat 
(|NumericalOptimizationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib E04JAFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FFHOM 
   Warnings: 
      [1] compare:  equal has no value
      [2] initialize:  mat has no value
      [3] unknown Functor code (error FFHOM: one extension degree must divide the other one)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FFPOLY 
   Warnings: 
      [1] leastAffineMultiple:  coeffVector has no value
      [2] primitive?: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE primitive? ((Boolean) (SparseUnivariatePolynomial GF))) (SIGNATURE normal? ((Boolean) (SparseUnivariatePolynomial GF))) (SIGNATURE numberOfIrreduciblePoly ((PositiveInteger) (PositiveInteger))) (SIGNATURE numberOfPrimitivePoly ((PositiveInteger) (PositiveInteger))) (SIGNATURE numberOfNormalPoly ((PositiveInteger) (PositiveInteger))) (SIGNATURE createIrreduciblePoly ((SparseUnivariatePolynomial GF) (PositiveInteger))) (SIGNATURE createPrimitivePoly ((SparseUnivariatePolynomial GF) (PositiveInteger))) (SIGNATURE createNormalPoly ((SparseUnivariatePolynomial GF) (PositiveInteger))) (SIGNATURE createNormalPrimitivePoly ((SparseUnivariatePolynomial GF) (PositiveInteger))) (SIGNATURE createPrimitiveNormalPoly ((SparseUnivariatePolynomial GF) (PositiveInteger))) (SIGNATURE nextIrreduciblePoly ((Union (SparseUnivariatePolynomial GF) failed) (SparseUnivariatePolynomial GF))) (SIGNATURE nextPrimitivePoly ((Union (SparseUnivariatePolynomial GF) failed) (SparseUnivariatePolynomial GF))) (SIGNATURE nextNormalPoly ((Union (SparseUnivariatePolynomial GF) failed) (SparseUnivariatePolynomial GF))) (SIGNATURE nextNormalPrimitivePoly ((Union (SparseUnivariatePolynomial GF) failed) (SparseUnivariatePolynomial GF))) (SIGNATURE nextPrimitiveNormalPoly ((Union (SparseUnivariatePolynomial GF) failed) (SparseUnivariatePolynomial GF))) (SIGNATURE random ((SparseUnivariatePolynomial GF) (PositiveInteger))) (SIGNATURE random ((SparseUnivariatePolynomial GF) (PositiveInteger) (PositiveInteger))) (SIGNATURE leastAffineMultiple ((SparseUnivariatePolynomial GF) (SparseUnivariatePolynomial GF))) (SIGNATURE reducedQPowers ((PrimitiveArray (SparseUnivariatePolynomial GF)) (SparseUnivariatePolynomial GF))))
      [3] nextSubset:  restOfs has no value
      [4] nextSubset:  noGap has no value
      [5] nextSubset:  i has no value
      [6] nextIrreduciblePoly:  fcopy has no value
      [7] nextIrreduciblePoly:  s has no value
      [8] nextPrimitivePoly:  fcopy has no value
      [9] nextPrimitivePoly:  term has no value
      [10] nextPrimitivePoly:  noGenerator has no value
      [11] nextPrimitivePoly:  c has no value
      [12] nextPrimitivePoly:  weight has no value
      [13] nextPrimitivePoly:  s has no value
      [14] nextPrimitivePoly:  l has no value
      [15] nextNormalPoly:  fcopy has no value
      [16] nextNormalPoly:  l has no value
      [17] nextNormalPoly:  a has no value
      [18] nextNormalPoly:  s has no value
      [19] nextNormalPrimitivePoly:  fcopy has no value
      [20] nextNormalPrimitivePoly:  term has no value
      [21] nextNormalPrimitivePoly:  noGenerator has no value
      [22] nextNormalPrimitivePoly:  c has no value
      [23] nextNormalPrimitivePoly:  la has no value
      [24] nextNormalPrimitivePoly:  a has no value
      [25] nextNormalPrimitivePoly:  middlelookuplist has no value
      [26] nextNormalPrimitivePoly:  middlepol has no value
      [27] nextNormalPrimitivePoly:  weight has no value
      [28] nextNormalPrimitivePoly:  s has no value
      [29] nextNormalPrimitivePoly:  lc has no value
      [30] random:  polRepr has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FGLMICPK 
   Warnings: 
      [1] zeroDim?: not known that (Ring) is of mode (CATEGORY package (SIGNATURE zeroDimensional? ((Boolean) (List (Polynomial R)))) (SIGNATURE fglmIfCan ((Union (List (Polynomial R)) failed) (List (Polynomial R)))) (SIGNATURE groebner ((List (Polynomial R)) (List (Polynomial R)))))
      [2] zeroDim?:  lv has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FINAALG 
; (DEFUN |FiniteRankNonAssociativeAlgebra| ...) is being compiled.
;; The variable |FiniteRankNonAssociativeAlgebra;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FiniteRankNonAssociativeAlgebra;| ...) is being compiled.
;; The variable |FiniteRankNonAssociativeAlgebra;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FINRALG 
; (DEFUN |FiniteRankAlgebra| ...) is being compiled.
;; The variable |FiniteRankAlgebra;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FiniteRankAlgebra;| ...) is being compiled.
;; The variable |FiniteRankAlgebra;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FFF 
   Warnings: 
      [1] createLowComplexityTable:  k has no value
      [2] createLowComplexityTable:  t1 has no value
      [3] createLowComplexityTable:  a has no value
      [4] createLowComplexityTable: pretend(NonNegativeInteger) -- should replace by @
      [5] createLowComplexityTable:  l has no value
      [6] createMultiplicationTable:  l has no value

   FOP abbreviates package FortranOutputStackPackage 
(SPADLET |$noSubsumption| NIL)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FORMULA 
   Warnings: 
      [1] display: pretend(Integer) -- should replace by @
      [2] coerce: pretend(Integer) -- should replace by @
      [3] stringify: pretend(String) -- should replace by @
      [4] splitLong1:  l has no value
      [5] splitLong1:  ls has no value
      [6] splitLong1:  s has no value
      [7] formatSpecial:  form has no value
      [8] formatPlex:  s has no value
      [9] formatFormula: pretend(Boolean) -- should replace by @
      [10] formatFormula: :(Integer) -- should replace by pretend

   FORT abbreviates package FortranPackage 
(SPADLET |$noSubsumption| (QUOTE T))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FORT 
   Warnings: 
      [1] linkToFortran:  fst has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FRAC 
   Warnings: 
      [1] OMwrite: pretend(String) -- should replace by @
      [2] factorPolynomial:  den1 has no value
      [3] factorSquareFreePolynomial:  den1 has no value

--------------non extending category----------------------
.. Fraction #1 of cat 
(|Join| (|QuotientFieldCategory| |#1|) (CATEGORY |package| (IF (|has| |#1| (|IntegerNumberSystem|)) (IF (|has| |#1| (|OpenMath|)) (ATTRIBUTE (|OpenMath|)) |noBranch|) |noBranch|) (IF (|has| |#1| (ATTRIBUTE |canonical|)) (IF (|has| |#1| (|GcdDomain|)) (IF (|has| |#1| (ATTRIBUTE |canonicalUnitNormal|)) (ATTRIBUTE |canonical|) |noBranch|) |noBranch|) |noBranch|)))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(IF (|has| |#1| (|OrderedRing|)) (ATTRIBUTE (|OrderedRing|)) |noBranch|)    finalizing nrlib FRAC 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FTEM 
   Warnings: 
      [1] processTemplate:  active has no value

--------------non extending category----------------------
.. FortranTemplate of cat 
(|Join| (|FileCategory| (|FileName|) (|String|)) (CATEGORY |package| (SIGNATURE |processTemplate| ((|FileName|) (|FileName|) (|FileName|))) (SIGNATURE |processTemplate| ((|FileName|) (|FileName|))) (SIGNATURE |fortranLiteralLine| ((|Void|) (|String|))) (SIGNATURE |fortranLiteral| ((|Void|) (|String|))) (SIGNATURE |fortranCarriageReturn| ((|Void|)))))    has no  writeLine! : (%,String) -> String 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FTEM 
; (DEFUN |FTEM;processTemplate;2Fn;7| ...) is being compiled.
;; The variable |$fortranOutputFile| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GENMFACT 
   Warnings: 
      [1] factor: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored P) P)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GENPGCD 
   Warnings: 
      [1] gcdPolynomial:  canonical has no value
      [2] gcdSameVariables: not known that (Ring) is of mode (CATEGORY package (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P))) (SIGNATURE randomR (R)))
      [3] gcdSameVariables:  up1 has no value
      [4] gcdSameVariables:  up2 has no value
      [5] lift: not known that (Ring) is of mode (CATEGORY package (SIGNATURE gcdPolynomial ((SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P))) (SIGNATURE randomR (R)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GALFACTU 
   Warnings: 
      [1] singleFactorBound: not known that (Ring) is of mode (CATEGORY F (SIGNATURE Gamma (F F)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GBF 
   Warnings: 
      [1] createGroebnerBases:  nP has no value
      [2] createGroebnerBases:  allReducedFactors has no value
      [3] factorGroebnerBasis:  fctr has no value
      [4] groebnerFactorize: signature of lhs not unique: (List (List Dpol))(List Dpol)(List Dpol) chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GBINTERN 
   Warnings: 
      [1] redPo:  m has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GHENSEL 
   Warnings: 
      [1] genFact:  auxfl has no value
      [2] HenselLift:  constp has no value
      [3] HenselLift:  fln has no value
      [4] completeHensel:  factlist has no value
      [5] completeHensel:  finallist has no value
      [6] completeHensel:  aux has no value
      [7] completeHensel:  auxfl has no value

(|Module| |#6|)    extends 
(|BiModule| |#6| |#6|)    but not 
(|BiModule| |#2| |#2|) --------------non extending category----------------------
.. GeneralModulePolynomial(#1,#2,#3,#4,#5,#6) of cat 
(|Join| (|Module| |#6|) (|Module| |#2|) (CATEGORY |domain| (SIGNATURE |leadingCoefficient| (|#2| $)) (SIGNATURE |leadingMonomial| ((|ModuleMonomial| |#3| |#4| |#5|) $)) (SIGNATURE |leadingExponent| (|#4| $)) (SIGNATURE |leadingIndex| (|#3| $)) (SIGNATURE |reductum| ($ $)) (SIGNATURE |monomial| ($ |#2| (|ModuleMonomial| |#3| |#4| |#5|))) (SIGNATURE |unitVector| ($ |#3|)) (SIGNATURE |build| ($ |#2| |#3| |#4|)) (SIGNATURE |multMonom| ($ |#2| |#4| $)) (SIGNATURE * ($ |#6| $))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|IndexedDirectProductCategory| |#2| (|ModuleMonomial| |#3| |#4| |#5|))    finalizing nrlib GMODPOL 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GRIMAGE 
   Warnings: 
      [1] makeGraphImage: signature of lhs not unique: $(List (List (Point (DoubleFloat)))) chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GRIMAGE 
--->/research2/test0819/mnt/fedora5/../../src/algebra/GRIMAGE.spad-->GraphImage((figureUnits (UNITSF (L (L P))))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GROEBSOL 
   Warnings: 
      [1] testPower: not known that (Ring) is of mode (CATEGORY package (SIGNATURE groebSolve ((List (List (DistributedMultivariatePolynomial lv F))) (List (DistributedMultivariatePolynomial lv F)) (List (OrderedVariableList lv)))) (SIGNATURE testDim ((Union (List (HomogeneousDistributedMultivariatePolynomial lv F)) failed) (List (HomogeneousDistributedMultivariatePolynomial lv F)) (List (OrderedVariableList lv)))) (SIGNATURE genericPosition ((Record (: dpolys (List (DistributedMultivariatePolynomial lv F))) (: coords (List (Integer)))) (List (DistributedMultivariatePolynomial lv F)) (List (OrderedVariableList lv)))))
      [2] testGenPos:  newlpol has no value
      [3] groebSolve:  result has no value

--------------non extending category----------------------
.. HexadecimalExpansion of cat 
(|Join| (|QuotientFieldCategory| (|Integer|)) (CATEGORY |domain| (SIGNATURE |coerce| ((|Fraction| (|Integer|)) $)) (SIGNATURE |coerce| ((|RadixExpansion| 16) $)) (SIGNATURE |fractionPart| ((|Fraction| (|Integer|)) $)) (SIGNATURE |hex| ($ (|Fraction| (|Integer|))))))    has no  wholeRagits : % -> List Integer 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib HEUGCD 
   Warnings: 
      [1] localgcd:  flag has no value
      [2] localgcd:  result has no value
      [3] internal:  Cgcd has no value
      [4] internal:  contgcd has no value
      [5] internal:  ans has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ICARD 
   Warnings: 
      [1] elt: pretend(String) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IDECOMP 
   Warnings: 
      [1] internalForm: not known that (PolynomialCategory (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [2] internalForm: not known that (PolynomialCategory (Fraction (Polynomial (Integer))) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [3] externalForm: not known that (PolynomialCategory (Fraction (Polynomial (Integer))) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [4] externalForm: not known that (PolynomialCategory (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [5] zeroRadComp: not known that (PolynomialCategory (Fraction (Polynomial (Integer))) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [6] zeroRadComp: not known that (Ring) is of mode (CATEGORY package (SIGNATURE zeroDimPrime? ((Boolean) (PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))))) (SIGNATURE zeroDimPrimary? ((Boolean) (PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))))) (SIGNATURE prime? ((Boolean) (PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))))) (SIGNATURE radical ((PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))) (PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))))) (SIGNATURE primaryDecomp ((List (PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer))))) (PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))))) (SIGNATURE contract ((PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))) (PolynomialIdeals (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl) (DistributedMultivariatePolynomial vl (Fraction (Integer)))) (List (OrderedVariableList vl)))))
      [7] findvar:  lmonicvar has no value
      [8] zeroPrimDecomp: not known that (PolynomialCategory (Fraction (Polynomial (Integer))) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [9] testPower: :(Integer) -- should replace by pretend
      [10] primaryDecomp: not known that (PolynomialCategory (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [11] contract:  IN has no value
      [12] contract:  vv has no value
      [13] contract: not known that (PolynomialCategory (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IIARRAY2 
   Warnings: 
      [1] latex:  s has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IMATLIN 
   Warnings: 
      [1] nullSpace:  basis has no value
      [2] determinant:  ans has no value
      [3] generalizedInverse: not known that (MatrixCategory FSUP VFSUP VFSUP) is of mode (CATEGORY domain (SIGNATURE diagonalMatrix ($ (Vector FSUP))) (IF (has FSUP (ConvertibleTo (InputForm))) (ATTRIBUTE (ConvertibleTo (InputForm))) noBranch) (IF (has FSUP (Field)) (SIGNATURE inverse ((Union $ failed) $)) noBranch))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IMATQF 
   Warnings: 
      [1] nullSpace: not known that (FiniteLinearAggregate QF) is of mode (CATEGORY Col2 (ATTRIBUTE shallowlyMutable))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INMODGCD 
--->/research2/test0819/mnt/fedora5/../../src/algebra/INMODGCD.spad-->InnerModularGcd(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/INMODGCD.spad-->InnerModularGcd(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INNMFACT 
   Warnings: 
      [1] supFactor:  factorlist has no value
      [2] supFactor:  irr has no value
      [3] supFactor:  pow has no value
      [4] varChoose: not known that (Ring) is of mode (CATEGORY package (SIGNATURE factor ((Factored P) P (Mapping (Factored (SparseUnivariatePolynomial R)) (SparseUnivariatePolynomial R)))) (SIGNATURE factor ((Factored (SparseUnivariatePolynomial P)) (SparseUnivariatePolynomial P) (Mapping (Factored (SparseUnivariatePolynomial R)) (SparseUnivariatePolynomial R)))))
      [5] intChoose:  unifact has no value
      [6] intChoose:  int has no value
      [7] simplify:  pol1 has no value
      [8] simplify:  factorlist has no value
      [9] intfact:  unifact has no value
      [10] intfact:  lpol has no value
      [11] intfact:  factfin has no value
      [12] mFactor: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored P) P (Mapping (Factored (SparseUnivariatePolynomial R)) (SparseUnivariatePolynomial R)))) (SIGNATURE factor ((Factored (SparseUnivariatePolynomial P)) (SparseUnivariatePolynomial P) (Mapping (Factored (SparseUnivariatePolynomial R)) (SparseUnivariatePolynomial R)))))
      [13] mFactor:  flead has no value
      [14] mFactor:  irr has no value
      [15] mFactor:  pow has no value
      [16] mFactor:  x has no value
      [17] mFactor:  ffactor has no value
      [18] mFactor:  lvar has no value
      [19] mFactor:  factorlist has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INTSLPE 
   Warnings: 
      [1] solveLinearPolynomialEquation:  slpePrime has no value
      [2] solveLinearPolynomialEquation:  oldtable has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INTTR 
   Warnings: 
      [1] expintegratepoly:  coef0 has no value
      [2] explimintfrac:  logand has no value
      [3] explimintfrac:  coeff has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ISUMP 
   Warnings: 
      [1] sum: not known that (Ring) is of mode (CATEGORY package (SIGNATURE sum ((Record (: num P) (: den (Integer))) P V (Segment P))) (SIGNATURE sum ((Record (: num P) (: den (Integer))) P V)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LAUPOL 
   Warnings: 
      [1] not known that (Ring) is of mode (CATEGORY domain (SIGNATURE separate ((Record (: polyPart $) (: fracPart (Fraction UP))) (Fraction UP))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LEADCDET 
   Warnings: 
      [1] distFact:  c has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LGROBP 
   Warnings: 
      [1] totolex:  result has no value
      [2] minPol: :(NonNegativeInteger) -- should replace by pretend
      [3] intcompBasis:  part has no value
      [4] linGenPos: :(PositiveInteger) -- should replace by pretend
      [5] linGenPos:  result has no value
      [6] groebgen: :(NonNegativeInteger) -- should replace by pretend
      [7] groebgen: not known that (Ring) is of mode (CATEGORY package (SIGNATURE linGenPos ((Record (: gblist (List (DistributedMultivariatePolynomial lv F))) (: gvlist (List (Integer)))) (List (HomogeneousDistributedMultivariatePolynomial lv F)))) (SIGNATURE groebgen ((Record (: glbase (List (DistributedMultivariatePolynomial lv F))) (: glval (List (Integer)))) (List (DistributedMultivariatePolynomial lv F)))) (SIGNATURE totolex ((List (DistributedMultivariatePolynomial lv F)) (List (HomogeneousDistributedMultivariatePolynomial lv F)))) (SIGNATURE minPol ((HomogeneousDistributedMultivariatePolynomial lv F) (List (HomogeneousDistributedMultivariatePolynomial lv F)) (List (HomogeneousDistributedMultivariatePolynomial lv F)) (OrderedVariableList lv))) (SIGNATURE minPol ((HomogeneousDistributedMultivariatePolynomial lv F) (List (HomogeneousDistributedMultivariatePolynomial lv F)) (OrderedVariableList lv))) (SIGNATURE computeBasis ((List (HomogeneousDistributedMultivariatePolynomial lv F)) (List (HomogeneousDistributedMultivariatePolynomial lv F)))) (SIGNATURE coord ((Vector F) (HomogeneousDistributedMultivariatePolynomial lv F) (List (HomogeneousDistributedMultivariatePolynomial lv F)))) (SIGNATURE anticoord ((DistributedMultivariatePolynomial lv F) (List F) (DistributedMultivariatePolynomial lv F) (List (DistributedMultivariatePolynomial lv F)))) (SIGNATURE intcompBasis ((List (HomogeneousDistributedMultivariatePolynomial lv F)) (OrderedVariableList lv) (List (HomogeneousDistributedMultivariatePolynomial lv F)) (List (HomogeneousDistributedMultivariatePolynomial lv F)))) (SIGNATURE choosemon ((DistributedMultivariatePolynomial lv F) (DistributedMultivariatePolynomial lv F) (List (DistributedMultivariatePolynomial lv F)))) (SIGNATURE transform ((HomogeneousDistributedMultivariatePolynomial lv F) (DistributedMultivariatePolynomial lv F))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LINDEP 
   Warnings: 
      [1] linearlyDependent?: not known that (Ring) is of mode (CATEGORY package (SIGNATURE linearlyDependent? ((Boolean) (Vector R))) (SIGNATURE linearDependence ((Union (Vector S) failed) (Vector R))) (IF (has S (Field)) (SIGNATURE solveLinear ((Union (Vector S) failed) (Vector R) R)) (SIGNATURE solveLinear ((Union (Vector (Fraction S)) failed) (Vector R) R))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LPEFRAC 
   Warnings: 
      [1] solveLinearPolynomialEquationByFractions: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solveLinearPolynomialEquationByFractions ((Union (List (SparseUnivariatePolynomial R)) failed) (List (SparseUnivariatePolynomial R)) (SparseUnivariatePolynomial R))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LSPP 
   Warnings: 
      [1] poly2vect: not known that (Ring) is of mode (CATEGORY package (SIGNATURE linSolve ((Record (: particular (Union (Vector (Fraction P)) failed)) (: basis (List (Vector (Fraction P))))) (List P) (List OV))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MATLIN 
   Warnings: 
      [1] minorDet:  ans has no value
      [2] rowEchelon:  xnj has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MDDFACT 
   Semantic Errors: 
      [1] ddfactor:  degree is BOTH a variable and a literal
      [2] ddfact:  degree is BOTH a variable and a literal
      [3] ddFact:  degree is BOTH a variable and a literal
      [4] sepfact:  degree is BOTH a variable and a literal
      [5] separateFactors:  degree is BOTH a variable and a literal
      [6] sepFact1:  degree is BOTH a variable and a literal
 
   Warnings: 
      [1] ddfact:  ans has no value
      [2] ddfact: :(Integer) -- should replace by @
      [3] sepFact1:  ans has no value
      [4] sepFact1:  stack has no value
      [5] probSplit: :(NonNegativeInteger) -- should replace by pretend

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MFINFACT 
   Warnings: 
      [1] pretendOV -- should replace by @
      [2] supFactor: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored PG) PG)) (SIGNATURE factor ((Factored (SparseUnivariatePolynomial PG)) (SparseUnivariatePolynomial PG))))
      [3] mFactor:  irr has no value
      [4] mFactor:  pow has no value
      [5] mFactor: not known that (Ring) is of mode (CATEGORY package (SIGNATURE factor ((Factored PG) PG)) (SIGNATURE factor ((Factored (SparseUnivariatePolynomial PG)) (SparseUnivariatePolynomial PG))))
      [6] mFactor:  ffactor has no value
      [7] mFactor:  factorlist has no value
      [8] intfact:  unifact has no value
      [9] intfact:  lpol has no value
      [10] intfact:  factfin has no value
      [11] intChoose:  newm has no value
      [12] intChoose:  unifact has no value
      [13] intChoose:  int has no value
      [14] simplify:  pol1 has no value
      [15] simplify:  factorlist has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MLIFT 
   Warnings: 
      [1] Use: import (GenExEuclid R (SparseUnivariatePolynomial R))
      [2] Use: import (NPCoef (SparseUnivariatePolynomial R) E OV R P)
      [3] Use: import (IntegerCombinatoricFunctions (Integer))
      [4] lifting:  nplist has no value
      [5] normalDerivM: not known that (Ring) is of mode (CATEGORY package (SIGNATURE corrPoly ((Union (List (SparseUnivariatePolynomial P)) failed) (SparseUnivariatePolynomial P) (List OV) (List R) (List (NonNegativeInteger)) (List (SparseUnivariatePolynomial P)) (Vector (List (SparseUnivariatePolynomial R))) R)) (SIGNATURE lifting ((Union (List (SparseUnivariatePolynomial P)) failed) (SparseUnivariatePolynomial P) (List OV) (List (SparseUnivariatePolynomial R)) (List R) (List P) (List (NonNegativeInteger)) R)) (SIGNATURE lifting1 ((Union (List (SparseUnivariatePolynomial P)) failed) (SparseUnivariatePolynomial P) (List OV) (List (SparseUnivariatePolynomial P)) (List R) (List P) (List (List (Record (: expt (NonNegativeInteger)) (: pcoef P)))) (List (NonNegativeInteger)) (Vector (List (SparseUnivariatePolynomial R))) R)))

   MODMON abbreviates domain ModMonic 
(PUSH (QUOTE |ModMonic|) |$mutableDomains|)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MODMON 
   Warnings: 
      [1] :(NonNegativeInteger) -- should replace by pretend
      [2] lift: pretendRep -- should replace by @
      [3] not known that (SetCategory) is of mode (CATEGORY domain (SIGNATURE frobenius ($ $)))
      [4] not known that (Ring) is of mode (CATEGORY domain (SIGNATURE frobenius ($ $)))
      [5] not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE frobenius ($ $)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MONOTOOL 
   Warnings: 
      [1] splitSquarefree: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE split ((Record (: normal UP) (: special UP)) UP (Mapping UP UP))) (SIGNATURE splitSquarefree ((Record (: normal (Factored UP)) (: special (Factored UP))) UP (Mapping UP UP))) (SIGNATURE normalDenom (UP (Fraction UP) (Mapping UP UP))) (SIGNATURE decompose ((Record (: poly UP) (: normal (Fraction UP)) (: special (Fraction UP))) (Fraction UP) (Mapping UP UP))))
      [2] splitSquarefree:  s has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MPCPF 
   Warnings: 
      [1] factor: not known that (SIGNATURE variable ((Union $ failed) (Symbol))) is of mode (CATEGORY domain (SIGNATURE new ($)) (SIGNATURE new ($ $)) (SIGNATURE resetNew ((Void))) (SIGNATURE coerce ($ (String))) (SIGNATURE name ($ $)) (SIGNATURE scripted? ((Boolean) $)) (SIGNATURE scripts ((Record (: sub (List (OutputForm))) (: sup (List (OutputForm))) (: presup (List (OutputForm))) (: presub (List (OutputForm))) (: args (List (OutputForm)))) $)) (SIGNATURE script ($ $ (List (List (OutputForm))))) (SIGNATURE script ($ $ (Record (: sub (List (OutputForm))) (: sup (List (OutputForm))) (: presup (List (OutputForm))) (: presub (List (OutputForm))) (: args (List (OutputForm)))))) (SIGNATURE subscript ($ $ (List (OutputForm)))) (SIGNATURE superscript ($ $ (List (OutputForm)))) (SIGNATURE argscript ($ $ (List (OutputForm)))) (SIGNATURE elt ($ $ (List (OutputForm)))) (SIGNATURE string ((String) $)) (SIGNATURE list ((List $) $)) (SIGNATURE sample ($) constant))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MPC3 
   Warnings: 
      [1] map: not known that (Ring) is of mode (CATEGORY package (SIGNATURE map (PR2 (Mapping Vars2 Vars1) PR1)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MPRFF 
   Warnings: 
      [1] factor: not known that (PolynomialCategory (Fraction (Integer)) (IndexedExponents (Symbol)) (Symbol)) is of mode (CATEGORY domain (IF (has R (Algebra (Fraction (Integer)))) (SIGNATURE integrate ($ $ (Symbol))) noBranch))
      [2] factor: pretend(Factored (Polynomial R)) -- should replace by @
      [3] factor:  flist has no value
      [4] pushdown: not known that (Ring) is of mode (CATEGORY package (SIGNATURE totalfract ((Record (: sup (Polynomial R)) (: inf (Polynomial R))) PRF)) (SIGNATURE pushdown (PRF PRF OV)) (SIGNATURE pushdterm (PRF (SparseUnivariatePolynomial PRF) OV)) (SIGNATURE pushup (PRF PRF OV)) (SIGNATURE pushucoef (PRF (SparseUnivariatePolynomial (Polynomial R)) OV)) (SIGNATURE pushuconst (PRF (Fraction (Polynomial R)) OV)) (SIGNATURE factor ((Factored PRF) PRF)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MULTSQFR 
   Semantic Errors: 
      [1] squareFree:  ff has two modes: 
 
   Warnings: 
      [1] nsqfree:  lcf has no value
      [2] nsqfree:  leadpol has no value
      [3] nsqfree:  sqlc has no value
      [4] nsqfree: :(NonNegativeInteger) -- should replace by pretend
      [5] nsqfree:  sqlead has no value
      [6] nsqfree:  unitsq has no value
      [7] nsqfree:  sqdec has no value
      [8] squareFree: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE squareFree ((Factored P) P)) (SIGNATURE squareFree ((Factored (SparseUnivariatePolynomial P)) (SparseUnivariatePolynomial P))) (SIGNATURE squareFreePrim ((Factored P) P)) (SIGNATURE compdegd ((Integer) (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer)))))) (SIGNATURE univcase ((Factored P) P OV)) (SIGNATURE consnewpol ((Record (: pol (SparseUnivariatePolynomial P)) (: polval (SparseUnivariatePolynomial R))) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial R) (Integer))) (SIGNATURE nsqfree ((Record (: unitPart P) (: suPart (List (Record (: factor (SparseUnivariatePolynomial P)) (: exponent (Integer)))))) (SparseUnivariatePolynomial P) (List OV) (List (List R)))) (SIGNATURE intChoose ((Record (: upol (SparseUnivariatePolynomial R)) (: Lval (List R)) (: Lfact (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer))))) (: ctpol R)) (SparseUnivariatePolynomial P) (List OV) (List (List R)))) (SIGNATURE coefChoose (P (Integer) (Factored P))) (SIGNATURE check ((Boolean) (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer)))) (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer)))))) (SIGNATURE lift ((Union (List (SparseUnivariatePolynomial P)) failed) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial R) (SparseUnivariatePolynomial R) P (List OV) (List (NonNegativeInteger)) (List R))) (SIGNATURE myDegree ((List (NonNegativeInteger)) (SparseUnivariatePolynomial P) (List OV) (NonNegativeInteger))) (SIGNATURE normDeriv2 ((SparseUnivariatePolynomial R) (SparseUnivariatePolynomial R) (Integer))))
      [9] squareFree:  fctr has no value
      [10] squareFree:  xpnt has no value
      [11] squareFree:  p has no value
      [12] squareFree:  result1 has no value
      [13] squareFree:  lvar has no value
      [14] squareFree: not known that (Ring) is of mode (CATEGORY package (SIGNATURE squareFree ((Factored P) P)) (SIGNATURE squareFree ((Factored (SparseUnivariatePolynomial P)) (SparseUnivariatePolynomial P))) (SIGNATURE squareFreePrim ((Factored P) P)) (SIGNATURE compdegd ((Integer) (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer)))))) (SIGNATURE univcase ((Factored P) P OV)) (SIGNATURE consnewpol ((Record (: pol (SparseUnivariatePolynomial P)) (: polval (SparseUnivariatePolynomial R))) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial R) (Integer))) (SIGNATURE nsqfree ((Record (: unitPart P) (: suPart (List (Record (: factor (SparseUnivariatePolynomial P)) (: exponent (Integer)))))) (SparseUnivariatePolynomial P) (List OV) (List (List R)))) (SIGNATURE intChoose ((Record (: upol (SparseUnivariatePolynomial R)) (: Lval (List R)) (: Lfact (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer))))) (: ctpol R)) (SparseUnivariatePolynomial P) (List OV) (List (List R)))) (SIGNATURE coefChoose (P (Integer) (Factored P))) (SIGNATURE check ((Boolean) (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer)))) (List (Record (: factor (SparseUnivariatePolynomial R)) (: exponent (Integer)))))) (SIGNATURE lift ((Union (List (SparseUnivariatePolynomial P)) failed) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial R) (SparseUnivariatePolynomial R) P (List OV) (List (NonNegativeInteger)) (List R))) (SIGNATURE myDegree ((List (NonNegativeInteger)) (SparseUnivariatePolynomial P) (List OV) (NonNegativeInteger))) (SIGNATURE normDeriv2 ((SparseUnivariatePolynomial R) (SparseUnivariatePolynomial R) (Integer))))
      [15] intChoose: :R -- should replace by @
      [16] intChoose:  d1 has no value
      [17] coefChoose:  lcoef has no value
      [18] lift:  leadlist has no value
      [19] lift:  p0 has no value
      [20] lift:  p1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NPCOEF 
   Warnings: 
      [1] npcoef: :(NonNegativeInteger) -- should replace by pretend
      [2] npcoef:  ndet has no value
      [3] npcoef:  detufact has no value
      [4] npcoef:  ltodel has no value
      [5] npcoef:  detcoef has no value
      [6] check: :(NonNegativeInteger) -- should replace by pretend
      [7] check:  doit has no value
      [8] check:  cfu has no value
      [9] check:  poselt has no value
      [10] check:  pp has no value
      [11] buildtable:  table has no value
      [12] modify: :(NonNegativeInteger) -- should replace by pretend
      [13] modify:  lterase has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NSUP 
   Warnings: 
      [1] subResultantGcd: not known that (UnivariatePolynomialCategory R) is of mode (CATEGORY domain (SIGNATURE halfExtendedResultant2 ((Record (: resultant R) (: coef2 $)) $ $)))

--------------non extending category----------------------
.. NewSparseUnivariatePolynomial #1 of cat 
(|Join| (|UnivariatePolynomialCategory| |#1|) (|CoercibleTo| (|SparseUnivariatePolynomial| |#1|)) (|RetractableTo| (|SparseUnivariatePolynomial| |#1|)) (CATEGORY |domain| (SIGNATURE |fmecg| ($ $ (|NonNegativeInteger|) |#1| $)) (SIGNATURE |monicModulo| ($ $ $)) (SIGNATURE |lazyResidueClass| ((|Record| (|:| |polnum| $) (|:| |polden| |#1|) (|:| |power| (|NonNegativeInteger|))) $ $)) (SIGNATURE |lazyPseudoRemainder| ($ $ $)) (SIGNATURE |lazyPseudoDivide| ((|Record| (|:| |coef| |#1|) (|:| |gap| (|NonNegativeInteger|)) (|:| |quotient| $) (|:| |remainder| $)) $ $)) (SIGNATURE |lazyPseudoQuotient| ($ $ $)) (IF (|has| |#1| (|IntegralDomain|)) (PROGN (SIGNATURE |subResultantsChain| ((|List| $) $ $)) (SIGNATURE |lastSubResultant| ($ $ $)) (SIGNATURE |extendedSubResultantGcd| ((|Record| (|:| |gcd| $) (|:| |coef1| $) (|:| |coef2| $)) $ $)) (SIGNATURE |halfExtendedSubResultantGcd1| ((|Record| (|:| |gcd| $) (|:| |coef1| $)) $ $)) (SIGNATURE |halfExtendedSubResultantGcd2| ((|Record| (|:| |gcd| $) (|:| |coef2| $)) $ $)) (SIGNATURE |extendedResultant| ((|Record| (|:| |resultant| |#1|) (|:| |coef1| $) (|:| |coef2| $)) $ $)) (SIGNATURE |halfExtendedResultant1| ((|Record| (|:| |resultant| |#1|) (|:| |coef1| $)) $ $)) (SIGNATURE |halfExtendedResultant2| ((|Record| (|:| |resultant| |#1|) (|:| |coef2| $)) $ $))) |noBranch|)))    has no  outputForm : (%,OutputForm) -> OutputForm 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ODEPRIM 
   Warnings: 
      [1] indicialEquations:  eq has no value
      [2] NPmulambda:  lamb has no value
      [3] NPmulambda:  lf has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ODEPRRIC 
   Warnings: 
      [1] leadingDenomRicDE:  ind has no value
      [2] constantCoefficientOperator:  ans has no value
      [3] innermax:  ans has no value
      [4] leadingCoefficientRicDE:  ind has no value
      [5] innerlb:  lb has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OMPKG 
   Warnings: 
      [1] OMreadStr: pretend(String) -- should replace by @
      [2] OMlistCDs: pretend(List (String)) -- should replace by @
      [3] OMlistSymbols: pretend(List (String)) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OMSERVER 
--->/research2/test0819/mnt/fedora5/../../src/algebra/OMSERVER.spad-->OpenMathServerPackage((OMsend ((Void) (OpenMathConnection) (Any)))): Unexpected HT command: \aciom
"\\spad{OMsend(c,{}u)} attempts to output \\axiom{\\spad{u}} on \\aciom{\\spad{c}} in OpenMath."

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PADICRC 
   Warnings: 
      [1] coerce:  l has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PF 
   Warnings: 
      [1] unknown Functor code (error Argument to prime field must be a prime)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PFBR 
   Warnings: 
      [1] hensel: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solveLinearPolynomialEquationByRecursion ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreeByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE randomR (R)) (SIGNATURE bivariateSLPEBR ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S) VarSet)) (SIGNATURE factorSFBRlcUnit ((Factored (SparseUnivariatePolynomial S)) (List VarSet) (SparseUnivariatePolynomial S))))
      [2] hensel:  foundFactors has no value
      [3] factorSFBRlcUnitInner: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solveLinearPolynomialEquationByRecursion ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreeByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE randomR (R)) (SIGNATURE bivariateSLPEBR ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S) VarSet)) (SIGNATURE factorSFBRlcUnit ((Factored (SparseUnivariatePolynomial S)) (List VarSet) (SparseUnivariatePolynomial S))))
      [4] factorSFBRlcUnitInner:  fctr has no value
      [5] chooseFSQViableSubstitutions:  ppR has no value
      [6] chooseSLPEViableSubstitutions:  lpolysR has no value
      [7] raise: :R -- should replace by pretend
      [8] raise: :R -- should replace by @
      [9] factorByRecursion: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE solveLinearPolynomialEquationByRecursion ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreeByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE randomR (R)) (SIGNATURE bivariateSLPEBR ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S) VarSet)) (SIGNATURE factorSFBRlcUnit ((Factored (SparseUnivariatePolynomial S)) (List VarSet) (SparseUnivariatePolynomial S))))
      [10] factorByRecursion: :S -- should replace by @
      [11] factorSquareFreeByRecursion:  lcppPow has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PFBRU 
   Warnings: 
      [1] solveLinearPolynomialEquationByRecursion: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solveLinearPolynomialEquationByRecursion ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreeByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE randomR (R)) (SIGNATURE factorSFBRlcUnit ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))))
      [2] solveLinearPolynomialEquationByRecursion:  answer has no value
      [3] hensel:  foundFactors has no value
      [4] chooseFSQViableSubstitutions:  ppR has no value
      [5] raise: :R -- should replace by pretend
      [6] raise: :R -- should replace by @
      [7] factorSFBRlcUnitInner: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solveLinearPolynomialEquationByRecursion ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreeByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE randomR (R)) (SIGNATURE factorSFBRlcUnit ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))))
      [8] factorSFBRlcUnitInner:  fctr has no value
      [9] factorByRecursion: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE solveLinearPolynomialEquationByRecursion ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreeByRecursion ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE randomR (R)) (SIGNATURE factorSFBRlcUnit ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))))
      [10] factorByRecursion: :S -- should replace by pretend
      [11] factorByRecursion: :S -- should replace by @
      [12] factorSquareFreeByRecursion:  lcppPow has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PGCD 
   Warnings: 
      [1] localgcd:  s has no value
      [2] gcdTermList: not known that (Ring) is of mode (CATEGORY package (SIGNATURE gcd (P P P)) (SIGNATURE gcd (P (List P))) (SIGNATURE gcd ((SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P))) (SIGNATURE gcd ((SparseUnivariatePolynomial P) (List (SparseUnivariatePolynomial P)))) (SIGNATURE gcdPrimitive (P P P)) (SIGNATURE gcdPrimitive ((SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P) (SparseUnivariatePolynomial P))) (SIGNATURE gcdPrimitive (P (List P))))
      [3] lift:  p0 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PLEQN 
   Warnings: 
      [1] regime:  wcd has no value
      [2] regime:  yzero has no value
      [3] bsolve:  rksoln has no value
      [4] bsolve:  lrec3 has no value
      [5] ParCondList:  covered has no value
      [6] ParCondList:  zro has no value
      [7] ParCondList:  npc has no value
      [8] ParCondList:  done has no value
      [9] ParCondList:  rcl has no value
      [10] pr2dmp: pretendGR -- should replace by @
      [11] sqfree: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE psolve ((List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (Matrix GR) (List GR))) (SIGNATURE psolve ((List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (Matrix GR) (List (Symbol)))) (SIGNATURE psolve ((List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (Matrix GR))) (SIGNATURE psolve ((List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (Matrix GR) (List GR) (PositiveInteger))) (SIGNATURE psolve ((List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (Matrix GR) (List (Symbol)) (PositiveInteger))) (SIGNATURE psolve ((List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (Matrix GR) (PositiveInteger))) (SIGNATURE psolve ((Integer) (Matrix GR) (List GR) (String))) (SIGNATURE psolve ((Integer) (Matrix GR) (List (Symbol)) (String))) (SIGNATURE psolve ((Integer) (Matrix GR) (String))) (SIGNATURE psolve ((Integer) (Matrix GR) (List GR) (PositiveInteger) (String))) (SIGNATURE psolve ((Integer) (Matrix GR) (List (Symbol)) (PositiveInteger) (String))) (SIGNATURE psolve ((Integer) (Matrix GR) (PositiveInteger) (String))) (SIGNATURE wrregime ((Integer) (List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (String))) (SIGNATURE rdregime ((List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R))))))))) (String))) (SIGNATURE bsolve ((Record (: rgl (List (Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R)))))))))) (: rgsz (Integer))) (Matrix GR) (List (Fraction (Polynomial R))) (NonNegativeInteger) (String) (Integer))) (SIGNATURE dmp2rfi ((Fraction (Polynomial R)) GR)) (SIGNATURE dmp2rfi ((Matrix (Fraction (Polynomial R))) (Matrix GR))) (SIGNATURE dmp2rfi ((List (Fraction (Polynomial R))) (List GR))) (SIGNATURE se2rfi ((List (Fraction (Polynomial R))) (List (Symbol)))) (SIGNATURE pr2dmp (GR (Polynomial R))) (SIGNATURE hasoln ((Record (: sysok (Boolean)) (: z0 (List GR)) (: n0 (List GR))) (List GR) (List GR))) (SIGNATURE ParCondList ((List (Record (: rank (NonNegativeInteger)) (: eqns (List (Record (: det GR) (: rows (List (Integer))) (: cols (List (Integer)))))) (: fgb (List GR)))) (Matrix GR) (NonNegativeInteger))) (SIGNATURE redpps ((Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R)))))) (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R)))))) (List GR))) (SIGNATURE B1solve ((Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R)))))) (Record (: mat (Matrix (Fraction (Polynomial R)))) (: vec (List (Fraction (Polynomial R)))) (: rank (NonNegativeInteger)) (: rows (List (Integer))) (: cols (List (Integer)))))) (SIGNATURE factorset ((List GR) GR)) (SIGNATURE maxrank ((NonNegativeInteger) (List (Record (: rank (NonNegativeInteger)) (: eqns (List (Record (: det GR) (: rows (List (Integer))) (: cols (List (Integer)))))) (: fgb (List GR)))))) (SIGNATURE minrank ((NonNegativeInteger) (List (Record (: rank (NonNegativeInteger)) (: eqns (List (Record (: det GR) (: rows (List (Integer))) (: cols (List (Integer)))))) (: fgb (List GR)))))) (SIGNATURE minset ((List (List GR)) (List (List GR)))) (SIGNATURE nextSublist ((List (List (Integer))) (Integer) (Integer))) (SIGNATURE overset? ((Boolean) (List GR) (List (List GR)))) (SIGNATURE ParCond ((List (Record (: det GR) (: rows (List (Integer))) (: cols (List (Integer))))) (Matrix GR) (NonNegativeInteger))) (SIGNATURE redmat ((Matrix GR) (Matrix GR) (List GR))) (SIGNATURE regime ((Record (: eqzro (List GR)) (: neqzro (List GR)) (: wcond (List (Polynomial R))) (: bsoln (Record (: partsol (Vector (Fraction (Polynomial R)))) (: basis (List (Vector (Fraction (Polynomial R)))))))) (Record (: det GR) (: rows (List (Integer))) (: cols (List (Integer)))) (Matrix GR) (List (Fraction (Polynomial R))) (List (List GR)) (NonNegativeInteger) (NonNegativeInteger) (Integer))) (SIGNATURE sqfree (GR GR)) (SIGNATURE inconsistent? ((Boolean) (List GR))) (SIGNATURE inconsistent? ((Boolean) (List (Polynomial R)))))
      [12] ParCond:  found has no value
      [13] ParCond:  DetEqn has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PNTHEORY 
   Warnings: 
      [1] cyclotomic:  s has no value
      [2] cyclotomic:  c has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib POLUTIL 
   Warnings: 
      [1] sylvesterSequence:  res has no value
      [2] sturmVariationsOf:  ll has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib POLYCATQ 
   Warnings: 
      [1] isPower:  var has no value
      [2] P2UP: not known that (Ring) is of mode (CATEGORY package (SIGNATURE variables ((List V) F)) (SIGNATURE mainVariable ((Union V failed) F)) (SIGNATURE univariate ((Fraction (SparseUnivariatePolynomial F)) F V)) (SIGNATURE multivariate (F (Fraction (SparseUnivariatePolynomial F)) V)) (SIGNATURE univariate ((SparseUnivariatePolynomial F) F V (SparseUnivariatePolynomial F))) (SIGNATURE isPlus ((Union (List F) failed) F)) (SIGNATURE isTimes ((Union (List F) failed) F)) (SIGNATURE isExpt ((Union (Record (: var V) (: exponent (Integer))) failed) F)) (SIGNATURE isPower ((Union (Record (: val F) (: exponent (Integer))) failed) F)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib POLYCATQ 
   Processing PolynomialCategoryQuotientFunctions for Browser database:
--->/research2/test0819/mnt/fedora5/../../src/algebra/POLYCATQ.spad-->PolynomialCategoryQuotientFunctions((coerce (% P))): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/POLYCATQ.spad-->PolynomialCategoryQuotientFunctions((numer (P %))): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/POLYCATQ.spad-->PolynomialCategoryQuotientFunctions((denom (P %))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib POLYLIFT 
   Warnings: 
      [1] map: not known that (Ring) is of mode (CATEGORY package (SIGNATURE map (S (Mapping S Vars) (Mapping S R) P)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib POLYLIFT 
--->/research2/test0819/mnt/fedora5/../../src/algebra/POLYLIFT.spad-->PolynomialCategoryLifting((+ (% % %))): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/POLYLIFT.spad-->PolynomialCategoryLifting((* (% % %))): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/POLYLIFT.spad-->PolynomialCategoryLifting((** (% % (NonNegativeInteger)))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib POLYROOT 
   Warnings: 
      [1] zroot: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE rroot ((Record (: exponent (NonNegativeInteger)) (: coef F) (: radicand F)) R (NonNegativeInteger))) (SIGNATURE qroot ((Record (: exponent (NonNegativeInteger)) (: coef F) (: radicand F)) (Fraction (Integer)) (NonNegativeInteger))) (IF (has R (GcdDomain)) (SIGNATURE froot ((Record (: exponent (NonNegativeInteger)) (: coef F) (: radicand F)) F (NonNegativeInteger))) noBranch) (SIGNATURE nthr ((Record (: exponent (NonNegativeInteger)) (: coef P) (: radicand (List P))) P (NonNegativeInteger))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib POLY2UP 
   Warnings: 
      [1] univariate: not known that (Ring) is of mode (CATEGORY package (SIGNATURE univariate ((UnivariatePolynomial x (Polynomial R)) (Polynomial R) (Variable x))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PRS 
   Warnings: 
      [1] resultantnaif:  a has no value
      [2] resultantEuclideannaif:  a has no value
      [3] semiResultantEuclideannaif:  a has no value
      [4] chainSubResultants:  L has no value
      [5] schema:  L has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PSQFR 
   Warnings: 
      [1] pPolRoot: not known that (Ring) is of mode (CATEGORY package (SIGNATURE squareFree ((Factored P) P)))
      [2] pthPower:  isSq has no value
      [3] pthPower:  fctr has no value
      [4] pthPower:  xpnt has no value
      [5] finSqFr: :(NonNegativeInteger) -- should replace by pretend
      [6] finSqFr:  cont1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PUSHVAR 
   Warnings: 
      [1] map: not known that (Ring) is of mode (CATEGORY package (SIGNATURE pushdown (PPR PPR OV)) (SIGNATURE pushdown (PPR PPR (List OV))) (SIGNATURE pushup (PPR PPR OV)) (SIGNATURE pushup (PPR PPR (List OV))) (SIGNATURE map (PPR (Mapping PPR (Polynomial R)) PPR)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib QALGSET 
   Warnings: 
      [1] npoly: not known that (OrderedAbelianMonoid) is of mode (CATEGORY domain (IF (has (NonNegativeInteger) (Finite)) (IF (has Expon (Finite)) (ATTRIBUTE (Finite)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Monoid)) (IF (has Expon (Monoid)) (ATTRIBUTE (Monoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianMonoid)) (IF (has Expon (AbelianMonoid)) (ATTRIBUTE (AbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (CancellationAbelianMonoid)) (IF (has Expon (CancellationAbelianMonoid)) (ATTRIBUTE (CancellationAbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Group)) (IF (has Expon (Group)) (ATTRIBUTE (Group)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianGroup)) (IF (has Expon (AbelianGroup)) (ATTRIBUTE (AbelianGroup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedAbelianMonoidSup)) (IF (has Expon (OrderedAbelianMonoidSup)) (ATTRIBUTE (OrderedAbelianMonoidSup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedSet)) (IF (has Expon (OrderedSet)) (ATTRIBUTE (OrderedSet)) noBranch) noBranch) (SIGNATURE makeprod ($ (NonNegativeInteger) Expon)) (SIGNATURE selectfirst ((NonNegativeInteger) $)) (SIGNATURE selectsecond (Expon $)))
      [2] idealSimplify: not known that (OrderedAbelianMonoid) is of mode (CATEGORY domain (IF (has (NonNegativeInteger) (Finite)) (IF (has Expon (Finite)) (ATTRIBUTE (Finite)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Monoid)) (IF (has Expon (Monoid)) (ATTRIBUTE (Monoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianMonoid)) (IF (has Expon (AbelianMonoid)) (ATTRIBUTE (AbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (CancellationAbelianMonoid)) (IF (has Expon (CancellationAbelianMonoid)) (ATTRIBUTE (CancellationAbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Group)) (IF (has Expon (Group)) (ATTRIBUTE (Group)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianGroup)) (IF (has Expon (AbelianGroup)) (ATTRIBUTE (AbelianGroup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedAbelianMonoidSup)) (IF (has Expon (OrderedAbelianMonoidSup)) (ATTRIBUTE (OrderedAbelianMonoidSup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedSet)) (IF (has Expon (OrderedSet)) (ATTRIBUTE (OrderedSet)) noBranch) noBranch) (SIGNATURE makeprod ($ (NonNegativeInteger) Expon)) (SIGNATURE selectfirst ((NonNegativeInteger) $)) (SIGNATURE selectsecond (Expon $)))
      [3] idealSimplify: not known that (OrderedAbelianMonoidSup) is of mode (CATEGORY domain (IF (has (NonNegativeInteger) (Finite)) (IF (has Expon (Finite)) (ATTRIBUTE (Finite)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Monoid)) (IF (has Expon (Monoid)) (ATTRIBUTE (Monoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianMonoid)) (IF (has Expon (AbelianMonoid)) (ATTRIBUTE (AbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (CancellationAbelianMonoid)) (IF (has Expon (CancellationAbelianMonoid)) (ATTRIBUTE (CancellationAbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Group)) (IF (has Expon (Group)) (ATTRIBUTE (Group)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianGroup)) (IF (has Expon (AbelianGroup)) (ATTRIBUTE (AbelianGroup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedAbelianMonoidSup)) (IF (has Expon (OrderedAbelianMonoidSup)) (ATTRIBUTE (OrderedAbelianMonoidSup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedSet)) (IF (has Expon (OrderedSet)) (ATTRIBUTE (OrderedSet)) noBranch) noBranch) (SIGNATURE makeprod ($ (NonNegativeInteger) Expon)) (SIGNATURE selectfirst ((NonNegativeInteger) $)) (SIGNATURE selectsecond (Expon $)))
      [4] idealSimplify: not known that (PolynomialCategory R (Product (NonNegativeInteger) Expon) Var) is of mode (CATEGORY domain (IF (has R (IntegralDomain)) (IF (has (Product (NonNegativeInteger) Expon) (CancellationAbelianMonoid)) (SIGNATURE fmecg ($ $ (Product (NonNegativeInteger) Expon) R $)) noBranch) noBranch) (IF (has R (ATTRIBUTE canonicalUnitNormal)) (ATTRIBUTE canonicalUnitNormal) noBranch))
      [5] idealSimplify:  gb has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RADIX 
   Warnings: 
      [1] fractionPart: signature of lhs not unique: (Fraction (Integer))$ chosen
      [2] coerce:  le has no value
      [3] radixFrac:  c has no value
      [4] unknown Functor code (error Radix base must be at least 2)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RATFACT 
--->/research2/test0819/mnt/fedora5/../../src/algebra/RATFACT.spad-->RationalFactorize(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/RATFACT.spad-->RationalFactorize(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RCFIELD- 
   Warnings: 
      [1] rootOf: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE sqrt (S (Integer))) (SIGNATURE sqrt (S (Fraction (Integer)))) (SIGNATURE sqrt (S S (NonNegativeInteger))) (SIGNATURE allRootsOf ((List S) (Polynomial (Integer)))) (SIGNATURE allRootsOf ((List S) (Polynomial (Fraction (Integer))))) (SIGNATURE allRootsOf ((List S) (Polynomial S))) (SIGNATURE allRootsOf ((List S) (SparseUnivariatePolynomial (Integer)))) (SIGNATURE allRootsOf ((List S) (SparseUnivariatePolynomial (Fraction (Integer))))) (SIGNATURE allRootsOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE rootOf ((Union S failed) (SparseUnivariatePolynomial S) (PositiveInteger))) (SIGNATURE rootOf ((Union S failed) (SparseUnivariatePolynomial S) (PositiveInteger) (OutputForm))) (SIGNATURE ** (S S (Fraction (Integer)))) (SIGNATURE nthRoot (S S (Integer))) (SIGNATURE sqrt (S S)) (SIGNATURE ** (S S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE ** (S S (PositiveInteger))))
      [2] allRootsOf: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE sqrt (S (Integer))) (SIGNATURE sqrt (S (Fraction (Integer)))) (SIGNATURE sqrt (S S (NonNegativeInteger))) (SIGNATURE allRootsOf ((List S) (Polynomial (Integer)))) (SIGNATURE allRootsOf ((List S) (Polynomial (Fraction (Integer))))) (SIGNATURE allRootsOf ((List S) (Polynomial S))) (SIGNATURE allRootsOf ((List S) (SparseUnivariatePolynomial (Integer)))) (SIGNATURE allRootsOf ((List S) (SparseUnivariatePolynomial (Fraction (Integer))))) (SIGNATURE allRootsOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE rootOf ((Union S failed) (SparseUnivariatePolynomial S) (PositiveInteger))) (SIGNATURE rootOf ((Union S failed) (SparseUnivariatePolynomial S) (PositiveInteger) (OutputForm))) (SIGNATURE ** (S S (Fraction (Integer)))) (SIGNATURE nthRoot (S S (Integer))) (SIGNATURE sqrt (S S)) (SIGNATURE ** (S S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE ** (S S (PositiveInteger))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RCFIELD 
; (DEFUN |RealClosedField| ...) is being compiled.
;; The variable |RealClosedField;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RDETR 
   Warnings: 
      [1] polyRDE:  eq has no value
      [2] SPDEnocancel1:  q has no value
      [3] SPDEnocancel2:  q has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib REAL0 
   Warnings: 
      [1] makeSqfr: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE realZeros ((List (Record (: left (Fraction (Integer))) (: right (Fraction (Integer))))) Pol)) (SIGNATURE realZeros ((List (Record (: left (Fraction (Integer))) (: right (Fraction (Integer))))) Pol (Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))))) (SIGNATURE realZeros ((List (Record (: left (Fraction (Integer))) (: right (Fraction (Integer))))) Pol (Fraction (Integer)))) (SIGNATURE realZeros ((List (Record (: left (Fraction (Integer))) (: right (Fraction (Integer))))) Pol (Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))) (Fraction (Integer)))) (SIGNATURE refine ((Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))) Pol (Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))) (Fraction (Integer)))) (SIGNATURE refine ((Union (Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))) failed) Pol (Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))) (Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))))) (SIGNATURE midpoint ((Fraction (Integer)) (Record (: left (Fraction (Integer))) (: right (Fraction (Integer)))))) (SIGNATURE midpoints ((List (Fraction (Integer))) (List (Record (: left (Fraction (Integer))) (: right (Fraction (Integer))))))))
      [2] Zero1:  G has no value
      [3] rootBound:  i has no value
      [4] transMultInv: :(NonNegativeInteger) -- should replace by pretend
      [5] var:  i has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib REALSOLV 
--->/research2/test0819/mnt/fedora5/../../src/algebra/REALSOLV.spad-->RealSolvePackage(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/REALSOLV.spad-->RealSolvePackage(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RESRING 
   Warnings: 
      [1] unknown Functor code (error the residue ring is the zero ring)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RETSOL 
   Warnings: 
      [1] PQIfCan: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solveRetract ((List (List (Equation (Fraction (Polynomial R))))) (List (Polynomial R)) (List (Symbol)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RFFACTOR 
   Warnings: 
      [1] factorFraction: not known that (PolynomialCategory (Fraction (Integer)) (IndexedExponents (Symbol)) (Symbol)) is of mode (CATEGORY domain (IF (has R (Algebra (Fraction (Integer)))) (SIGNATURE integrate ($ $ (Symbol))) noBranch))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RMATCAT 
; (DEFUN |RectangularMatrixCategory| ...) is being compiled.
;; The variable |RectangularMatrixCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |RectangularMatrixCategory;| ...) is being compiled.
;; The variable |RectangularMatrixCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RRCC 
; (DEFUN |RealRootCharacterizationCategory| ...) is being compiled.
;; The variable |RealRootCharacterizationCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |RealRootCharacterizationCategory;| ...) is being compiled.
;; The variable |RealRootCharacterizationCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SHP 
   Warnings: 
      [1] subresultantSequenceNext: :(List (UnivariatePolynomial x R)) -- should replace by @
      [2] subresultantSequenceInner: :(UnivariatePolynomial x R) -- should replace by @
      [3] subresultantSequenceInner: :(List (UnivariatePolynomial x R)) -- should replace by @
      [4] subresultantSequence: :(List (UnivariatePolynomial x R)) -- should replace by @
      [5] polsth1: :(List (UnivariatePolynomial x R)) -- should replace by @
      [6] polsth1:  Listf has no value
      [7] polsth2: :(List (UnivariatePolynomial x R)) -- should replace by @
      [8] polsth3: :(List (UnivariatePolynomial x R)) -- should replace by @
      [9] wfunctaux: :(List R) -- should replace by @
      [10] wfunctaux: :(NonNegativeInteger) -- should replace by @
      [11] wfunct: :(List R) -- should replace by @
      [12] SturmHabicht: :(UnivariatePolynomial x R) -- should replace by @
      [13] SturmHabichtMultiple: :(UnivariatePolynomial x R) -- should replace by @
      [14] SturmHabichtMultiple: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE countRealRootsMultiple ((Integer) (UnivariatePolynomial x R))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SIGNRF 
   Warnings: 
      [1] psign: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE sign ((Union (Integer) failed) (Fraction (Polynomial R)))) (SIGNATURE sign ((Union (Integer) failed) (Fraction (Polynomial R)) (Symbol) (OrderedCompletion (Fraction (Polynomial R))))) (SIGNATURE sign ((Union (Integer) failed) (Fraction (Polynomial R)) (Symbol) (Fraction (Polynomial R)) (String))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SMP 
   Warnings: 
      [1] ^: pretend(NonNegativeInteger) -- should replace by @
      [2] **: pretend(NonNegativeInteger) -- should replace by @
      [3] exquo: The conditional modes (SparseUnivariatePolynomial $) and D conflict
      [4] eval:  IN has no value
      [5] eval:  val has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SOLVEFOR 
   Warnings: 
      [1] intsolve: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE solve ((List F) UP)) (SIGNATURE particularSolution (F UP)) (SIGNATURE mapSolve ((Record (: solns (List F)) (: maps (List (Record (: arg F) (: res F))))) UP (Mapping F F))) (SIGNATURE linear ((List F) UP)) (SIGNATURE quadratic ((List F) UP)) (SIGNATURE cubic ((List F) UP)) (SIGNATURE quartic ((List F) UP)) (SIGNATURE linear ((List F) F F)) (SIGNATURE quadratic ((List F) F F F)) (SIGNATURE cubic ((List F) F F F F)) (SIGNATURE quartic ((List F) F F F F F)) (SIGNATURE aLinear (F F F)) (SIGNATURE aQuadratic (F F F F)) (SIGNATURE aCubic (F F F F F)) (SIGNATURE aQuartic (F F F F F F)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SOLVEFOR 
--->/research2/test0819/mnt/fedora5/../../src/algebra/SOLVEFOR.spad-->PolynomialSolveByFormulas((** (% % (Fraction (Integer))))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SPLTREE 
   compiling exported eq? : ($,$) -> Boolean
      SPLTREE;eq?;2$B;20 is replaced by errorin eq? from SPLTREE : la vache qui rit est-elle folle? 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SPLTREE 
   Warnings: 
      [1] splitNodeOf!:  la has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib STTFNC 
   compiling exported acos : Stream Coef -> Stream Coef
      STTFNC;acos;2S;12 is replaced by erroracos: acos undefined on this coefficient domain 
   compiling exported acot : Stream Coef -> Stream Coef
      STTFNC;acot;2S;13 is replaced by erroracot: acot undefined on this coefficient domain 
   compiling exported asec : Stream Coef -> Stream Coef
      STTFNC;asec;2S;14 is replaced by errorasec: asec undefined on this coefficient domain 
   compiling exported acsc : Stream Coef -> Stream Coef
      STTFNC;acsc;2S;15 is replaced by erroracsc: acsc undefined on this coefficient domain 
   compiling exported acosh : Stream Coef -> Stream Coef
      STTFNC;acosh;2S;24 is replaced by erroracosh: acosh undefined on this coefficient domain 
   compiling exported acoth : Stream Coef -> Stream Coef
      STTFNC;acoth;2S;25 is replaced by erroracoth: acoth undefined on this coefficient domain 
   compiling exported asech : Stream Coef -> Stream Coef
      STTFNC;asech;2S;26 is replaced by errorasech: asech undefined on this coefficient domain 
   compiling exported acsch : Stream Coef -> Stream Coef
      STTFNC;acsch;2S;27 is replaced by erroracsch: acsch undefined on this coefficient domain 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SUP 
   Warnings: 
      [1] **: pretend(NonNegativeInteger) -- should replace by @
      [2] ^: pretend(NonNegativeInteger) -- should replace by @
      [3] **:  y has no value
      [4] pomopo!:  rout has no value
      [5] exquo: signature of lhs not unique: (Union $ failed)$$ chosen
      [6] fmecg:  rout has no value
      [7] pseudoRemainder: :(Integer) -- should replace by pretend
      [8] pseudoRemainder: :(NonNegativeInteger) -- should replace by pretend
      [9] elt: :(NonNegativeInteger) -- should replace by pretend

--------------non extending category----------------------
.. SparseUnivariatePolynomial #1 of cat 
(|Join| (|UnivariatePolynomialCategory| |#1|) (CATEGORY |domain| (SIGNATURE |outputForm| ((|OutputForm|) $ (|OutputForm|))) (SIGNATURE |fmecg| ($ $ (|NonNegativeInteger|) |#1| $))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(IF (|has| |#1| (|IntegralDomain|)) (IF (|has| (|NonNegativeInteger|) (|CancellationAbelianMonoid|)) (SIGNATURE |fmecg| ($ $ (|NonNegativeInteger|) |#1| $)) |noBranch|) |noBranch|)    finalizing nrlib SUP 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SUPFRACF 
   Warnings: 
      [1] squareFree: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored (SparseUnivariatePolynomial (Fraction P))) (SparseUnivariatePolynomial (Fraction P)))) (SIGNATURE squareFree ((Factored (SparseUnivariatePolynomial (Fraction P))) (SparseUnivariatePolynomial (Fraction P)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib TEX 
   Warnings: 
      [1] display: pretend(Integer) -- should replace by @
      [2] coerce: pretend(Integer) -- should replace by @
      [3] stringify: pretend(String) -- should replace by @
      [4] splitLong1:  l has no value
      [5] splitLong1:  ls has no value
      [6] splitLong1:  s has no value
      [7] formatSpecial:  form has no value
      [8] formatSpecial:  prescript has no value
      [9] formatPlex:  s has no value
      [10] formatTex: pretend(Boolean) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib TEXTFILE 
   Warnings: 
      [1] endOfFile?: pretend(Boolean) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib TREE 
   Warnings: 
      [1] children:  node has no value
      [2] setchildren!:  node has no value
      [3] setchildren!: pretend$ -- should replace by @
      [4] setvalue!:  node has no value
      [5] count: signature of lhs not unique: (NonNegativeInteger)S$ chosen
      [6] value:  node has no value
      [7] node?:  t has no value
      [8] multipleOverbar: The conditional modes (String) and S conflict
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib TWOFACT 
   Warnings: 
      [1] generalSqFr: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE generalTwoFactor ((Factored (SparseUnivariatePolynomial (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial (SparseUnivariatePolynomial F)))) (SIGNATURE generalSqFr ((Factored (SparseUnivariatePolynomial (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial (SparseUnivariatePolynomial F)))) (SIGNATURE twoFactor ((Factored (SparseUnivariatePolynomial (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial (SparseUnivariatePolynomial F)) (Integer))))
      [2] generalSqFr:  flg has no value
      [3] generalSqFr:  xpnt has no value
      [4] generalSqFr: :(NonNegativeInteger) -- should replace by pretend
      [5] generalSqFr:  fctr has no value
      [6] generalTwoFactor:  flg has no value
      [7] generalTwoFactor:  fctr has no value
      [8] generalTwoFactor:  xpnt has no value
      [9] generalTwoFactor:  ll has no value
      [10] generalTwoFactor:  unitPart has no value
      [11] twoFactor:  n has no value
      [12] twoFactor:  look has no value
      [13] twoFactor:  umv has no value
      [14] twoFactor:  umex has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib UNIFACT 
   Warnings: 
      [1] eisenstein: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored ZP) ZP)) (SIGNATURE factorSquareFree ((Factored ZP) ZP)) (SIGNATURE henselFact ((Record (: contp (Integer)) (: factors (List (Record (: irr ZP) (: pow (Integer)))))) ZP (Boolean))))
      [2] bound: :(NonNegativeInteger) -- should replace by pretend
      [3] bound:  cbound has no value
      [4] numFactors: pretend(Integer) -- should replace by @
      [5] numFactors:  ans has no value
      [6] choose:  qSave has no value
      [7] choose:  ddSave has no value
      [8] quadratic:  beta has no value
      [9] quadratic:  alpha has no value
      [10] subMinusX: :ZP -- should replace by pretend
      [11] henselFact:  c has no value
      [12] henselFact:  factorlist has no value
      [13] henselFact: :(List ZP) -- should replace by pretend

--------------non extending category----------------------
.. UnivariatePolynomial(#1,#2) of cat 
(|Join| (|UnivariatePolynomialCategory| |#2|) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|Variable| |#1|))) (SIGNATURE |fmecg| ($ $ (|NonNegativeInteger|) |#2| $))))    has no  outputForm : (%,OutputForm) -> OutputForm 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib UPDECOMP 
   Warnings: 
      [1] leftFactorIfCan:  g has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib UPXSCAT 
; (DEFUN |UnivariatePuiseuxSeriesCategory| ...) is being compiled.
;; The variable |UnivariatePuiseuxSeriesCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |UnivariatePuiseuxSeriesCategory;| ...) is being compiled.
;; The variable |UnivariatePuiseuxSeriesCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib UPSQFREE 
   Warnings: 
      [1] BumInSepFFE: :(NonNegativeInteger) -- should replace by @
      [2] squareFree:  lffe has no value
      [3] squareFree:  dunit has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib VIEWDEF 
   Warnings: 
      [1] viewWriteDefault:  thingsToWrite has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib WEIER 
   Warnings: 
      [1] transback: :(Stream (Stream (Polynomial R))) -- should replace by pretend
      [2] transback: :(TaylorSeries R) -- should replace by pretend
      [3] transback: :(Stream (TaylorSeries R)) -- should replace by pretend
      [4] clikeUniv: not known that (Ring) is of mode (CATEGORY package (SIGNATURE crest ((Mapping (Stream (Polynomial R)) (Stream (Polynomial R))) (NonNegativeInteger))) (SIGNATURE cfirst ((Mapping (Stream (Polynomial R)) (Stream (Polynomial R))) (NonNegativeInteger))) (SIGNATURE sts2stst ((Stream (Stream (Polynomial R))) (Symbol) (Stream (Polynomial R)))) (SIGNATURE clikeUniv ((Mapping (SparseUnivariatePolynomial (Polynomial R)) (Polynomial R)) (Symbol))) (SIGNATURE weierstrass ((List (TaylorSeries R)) (Symbol) (TaylorSeries R))) (SIGNATURE qqq ((Mapping (Stream (TaylorSeries R)) (Stream (TaylorSeries R))) (NonNegativeInteger) (TaylorSeries R) (Stream (TaylorSeries R)))))
      [5] streamlikeUniv: :(NonNegativeInteger) -- should replace by pretend
      [6] sts2stst: :(Stream (NonNegativeInteger)) -- should replace by pretend
      [7] weier: :(TaylorSeries R) -- should replace by pretend
      [8] wei: :(Stream (Polynomial R)) -- should replace by pretend

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib WP 
   Warnings: 
      [1] innercoerce:  ans has no value
      [2] unknown Functor code (error incompatible length lists in WeightedPolynomial)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DIAGG 
; (DEFUN |Dictionary| ...) is being compiled.
;; The variable |Dictionary;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |Dictionary;| ...) is being compiled.
;; The variable |Dictionary;CAT| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. ExponentialOfUnivariatePuiseuxSeries(#1,#2,#3) of cat 
(|Join| (|UnivariatePuiseuxSeriesCategory| |#1|) (|OrderedAbelianMonoid|) (CATEGORY |domain| (SIGNATURE |exponential| ($ (|UnivariatePuiseuxSeries| |#1| |#2| |#3|))) (SIGNATURE |exponent| ((|UnivariatePuiseuxSeries| |#1| |#2| |#3|) $)) (SIGNATURE |exponentialOrder| ((|Fraction| (|Integer|)) $))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|UnivariatePuiseuxSeriesConstructorCategory| |#1| (|UnivariateLaurentSeries| |#1| |#2| |#3|))    finalizing nrlib EXPUPXS 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FRAMALG- 
   Warnings: 
      [1] coordinates: signature of lhs not unique: (Matrix R)(Vector S) chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FRAMALG 
; (DEFUN |FramedAlgebra| ...) is being compiled.
;; The variable |FramedAlgebra;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FramedAlgebra;| ...) is being compiled.
;; The variable |FramedAlgebra;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MDAGG 
; (DEFUN |MultiDictionary| ...) is being compiled.
;; The variable |MultiDictionary;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |MultiDictionary;| ...) is being compiled.
;; The variable |MultiDictionary;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PLOT 
   Warnings: 
      [1] listBranches:  newl has no value
      [2] listBranches:  outList has no value
      [3] rangeRefine:  c has no value
      [4] rangeRefine:  q has no value
      [5] rangeRefine:  NUMFUNEVALS has no value
      [6] refine:  curves has no value
      [7] plot:  curves has no value
      [8] plot:  t has no value
      [9] coerce:  l has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PLOT 
; (DEFUN |PLOT;myTrap| ...) is being compiled.
;; The variable |$numericFailure| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$NaNvalue| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SMATCAT- 
   Warnings: 
      [1] equation2R: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE ** (S S (Integer))) (SIGNATURE diagonalProduct (R S)) (SIGNATURE trace (R S)) (SIGNATURE diagonal (Row S)) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE coerce (S (Integer))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE ** (S S (PositiveInteger))) (SIGNATURE coerce ((OutputForm) S)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SMATCAT 
; (DEFUN |SquareMatrixCategory| ...) is being compiled.
;; The variable |SquareMatrixCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |SquareMatrixCategory;| ...) is being compiled.
;; The variable |SquareMatrixCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib UPXSCCA 
; (DEFUN |UnivariatePuiseuxSeriesConstructorCategory| ...) is being compiled.
;; The variable |UnivariatePuiseuxSeriesConstructorCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |UnivariatePuiseuxSeriesConstructorCategory;| ...) is being compiled.
;; The variable |UnivariatePuiseuxSeriesConstructorCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FFINTBAS 
   Warnings: 
      [1] squaredFactors: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE integralBasis ((Record (: basis (Matrix R)) (: basisDen R) (: basisInv (Matrix R))))) (SIGNATURE localIntegralBasis ((Record (: basis (Matrix R)) (: basisDen R) (: basisInv (Matrix R))) R)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FSAGG 
; (DEFUN |FiniteSetAggregate| ...) is being compiled.
;; The variable |FiniteSetAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FiniteSetAggregate;| ...) is being compiled.
;; The variable |FiniteSetAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib KDAGG 
; (DEFUN |KeyedDictionary| ...) is being compiled.
;; The variable |KeyedDictionary;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |KeyedDictionary;| ...) is being compiled.
;; The variable |KeyedDictionary;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MSETAGG 
; (DEFUN |MultisetAggregate| ...) is being compiled.
;; The variable |MultisetAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |MultisetAggregate;| ...) is being compiled.
;; The variable |MultisetAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MONOGEN 
; (DEFUN |MonogenicAlgebra| ...) is being compiled.
;; The variable |MonogenicAlgebra;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |MonogenicAlgebra;| ...) is being compiled.
;; The variable |MonogenicAlgebra;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NFINTBAS 
   Warnings: 
      [1] wildPrimes:  ans has no value
      [2] tameProduct:  ans has no value
      [3] integralBasis:  runningRbden has no value
      [4] iWildLocalIntegralBasis:  rbden has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SPACE3 
   Warnings: 
      [1] coerce:  llliPt has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CCLASS 
   Warnings: 
      [1] remove!: signature of lhs not unique: $(Character)$ chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GALFACT 
   Warnings: 
      [1] eisensteinIrreducible?: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE makeFR ((Factored UP) (Record (: contp (Integer)) (: factors (List (Record (: irr UP) (: pow (Integer)))))))) (SIGNATURE degreePartition ((Multiset (NonNegativeInteger)) (List (Record (: factor UP) (: degree (Integer)))))) (SIGNATURE musserTrials ((PositiveInteger))) (SIGNATURE musserTrials ((PositiveInteger) (PositiveInteger))) (SIGNATURE stopMusserTrials ((PositiveInteger))) (SIGNATURE stopMusserTrials ((PositiveInteger) (PositiveInteger))) (SIGNATURE numberOfFactors ((NonNegativeInteger) (List (Record (: factor UP) (: degree (Integer)))))) (SIGNATURE modularFactor ((Record (: prime (Integer)) (: factors (List UP))) UP)) (SIGNATURE useSingleFactorBound? ((Boolean))) (SIGNATURE useSingleFactorBound ((Boolean) (Boolean))) (SIGNATURE useEisensteinCriterion? ((Boolean))) (SIGNATURE useEisensteinCriterion ((Boolean) (Boolean))) (SIGNATURE eisensteinIrreducible? ((Boolean) UP)) (SIGNATURE tryFunctionalDecomposition? ((Boolean))) (SIGNATURE tryFunctionalDecomposition ((Boolean) (Boolean))) (SIGNATURE factor ((Factored UP) UP)) (SIGNATURE factor ((Factored UP) UP (NonNegativeInteger))) (SIGNATURE factor ((Factored UP) UP (List (NonNegativeInteger)))) (SIGNATURE factor ((Factored UP) UP (List (NonNegativeInteger)) (NonNegativeInteger))) (SIGNATURE factor ((Factored UP) UP (NonNegativeInteger) (NonNegativeInteger))) (SIGNATURE factorSquareFree ((Factored UP) UP)) (SIGNATURE factorSquareFree ((Factored UP) UP (NonNegativeInteger))) (SIGNATURE factorSquareFree ((Factored UP) UP (List (NonNegativeInteger)))) (SIGNATURE factorSquareFree ((Factored UP) UP (List (NonNegativeInteger)) (NonNegativeInteger))) (SIGNATURE factorSquareFree ((Factored UP) UP (NonNegativeInteger) (NonNegativeInteger))) (SIGNATURE factorOfDegree ((Union UP failed) (PositiveInteger) UP)) (SIGNATURE factorOfDegree ((Union UP failed) (PositiveInteger) UP (NonNegativeInteger))) (SIGNATURE factorOfDegree ((Union UP failed) (PositiveInteger) UP (List (NonNegativeInteger)))) (SIGNATURE factorOfDegree ((Union UP failed) (PositiveInteger) UP (List (NonNegativeInteger)) (NonNegativeInteger))) (SIGNATURE factorOfDegree ((Union UP failed) (PositiveInteger) UP (List (NonNegativeInteger)) (NonNegativeInteger) (Boolean))) (SIGNATURE henselFact ((Record (: contp (Integer)) (: factors (List (Record (: irr UP) (: pow (Integer)))))) UP (Boolean))) (SIGNATURE btwFact ((Record (: contp (Integer)) (: factors (List (Record (: irr UP) (: pow (Integer)))))) UP (Boolean) (Set (NonNegativeInteger)) (NonNegativeInteger))))
      [2] modularFactor:  s has no value
      [3] completeFactor:  g0 has no value
      [4] completeFactor:  degg has no value
      [5] completeFactor:  g has no value
      [6] completeFactor:  ltrue has no value
      [7] completeFactor:  level has no value
      [8] divideSet:  l has no value
      [9] btwFactor:  reverse? has no value
      [10] btwFactor:  negativelc? has no value
      [11] btwFactor:  lf has no value
      [12] henselFact:  c has no value
      [13] henselFact:  factorlist has no value
      [14] btwFact:  c has no value
      [15] btwFact:  factorlist has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IALGFACT 
   Warnings: 
      [1] factor: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored AlPol) AlPol (Mapping (Factored UP) UP))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MMLFORM 
   Warnings: 
      [1] exprex:  s has no value
      [2] formatSub:  j has no value
      [3] formatSub:  s has no value
      [4] formatSub1:  s has no value
      [5] formatPlex:  s has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OMSAGG 
; (DEFUN |OrderedMultisetAggregate| ...) is being compiled.
;; The variable |OrderedMultisetAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |OrderedMultisetAggregate;| ...) is being compiled.
;; The variable |OrderedMultisetAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PERM 
   Warnings: 
      [1] rotateCycle:  minpos has no value
      [2] coerceToCycle:  nextCycle has no value
      [3] coercePreimagesImages:  preImage has no value
      [4] coercePreimagesImages:  image has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PERMGRP 
   Warnings: 
      [1] shortenWord:  newlw has no value
      [2] orbitInternal:  pos has no value
      [3] orbitInternal:  orbitList has no value
      [4] bsgs1:  j has no value
      [5] bsgs1:  out has no value
      [6] bsgs1:  outword has no value
      [7] bsgs1:  baseOfGroup has no value
      [8] reduceGenerators:  wordlist has no value
      [9] bsgs:  gpbase has no value
      [10] bsgs:  baseOfGroup has no value
      [11] bsgs:  wordProblem has no value
      [12] bsgs:  wordlist has no value
      [13] bsgs:  gporb has no value
      [14] bsgs:  noresult has no value
      [15] bsgs:  newBasePoint has no value
      [16] bsgs:  basePoint has no value
      [17] memberInternal:  supp has no value
      [18] memberInternal:  sgs has no value
      [19] memberInternal:  baseOfGroup has no value
      [20] memberInternal:  gporb has no value
      [21] coerce: :(Symbol) -- should replace by pretend

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PWFFINTB 
   Warnings: 
      [1] listSquaredFactors:  ans has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SAE 
   Warnings: 
      [1] lift: pretendRep -- should replace by @
      [2] index:  ans has no value
      [3] unknown Functor code (error Modulus cannot be made monic)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SGCF 
   Warnings: 
      [1] unrankImproperPartitions0:  l has no value
      [2] unrankImproperPartitions1:  nonZeros has no value
      [3] subSet:  l has no value
      [4] nextLatticePermutation:  ready has no value
      [5] listYoungTableaus:  lattice has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib TBAGG- 
   Warnings: 
      [1] map!: signature of lhs not unique: S(Mapping Entry Entry)S chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib TBAGG 
; (DEFUN |TableAggregate| ...) is being compiled.
;; The variable |TableAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |TableAggregate;| ...) is being compiled.
;; The variable |TableAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib VIEW3D 
   Warnings: 
      [1] viewpoint:  Theta has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib VIEW3D 
--->/research2/test0819/mnt/fedora5/../../src/algebra/VIEW3D.spad-->ThreeDimensionalViewport(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/VIEW3D.spad-->ThreeDimensionalViewport(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ALIST 
   Warnings: 
      [1] latex:  s has no value
      [2] remove!:  key has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib HASHTBL 
   Warnings: 
      [1] remove!: pretendEntry -- should replace by @
      [2] search: pretendEntry -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INTPACK 
   Warnings: 
      [1] preAnalysis:  nia has no value
      [2] measureSpecific:  nia has no value
      [3] measureSpecific:  mdnia has no value
      [4] integrateSpecific:  nia has no value
      [5] integrateSpecific:  mdnia has no value
      [6] recoverAfterFail:  nia has no value
      [7] integrateArgs:  mdnia has no value
      [8] integrateArgs:  nia has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INTPACK 
--->/research2/test0819/mnt/fedora5/../../src/algebra/INTPACK.spad-->AnnaNumericalIntegrationPackage(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/INTPACK.spad-->AnnaNumericalIntegrationPackage(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IPF 
   Warnings: 
      [1] tableForDiscreteLogarithm: pretend(Table (PositiveInteger) (NonNegativeInteger)) -- should replace by @
      [2] initializeLog:  n has no value
      [3] coordinates: signature of lhs not unique: (Vector $)$ chosen
      [4] charthRoot: signature of lhs not unique: $$ chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ACF- 
   Warnings: 
      [1] zeroOf: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE zerosOf ((List S) (Polynomial S))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S))) (SIGNATURE zeroOf (S (Polynomial S))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE rootsOf ((List S) (Polynomial S))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S))) (SIGNATURE rootOf (S (Polynomial S))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ACF 
; (DEFUN |AlgebraicallyClosedField| ...) is being compiled.
;; The variable |AlgebraicallyClosedField;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ACPLOT 
   Warnings: 
      [1] listPtsOnHorizBdry:  pointList has no value
      [2] listPtsOnVertBdry:  pointList has no value
      [3] listPtsInRect:  pointList has no value
      [4] makeOneVarSketch:  sketchRoots has no value
      [5] makeOneVarSketch:  lf has no value
      [6] makeOneVarSketch:  rt has no value
      [7] makeOneVarSketch:  bt has no value
      [8] makeOneVarSketch:  tp has no value
      [9] makeLineSketch:  branch has no value
      [10] makeLineSketch:  lf has no value
      [11] makeLineSketch:  rt has no value
      [12] makeLineSketch:  bt has no value
      [13] makeLineSketch:  tp has no value
      [14] makeRatFcnSketch:  outList has no value
      [15] makeRatFcnSketch:  lf has no value
      [16] makeRatFcnSketch:  rt has no value
      [17] makeRatFcnSketch:  bt has no value
      [18] makeRatFcnSketch:  tp has no value
      [19] makeRatFcnSketch:  topList has no value
      [20] makeRatFcnSketch:  botList has no value
      [21] listPtsOnLoop:  pointList has no value
      [22] computeNextPt:  xPointList has no value
      [23] computeNextPt:  yPointList has no value

--------------non extending category----------------------
.. AntiSymm(#1,#2) of cat 
(|Join| (|LeftAlgebra| |#1|) (|RetractableTo| |#1|) (CATEGORY |domain| (SIGNATURE |leadingCoefficient| (|#1| $)) (SIGNATURE |leadingBasisTerm| ($ $)) (SIGNATURE |reductum| ($ $)) (SIGNATURE |coefficient| (|#1| $ $)) (SIGNATURE |generator| ($ (|NonNegativeInteger|))) (SIGNATURE |exp| ($ (|List| (|Integer|)))) (SIGNATURE |homogeneous?| ((|Boolean|) $)) (SIGNATURE |retractable?| ((|Boolean|) $)) (SIGNATURE |degree| ((|NonNegativeInteger|) $)) (SIGNATURE |map| ($ (|Mapping| |#1| |#1|) $))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|BiModule| |#1| |#1|)    finalizing nrlib ANTISYM 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ANTISYM 
   Warnings: 
      [1] retractable?:  k has no value
      [2] retractIfCan:  k has no value
      [3] *:  k has no value
      [4] *:  c has no value
      [5] *:  z has no value
      [6] coerce:  c has no value
      [7] coerce:  k has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP12 
   Warnings: 
      [1]  MAXIT has no value
      [2]  IFLAG has no value
      [3]  ELAM has no value
      [4]  FINFO has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP27 
   Warnings: 
      [1]  IFLAG has no value
      [2]  N has no value
      [3]  LRWORK has no value
      [4]  LIWORK has no value
      [5]  Z has no value
      [6]  W has no value
      [7]  RWORK has no value
      [8]  IWORK has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP28 
   Warnings: 
      [1]  IFLAG has no value
      [2]  N has no value
      [3]  LRWORK has no value
      [4]  LIWORK has no value
      [5]  Z has no value
      [6]  W has no value
      [7]  RWORK has no value
      [8]  IWORK has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP33 
   Warnings: 
      [1]  JINT has no value
      [2]  X has no value
      [3]  V has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP49 
   Warnings: 
      [1]  MODE has no value
      [2]  N has no value
      [3]  X has no value
      [4]  OBJF has no value
      [5]  OBJGRD has no value
      [6]  NSTATE has no value
      [7]  IUSER has no value
      [8]  USER has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP55 
   Warnings: 
      [1]  MODE has no value
      [2]  NCNLN has no value
      [3]  N has no value
      [4]  NROWJ has no value
      [5]  NEEDC has no value
      [6]  X has no value
      [7]  C has no value
      [8]  CJAC has no value
      [9]  NSTATE has no value
      [10]  IUSER has no value
      [11]  USER has no value
      [12] makeCond:  NEEDC has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP7 
   Warnings: 
      [1]  X has no value
      [2]  Y has no value
      [3]  F has no value
      [4] coerce:  F has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP78 
   Warnings: 
      [1]  X has no value
      [2]  G has no value
      [3] coerce:  G has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP8 
   Semantic Errors: 
      [1] coerce:  code is BOTH a variable and a literal
 
   Warnings: 
      [1]  COUNT has no value
      [2]  XSOL has no value
      [3]  N has no value
      [4]  Y has no value
      [5]  FORWRD has no value
      [6]  RESULT has no value
      [7]  M has no value
      [8] coerce:  POINTS has no value
      [9] coerce:  X02ALF has no value
      [10] coerce:  RESULT has no value
      [11] coerce:  COUNT has no value
      [12] coerce:  XSOL has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP9 
   Semantic Errors: 
      [1] coerce:  code is BOTH a variable and a literal
 
   Warnings: 
      [1]  X has no value
      [2]  Y has no value
      [3] coerce:  CHDUM1 has no value
      [4] coerce:  CD02EJ has no value
      [5] coerce:  AD02CJ has no value
      [6] coerce:  GOPT1 has no value
      [7] coerce:  GOPT2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib COMPCAT- 
   Warnings: 
      [1] solveLinearPolynomialEquation: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE coerce (S S)) (SIGNATURE exquo ((Union S failed) S S)) (SIGNATURE unitNormal ((Record (: unit S) (: canonical S) (: associate S)) S)) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE quo (S S S)) (SIGNATURE rem (S S S)) (SIGNATURE inv (S S)) (SIGNATURE ** (S S (Integer))) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Complex (DoubleFloat)) S)) (SIGNATURE convert ((Complex (Float)) S)) (SIGNATURE tan (S S)) (SIGNATURE sin (S S)) (SIGNATURE cos (S S)) (SIGNATURE acos (S S)) (SIGNATURE asin (S S)) (SIGNATURE atan (S S)) (SIGNATURE cosh (S S)) (SIGNATURE sinh (S S)) (SIGNATURE tanh (S S)) (SIGNATURE acosh (S S)) (SIGNATURE asinh (S S)) (SIGNATURE atanh (S S)) (SIGNATURE log (S S)) (SIGNATURE exp (S S)) (SIGNATURE ** (S S S)) (SIGNATURE pi (S)) (SIGNATURE ** (S S (Fraction (Integer)))) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE rationalIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE rational ((Fraction (Integer)) S)) (SIGNATURE rational? ((Boolean) S)) (SIGNATURE polarCoordinates ((Record (: r R) (: phi R)) S)) (SIGNATURE argument (R S)) (SIGNATURE abs (S S)) (SIGNATURE exquo ((Union S failed) S R)) (SIGNATURE conjugate (S S)) (SIGNATURE imaginary (S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE map (S (Mapping R R) S)) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE reduce ((Union S failed) (Fraction (SparseUnivariatePolynomial R)))) (SIGNATURE lift ((SparseUnivariatePolynomial R) S)) (SIGNATURE convert (S (SparseUnivariatePolynomial R))) (SIGNATURE reduce (S (SparseUnivariatePolynomial R))) (SIGNATURE definingPolynomial ((SparseUnivariatePolynomial R))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R)) (SIGNATURE convert (S (Vector R))) (SIGNATURE convert ((Vector R) S)) (SIGNATURE coordinates ((Matrix R) (Vector S))) (SIGNATURE coordinates ((Vector R) S)) (SIGNATURE minimalPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE characteristicPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R (Vector S))) (SIGNATURE coordinates ((Matrix R) (Vector S) (Vector S))) (SIGNATURE coordinates ((Vector R) S (Vector S))) (SIGNATURE norm (R S)) (SIGNATURE trace (R S)) (SIGNATURE rank ((PositiveInteger))) (SIGNATURE coerce (S R)) (SIGNATURE * (S R S)) (SIGNATURE * (S S R)) (SIGNATURE coerce (S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE recip ((Union S failed) S)) (SIGNATURE * (S S S)) (SIGNATURE ** (S S (PositiveInteger))) (SIGNATURE * (S (Integer) S)) (SIGNATURE - (S S S)) (SIGNATURE - (S S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE + (S S S)) (SIGNATURE coerce ((OutputForm) S)) (SIGNATURE = ((Boolean) S S)))
      [2] factorPolynomial: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE coerce (S S)) (SIGNATURE exquo ((Union S failed) S S)) (SIGNATURE unitNormal ((Record (: unit S) (: canonical S) (: associate S)) S)) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE quo (S S S)) (SIGNATURE rem (S S S)) (SIGNATURE inv (S S)) (SIGNATURE ** (S S (Integer))) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Complex (DoubleFloat)) S)) (SIGNATURE convert ((Complex (Float)) S)) (SIGNATURE tan (S S)) (SIGNATURE sin (S S)) (SIGNATURE cos (S S)) (SIGNATURE acos (S S)) (SIGNATURE asin (S S)) (SIGNATURE atan (S S)) (SIGNATURE cosh (S S)) (SIGNATURE sinh (S S)) (SIGNATURE tanh (S S)) (SIGNATURE acosh (S S)) (SIGNATURE asinh (S S)) (SIGNATURE atanh (S S)) (SIGNATURE log (S S)) (SIGNATURE exp (S S)) (SIGNATURE ** (S S S)) (SIGNATURE pi (S)) (SIGNATURE ** (S S (Fraction (Integer)))) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE rationalIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE rational ((Fraction (Integer)) S)) (SIGNATURE rational? ((Boolean) S)) (SIGNATURE polarCoordinates ((Record (: r R) (: phi R)) S)) (SIGNATURE argument (R S)) (SIGNATURE abs (S S)) (SIGNATURE exquo ((Union S failed) S R)) (SIGNATURE conjugate (S S)) (SIGNATURE imaginary (S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE map (S (Mapping R R) S)) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE reduce ((Union S failed) (Fraction (SparseUnivariatePolynomial R)))) (SIGNATURE lift ((SparseUnivariatePolynomial R) S)) (SIGNATURE convert (S (SparseUnivariatePolynomial R))) (SIGNATURE reduce (S (SparseUnivariatePolynomial R))) (SIGNATURE definingPolynomial ((SparseUnivariatePolynomial R))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R)) (SIGNATURE convert (S (Vector R))) (SIGNATURE convert ((Vector R) S)) (SIGNATURE coordinates ((Matrix R) (Vector S))) (SIGNATURE coordinates ((Vector R) S)) (SIGNATURE minimalPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE characteristicPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R (Vector S))) (SIGNATURE coordinates ((Matrix R) (Vector S) (Vector S))) (SIGNATURE coordinates ((Vector R) S (Vector S))) (SIGNATURE norm (R S)) (SIGNATURE trace (R S)) (SIGNATURE rank ((PositiveInteger))) (SIGNATURE coerce (S R)) (SIGNATURE * (S R S)) (SIGNATURE * (S S R)) (SIGNATURE coerce (S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE recip ((Union S failed) S)) (SIGNATURE * (S S S)) (SIGNATURE ** (S S (PositiveInteger))) (SIGNATURE * (S (Integer) S)) (SIGNATURE - (S S S)) (SIGNATURE - (S S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE + (S S S)) (SIGNATURE coerce ((OutputForm) S)) (SIGNATURE = ((Boolean) S S)))
      [3] factorPolynomial: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE coerce (S S)) (SIGNATURE exquo ((Union S failed) S S)) (SIGNATURE unitNormal ((Record (: unit S) (: canonical S) (: associate S)) S)) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE quo (S S S)) (SIGNATURE rem (S S S)) (SIGNATURE inv (S S)) (SIGNATURE ** (S S (Integer))) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Complex (DoubleFloat)) S)) (SIGNATURE convert ((Complex (Float)) S)) (SIGNATURE tan (S S)) (SIGNATURE sin (S S)) (SIGNATURE cos (S S)) (SIGNATURE acos (S S)) (SIGNATURE asin (S S)) (SIGNATURE atan (S S)) (SIGNATURE cosh (S S)) (SIGNATURE sinh (S S)) (SIGNATURE tanh (S S)) (SIGNATURE acosh (S S)) (SIGNATURE asinh (S S)) (SIGNATURE atanh (S S)) (SIGNATURE log (S S)) (SIGNATURE exp (S S)) (SIGNATURE ** (S S S)) (SIGNATURE pi (S)) (SIGNATURE ** (S S (Fraction (Integer)))) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE rationalIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE rational ((Fraction (Integer)) S)) (SIGNATURE rational? ((Boolean) S)) (SIGNATURE polarCoordinates ((Record (: r R) (: phi R)) S)) (SIGNATURE argument (R S)) (SIGNATURE abs (S S)) (SIGNATURE exquo ((Union S failed) S R)) (SIGNATURE conjugate (S S)) (SIGNATURE imaginary (S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE map (S (Mapping R R) S)) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE reduce ((Union S failed) (Fraction (SparseUnivariatePolynomial R)))) (SIGNATURE lift ((SparseUnivariatePolynomial R) S)) (SIGNATURE convert (S (SparseUnivariatePolynomial R))) (SIGNATURE reduce (S (SparseUnivariatePolynomial R))) (SIGNATURE definingPolynomial ((SparseUnivariatePolynomial R))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R)) (SIGNATURE convert (S (Vector R))) (SIGNATURE convert ((Vector R) S)) (SIGNATURE coordinates ((Matrix R) (Vector S))) (SIGNATURE coordinates ((Vector R) S)) (SIGNATURE minimalPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE characteristicPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R (Vector S))) (SIGNATURE coordinates ((Matrix R) (Vector S) (Vector S))) (SIGNATURE coordinates ((Vector R) S (Vector S))) (SIGNATURE norm (R S)) (SIGNATURE trace (R S)) (SIGNATURE rank ((PositiveInteger))) (SIGNATURE coerce (S R)) (SIGNATURE * (S R S)) (SIGNATURE * (S S R)) (SIGNATURE coerce (S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE recip ((Union S failed) S)) (SIGNATURE * (S S S)) (SIGNATURE ** (S S (PositiveInteger))) (SIGNATURE * (S (Integer) S)) (SIGNATURE - (S S S)) (SIGNATURE - (S S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE + (S S S)) (SIGNATURE coerce ((OutputForm) S)) (SIGNATURE = ((Boolean) S S)))
      [4] reducedSystem: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE coerce (S S)) (SIGNATURE exquo ((Union S failed) S S)) (SIGNATURE unitNormal ((Record (: unit S) (: canonical S) (: associate S)) S)) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE quo (S S S)) (SIGNATURE rem (S S S)) (SIGNATURE inv (S S)) (SIGNATURE ** (S S (Integer))) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Complex (DoubleFloat)) S)) (SIGNATURE convert ((Complex (Float)) S)) (SIGNATURE tan (S S)) (SIGNATURE sin (S S)) (SIGNATURE cos (S S)) (SIGNATURE acos (S S)) (SIGNATURE asin (S S)) (SIGNATURE atan (S S)) (SIGNATURE cosh (S S)) (SIGNATURE sinh (S S)) (SIGNATURE tanh (S S)) (SIGNATURE acosh (S S)) (SIGNATURE asinh (S S)) (SIGNATURE atanh (S S)) (SIGNATURE log (S S)) (SIGNATURE exp (S S)) (SIGNATURE ** (S S S)) (SIGNATURE pi (S)) (SIGNATURE ** (S S (Fraction (Integer)))) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE rationalIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE rational ((Fraction (Integer)) S)) (SIGNATURE rational? ((Boolean) S)) (SIGNATURE polarCoordinates ((Record (: r R) (: phi R)) S)) (SIGNATURE argument (R S)) (SIGNATURE abs (S S)) (SIGNATURE exquo ((Union S failed) S R)) (SIGNATURE conjugate (S S)) (SIGNATURE imaginary (S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE map (S (Mapping R R) S)) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE reduce ((Union S failed) (Fraction (SparseUnivariatePolynomial R)))) (SIGNATURE lift ((SparseUnivariatePolynomial R) S)) (SIGNATURE convert (S (SparseUnivariatePolynomial R))) (SIGNATURE reduce (S (SparseUnivariatePolynomial R))) (SIGNATURE definingPolynomial ((SparseUnivariatePolynomial R))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R)) (SIGNATURE convert (S (Vector R))) (SIGNATURE convert ((Vector R) S)) (SIGNATURE coordinates ((Matrix R) (Vector S))) (SIGNATURE coordinates ((Vector R) S)) (SIGNATURE minimalPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE characteristicPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R (Vector S))) (SIGNATURE coordinates ((Matrix R) (Vector S) (Vector S))) (SIGNATURE coordinates ((Vector R) S (Vector S))) (SIGNATURE norm (R S)) (SIGNATURE trace (R S)) (SIGNATURE rank ((PositiveInteger))) (SIGNATURE coerce (S R)) (SIGNATURE * (S R S)) (SIGNATURE * (S S R)) (SIGNATURE coerce (S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE recip ((Union S failed) S)) (SIGNATURE * (S S S)) (SIGNATURE ** (S S (PositiveInteger))) (SIGNATURE * (S (Integer) S)) (SIGNATURE - (S S S)) (SIGNATURE - (S S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE + (S S S)) (SIGNATURE coerce ((OutputForm) S)) (SIGNATURE = ((Boolean) S S)))
      [5] patternMatch: not known that (SetCategory) is of mode (CATEGORY domain (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE coerce (S S)) (SIGNATURE exquo ((Union S failed) S S)) (SIGNATURE unitNormal ((Record (: unit S) (: canonical S) (: associate S)) S)) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE euclideanSize ((NonNegativeInteger) S)) (SIGNATURE divide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE quo (S S S)) (SIGNATURE rem (S S S)) (SIGNATURE inv (S S)) (SIGNATURE ** (S S (Integer))) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE < ((Boolean) S S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Complex (DoubleFloat)) S)) (SIGNATURE convert ((Complex (Float)) S)) (SIGNATURE tan (S S)) (SIGNATURE sin (S S)) (SIGNATURE cos (S S)) (SIGNATURE acos (S S)) (SIGNATURE asin (S S)) (SIGNATURE atan (S S)) (SIGNATURE cosh (S S)) (SIGNATURE sinh (S S)) (SIGNATURE tanh (S S)) (SIGNATURE acosh (S S)) (SIGNATURE asinh (S S)) (SIGNATURE atanh (S S)) (SIGNATURE log (S S)) (SIGNATURE exp (S S)) (SIGNATURE ** (S S S)) (SIGNATURE pi (S)) (SIGNATURE ** (S S (Fraction (Integer)))) (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE factorSquareFreePolynomial ((Factored (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE solveLinearPolynomialEquation ((Union (List (SparseUnivariatePolynomial S)) failed) (List (SparseUnivariatePolynomial S)) (SparseUnivariatePolynomial S))) (SIGNATURE rationalIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE rational ((Fraction (Integer)) S)) (SIGNATURE rational? ((Boolean) S)) (SIGNATURE polarCoordinates ((Record (: r R) (: phi R)) S)) (SIGNATURE argument (R S)) (SIGNATURE abs (S S)) (SIGNATURE exquo ((Union S failed) S R)) (SIGNATURE conjugate (S S)) (SIGNATURE imaginary (S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE patternMatch ((PatternMatchResult (Integer) S) S (Pattern (Integer)) (PatternMatchResult (Integer) S))) (SIGNATURE map (S (Mapping R R) S)) (SIGNATURE differentiate (S S (Mapping R R))) (SIGNATURE differentiate (S S (Mapping R R) (NonNegativeInteger))) (SIGNATURE reduce ((Union S failed) (Fraction (SparseUnivariatePolynomial R)))) (SIGNATURE lift ((SparseUnivariatePolynomial R) S)) (SIGNATURE convert (S (SparseUnivariatePolynomial R))) (SIGNATURE reduce (S (SparseUnivariatePolynomial R))) (SIGNATURE definingPolynomial ((SparseUnivariatePolynomial R))) (SIGNATURE reducedSystem ((Matrix R) (Matrix S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix R)) (: vec (Vector R))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Record (: mat (Matrix (Integer))) (: vec (Vector (Integer)))) (Matrix S) (Vector S))) (SIGNATURE reducedSystem ((Matrix (Integer)) (Matrix S))) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R)) (SIGNATURE convert (S (Vector R))) (SIGNATURE convert ((Vector R) S)) (SIGNATURE coordinates ((Matrix R) (Vector S))) (SIGNATURE coordinates ((Vector R) S)) (SIGNATURE minimalPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE characteristicPolynomial ((SparseUnivariatePolynomial R) S)) (SIGNATURE discriminant (R (Vector S))) (SIGNATURE coordinates ((Matrix R) (Vector S) (Vector S))) (SIGNATURE coordinates ((Vector R) S (Vector S))) (SIGNATURE norm (R S)) (SIGNATURE trace (R S)) (SIGNATURE rank ((PositiveInteger))) (SIGNATURE coerce (S R)) (SIGNATURE * (S R S)) (SIGNATURE * (S S R)) (SIGNATURE coerce (S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE ** (S S (NonNegativeInteger))) (SIGNATURE recip ((Union S failed) S)) (SIGNATURE * (S S S)) (SIGNATURE ** (S S (PositiveInteger))) (SIGNATURE * (S (Integer) S)) (SIGNATURE - (S S S)) (SIGNATURE - (S S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE + (S S S)) (SIGNATURE coerce ((OutputForm) S)) (SIGNATURE = ((Boolean) S S)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib COMPCAT 
; (DEFUN |ComplexCategory| ...) is being compiled.
;; The variable |ComplexCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |ComplexCategory;| ...) is being compiled.
;; The variable |ComplexCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DRAWCFUN 
   Warnings: 
      [1] drawPlot:  brans has no value
      [2] drawPlot:  xValues has no value
      [3] drawPlot:  yValues has no value
      [4] draw:  fcn has no value
      [5] makeObject:  fcn has no value
      [6] makeObject:  pointsColored? has no value
      [7] makeObject:  col2 has no value
      [8] makeObject:  col3 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DRAWCFUN 
; (DEFUN |DRAWCFUN;myTrap1| ...) is being compiled.
;; The variable |$numericFailure| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. d01anfAnnaType of cat 
(|NumericalIntegrationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D01ANFA 

--------------non extending category----------------------
.. d01asfAnnaType of cat 
(|NumericalIntegrationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D01ASFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib D03AGNT 
--->/research2/test0819/mnt/fedora5/../../src/algebra/D03AGNT.spad-->d03AgentsPackage(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/D03AGNT.spad-->d03AgentsPackage(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib EP 
   Warnings: 
      [1] not known that (SIGNATURE variable ((Union $ failed) (Symbol))) is of mode (CATEGORY domain (SIGNATURE new ($)) (SIGNATURE new ($ $)) (SIGNATURE resetNew ((Void))) (SIGNATURE coerce ($ (String))) (SIGNATURE name ($ $)) (SIGNATURE scripted? ((Boolean) $)) (SIGNATURE scripts ((Record (: sub (List (OutputForm))) (: sup (List (OutputForm))) (: presup (List (OutputForm))) (: presub (List (OutputForm))) (: args (List (OutputForm)))) $)) (SIGNATURE script ($ $ (List (List (OutputForm))))) (SIGNATURE script ($ $ (Record (: sub (List (OutputForm))) (: sup (List (OutputForm))) (: presup (List (OutputForm))) (: presub (List (OutputForm))) (: args (List (OutputForm)))))) (SIGNATURE subscript ($ $ (List (OutputForm)))) (SIGNATURE superscript ($ $ (List (OutputForm)))) (SIGNATURE argscript ($ $ (List (OutputForm)))) (SIGNATURE elt ($ $ (List (OutputForm)))) (SIGNATURE string ((String) $)) (SIGNATURE list ((List $) $)) (SIGNATURE sample ($) constant))
      [2] charpol: :(PositiveInteger) -- should replace by pretend
      [3] eigenvalues:  lrat has no value
      [4] eigenvalues:  lsym has no value
      [5] intAlgEig: not known that (Ring) is of mode (CATEGORY package (SIGNATURE characteristicPolynomial ((Polynomial R) (Matrix (Fraction (Polynomial R))) (Symbol))) (SIGNATURE characteristicPolynomial ((Polynomial R) (Matrix (Fraction (Polynomial R))))) (SIGNATURE eigenvalues ((List (Union (Fraction (Polynomial R)) (SuchThat (Symbol) (Polynomial R)))) (Matrix (Fraction (Polynomial R))))) (SIGNATURE eigenvector ((List (Matrix (Fraction (Polynomial R)))) (Union (Fraction (Polynomial R)) (SuchThat (Symbol) (Polynomial R))) (Matrix (Fraction (Polynomial R))))) (SIGNATURE generalizedEigenvector ((List (Matrix (Fraction (Polynomial R)))) (Union (Fraction (Polynomial R)) (SuchThat (Symbol) (Polynomial R))) (Matrix (Fraction (Polynomial R))) (NonNegativeInteger) (NonNegativeInteger))) (SIGNATURE generalizedEigenvector ((List (Matrix (Fraction (Polynomial R)))) (Record (: eigval (Union (Fraction (Polynomial R)) (SuchThat (Symbol) (Polynomial R)))) (: eigmult (NonNegativeInteger)) (: eigvec (List (Matrix (Fraction (Polynomial R)))))) (Matrix (Fraction (Polynomial R))))) (SIGNATURE generalizedEigenvectors ((List (Record (: eigval (Union (Fraction (Polynomial R)) (SuchThat (Symbol) (Polynomial R)))) (: geneigvec (List (Matrix (Fraction (Polynomial R))))))) (Matrix (Fraction (Polynomial R))))) (SIGNATURE eigenvectors ((List (Record (: eigval (Union (Fraction (Polynomial R)) (SuchThat (Symbol) (Polynomial R)))) (: eigmult (NonNegativeInteger)) (: eigvec (List (Matrix (Fraction (Polynomial R))))))) (Matrix (Fraction (Polynomial R))))))
      [6] eigenvectors:  ratSol has no value
      [7] eigenvectors:  algSol has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib E04AGNT 
   Warnings: 
      [1] optAttributes:  noa has no value
      [2] optAttributes:  lsa has no value
      [3] optAttributes:  s has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib E04AGNT 
--->/research2/test0819/mnt/fedora5/../../src/algebra/E04AGNT.spad-->e04AgentsPackage(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/E04AGNT.spad-->e04AgentsPackage(): Missing Description

--------------non extending category----------------------
.. FortranExpression(#1,#2,#3) of cat 
(|Join| (|ExpressionSpace|) (|Algebra| |#3|) (|RetractableTo| |#3|) (|PartialDifferentialRing| (|Symbol|)) (CATEGORY |domain| (SIGNATURE |retract| ($ (|Expression| |#3|))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Expression| |#3|))) (SIGNATURE |retract| ($ (|Symbol|))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Symbol|))) (SIGNATURE |coerce| ((|Expression| |#3|) $)) (IF (|has| |#3| (|RetractableTo| (|Integer|))) (PROGN (SIGNATURE |retract| ($ (|Expression| (|Integer|)))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Expression| (|Integer|)))) (SIGNATURE |retract| ($ (|Fraction| (|Polynomial| (|Integer|))))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Fraction| (|Polynomial| (|Integer|))))) (SIGNATURE |retract| ($ (|Polynomial| (|Integer|)))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Polynomial| (|Integer|))))) |noBranch|) (IF (|has| |#3| (|RetractableTo| (|Float|))) (PROGN (SIGNATURE |retract| ($ (|Expression| (|Float|)))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Expression| (|Float|)))) (SIGNATURE |retract| ($ (|Fraction| (|Polynomial| (|Float|))))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Fraction| (|Polynomial| (|Float|))))) (SIGNATURE |retract| ($ (|Polynomial| (|Float|)))) (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Polynomial| (|Float|))))) |noBranch|) (SIGNATURE |abs| ($ $)) (SIGNATURE |sqrt| ($ $)) (SIGNATURE |exp| ($ $)) (SIGNATURE |log| ($ $)) (SIGNATURE |log10| ($ $)) (SIGNATURE |sin| ($ $)) (SIGNATURE |cos| ($ $)) (SIGNATURE |tan| ($ $)) (SIGNATURE |asin| ($ $)) (SIGNATURE |acos| ($ $)) (SIGNATURE |atan| ($ $)) (SIGNATURE |sinh| ($ $)) (SIGNATURE |cosh| ($ $)) (SIGNATURE |tanh| ($ $)) (SIGNATURE |pi| ($)) (SIGNATURE |variables| ((|List| (|Symbol|)) $)) (SIGNATURE |useNagFunctions| ((|Boolean|))) (SIGNATURE |useNagFunctions| ((|Boolean|) (|Boolean|)))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|FunctionSpace| |#3|)    finalizing nrlib FEXPR 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FEXPR 
   Warnings: 
      [1] checkSymbols:  IN has no value
      [2] checkForNagOperators:  X01AAF has no value
      [3] pi:  X01AAF has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FFCAT- 
   Warnings: 
      [1] rationalPoint?: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE differentiate (S S)) (SIGNATURE differentiate (S S (NonNegativeInteger))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE rationalPoints ((List (List F)))) (SIGNATURE nonSingularModel ((List (Polynomial F)) (Symbol))) (SIGNATURE algSplitSimple ((Record (: num S) (: den UP) (: derivden UP) (: gd UP)) S (Mapping UP UP))) (SIGNATURE hyperelliptic ((Union UP failed))) (SIGNATURE elliptic ((Union UP failed))) (SIGNATURE elt (F S F F)) (SIGNATURE primitivePart (S S)) (SIGNATURE represents (S (Vector UP) UP)) (SIGNATURE differentiate (S S (Mapping UP UP))) (SIGNATURE integral? ((Boolean) S UP)) (SIGNATURE integral? ((Boolean) S F)) (SIGNATURE yCoordinates ((Record (: num (Vector UP)) (: den UP)) S)) (SIGNATURE reduceBasisAtInfinity ((Vector S) (Vector S))) (SIGNATURE normalizeAtInfinity ((Vector S) (Vector S))) (SIGNATURE complementaryBasis ((Vector S) (Vector S))) (SIGNATURE integral? ((Boolean) S)) (SIGNATURE integralAtInfinity? ((Boolean) S)) (SIGNATURE rationalPoint? ((Boolean) F F)) (SIGNATURE absolutelyIrreducible? ((Boolean))) (SIGNATURE genus ((NonNegativeInteger))) (SIGNATURE numberOfComponents ((NonNegativeInteger))) (SIGNATURE differentiate (S S (Mapping (Fraction UP) (Fraction UP)))) (SIGNATURE differentiate (S S (Mapping (Fraction UP) (Fraction UP)) (NonNegativeInteger))) (SIGNATURE represents (S (Vector (Fraction UP)))) (SIGNATURE represents (S (Vector (Fraction UP)) (Vector S))))
      [2] primitivePart:  STEP has no value
      [3] primitivePart:  i has no value
      [4] repOrder:  nostart has no value
      [5] kmin:  nostart has no value
      [6] kmin:  k has no value
      [7] integral?:  den has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FFCAT 
; (DEFUN |FunctionFieldCategory| ...) is being compiled.
;; The variable |FunctionFieldCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FunctionFieldCategory;| ...) is being compiled.
;; The variable |FunctionFieldCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FFCGP 
   Warnings: 
      [1] pretend(NonNegativeInteger) -- should replace by @
      [2] +: pretend(SingleInteger) -- should replace by @
      [3] +: pretendRep -- should replace by @
      [4] retractIfCan: pretendRep -- should replace by @
      [5] inGroundField?: pretendRep -- should replace by @
      [6] -: pretendRep -- should replace by @
      [7] extensionDegree: signature of lhs not unique: (PositiveInteger) chosen
      [8] unknown Functor code (error field too large for this representation)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FFNBP 
   Warnings: 
      [1] degree: signature of lhs not unique: (PositiveInteger)$ chosen
      [2] coerce:  l has no value
      [3] initializeLog:  n has no value
      [4] extensionDegree: signature of lhs not unique: (PositiveInteger) chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FFP 
   Warnings: 
      [1] degree: signature of lhs not unique: (PositiveInteger)$ chosen
      [2] tableForDiscreteLogarithm: pretend(Table (PositiveInteger) (NonNegativeInteger)) -- should replace by @
      [3] initializeLog:  n has no value
      [4] extensionDegree: signature of lhs not unique: (PositiveInteger) chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FLOAT 
   Warnings: 
      [1] OMwrite: pretend(String) -- should replace by @
      [2] cos:  s has no value
      [3] exp:  e1 has no value
      [4] exp1:  E has no value
      [5] normalize:  e has no value
      [6] power:  y has no value
      [7] power10:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FPARFRAC 
   Warnings: 
      [1] fullPartialFraction: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE + ($ UP $)) (SIGNATURE fullPartialFraction ($ (Fraction UP))) (SIGNATURE polyPart (UP $)) (SIGNATURE fracPart ((List (Record (: exponent (NonNegativeInteger)) (: center UP) (: num UP))) $)) (SIGNATURE construct ($ (List (Record (: exponent (NonNegativeInteger)) (: center UP) (: num UP))))) (SIGNATURE differentiate ($ $)) (SIGNATURE D ($ $)) (SIGNATURE differentiate ($ $ (NonNegativeInteger))) (SIGNATURE D ($ $ (NonNegativeInteger))))
      [2] fullParFrac:  ans has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FPARFRAC 
--->/research2/test0819/mnt/fedora5/../../src/algebra/FPARFRAC.spad-->FullPartialFractionExpansion((fullPartialFraction ($ RF))): Unexpected HT command: \sum_
--->/research2/test0819/mnt/fedora5/../../src/algebra/FPARFRAC.spad-->FullPartialFractionExpansion((fullPartialFraction ($ RF))): Unexpected HT command: \sum_
"\\spad{fullPartialFraction(f)} returns \\spad{[p,{} [[j,{} Dj,{} Hj]...]]} such that \\spad{f = p(x) + \\sum_{[j,{}Dj,{}Hj] in l} \\sum_{Dj(a)=0} Hj(a)/(x - a)\\^j}."

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FR 
   Warnings: 
      [1] zero?:  fctr has no value
      [2] eval:  IN has no value
      [3] eval:  e has no value
      [4] convert:  fctr has no value
      [5] convert:  xpnt has no value
      [6] exquo:  associate has no value
      [7] exquo:  goodQuotient has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FRNAALG- 
   Warnings: 
      [1] leftRankPolynomial:  xx has no value
      [2] rightRankPolynomial:  xx has no value
      [3] coordinates: signature of lhs not unique: (Matrix R)(Vector S) chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FRNAALG- 
; (DEFUN |FRNAALG-;leftRankPolynomial;Sup;1| ...) is being compiled.
;; The variable |xx| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FRNAALG 
; (DEFUN |FramedNonAssociativeAlgebra| ...) is being compiled.
;; The variable |FramedNonAssociativeAlgebra;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FramedNonAssociativeAlgebra;| ...) is being compiled.
;; The variable |FramedNonAssociativeAlgebra;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FS- 
   Warnings: 
      [1] coerce: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (Integer) S)) (SIGNATURE * (S S S)) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE coerce (S (Integer))) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE convert ((InputForm) S)) (SIGNATURE retract ((Polynomial R) S)) (SIGNATURE retractIfCan ((Union (Polynomial R) failed) S)) (SIGNATURE coerce (S (Polynomial R))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE * (S S R)) (SIGNATURE * (S R S)) (SIGNATURE coerce (S S)) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE retract ((Fraction (Polynomial R)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Polynomial R)) failed) S)) (SIGNATURE coerce (S (Fraction (Polynomial R)))) (SIGNATURE univariate ((Fraction (SparseUnivariatePolynomial S)) S (Kernel S))) (SIGNATURE coerce (S (Fraction (Polynomial (Fraction R))))) (SIGNATURE coerce (S (Polynomial (Fraction R)))) (SIGNATURE coerce (S (Fraction R))) (SIGNATURE denominator (S S)) (SIGNATURE convert (S (Factored S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S S)))) (SIGNATURE isPower ((Union (Record (: val S) (: exponent (Integer))) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (Symbol))) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (BasicOperator))) (SIGNATURE numerator (S S)) (SIGNATURE coerce (S (SparseMultivariatePolynomial R (Kernel S)))) (SIGNATURE isMult ((Union (Record (: coef (Integer)) (: var (Kernel S))) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE eval (S S (List (BasicOperator)) (List S) (Symbol))) (SIGNATURE eval (S S (BasicOperator) S (Symbol))) (SIGNATURE eval (S S)) (SIGNATURE eval (S S (List (Symbol)))) (SIGNATURE eval (S S (Symbol))) (SIGNATURE applyQuote (S (Symbol) (List S))) (SIGNATURE applyQuote (S (Symbol) S S S S)) (SIGNATURE applyQuote (S (Symbol) S S S)) (SIGNATURE applyQuote (S (Symbol) S S)) (SIGNATURE applyQuote (S (Symbol) S)) (SIGNATURE variables ((List (Symbol)) S)) (SIGNATURE ground (R S)) (SIGNATURE ground? ((Boolean) S)) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE retract ((Symbol) S)) (SIGNATURE retractIfCan ((Union (Symbol) failed) S)) (SIGNATURE coerce (S (Symbol))) (SIGNATURE eval (S S (BasicOperator) (Mapping S S))) (SIGNATURE eval (S S (BasicOperator) (Mapping S (List S)))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S S)))) (SIGNATURE eval (S S (Symbol) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S S)))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE kernels ((List (Kernel S)) S)) (SIGNATURE mainKernel ((Union (Kernel S) failed) S)) (SIGNATURE subst (S S (List (Kernel S)) (List S))) (SIGNATURE subst (S S (List (Equation S)))) (SIGNATURE subst (S S (Equation S))) (SIGNATURE elt (S (BasicOperator) (List S))) (SIGNATURE elt (S (BasicOperator) S S S S)) (SIGNATURE elt (S (BasicOperator) S S S)) (SIGNATURE elt (S (BasicOperator) S S)) (SIGNATURE elt (S (BasicOperator) S)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE eval (S S (List (Kernel S)) (List S))) (SIGNATURE eval (S S (Kernel S) S)) (SIGNATURE retract ((Kernel S) S)) (SIGNATURE retractIfCan ((Union (Kernel S) failed) S)) (SIGNATURE coerce (S (Kernel S))) (SIGNATURE coerce ((OutputForm) S)))
      [2] subs:  IN has no value
      [3] subs:  x has no value
      [4] variables: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (Integer) S)) (SIGNATURE * (S S S)) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE coerce (S (Integer))) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE convert ((InputForm) S)) (SIGNATURE retract ((Polynomial R) S)) (SIGNATURE retractIfCan ((Union (Polynomial R) failed) S)) (SIGNATURE coerce (S (Polynomial R))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE * (S S R)) (SIGNATURE * (S R S)) (SIGNATURE coerce (S S)) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE retract ((Fraction (Polynomial R)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Polynomial R)) failed) S)) (SIGNATURE coerce (S (Fraction (Polynomial R)))) (SIGNATURE univariate ((Fraction (SparseUnivariatePolynomial S)) S (Kernel S))) (SIGNATURE coerce (S (Fraction (Polynomial (Fraction R))))) (SIGNATURE coerce (S (Polynomial (Fraction R)))) (SIGNATURE coerce (S (Fraction R))) (SIGNATURE denominator (S S)) (SIGNATURE convert (S (Factored S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S S)))) (SIGNATURE isPower ((Union (Record (: val S) (: exponent (Integer))) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (Symbol))) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (BasicOperator))) (SIGNATURE numerator (S S)) (SIGNATURE coerce (S (SparseMultivariatePolynomial R (Kernel S)))) (SIGNATURE isMult ((Union (Record (: coef (Integer)) (: var (Kernel S))) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE eval (S S (List (BasicOperator)) (List S) (Symbol))) (SIGNATURE eval (S S (BasicOperator) S (Symbol))) (SIGNATURE eval (S S)) (SIGNATURE eval (S S (List (Symbol)))) (SIGNATURE eval (S S (Symbol))) (SIGNATURE applyQuote (S (Symbol) (List S))) (SIGNATURE applyQuote (S (Symbol) S S S S)) (SIGNATURE applyQuote (S (Symbol) S S S)) (SIGNATURE applyQuote (S (Symbol) S S)) (SIGNATURE applyQuote (S (Symbol) S)) (SIGNATURE variables ((List (Symbol)) S)) (SIGNATURE ground (R S)) (SIGNATURE ground? ((Boolean) S)) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE retract ((Symbol) S)) (SIGNATURE retractIfCan ((Union (Symbol) failed) S)) (SIGNATURE coerce (S (Symbol))) (SIGNATURE eval (S S (BasicOperator) (Mapping S S))) (SIGNATURE eval (S S (BasicOperator) (Mapping S (List S)))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S S)))) (SIGNATURE eval (S S (Symbol) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S S)))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE kernels ((List (Kernel S)) S)) (SIGNATURE mainKernel ((Union (Kernel S) failed) S)) (SIGNATURE subst (S S (List (Kernel S)) (List S))) (SIGNATURE subst (S S (List (Equation S)))) (SIGNATURE subst (S S (Equation S))) (SIGNATURE elt (S (BasicOperator) (List S))) (SIGNATURE elt (S (BasicOperator) S S S S)) (SIGNATURE elt (S (BasicOperator) S S S)) (SIGNATURE elt (S (BasicOperator) S S)) (SIGNATURE elt (S (BasicOperator) S)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE eval (S S (List (Kernel S)) (List S))) (SIGNATURE eval (S S (Kernel S) S)) (SIGNATURE retract ((Kernel S) S)) (SIGNATURE retractIfCan ((Union (Kernel S) failed) S)) (SIGNATURE coerce (S (Kernel S))) (SIGNATURE coerce ((OutputForm) S)))
      [5] eval:  IN has no value
      [6] eval:  f has no value
      [7] smprep:  IN has no value
      [8] smprep:  a has no value
      [9] smprep: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (Integer) S)) (SIGNATURE * (S S S)) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE coerce (S (Integer))) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE convert ((InputForm) S)) (SIGNATURE retract ((Polynomial R) S)) (SIGNATURE retractIfCan ((Union (Polynomial R) failed) S)) (SIGNATURE coerce (S (Polynomial R))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE * (S S R)) (SIGNATURE * (S R S)) (SIGNATURE coerce (S S)) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE retract ((Fraction (Polynomial R)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Polynomial R)) failed) S)) (SIGNATURE coerce (S (Fraction (Polynomial R)))) (SIGNATURE univariate ((Fraction (SparseUnivariatePolynomial S)) S (Kernel S))) (SIGNATURE coerce (S (Fraction (Polynomial (Fraction R))))) (SIGNATURE coerce (S (Polynomial (Fraction R)))) (SIGNATURE coerce (S (Fraction R))) (SIGNATURE denominator (S S)) (SIGNATURE convert (S (Factored S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S S)))) (SIGNATURE isPower ((Union (Record (: val S) (: exponent (Integer))) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (Symbol))) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (BasicOperator))) (SIGNATURE numerator (S S)) (SIGNATURE coerce (S (SparseMultivariatePolynomial R (Kernel S)))) (SIGNATURE isMult ((Union (Record (: coef (Integer)) (: var (Kernel S))) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE eval (S S (List (BasicOperator)) (List S) (Symbol))) (SIGNATURE eval (S S (BasicOperator) S (Symbol))) (SIGNATURE eval (S S)) (SIGNATURE eval (S S (List (Symbol)))) (SIGNATURE eval (S S (Symbol))) (SIGNATURE applyQuote (S (Symbol) (List S))) (SIGNATURE applyQuote (S (Symbol) S S S S)) (SIGNATURE applyQuote (S (Symbol) S S S)) (SIGNATURE applyQuote (S (Symbol) S S)) (SIGNATURE applyQuote (S (Symbol) S)) (SIGNATURE variables ((List (Symbol)) S)) (SIGNATURE ground (R S)) (SIGNATURE ground? ((Boolean) S)) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE retract ((Symbol) S)) (SIGNATURE retractIfCan ((Union (Symbol) failed) S)) (SIGNATURE coerce (S (Symbol))) (SIGNATURE eval (S S (BasicOperator) (Mapping S S))) (SIGNATURE eval (S S (BasicOperator) (Mapping S (List S)))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S S)))) (SIGNATURE eval (S S (Symbol) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S S)))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE kernels ((List (Kernel S)) S)) (SIGNATURE mainKernel ((Union (Kernel S) failed) S)) (SIGNATURE subst (S S (List (Kernel S)) (List S))) (SIGNATURE subst (S S (List (Equation S)))) (SIGNATURE subst (S S (Equation S))) (SIGNATURE elt (S (BasicOperator) (List S))) (SIGNATURE elt (S (BasicOperator) S S S S)) (SIGNATURE elt (S (BasicOperator) S S S)) (SIGNATURE elt (S (BasicOperator) S S)) (SIGNATURE elt (S (BasicOperator) S)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE eval (S S (List (Kernel S)) (List S))) (SIGNATURE eval (S S (Kernel S) S)) (SIGNATURE retract ((Kernel S) S)) (SIGNATURE retractIfCan ((Union (Kernel S) failed) S)) (SIGNATURE coerce (S (Kernel S))) (SIGNATURE coerce ((OutputForm) S)))
      [10] diffdiff0:  ans has no value
      [11] diffEval:  k has no value
      [12] univariate: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (Integer) S)) (SIGNATURE * (S S S)) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE coerce (S (Integer))) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE convert ((InputForm) S)) (SIGNATURE retract ((Polynomial R) S)) (SIGNATURE retractIfCan ((Union (Polynomial R) failed) S)) (SIGNATURE coerce (S (Polynomial R))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE * (S S R)) (SIGNATURE * (S R S)) (SIGNATURE coerce (S S)) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE retract ((Fraction (Polynomial R)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Polynomial R)) failed) S)) (SIGNATURE coerce (S (Fraction (Polynomial R)))) (SIGNATURE univariate ((Fraction (SparseUnivariatePolynomial S)) S (Kernel S))) (SIGNATURE coerce (S (Fraction (Polynomial (Fraction R))))) (SIGNATURE coerce (S (Polynomial (Fraction R)))) (SIGNATURE coerce (S (Fraction R))) (SIGNATURE denominator (S S)) (SIGNATURE convert (S (Factored S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S S)))) (SIGNATURE isPower ((Union (Record (: val S) (: exponent (Integer))) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (Symbol))) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (BasicOperator))) (SIGNATURE numerator (S S)) (SIGNATURE coerce (S (SparseMultivariatePolynomial R (Kernel S)))) (SIGNATURE isMult ((Union (Record (: coef (Integer)) (: var (Kernel S))) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE eval (S S (List (BasicOperator)) (List S) (Symbol))) (SIGNATURE eval (S S (BasicOperator) S (Symbol))) (SIGNATURE eval (S S)) (SIGNATURE eval (S S (List (Symbol)))) (SIGNATURE eval (S S (Symbol))) (SIGNATURE applyQuote (S (Symbol) (List S))) (SIGNATURE applyQuote (S (Symbol) S S S S)) (SIGNATURE applyQuote (S (Symbol) S S S)) (SIGNATURE applyQuote (S (Symbol) S S)) (SIGNATURE applyQuote (S (Symbol) S)) (SIGNATURE variables ((List (Symbol)) S)) (SIGNATURE ground (R S)) (SIGNATURE ground? ((Boolean) S)) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE retract ((Symbol) S)) (SIGNATURE retractIfCan ((Union (Symbol) failed) S)) (SIGNATURE coerce (S (Symbol))) (SIGNATURE eval (S S (BasicOperator) (Mapping S S))) (SIGNATURE eval (S S (BasicOperator) (Mapping S (List S)))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S S)))) (SIGNATURE eval (S S (Symbol) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S S)))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE kernels ((List (Kernel S)) S)) (SIGNATURE mainKernel ((Union (Kernel S) failed) S)) (SIGNATURE subst (S S (List (Kernel S)) (List S))) (SIGNATURE subst (S S (List (Equation S)))) (SIGNATURE subst (S S (Equation S))) (SIGNATURE elt (S (BasicOperator) (List S))) (SIGNATURE elt (S (BasicOperator) S S S S)) (SIGNATURE elt (S (BasicOperator) S S S)) (SIGNATURE elt (S (BasicOperator) S S)) (SIGNATURE elt (S (BasicOperator) S)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE eval (S S (List (Kernel S)) (List S))) (SIGNATURE eval (S S (Kernel S) S)) (SIGNATURE retract ((Kernel S) S)) (SIGNATURE retractIfCan ((Union (Kernel S) failed) S)) (SIGNATURE coerce (S (Kernel S))) (SIGNATURE coerce ((OutputForm) S)))
      [13] convert: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE * (S (PositiveInteger) S)) (SIGNATURE * (S (NonNegativeInteger) S)) (SIGNATURE * (S (Integer) S)) (SIGNATURE * (S S S)) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE coerce (S (Integer))) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE convert ((InputForm) S)) (SIGNATURE retract ((Polynomial R) S)) (SIGNATURE retractIfCan ((Union (Polynomial R) failed) S)) (SIGNATURE coerce (S (Polynomial R))) (SIGNATURE differentiate (S S (Symbol))) (SIGNATURE differentiate (S S (List (Symbol)))) (SIGNATURE differentiate (S S (Symbol) (NonNegativeInteger))) (SIGNATURE differentiate (S S (List (Symbol)) (List (NonNegativeInteger)))) (SIGNATURE * (S S R)) (SIGNATURE * (S R S)) (SIGNATURE coerce (S S)) (SIGNATURE * (S S (Fraction (Integer)))) (SIGNATURE * (S (Fraction (Integer)) S)) (SIGNATURE retract ((Fraction (Polynomial R)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Polynomial R)) failed) S)) (SIGNATURE coerce (S (Fraction (Polynomial R)))) (SIGNATURE univariate ((Fraction (SparseUnivariatePolynomial S)) S (Kernel S))) (SIGNATURE coerce (S (Fraction (Polynomial (Fraction R))))) (SIGNATURE coerce (S (Polynomial (Fraction R)))) (SIGNATURE coerce (S (Fraction R))) (SIGNATURE denominator (S S)) (SIGNATURE convert (S (Factored S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (NonNegativeInteger) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (NonNegativeInteger)) (List (Mapping S S)))) (SIGNATURE isPower ((Union (Record (: val S) (: exponent (Integer))) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (Symbol))) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S (BasicOperator))) (SIGNATURE numerator (S S)) (SIGNATURE coerce (S (SparseMultivariatePolynomial R (Kernel S)))) (SIGNATURE isMult ((Union (Record (: coef (Integer)) (: var (Kernel S))) failed) S)) (SIGNATURE isPlus ((Union (List S) failed) S)) (SIGNATURE isExpt ((Union (Record (: var (Kernel S)) (: exponent (Integer))) failed) S)) (SIGNATURE isTimes ((Union (List S) failed) S)) (SIGNATURE eval (S S (List (BasicOperator)) (List S) (Symbol))) (SIGNATURE eval (S S (BasicOperator) S (Symbol))) (SIGNATURE eval (S S)) (SIGNATURE eval (S S (List (Symbol)))) (SIGNATURE eval (S S (Symbol))) (SIGNATURE applyQuote (S (Symbol) (List S))) (SIGNATURE applyQuote (S (Symbol) S S S S)) (SIGNATURE applyQuote (S (Symbol) S S S)) (SIGNATURE applyQuote (S (Symbol) S S)) (SIGNATURE applyQuote (S (Symbol) S)) (SIGNATURE variables ((List (Symbol)) S)) (SIGNATURE ground (R S)) (SIGNATURE ground? ((Boolean) S)) (SIGNATURE retract (R S)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE retract ((Symbol) S)) (SIGNATURE retractIfCan ((Union (Symbol) failed) S)) (SIGNATURE coerce (S (Symbol))) (SIGNATURE eval (S S (BasicOperator) (Mapping S S))) (SIGNATURE eval (S S (BasicOperator) (Mapping S (List S)))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (BasicOperator)) (List (Mapping S S)))) (SIGNATURE eval (S S (Symbol) (Mapping S S))) (SIGNATURE eval (S S (Symbol) (Mapping S (List S)))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S (List S))))) (SIGNATURE eval (S S (List (Symbol)) (List (Mapping S S)))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE kernels ((List (Kernel S)) S)) (SIGNATURE mainKernel ((Union (Kernel S) failed) S)) (SIGNATURE subst (S S (List (Kernel S)) (List S))) (SIGNATURE subst (S S (List (Equation S)))) (SIGNATURE subst (S S (Equation S))) (SIGNATURE elt (S (BasicOperator) (List S))) (SIGNATURE elt (S (BasicOperator) S S S S)) (SIGNATURE elt (S (BasicOperator) S S S)) (SIGNATURE elt (S (BasicOperator) S S)) (SIGNATURE elt (S (BasicOperator) S)) (SIGNATURE eval (S S (List S) (List S))) (SIGNATURE eval (S S S S)) (SIGNATURE eval (S S (Equation S))) (SIGNATURE eval (S S (List (Equation S)))) (SIGNATURE eval (S S (List (Kernel S)) (List S))) (SIGNATURE eval (S S (Kernel S) S)) (SIGNATURE retract ((Kernel S) S)) (SIGNATURE retractIfCan ((Union (Kernel S) failed) S)) (SIGNATURE coerce (S (Kernel S))) (SIGNATURE coerce ((OutputForm) S)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FS 
; (DEFUN |FunctionSpace| ...) is being compiled.
;; The variable |FunctionSpace;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FunctionSpace;| ...) is being compiled.
;; The variable |FunctionSpace;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FST 
   Warnings: 
      [1] coerce:  REAL has no value
      [2] coerce:  INTEGER has no value
      [3] coerce:  COMPLEX has no value
      [4] coerce:  CHARACTER has no value
      [5] coerce:  LOGICAL has no value
      [6] coerce:  real has no value
      [7] coerce:  integer has no value
      [8] coerce:  complex has no value
      [9] coerce:  character has no value
      [10] coerce:  logical has no value
      [11] coerce:  upperDoubleCOmplexSymbol has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GDMP 
   Warnings: 
      [1] zero?: :Rep -- should replace by pretend
      [2] listCoef: :Rep -- should replace by pretend
      [3] numberOfMonomials: :Rep -- should replace by pretend
      [4] monomial?: :Rep -- should replace by pretend
      [5] maxNorm:  m has no value
      [6] variables: :(PositiveInteger) -- should replace by pretend
      [7] univariate:  deg has no value
      [8] coerce:  l has no value

--------------non extending category----------------------
.. GeneralDistributedMultivariatePolynomial(#1,#2,#3) of cat 
(|Join| (|PolynomialCategory| |#2| |#3| (|OrderedVariableList| |#1|)) (CATEGORY |domain| (SIGNATURE |reorder| ($ $ (|List| (|Integer|))))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(IF (|has| |#2| (|IntegralDomain|)) (IF (|has| |#3| (|CancellationAbelianMonoid|)) (SIGNATURE |fmecg| ($ $ |#3| |#2| $)) |noBranch|) |noBranch|)    finalizing nrlib GDMP 

--------------non extending category----------------------
.. Pi of cat 
(|Join| (|Field|) (|CharacteristicZero|) (|RetractableTo| (|Integer|)) (|RetractableTo| (|Fraction| (|Integer|))) (|RealConstant|) (|CoercibleTo| (|DoubleFloat|)) (|CoercibleTo| (|Float|)) (|ConvertibleTo| (|Fraction| (|SparseUnivariatePolynomial| (|Integer|)))) (|ConvertibleTo| (|InputForm|)) (CATEGORY |domain| (SIGNATURE |pi| ($))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|QuotientFieldCategory| (|SparseUnivariatePolynomial| (|Integer|)))    finalizing nrlib HACKPI 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib HACKPI 
   Warnings: 
      [1] pi: pretend$ -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IDEAL 
   Warnings: 
      [1] not known that (OrderedAbelianMonoidSup) is of mode (CATEGORY domain (IF (has (NonNegativeInteger) (Finite)) (IF (has Expon (Finite)) (ATTRIBUTE (Finite)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Monoid)) (IF (has Expon (Monoid)) (ATTRIBUTE (Monoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianMonoid)) (IF (has Expon (AbelianMonoid)) (ATTRIBUTE (AbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (CancellationAbelianMonoid)) (IF (has Expon (CancellationAbelianMonoid)) (ATTRIBUTE (CancellationAbelianMonoid)) noBranch) noBranch) (IF (has (NonNegativeInteger) (Group)) (IF (has Expon (Group)) (ATTRIBUTE (Group)) noBranch) noBranch) (IF (has (NonNegativeInteger) (AbelianGroup)) (IF (has Expon (AbelianGroup)) (ATTRIBUTE (AbelianGroup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedAbelianMonoidSup)) (IF (has Expon (OrderedAbelianMonoidSup)) (ATTRIBUTE (OrderedAbelianMonoidSup)) noBranch) noBranch) (IF (has (NonNegativeInteger) (OrderedSet)) (IF (has Expon (OrderedSet)) (ATTRIBUTE (OrderedSet)) noBranch) noBranch) (SIGNATURE makeprod ($ (NonNegativeInteger) Expon)) (SIGNATURE selectfirst ((NonNegativeInteger) $)) (SIGNATURE selectsecond (Expon $)))
      [2] leadterm: not known that (Ring) is of mode (CATEGORY package (SIGNATURE * ($ $ $)) (SIGNATURE ** ($ $ (NonNegativeInteger))) (SIGNATURE + ($ $ $)) (SIGNATURE one? ((Boolean) $)) (SIGNATURE zero? ((Boolean) $)) (SIGNATURE element? ((Boolean) DPoly $)) (SIGNATURE in? ((Boolean) $ $)) (SIGNATURE inRadical? ((Boolean) DPoly $)) (SIGNATURE zeroDim? ((Boolean) $ (List VarSet))) (SIGNATURE zeroDim? ((Boolean) $)) (SIGNATURE intersect ($ $ $)) (SIGNATURE intersect ($ (List $))) (SIGNATURE quotient ($ $ $)) (SIGNATURE quotient ($ $ DPoly)) (SIGNATURE groebner ($ $)) (SIGNATURE generalPosition ((Record (: mval (Matrix F)) (: invmval (Matrix F)) (: genIdeal $)) $ (List VarSet))) (SIGNATURE backOldPos ($ (Record (: mval (Matrix F)) (: invmval (Matrix F)) (: genIdeal $)))) (SIGNATURE dimension ((Integer) $ (List VarSet))) (SIGNATURE dimension ((Integer) $)) (SIGNATURE leadingIdeal ($ $)) (SIGNATURE ideal ($ (List DPoly))) (SIGNATURE groebnerIdeal ($ (List DPoly))) (SIGNATURE groebner? ((Boolean) $)) (SIGNATURE generators ((List DPoly) $)) (SIGNATURE coerce ($ (List DPoly))) (SIGNATURE saturate ($ $ DPoly)) (SIGNATURE saturate ($ $ DPoly (List VarSet))) (IF (has VarSet (ConvertibleTo (Symbol))) (SIGNATURE relationsIdeal ((SuchThat (List (Polynomial F)) (List (Equation (Polynomial F)))) (List DPoly))) noBranch))
      [3] contractGrob: not known that (PolynomialCategory F newExpon VarSet) is of mode (CATEGORY domain (IF (has F (IntegralDomain)) (IF (has newExpon (CancellationAbelianMonoid)) (SIGNATURE fmecg ($ $ newExpon F $)) noBranch) noBranch) (IF (has F (ATTRIBUTE canonicalUnitNormal)) (ATTRIBUTE canonicalUnitNormal) noBranch))
      [4] monomDim:  monvar has no value
      [5] **: :(NonNegativeInteger) -- should replace by pretend
      [6] relationsIdeal: not known that (OrderedAbelianMonoid) is of mode (CATEGORY domain (IF (has Expon (Finite)) (IF (has DirP (Finite)) (ATTRIBUTE (Finite)) noBranch) noBranch) (IF (has Expon (Monoid)) (IF (has DirP (Monoid)) (ATTRIBUTE (Monoid)) noBranch) noBranch) (IF (has Expon (AbelianMonoid)) (IF (has DirP (AbelianMonoid)) (ATTRIBUTE (AbelianMonoid)) noBranch) noBranch) (IF (has Expon (CancellationAbelianMonoid)) (IF (has DirP (CancellationAbelianMonoid)) (ATTRIBUTE (CancellationAbelianMonoid)) noBranch) noBranch) (IF (has Expon (Group)) (IF (has DirP (Group)) (ATTRIBUTE (Group)) noBranch) noBranch) (IF (has Expon (AbelianGroup)) (IF (has DirP (AbelianGroup)) (ATTRIBUTE (AbelianGroup)) noBranch) noBranch) (IF (has Expon (OrderedAbelianMonoidSup)) (IF (has DirP (OrderedAbelianMonoidSup)) (ATTRIBUTE (OrderedAbelianMonoidSup)) noBranch) noBranch) (IF (has Expon (OrderedSet)) (IF (has DirP (OrderedSet)) (ATTRIBUTE (OrderedSet)) noBranch) noBranch) (SIGNATURE makeprod ($ Expon DirP)) (SIGNATURE selectfirst (Expon $)) (SIGNATURE selectsecond (DirP $)))
      [7] relationsIdeal: not known that (OrderedAbelianMonoidSup) is of mode (CATEGORY domain (IF (has Expon (Finite)) (IF (has DirP (Finite)) (ATTRIBUTE (Finite)) noBranch) noBranch) (IF (has Expon (Monoid)) (IF (has DirP (Monoid)) (ATTRIBUTE (Monoid)) noBranch) noBranch) (IF (has Expon (AbelianMonoid)) (IF (has DirP (AbelianMonoid)) (ATTRIBUTE (AbelianMonoid)) noBranch) noBranch) (IF (has Expon (CancellationAbelianMonoid)) (IF (has DirP (CancellationAbelianMonoid)) (ATTRIBUTE (CancellationAbelianMonoid)) noBranch) noBranch) (IF (has Expon (Group)) (IF (has DirP (Group)) (ATTRIBUTE (Group)) noBranch) noBranch) (IF (has Expon (AbelianGroup)) (IF (has DirP (AbelianGroup)) (ATTRIBUTE (AbelianGroup)) noBranch) noBranch) (IF (has Expon (OrderedAbelianMonoidSup)) (IF (has DirP (OrderedAbelianMonoidSup)) (ATTRIBUTE (OrderedAbelianMonoidSup)) noBranch) noBranch) (IF (has Expon (OrderedSet)) (IF (has DirP (OrderedSet)) (ATTRIBUTE (OrderedSet)) noBranch) noBranch) (SIGNATURE makeprod ($ Expon DirP)) (SIGNATURE selectfirst (Expon $)) (SIGNATURE selectsecond (DirP $)))
      [8] relationsIdeal: not known that (PolynomialCategory F nExponent VarSet1) is of mode (CATEGORY domain (IF (has F (IntegralDomain)) (IF (has nExponent (CancellationAbelianMonoid)) (SIGNATURE fmecg ($ $ nExponent F $)) noBranch) noBranch) (IF (has F (ATTRIBUTE canonicalUnitNormal)) (ATTRIBUTE canonicalUnitNormal) noBranch))
      [9] relationsIdeal: :(Vector (NonNegativeInteger)) -- should replace by pretend
      [10] relationsIdeal: The conditional modes (Polynomial F) and nPoly conflict

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INFORM 
   Warnings: 
      [1] conv: pretend$ -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IR 
   Warnings: 
      [1] nesimp:  IN has no value
      [2] nesimp:  ne has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ISUPS 
   Warnings: 
      [1] cSin:  %sin has no value
      [2] cCos:  %cos has no value
      [3] sinhcosh:  %sin has no value
      [4] sinhcosh:  %cos has no value
      [5] cSinh:  %sinh has no value
      [6] cCosh:  %cosh has no value

--------------non extending category----------------------
.. Library of cat 
(|Join| (|TableAggregate| (|String|) (|Any|)) (CATEGORY |domain| (SIGNATURE |library| ($ (|FileName|))) (SIGNATURE |pack!| ($ $)) (SIGNATURE |elt| ((|Any|) $ (|Symbol|))) (SIGNATURE |setelt| ((|Any|) $ (|Symbol|) (|Any|))) (SIGNATURE |close!| ($ $))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|FileCategory| (|FileName|) (|Record| (|:| |key| (|String|)) (|:| |entry| (|Any|))))    finalizing nrlib LIB 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LMDICT 
--->/research2/test0819/mnt/fedora5/../../src/algebra/LMDICT.spad-->ListMultiDictionary(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/LMDICT.spad-->ListMultiDictionary(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LODOOPS 
   Warnings: 
      [1] killer: not known that (Ring) is of mode (CATEGORY package (SIGNATURE symmetricProduct (L L L (Mapping A A))) (SIGNATURE symmetricPower (L L (NonNegativeInteger) (Mapping A A))) (SIGNATURE directSum (L L L (Mapping A A))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MATRIX 
   Warnings: 
      [1] positivePower: pretend(Matrix R) -- should replace by @
      [2] determinant: not known that (CommutativeRing) is of mode (CATEGORY R (ATTRIBUTE (commutative *)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MKFLCFN 
   Warnings: 
      [1] mkLisp: pretend(InputForm) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MKFLCFN 
; (DEFUN |MKFLCFN;mkDefun| ...) is being compiled.
;; The variable |$compileDontDefineFunctions| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MSET 
   Warnings: 
      [1] intersect:  n has no value
      [2] difference:  n has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib M3D 
   Warnings: 
      [1] matrixConcat3D:  retVal has no value

--------------non extending category----------------------
.. ThreeDimensionalMatrix #1 of cat 
(|Join| (|HomogeneousAggregate| |#1|) (CATEGORY |domain| (IF (|has| |#1| (|Ring|)) (PROGN (SIGNATURE |zeroMatrix| ($ (|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|))) (SIGNATURE |identityMatrix| ($ (|NonNegativeInteger|))) (SIGNATURE |plus| ($ $ $))) |noBranch|) (SIGNATURE |construct| ($ (|List| (|List| (|List| |#1|))))) (SIGNATURE |elt| (|#1| $ (|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|))) (SIGNATURE |setelt!| (|#1| $ (|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|) |#1|)) (SIGNATURE |coerce| ($ (|PrimitiveArray| (|PrimitiveArray| (|PrimitiveArray| |#1|))))) (SIGNATURE |coerce| ((|PrimitiveArray| (|PrimitiveArray| (|PrimitiveArray| |#1|))) $)) (SIGNATURE |matrixConcat3D| ($ (|Symbol|) $ $)) (SIGNATURE |matrixDimensions| ((|Vector| (|NonNegativeInteger|)) $))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|OneDimensionalArrayAggregate| (|PrimitiveArray| (|PrimitiveArray| |#1|)))    finalizing nrlib M3D 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGC02 
   Warnings: 
      [1] c02aff: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] c02agf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGC05 
   Warnings: 
      [1] c05adf:  fn has no value
      [2] c05adf:  fp has no value
      [3] c05adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] c05nbf:  fn has no value
      [5] c05nbf:  fp has no value
      [6] c05nbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] c05pbf:  fn has no value
      [8] c05pbf:  fp has no value
      [9] c05pbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGC06 
   Warnings: 
      [1] c06eaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] c06ebf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] c06ecf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] c06ekf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] c06fpf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [6] c06fqf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] c06frf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [8] c06fuf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [9] c06gbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] c06gcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [11] c06gqf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [12] c06gsf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGD03 
   Warnings: 
      [1] d03edf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] d03eef:  fn has no value
      [3] d03eef:  fp has no value
      [4] d03eef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] d03faf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGE01 
   Warnings: 
      [1] e01baf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] e01bef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] e01bff: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] e01bgf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] e01bhf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [6] e01daf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] e01saf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [8] e01sbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [9] e01sef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] e01sff: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGE02 
   Warnings: 
      [1] e02adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] e02aef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] e02agf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] e02ahf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] e02ajf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [6] e02akf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] e02baf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [8] e02bbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [9] e02bcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] e02bdf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [11] e02bef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [12] e02daf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [13] e02dcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [14] e02ddf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [15] e02def: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [16] e02dff: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [17] e02gaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [18] e02zaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGE04 
   Warnings: 
      [1] e04dgf:  fn has no value
      [2] e04dgf:  fp has no value
      [3] e04dgf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] e04fdf:  fn has no value
      [5] e04fdf:  fp has no value
      [6] e04fdf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] e04gcf:  fn has no value
      [8] e04gcf:  fp has no value
      [9] e04gcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] e04jaf:  fn has no value
      [11] e04jaf:  fp has no value
      [12] e04jaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [13] e04mbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [14] e04naf:  fn has no value
      [15] e04naf:  fp has no value
      [16] e04naf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [17] e04ucf:  fn has no value
      [18] e04ucf:  fp has no value
      [19] e04ucf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [20] e04ycf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGF07 
   Warnings: 
      [1] f07adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] f07aef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] f07fdf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] f07fef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGS 
   Warnings: 
      [1] s01eaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] s13aaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] s13acf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] s13adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] s14aaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [6] s14abf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] s14baf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [8] s15adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [9] s15aef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] s17acf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [11] s17adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [12] s17aef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [13] s17aff: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [14] s17agf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [15] s17ahf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [16] s17ajf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [17] s17akf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [18] s17dcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [19] s17def: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [20] s17dgf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [21] s17dhf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [22] s17dlf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [23] s18acf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [24] s18adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [25] s18aef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [26] s18aff: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [27] s18dcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [28] s18def: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [29] s19aaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [30] s19abf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [31] s19acf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [32] s19adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [33] s20acf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [34] s20adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [35] s21baf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [36] s21bbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [37] s21bcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [38] s21bdf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGSP 
   Warnings: 
      [1] getUniqueId:  uniqueId has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGSP 
; (DEFUN |NAGSP;checkPrecision;B;1| ...) is being compiled.
;; The variable |$fortranPrecision| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$nagEnforceDouble| is undefined.
;; The compiler will assume this variable is a global.
;; The variable |$nagMessages| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NAGSP;fortranCompilerName;S;4| ...) is being compiled.
;; The variable |$fortranCompilerName| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NAGSP;fortranLinkerArgs;S;5| ...) is being compiled.
;; The variable |$fortranLibraries| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NUMFMT 
   Warnings: 
      [1] ScanRoman:  nprens has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OC 
; (DEFUN |OctonionCategory| ...) is being compiled.
;; The variable |OctonionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |OctonionCategory;| ...) is being compiled.
;; The variable |OctonionCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ODEPACK 
--->/research2/test0819/mnt/fedora5/../../src/algebra/ODEPACK.spad-->AnnaOrdinaryDifferentialEquationPackage(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/ODEPACK.spad-->AnnaOrdinaryDifferentialEquationPackage(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ODERAT 
   Warnings: 
      [1] ratDsolve1: not known that (Ring) is of mode (CATEGORY package (SIGNATURE ratDsolve ((Record (: particular (Union (Fraction UP) failed)) (: basis (List (Fraction UP)))) (LinearOrdinaryDifferentialOperator1 (Fraction UP)) (Fraction UP))) (SIGNATURE ratDsolve ((Record (: basis (List (Fraction UP))) (: mat (Matrix F))) (LinearOrdinaryDifferentialOperator1 (Fraction UP)) (List (Fraction UP)))) (SIGNATURE ratDsolve ((Record (: particular (Union (Fraction UP) failed)) (: basis (List (Fraction UP)))) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (Fraction UP))) (SIGNATURE ratDsolve ((Record (: basis (List (Fraction UP))) (: mat (Matrix F))) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (List (Fraction UP)))) (SIGNATURE indicialEquationAtInfinity (UP (LinearOrdinaryDifferentialOperator1 (Fraction UP)))) (SIGNATURE indicialEquationAtInfinity (UP (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)))))
      [2] ratDsolve0:  b has no value
      [3] infMuLambda:  lamb has no value
      [4] infMuLambda:  lf has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OPTPACK 
   Warnings: 
      [1] constant:  noa has no value
      [2] measureSpecific:  noa has no value
      [3] measureSpecific:  lsa has no value
      [4] optimizeSpecific:  noa has no value
      [5] optimizeSpecific:  lsa has no value
      [6] goodnessOfFit:  lsa has no value
      [7] goodnessOfFit:  method has no value
      [8] goodnessOfFit:  nameOfRoutine has no value
      [9] goodnessOfFit:  w has no value
      [10] goodnessOfFit:  objf has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OPTPACK 
--->/research2/test0819/mnt/fedora5/../../src/algebra/OPTPACK.spad-->AnnaNumericalOptimizationPackage(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/OPTPACK.spad-->AnnaNumericalOptimizationPackage(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PATTERN 
   Warnings: 
      [1] quoted?:  sym has no value
      [2] generic?:  sym has no value
      [3] multiple?:  sym has no value
      [4] optional?:  sym has no value
      [5] =: pretend(Boolean) -- should replace by @
      [6] isOp:  ker has no value
      [7] variables:  exp has no value
      [8] variables:  qot has no value
      [9] variables:  ker has no value
      [10] PAT2O:  ret has no value
      [11] PAT2O:  sym has no value
      [12] PAT2O:  exp has no value
      [13] PAT2O:  qot has no value
      [14] PAT2O:  ker has no value
      [15] patcopy:  ret has no value
      [16] patcopy:  sym has no value
      [17] patcopy:  ker has no value
      [18] patcopy:  qot has no value
      [19] patcopy:  exp has no value
      [20] pateq?:  ret has no value
      [21] pateq?:  qot has no value
      [22] pateq?:  sym has no value
      [23] pateq?:  ker has no value
      [24] pateq?:  exp has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PATTERN 
; (DEFUN |Pattern;| ...) is being compiled.
;; The variable IDENTITY is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PMKERNEL 
   Warnings: 
      [1] patternMatchArg: not known that (SetCategory) is of mode (CATEGORY package (SIGNATURE patternMatch ((PatternMatchResult S E) (Kernel E) (Pattern S) (PatternMatchResult S E))))
      [2] patternMatchInner: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE patternMatch ((PatternMatchResult S E) (Kernel E) (Pattern S) (PatternMatchResult S E))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PRIMELT 
   Warnings: 
      [1] triangularLinearIfCan: not known that (Ring) is of mode (CATEGORY package (SIGNATURE primitiveElement ((Record (: coef1 (Integer)) (: coef2 (Integer)) (: prim (SparseUnivariatePolynomial F))) (Polynomial F) (Symbol) (Polynomial F) (Symbol))) (SIGNATURE primitiveElement ((Record (: coef (List (Integer))) (: poly (List (SparseUnivariatePolynomial F))) (: prim (SparseUnivariatePolynomial F))) (List (Polynomial F)) (List (Symbol)))) (SIGNATURE primitiveElement ((Record (: coef (List (Integer))) (: poly (List (SparseUnivariatePolynomial F))) (: prim (SparseUnivariatePolynomial F))) (List (Polynomial F)) (List (Symbol)) (Symbol))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib QALGSET2 
   Warnings: 
      [1] npoly: not known that (PolynomialCategory (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [2] radicalSimplify: not known that (PolynomialCategory (Fraction (Integer)) (DirectProduct nv (NonNegativeInteger)) (OrderedVariableList vl)) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [3] radicalSimplify:  gb has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib REP1 
   Warnings: 
      [1] antisymmetricTensors: not known that (Ring) is of mode (CATEGORY R (ATTRIBUTE (commutative *)))

--------------non extending category----------------------
.. Result of cat 
(|Join| (|TableAggregate| (|Symbol|) (|Any|)) (CATEGORY |package| (SIGNATURE |showScalarValues| ((|Boolean|) (|Boolean|))) (SIGNATURE |showArrayValues| ((|Boolean|) (|Boolean|))) (ATTRIBUTE |finiteAggregate|)))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(ATTRIBUTE |finiteAggregate|)    finalizing nrlib RESULT 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib QUATCAT 
; (DEFUN |QuaternionCategory| ...) is being compiled.
;; The variable |QuaternionCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |QuaternionCategory;| ...) is being compiled.
;; The variable |QuaternionCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RFFACT 
   Warnings: 
      [1] likuniv: not known that (Ring) is of mode (CATEGORY package (SIGNATURE factor ((Factored UP) UP)))

--------------non extending category----------------------
.. RectangularMatrix(#1,#2,#3) of cat 
(|Join| (|RectangularMatrixCategory| |#1| |#2| |#3| (|DirectProduct| |#2| |#3|) (|DirectProduct| |#1| |#3|)) (|CoercibleTo| (|Matrix| |#3|)) (CATEGORY |domain| (IF (|has| |#3| (|Field|)) (ATTRIBUTE (|VectorSpace| |#3|)) |noBranch|) (IF (|has| |#3| (|ConvertibleTo| (|InputForm|))) (ATTRIBUTE (|ConvertibleTo| (|InputForm|))) |noBranch|) (SIGNATURE |rectangularMatrix| ($ (|Matrix| |#3|))) (SIGNATURE |coerce| ((|Matrix| |#3|) $))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|MatrixCategory| |#3| (|Vector| |#3|) (|Vector| |#3|))    finalizing nrlib RMATRIX 

(|RealConstant|)    extends 
(|ConvertibleTo| (|DoubleFloat|))    but not 
(|ConvertibleTo| (|String|)) --------------non extending category----------------------
.. RomanNumeral of cat 
(|Join| (|IntegerNumberSystem|) (CATEGORY |domain| (ATTRIBUTE |canonical|) (ATTRIBUTE |canonicalsClosed|) (ATTRIBUTE |noetherian|) (SIGNATURE |convert| ($ (|Symbol|))) (SIGNATURE |roman| ($ (|Symbol|))) (SIGNATURE |roman| ($ (|Integer|)))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|ConvertibleTo| (|String|))    finalizing nrlib ROMAN 

--------------non extending category----------------------
.. RoutinesTable of cat 
(|Join| (|TableAggregate| (|Symbol|) (|Any|)) (CATEGORY |domain| (SIGNATURE |concat| ($ $ $)) (SIGNATURE |routines| ($)) (SIGNATURE |selectIntegrationRoutines| ($ $)) (SIGNATURE |selectOptimizationRoutines| ($ $)) (SIGNATURE |selectPDERoutines| ($ $)) (SIGNATURE |selectODEIVPRoutines| ($ $)) (SIGNATURE |selectFiniteRoutines| ($ $)) (SIGNATURE |selectSumOfSquaresRoutines| ($ $)) (SIGNATURE |selectNonFiniteRoutines| ($ $)) (SIGNATURE |selectMultiDimensionalRoutines| ($ $)) (SIGNATURE |changeThreshhold| ($ $ (|Symbol|) (|Float|))) (SIGNATURE |changeMeasure| ($ $ (|Symbol|) (|Float|))) (SIGNATURE |getMeasure| ((|Float|) $ (|Symbol|))) (SIGNATURE |getExplanations| ((|List| (|String|)) $ (|String|))) (SIGNATURE |deleteRoutine!| ($ $ (|Symbol|))) (SIGNATURE |showTheRoutinesTable| ($)) (SIGNATURE |recoverAfterFail| ((|Union| (|String|) "failed") $ (|String|) (|Integer|))) (ATTRIBUTE |finiteAggregate|)))    has no  showScalarValues : Boolean -> Boolean 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RPOLCAT- 
   Warnings: 
      [1] mainCoefficients: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE coerce (S S)) (SIGNATURE gcd (S S S)) (SIGNATURE gcd (S (List S))) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE coerce ((Polynomial R) S)) (SIGNATURE convert ((Polynomial R) S)) (SIGNATURE convert ((String) S)) (SIGNATURE mainSquareFreePart (S S)) (SIGNATURE mainPrimitivePart (S S)) (SIGNATURE mainContent (S S)) (SIGNATURE primitivePart! (S S)) (SIGNATURE gcd (R R S)) (SIGNATURE exactQuotient! (S S S)) (SIGNATURE exactQuotient (S S S)) (SIGNATURE exactQuotient! (S S R)) (SIGNATURE exactQuotient (S S R)) (SIGNATURE primPartElseUnitCanonical! (S S)) (SIGNATURE primPartElseUnitCanonical (S S)) (SIGNATURE convert (S (Polynomial R))) (SIGNATURE retract (S (Polynomial R))) (SIGNATURE retractIfCan ((Union S failed) (Polynomial R))) (SIGNATURE convert (S (Polynomial (Integer)))) (SIGNATURE retract (S (Polynomial (Integer)))) (SIGNATURE retractIfCan ((Union S failed) (Polynomial (Integer)))) (SIGNATURE convert (S (Polynomial (Fraction (Integer))))) (SIGNATURE retract (S (Polynomial (Fraction (Integer))))) (SIGNATURE retractIfCan ((Union S failed) (Polynomial (Fraction (Integer))))) (SIGNATURE initiallyReduce (S S S)) (SIGNATURE headReduce (S S S)) (SIGNATURE lazyResidueClass ((Record (: polnum S) (: polden S) (: power (NonNegativeInteger))) S S)) (SIGNATURE monicModulo (S S S)) (SIGNATURE pseudoDivide ((Record (: quotient S) (: remainder S)) S S)) (SIGNATURE lazyPseudoDivide ((Record (: coef S) (: gap (NonNegativeInteger)) (: quotient S) (: remainder S)) S S V)) (SIGNATURE lazyPseudoDivide ((Record (: coef S) (: gap (NonNegativeInteger)) (: quotient S) (: remainder S)) S S)) (SIGNATURE lazyPremWithDefault ((Record (: coef S) (: gap (NonNegativeInteger)) (: remainder S)) S S V)) (SIGNATURE lazyPremWithDefault ((Record (: coef S) (: gap (NonNegativeInteger)) (: remainder S)) S S)) (SIGNATURE lazyPquo (S S S V)) (SIGNATURE lazyPrem (S S S V)) (SIGNATURE lazyPquo (S S S)) (SIGNATURE lazyPrem (S S S)) (SIGNATURE pquo (S S S V)) (SIGNATURE prem (S S S V)) (SIGNATURE pquo (S S S)) (SIGNATURE prem (S S S)) (SIGNATURE normalized? ((Boolean) S (List S))) (SIGNATURE normalized? ((Boolean) S S)) (SIGNATURE initiallyReduced? ((Boolean) S (List S))) (SIGNATURE initiallyReduced? ((Boolean) S S)) (SIGNATURE headReduced? ((Boolean) S (List S))) (SIGNATURE headReduced? ((Boolean) S S)) (SIGNATURE reduced? ((Boolean) S (List S))) (SIGNATURE reduced? ((Boolean) S S)) (SIGNATURE supRittWu? ((Boolean) S S)) (SIGNATURE infRittWu? ((Boolean) S S)) (SIGNATURE RittWuCompare ((Union (Boolean) failed) S S)) (SIGNATURE mainMonomials ((List S) S)) (SIGNATURE mainCoefficients ((List S) S)) (SIGNATURE leastMonomial (S S)) (SIGNATURE mainMonomial (S S)) (SIGNATURE quasiMonic? ((Boolean) S)) (SIGNATURE monic? ((Boolean) S)) (SIGNATURE reductum (S S V)) (SIGNATURE leadingCoefficient (S S V)) (SIGNATURE deepestInitial (S S)) (SIGNATURE iteratedInitials ((List S) S)) (SIGNATURE deepestTail (S S)) (SIGNATURE tail (S S)) (SIGNATURE head (S S)) (SIGNATURE init (S S)) (SIGNATURE mdeg ((NonNegativeInteger) S)) (SIGNATURE mvar (V S)) (SIGNATURE convert ((InputForm) S)) (SIGNATURE convert ((Pattern (Integer)) S)) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE retract (V S)) (SIGNATURE retractIfCan ((Union V failed) S)) (SIGNATURE coerce (S V)) (SIGNATURE leadingCoefficient (R S)) (SIGNATURE reductum (S S)) (SIGNATURE retract ((Integer) S)) (SIGNATURE retractIfCan ((Union (Integer) failed) S)) (SIGNATURE retract ((Fraction (Integer)) S)) (SIGNATURE retractIfCan ((Union (Fraction (Integer)) failed) S)) (SIGNATURE coerce (S R)) (SIGNATURE retractIfCan ((Union R failed) S)) (SIGNATURE retract (R S)) (SIGNATURE coerce (S (Integer))) (SIGNATURE coerce ((OutputForm) S)))
      [2] convert:  stpol has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RPOLCAT- 
Warning: RPOLCAT-;exactQuo has a duplicate definition in this file
Warning: RPOLCAT-;ZToR has a duplicate definition in this file
Warning: RPOLCAT-;PZToPR has a duplicate definition in this file

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RPOLCAT 
; (DEFUN |RecursivePolynomialCategory| ...) is being compiled.
;; The variable |RecursivePolynomialCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |RecursivePolynomialCategory;| ...) is being compiled.
;; The variable |RecursivePolynomialCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SAOS 
--->/research2/test0819/mnt/fedora5/../../src/algebra/SAOS.spad-->SingletonAsOrderedSet((create (%))): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/SAOS.spad-->SingletonAsOrderedSet((convert ((Symbol) %))): Not documented!!!!

--------------non extending category----------------------
.. SquareMatrix(#1,#2) of cat 
(|Join| (|SquareMatrixCategory| |#1| |#2| (|DirectProduct| |#1| |#2|) (|DirectProduct| |#1| |#2|)) (|CoercibleTo| (|Matrix| |#2|)) (CATEGORY |domain| (SIGNATURE |transpose| ($ $)) (SIGNATURE |squareMatrix| ($ (|Matrix| |#2|))) (SIGNATURE |coerce| ((|Matrix| |#2|) $)) (IF (|has| |#2| (ATTRIBUTE (|commutative| "*"))) (ATTRIBUTE |central|) |noBranch|) (IF (|has| |#2| (ATTRIBUTE (|commutative| "*"))) (IF (|has| |#2| (ATTRIBUTE |unitsKnown|)) (ATTRIBUTE |unitsKnown|) |noBranch|) |noBranch|) (IF (|has| |#2| (|ConvertibleTo| (|InputForm|))) (ATTRIBUTE (|ConvertibleTo| (|InputForm|))) |noBranch|)))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|MatrixCategory| |#2| (|Vector| |#2|) (|Vector| |#2|))    finalizing nrlib SQMATRIX 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SWITCH 
   Warnings: 
      [1]  NULL has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SYMS 
   Semantic Errors: 
      [1]  Domain is not a known type
      [2]  void is not a known type

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SYMTAB 
   Warnings: 
      [1] typeList:  fst has no value
      [2] typeList2:  fst has no value
      [3] newTypeLists:  fst has no value
      [4] oForm2:  S has no value
      [5] oForm2:  P has no value
      [6] oForm:  bounds has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SYSSOLP 
   Warnings: 
      [1] makeEq: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solve ((List (List (Equation (Fraction (Polynomial R))))) (List (Fraction (Polynomial R))) (List (Symbol)))) (SIGNATURE solve ((List (List (Equation (Fraction (Polynomial R))))) (List (Equation (Fraction (Polynomial R)))) (List (Symbol)))) (SIGNATURE solve ((List (List (Equation (Fraction (Polynomial R))))) (List (Fraction (Polynomial R))))) (SIGNATURE solve ((List (List (Equation (Fraction (Polynomial R))))) (List (Equation (Fraction (Polynomial R)))))) (SIGNATURE solve ((List (Equation (Fraction (Polynomial R)))) (Fraction (Polynomial R)) (Symbol))) (SIGNATURE solve ((List (Equation (Fraction (Polynomial R)))) (Equation (Fraction (Polynomial R))) (Symbol))) (SIGNATURE solve ((List (Equation (Fraction (Polynomial R)))) (Fraction (Polynomial R)))) (SIGNATURE solve ((List (Equation (Fraction (Polynomial R)))) (Equation (Fraction (Polynomial R))))) (SIGNATURE triangularSystems ((List (List (Polynomial R))) (List (Fraction (Polynomial R))) (List (Symbol)))))
      [2] triangularSystems: not known that (SIGNATURE variable ((Union $ failed) (Symbol))) is of mode (CATEGORY domain (SIGNATURE new ($)) (SIGNATURE new ($ $)) (SIGNATURE resetNew ((Void))) (SIGNATURE coerce ($ (String))) (SIGNATURE name ($ $)) (SIGNATURE scripted? ((Boolean) $)) (SIGNATURE scripts ((Record (: sub (List (OutputForm))) (: sup (List (OutputForm))) (: presup (List (OutputForm))) (: presub (List (OutputForm))) (: args (List (OutputForm)))) $)) (SIGNATURE script ($ $ (List (List (OutputForm))))) (SIGNATURE script ($ $ (Record (: sub (List (OutputForm))) (: sup (List (OutputForm))) (: presup (List (OutputForm))) (: presub (List (OutputForm))) (: args (List (OutputForm)))))) (SIGNATURE subscript ($ $ (List (OutputForm)))) (SIGNATURE superscript ($ $ (List (OutputForm)))) (SIGNATURE argscript ($ $ (List (OutputForm)))) (SIGNATURE elt ($ $ (List (OutputForm)))) (SIGNATURE string ((String) $)) (SIGNATURE list ((List $) $)) (SIGNATURE sample ($) constant))
      [3] triangularSystems: not known that (PolynomialCategory (Polynomial R) DP OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [4] triangularSystems: not known that (PolynomialCategory (Polynomial R) (DirectProduct (# lv) (NonNegativeInteger)) OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [5] triangularSystems: not known that (PolynomialCategory (Polynomial R) (DirectProduct (call LENGTH lv) (NonNegativeInteger)) OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SYSSOLP 
--->/research2/test0819/mnt/fedora5/../../src/algebra/SYSSOLP.spad-->SystemSolvePackage(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/SYSSOLP.spad-->SystemSolvePackage(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib UTSCAT- 
   Warnings: 
      [1] coerce:  l has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib UTSCAT 
; (DEFUN |UnivariateTaylorSeriesCategory| ...) is being compiled.
;; The variable |UnivariateTaylorSeriesCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |UnivariateTaylorSeriesCategory;| ...) is being compiled.
;; The variable |UnivariateTaylorSeriesCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib WFFINTBS 
   Warnings: 
      [1] listSquaredFactors:  ans has no value
      [2] iLocalIntegralBasis:  rbden has no value
      [3] integralBasis:  runningRbden has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ACFS- 
   Warnings: 
      [1] zeroOf: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE zerosOf ((List S) S (Symbol))) (SIGNATURE zeroOf (S S (Symbol))) (SIGNATURE zerosOf ((List S) S)) (SIGNATURE zeroOf (S S)) (SIGNATURE rootsOf ((List S) S (Symbol))) (SIGNATURE rootOf (S S (Symbol))) (SIGNATURE rootsOf ((List S) S)) (SIGNATURE rootOf (S S)) (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE zerosOf ((List S) (Polynomial S))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S))) (SIGNATURE zeroOf (S (Polynomial S))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE rootsOf ((List S) (Polynomial S))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S))) (SIGNATURE rootOf (S (Polynomial S))))
      [2] zeroOf: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE zerosOf ((List S) S (Symbol))) (SIGNATURE zeroOf (S S (Symbol))) (SIGNATURE zerosOf ((List S) S)) (SIGNATURE zeroOf (S S)) (SIGNATURE rootsOf ((List S) S (Symbol))) (SIGNATURE rootOf (S S (Symbol))) (SIGNATURE rootsOf ((List S) S)) (SIGNATURE rootOf (S S)) (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE zerosOf ((List S) (Polynomial S))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S))) (SIGNATURE zeroOf (S (Polynomial S))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE rootsOf ((List S) (Polynomial S))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S))) (SIGNATURE rootOf (S (Polynomial S))))
      [3] not known that (Ring) is of mode (CATEGORY domain (SIGNATURE zerosOf ((List S) S (Symbol))) (SIGNATURE zeroOf (S S (Symbol))) (SIGNATURE zerosOf ((List S) S)) (SIGNATURE zeroOf (S S)) (SIGNATURE rootsOf ((List S) S (Symbol))) (SIGNATURE rootOf (S S (Symbol))) (SIGNATURE rootsOf ((List S) S)) (SIGNATURE rootOf (S S)) (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zerosOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE zerosOf ((List S) (Polynomial S))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE zeroOf (S (SparseUnivariatePolynomial S))) (SIGNATURE zeroOf (S (Polynomial S))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootsOf ((List S) (SparseUnivariatePolynomial S))) (SIGNATURE rootsOf ((List S) (Polynomial S))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S) (Symbol))) (SIGNATURE rootOf (S (SparseUnivariatePolynomial S))) (SIGNATURE rootOf (S (Polynomial S))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ACFS 
; (DEFUN |AlgebraicallyClosedFunctionSpace| ...) is being compiled.
;; The variable |AlgebraicallyClosedFunctionSpace;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |AlgebraicallyClosedFunctionSpace;| ...) is being compiled.
;; The variable |AlgebraicallyClosedFunctionSpace;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib AF 
   Warnings: 
      [1] rootOf: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE rootOf (F (SparseUnivariatePolynomial F) (Symbol))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE inrootof (F (SparseUnivariatePolynomial F) F)) (SIGNATURE droot ((OutputForm) (List F))) (IF (has R (RetractableTo (Integer))) (PROGN (SIGNATURE ** (F F (Fraction (Integer)))) (SIGNATURE minPoly ((SparseUnivariatePolynomial F) (Kernel F))) (SIGNATURE definingPolynomial (F F)) (SIGNATURE iroot (F R (Integer)))) noBranch))
      [2] rootOf: not known that (Ring) is of mode (CATEGORY package (SIGNATURE rootOf (F (SparseUnivariatePolynomial F) (Symbol))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE inrootof (F (SparseUnivariatePolynomial F) F)) (SIGNATURE droot ((OutputForm) (List F))) (IF (has R (RetractableTo (Integer))) (PROGN (SIGNATURE ** (F F (Fraction (Integer)))) (SIGNATURE minPoly ((SparseUnivariatePolynomial F) (Kernel F))) (SIGNATURE definingPolynomial (F F)) (SIGNATURE iroot (F R (Integer)))) noBranch))
      [3] inrootof: not known that (Ring) is of mode (CATEGORY package (SIGNATURE rootOf (F (SparseUnivariatePolynomial F) (Symbol))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE inrootof (F (SparseUnivariatePolynomial F) F)) (SIGNATURE droot ((OutputForm) (List F))) (IF (has R (RetractableTo (Integer))) (PROGN (SIGNATURE ** (F F (Fraction (Integer)))) (SIGNATURE minPoly ((SparseUnivariatePolynomial F) (Kernel F))) (SIGNATURE definingPolynomial (F F)) (SIGNATURE iroot (F R (Integer)))) noBranch))
      [4] hackroot: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE iroot (F R (Integer))))
      [5] inroot0:  rn has no value
      [6] inroot0:  coef has no value
      [7] inroot0:  radicand has no value
      [8] inroot0:  exponent has no value
      [9] inroot0:  rd has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ALGFACT 
   Warnings: 
      [1] allk: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE factor ((Factored UP) UP (List (AlgebraicNumber)))) (SIGNATURE factor ((Factored UP) UP)) (SIGNATURE split ((Factored UP) UP)) (SIGNATURE doublyTransitive? ((Boolean) UP)))
      [2] extend: not known that (Ring) is of mode (CATEGORY package (SIGNATURE factor ((Factored UP) UP (List (AlgebraicNumber)))) (SIGNATURE factor ((Factored UP) UP)) (SIGNATURE split ((Factored UP) UP)) (SIGNATURE doublyTransitive? ((Boolean) UP)))
      [3] fact: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE factor ((Factored UP) UP (List (AlgebraicNumber)))) (SIGNATURE factor ((Factored UP) UP)) (SIGNATURE split ((Factored UP) UP)) (SIGNATURE doublyTransitive? ((Boolean) UP)))
      [4] fact: not known that (SIGNATURE coerce ($ (SparseMultivariatePolynomial (Integer) (Kernel (AlgebraicNumber))))) is of mode (CATEGORY domain (SIGNATURE coerce ($ (SparseMultivariatePolynomial (Integer) (Kernel $)))) (SIGNATURE numer ((SparseMultivariatePolynomial (Integer) (Kernel $)) $)) (SIGNATURE denom ((SparseMultivariatePolynomial (Integer) (Kernel $)) $)) (SIGNATURE reduce ($ $)) (SIGNATURE norm ((SparseUnivariatePolynomial $) (SparseUnivariatePolynomial $) (Kernel $))) (SIGNATURE norm ((SparseUnivariatePolynomial $) (SparseUnivariatePolynomial $) (List (Kernel $)))) (SIGNATURE norm ($ $ (Kernel $))) (SIGNATURE norm ($ $ (List (Kernel $)))))
      [5] fact: not known that (SIGNATURE numer ((SparseMultivariatePolynomial (Integer) (Kernel (AlgebraicNumber))) $)) is of mode (CATEGORY domain (SIGNATURE coerce ($ (SparseMultivariatePolynomial (Integer) (Kernel $)))) (SIGNATURE numer ((SparseMultivariatePolynomial (Integer) (Kernel $)) $)) (SIGNATURE denom ((SparseMultivariatePolynomial (Integer) (Kernel $)) $)) (SIGNATURE reduce ($ $)) (SIGNATURE norm ((SparseUnivariatePolynomial $) (SparseUnivariatePolynomial $) (Kernel $))) (SIGNATURE norm ((SparseUnivariatePolynomial $) (SparseUnivariatePolynomial $) (List (Kernel $)))) (SIGNATURE norm ($ $ (Kernel $))) (SIGNATURE norm ($ $ (List (Kernel $)))))
      [6] fact: not known that (SIGNATURE denom ((SparseMultivariatePolynomial (Integer) (Kernel (AlgebraicNumber))) $)) is of mode (CATEGORY domain (SIGNATURE coerce ($ (SparseMultivariatePolynomial (Integer) (Kernel $)))) (SIGNATURE numer ((SparseMultivariatePolynomial (Integer) (Kernel $)) $)) (SIGNATURE denom ((SparseMultivariatePolynomial (Integer) (Kernel $)) $)) (SIGNATURE reduce ($ $)) (SIGNATURE norm ((SparseUnivariatePolynomial $) (SparseUnivariatePolynomial $) (Kernel $))) (SIGNATURE norm ((SparseUnivariatePolynomial $) (SparseUnivariatePolynomial $) (List (Kernel $)))) (SIGNATURE norm ($ $ (Kernel $))) (SIGNATURE norm ($ $ (List (Kernel $)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ALGMANIP 
   Warnings: 
      [1] ratDenom: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE rootSplit (F F)) (SIGNATURE ratDenom (F F)) (SIGNATURE ratDenom (F F F)) (SIGNATURE ratDenom (F F (List F))) (SIGNATURE ratDenom (F F (List (Kernel F)))) (SIGNATURE ratPoly ((SparseUnivariatePolynomial F) F)) (IF (has R (OrderedSet)) (IF (has R (GcdDomain)) (IF (has R (RetractableTo (Integer))) (IF (has F (FunctionSpace R)) (PROGN (SIGNATURE rootPower (F F)) (SIGNATURE rootProduct (F F)) (SIGNATURE rootSimp (F F)) (SIGNATURE rootKerSimp (F (BasicOperator) F (NonNegativeInteger)))) noBranch) noBranch) noBranch) noBranch))
      [2] ratPoly: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE rootSplit (F F)) (SIGNATURE ratDenom (F F)) (SIGNATURE ratDenom (F F F)) (SIGNATURE ratDenom (F F (List F))) (SIGNATURE ratDenom (F F (List (Kernel F)))) (SIGNATURE ratPoly ((SparseUnivariatePolynomial F) F)) (IF (has R (OrderedSet)) (IF (has R (GcdDomain)) (IF (has R (RetractableTo (Integer))) (IF (has F (FunctionSpace R)) (PROGN (SIGNATURE rootPower (F F)) (SIGNATURE rootProduct (F F)) (SIGNATURE rootSimp (F F)) (SIGNATURE rootKerSimp (F (BasicOperator) F (NonNegativeInteger)))) noBranch) noBranch) noBranch) noBranch))
      [3] ratPoly: not known that (SIGNATURE coerce ($ (SparseMultivariatePolynomial R (Kernel F)))) is of mode (CATEGORY domain (SIGNATURE numer ((SparseMultivariatePolynomial R (Kernel $)) $)) (SIGNATURE denom ((SparseMultivariatePolynomial R (Kernel $)) $)) (SIGNATURE coerce ($ (SparseMultivariatePolynomial R (Kernel $)))))
      [4] ratPoly: not known that (SIGNATURE numer ((SparseMultivariatePolynomial R (Kernel F)) $)) is of mode (CATEGORY domain (SIGNATURE numer ((SparseMultivariatePolynomial R (Kernel $)) $)) (SIGNATURE denom ((SparseMultivariatePolynomial R (Kernel $)) $)) (SIGNATURE coerce ($ (SparseMultivariatePolynomial R (Kernel $)))))
      [5] ratPoly: not known that (SIGNATURE denom ((SparseMultivariatePolynomial R (Kernel F)) $)) is of mode (CATEGORY domain (SIGNATURE numer ((SparseMultivariatePolynomial R (Kernel $)) $)) (SIGNATURE denom ((SparseMultivariatePolynomial R (Kernel $)) $)) (SIGNATURE coerce ($ (SparseMultivariatePolynomial R (Kernel $)))))
      [6] innerRF: not known that (Ring) is of mode (CATEGORY package (SIGNATURE rootSplit (F F)) (SIGNATURE ratDenom (F F)) (SIGNATURE ratDenom (F F F)) (SIGNATURE ratDenom (F F (List F))) (SIGNATURE ratDenom (F F (List (Kernel F)))) (SIGNATURE ratPoly ((SparseUnivariatePolynomial F) F)) (IF (has R (OrderedSet)) (IF (has R (GcdDomain)) (IF (has R (RetractableTo (Integer))) (IF (has F (FunctionSpace R)) (PROGN (SIGNATURE rootPower (F F)) (SIGNATURE rootProduct (F F)) (SIGNATURE rootSimp (F F)) (SIGNATURE rootKerSimp (F (BasicOperator) F (NonNegativeInteger)))) noBranch) noBranch) noBranch) noBranch))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ALGSC 
   Warnings: 
      [1] elt: :Rep -- should replace by pretend
      [2] coerce:  le has no value

--------------non extending category----------------------
.. AlgebraGivenByStructuralConstants(#1,#2,#3,#4) of cat 
(|Join| (|FramedNonAssociativeAlgebra| |#1|) (|LeftModule| (|SquareMatrix| |#2| |#1|)) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|Vector| |#1|)))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|DirectProductCategory| |#2| |#1|)    finalizing nrlib ALGSC 

(|RealConstant|)    extends 
(|ConvertibleTo| (|DoubleFloat|))    but not 
(|ConvertibleTo| (|Complex| (|Float|))) --------------non extending category----------------------
.. AlgebraicNumber of cat 
(|Join| (|ExpressionSpace|) (|AlgebraicallyClosedField|) (|RetractableTo| (|Integer|)) (|RetractableTo| (|Fraction| (|Integer|))) (|LinearlyExplicitRingOver| (|Integer|)) (|RealConstant|) (|LinearlyExplicitRingOver| (|Fraction| (|Integer|))) (|CharacteristicZero|) (|ConvertibleTo| (|Complex| (|Float|))) (|DifferentialRing|) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)))) (SIGNATURE |numer| ((|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)) $)) (SIGNATURE |denom| ((|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)) $)) (SIGNATURE |reduce| ($ $)) (SIGNATURE |norm| ((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $) (|Kernel| $))) (SIGNATURE |norm| ((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $) (|List| (|Kernel| $)))) (SIGNATURE |norm| ($ $ (|Kernel| $))) (SIGNATURE |norm| ($ $ (|List| (|Kernel| $))))))    has no  trueEqual : (%,%) -> Boolean 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib AN 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib APPRULE 
   Warnings: 
      [1] splitRules: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE applyRules (F (List (RewriteRule Base R F)) F)) (SIGNATURE applyRules (F (List (RewriteRule Base R F)) F (PositiveInteger))) (SIGNATURE localUnquote (F F (List (Symbol)))))
      [2] rewrite: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE applyRules (F (List (RewriteRule Base R F)) F)) (SIGNATURE applyRules (F (List (RewriteRule Base R F)) F (PositiveInteger))) (SIGNATURE localUnquote (F F (List (Symbol)))))
      [3] isitwithpred: not known that (SetCategory) is of mode (CATEGORY package (SIGNATURE applyRules (F (List (RewriteRule Base R F)) F)) (SIGNATURE applyRules (F (List (RewriteRule Base R F)) F (PositiveInteger))) (SIGNATURE localUnquote (F F (List (Symbol)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP19 
   Warnings: 
      [1]  M has no value
      [2]  N has no value
      [3]  LJC has no value
      [4]  XC has no value
      [5]  FVECC has no value
      [6]  FJACC has no value
      [7] localAssign1: not known that (FiniteLinearAggregate (FortranExpression (construct) (construct (QUOTE XC)) (MachineFloat))) is of mode (CATEGORY domain (SIGNATURE vector ($ (List (FortranExpression  (LIST (QUOTE XC)) (MachineFloat))))))
      [8] coerce:  FJACC has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP20 
   Warnings: 
      [1]  N has no value
      [2]  NROWH has no value
      [3]  NCOLH has no value
      [4]  JTHCOL has no value
      [5]  HESS has no value
      [6]  X has no value
      [7]  HX has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP30 
   Semantic Errors: 
      [1] coerce:  code is BOTH a variable and a literal
 
   Warnings: 
      [1]  MODE has no value
      [2]  M has no value
      [3]  N has no value
      [4]  LRWORK has no value
      [5]  LIWORK has no value
      [6]  X has no value
      [7]  Y has no value
      [8]  RWORK has no value
      [9]  IWORK has no value
      [10]  IFAIL has no value
      [11] coerce:  A has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP31 
   Semantic Errors: 
      [1] coerce:  code is BOTH a variable and a literal
 
   Warnings: 
      [1]  X has no value
      [2]  Y has no value
      [3] localAssign: not known that (FiniteLinearAggregate (FortranExpression (construct (QUOTE X)) (construct (QUOTE Y)) (MachineFloat))) is of mode (CATEGORY domain (SIGNATURE vector ($ (List (FortranExpression (LIST (QUOTE X)) (LIST (QUOTE Y)) (MachineFloat))))))
      [4] coerce:  PW has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP35 
   Warnings: 
      [1]  N has no value
      [2]  X has no value
      [3]  FVEC has no value
      [4]  LDFJAC has no value
      [5]  FJAC has no value
      [6]  IFLAG has no value
      [7] localAssign1: not known that (FiniteLinearAggregate (FortranExpression (construct) (construct (QUOTE X)) (MachineFloat))) is of mode (CATEGORY domain (SIGNATURE vector ($ (List (FortranExpression  (LIST (QUOTE X)) (MachineFloat))))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP41 
   Warnings: 
      [1]  N has no value
      [2]  X has no value
      [3]  EPS has no value
      [4]  Y has no value
      [5]  F has no value
      [6] localAssign1: not known that (FiniteLinearAggregate (FortranExpression (construct (QUOTE X) (QUOTE EPS)) (construct (QUOTE Y)) (MachineFloat))) is of mode (CATEGORY domain (SIGNATURE vector ($ (List (FortranExpression (LIST (QUOTE X) (QUOTE EPS)) (LIST (QUOTE Y)) (MachineFloat))))))
      [7] makeCodeThree:  EPS has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP42 
   Warnings: 
      [1]  EPS has no value
      [2]  N has no value
      [3]  YA has no value
      [4]  YB has no value
      [5]  BC has no value
      [6]  AJ has no value
      [7]  BJ has no value
      [8]  BCEP has no value
      [9] localAssign1: not known that (FiniteLinearAggregate (FortranExpression (construct (QUOTE EPS)) (construct (QUOTE YA) (QUOTE YB)) (MachineFloat))) is of mode (CATEGORY domain (SIGNATURE vector ($ (List (FortranExpression (LIST (QUOTE EPS)) (LIST (QUOTE YA) (QUOTE YB)) (MachineFloat))))))
      [10] makeCodeThree:  EPS has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP74 
   Warnings: 
      [1]  X has no value
      [2]  Y has no value
      [3]  A has no value
      [4]  B has no value
      [5]  C has no value
      [6]  IBND has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP77 
   Warnings: 
      [1]  X has no value
      [2] localAssign: not known that (FiniteLinearAggregate (FortranExpression (construct (QUOTE X)) (construct) (MachineFloat))) is of mode (CATEGORY domain (SIGNATURE vector ($ (List (FortranExpression (LIST (QUOTE X))  (MachineFloat))))))
      [3] coerce:  F has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP80 
   Warnings: 
      [1]  XL has no value
      [2]  XR has no value
      [3]  ELAM has no value
      [4]  YL has no value
      [5]  YR has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CINTSLPE 
   Warnings: 
      [1] solveLinearPolynomialEquation:  slpePrime has no value
      [2] solveLinearPolynomialEquation:  oldtable has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib COMPFACT 
   Warnings: 
      [1] conv:  pris has no value
      [2] conv:  dris has no value
      [3] backConv:  fctr has no value
      [4] backConv:  xpnt has no value
      [5] backConv:  flg has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib COMPLEX 
   Warnings: 
      [1] OMwrite: pretend(String) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CMPLXRT 
--->/research2/test0819/mnt/fedora5/../../src/algebra/CMPLXRT.spad-->ComplexRootPackage(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/CMPLXRT.spad-->ComplexRootPackage(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CPMATCH 
   Warnings: 
      [1] patternMatch: not known that (SetCategory) is of mode (CATEGORY $ (SIGNATURE patternMatch ((PatternMatchResult R CS) CS (Pattern R) (PatternMatchResult R CS))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CRFP 
   Warnings: 
      [1] pleskenSplit:  split has no value
      [2] startPolynomial:  centerIsRoot has no value
      [3] startPolynomial:  fp has no value
      [4] factor:  result has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CTRIGMNP 
   Warnings: 
      [1] complexForm: not known that (RadicalCategory) is of mode (CATEGORY domain (IF (has R (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace R)) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has R (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has R (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [2] complexForm: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has R (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace R)) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has R (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has R (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))
      [3] real?: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE complexNormalize (F F)) (SIGNATURE complexNormalize (F F (Symbol))) (SIGNATURE complexElementary (F F)) (SIGNATURE complexElementary (F F (Symbol))) (SIGNATURE real ((Expression R) F)) (SIGNATURE imag ((Expression R) F)) (SIGNATURE real? ((Boolean) F)) (SIGNATURE trigs (F F)) (SIGNATURE complexForm ((Complex (Expression R)) F)))
      [4] complexElementary: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE complexNormalize (F F)) (SIGNATURE complexNormalize (F F (Symbol))) (SIGNATURE complexElementary (F F)) (SIGNATURE complexElementary (F F (Symbol))) (SIGNATURE real ((Expression R) F)) (SIGNATURE imag ((Expression R) F)) (SIGNATURE real? ((Boolean) F)) (SIGNATURE trigs (F F)) (SIGNATURE complexForm ((Complex (Expression R)) F)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib D01WGTS 
   Warnings: 
      [1] exprIsLogarithmicWeight: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exprHasWeightCosWXorSinWX ((Union (Record (: op (BasicOperator)) (: w (DoubleFloat))) failed) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))) (SIGNATURE exprHasAlgebraicWeight ((Union (List (DoubleFloat)) failed) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))) (SIGNATURE exprHasLogarithmicWeights ((Integer) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))))
      [2] functionIsQuotient: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exprHasWeightCosWXorSinWX ((Union (Record (: op (BasicOperator)) (: w (DoubleFloat))) failed) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))) (SIGNATURE exprHasAlgebraicWeight ((Union (List (DoubleFloat)) failed) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))) (SIGNATURE exprHasLogarithmicWeights ((Integer) (Record (: var (Symbol)) (: fn (Expression (DoubleFloat))) (: range (Segment (OrderedCompletion (DoubleFloat)))) (: abserr (DoubleFloat)) (: relerr (DoubleFloat))))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib D02AGNT 
   Warnings: 
      [1] stiffnessAndStabilityFactor:  b has no value
      [2] stiffnessAndStabilityFactor:  e has no value
      [3] stiffnessAndStabilityOfODE:  Y has no value

--------------non extending category----------------------
.. d03eefAnnaType of cat 
(|PartialDifferentialEquationsSolverCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D03EEFA 

--------------non extending category----------------------
.. DeRhamComplex(#1,#2) of cat 
(|Join| (|LeftAlgebra| (|Expression| |#1|)) (|RetractableTo| (|Expression| |#1|)) (CATEGORY |domain| (SIGNATURE |leadingCoefficient| ((|Expression| |#1|) $)) (SIGNATURE |leadingBasisTerm| ($ $)) (SIGNATURE |reductum| ($ $)) (SIGNATURE |coefficient| ((|Expression| |#1|) $ $)) (SIGNATURE |generator| ($ (|NonNegativeInteger|))) (SIGNATURE |homogeneous?| ((|Boolean|) $)) (SIGNATURE |retractable?| ((|Boolean|) $)) (SIGNATURE |degree| ((|Integer|) $)) (SIGNATURE |map| ($ (|Mapping| (|Expression| |#1|) (|Expression| |#1|)) $)) (SIGNATURE |totalDifferential| ($ (|Expression| |#1|))) (SIGNATURE |exteriorDifferential| ($ $))))    has no  exp : List Integer -> % 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DERHAM 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DRAWCURV 
   Warnings: 
      [1] draw:  xRangeFloat has no value
      [2] draw:  yRangeFloat has no value
      [3] draw:  floatRanges has no value

--------------non extending category----------------------
.. e04nafAnnaType of cat 
(|NumericalOptimizationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib E04NAFA 

--------------non extending category----------------------
.. e04ucfAnnaType of cat 
(|NumericalOptimizationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib E04UCFA 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib EF 
   Warnings: 
      [1] pi:  Pie has no value
      [2] iisqrt1:  isqrt1 has no value
      [3] iisqrt2:  isqrt2 has no value
      [4] iisqrt3:  isqrt3 has no value
      [5] kernel: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exp (F F)) (SIGNATURE log (F F)) (SIGNATURE sin (F F)) (SIGNATURE cos (F F)) (SIGNATURE tan (F F)) (SIGNATURE cot (F F)) (SIGNATURE sec (F F)) (SIGNATURE csc (F F)) (SIGNATURE asin (F F)) (SIGNATURE acos (F F)) (SIGNATURE atan (F F)) (SIGNATURE acot (F F)) (SIGNATURE asec (F F)) (SIGNATURE acsc (F F)) (SIGNATURE sinh (F F)) (SIGNATURE cosh (F F)) (SIGNATURE tanh (F F)) (SIGNATURE coth (F F)) (SIGNATURE sech (F F)) (SIGNATURE csch (F F)) (SIGNATURE asinh (F F)) (SIGNATURE acosh (F F)) (SIGNATURE atanh (F F)) (SIGNATURE acoth (F F)) (SIGNATURE asech (F F)) (SIGNATURE acsch (F F)) (SIGNATURE pi (F)) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE iisqrt2 (F)) (SIGNATURE iisqrt3 (F)) (SIGNATURE iiexp (F F)) (SIGNATURE iilog (F F)) (SIGNATURE iisin (F F)) (SIGNATURE iicos (F F)) (SIGNATURE iitan (F F)) (SIGNATURE iicot (F F)) (SIGNATURE iisec (F F)) (SIGNATURE iicsc (F F)) (SIGNATURE iiasin (F F)) (SIGNATURE iiacos (F F)) (SIGNATURE iiatan (F F)) (SIGNATURE iiacot (F F)) (SIGNATURE iiasec (F F)) (SIGNATURE iiacsc (F F)) (SIGNATURE iisinh (F F)) (SIGNATURE iicosh (F F)) (SIGNATURE iitanh (F F)) (SIGNATURE iicoth (F F)) (SIGNATURE iisech (F F)) (SIGNATURE iicsch (F F)) (SIGNATURE iiasinh (F F)) (SIGNATURE iiacosh (F F)) (SIGNATURE iiatanh (F F)) (SIGNATURE iiacoth (F F)) (SIGNATURE iiasech (F F)) (SIGNATURE iiacsch (F F)) (SIGNATURE specialTrigs ((Union F failed) F (List (Record (: func F) (: pole (Boolean)))))) (SIGNATURE localReal? ((Boolean) F)))
      [6] ilog: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exp (F F)) (SIGNATURE log (F F)) (SIGNATURE sin (F F)) (SIGNATURE cos (F F)) (SIGNATURE tan (F F)) (SIGNATURE cot (F F)) (SIGNATURE sec (F F)) (SIGNATURE csc (F F)) (SIGNATURE asin (F F)) (SIGNATURE acos (F F)) (SIGNATURE atan (F F)) (SIGNATURE acot (F F)) (SIGNATURE asec (F F)) (SIGNATURE acsc (F F)) (SIGNATURE sinh (F F)) (SIGNATURE cosh (F F)) (SIGNATURE tanh (F F)) (SIGNATURE coth (F F)) (SIGNATURE sech (F F)) (SIGNATURE csch (F F)) (SIGNATURE asinh (F F)) (SIGNATURE acosh (F F)) (SIGNATURE atanh (F F)) (SIGNATURE acoth (F F)) (SIGNATURE asech (F F)) (SIGNATURE acsch (F F)) (SIGNATURE pi (F)) (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE iisqrt2 (F)) (SIGNATURE iisqrt3 (F)) (SIGNATURE iiexp (F F)) (SIGNATURE iilog (F F)) (SIGNATURE iisin (F F)) (SIGNATURE iicos (F F)) (SIGNATURE iitan (F F)) (SIGNATURE iicot (F F)) (SIGNATURE iisec (F F)) (SIGNATURE iicsc (F F)) (SIGNATURE iiasin (F F)) (SIGNATURE iiacos (F F)) (SIGNATURE iiatan (F F)) (SIGNATURE iiacot (F F)) (SIGNATURE iiasec (F F)) (SIGNATURE iiacsc (F F)) (SIGNATURE iisinh (F F)) (SIGNATURE iicosh (F F)) (SIGNATURE iitanh (F F)) (SIGNATURE iicoth (F F)) (SIGNATURE iisech (F F)) (SIGNATURE iicsch (F F)) (SIGNATURE iiasinh (F F)) (SIGNATURE iiacosh (F F)) (SIGNATURE iiatanh (F F)) (SIGNATURE iiacoth (F F)) (SIGNATURE iiasech (F F)) (SIGNATURE iiacsch (F F)) (SIGNATURE specialTrigs ((Union F failed) F (List (Record (: func F) (: pole (Boolean)))))) (SIGNATURE localReal? ((Boolean) F)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib EFSTRUC 
   Warnings: 
      [1] realElem: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE normalize (F F)) (SIGNATURE normalize (F F (Symbol))) (SIGNATURE rischNormalize ((Record (: func F) (: kers (List (Kernel F))) (: vals (List F))) F (Symbol))) (SIGNATURE realElementary (F F)) (SIGNATURE realElementary (F F (Symbol))) (SIGNATURE validExponential ((Union F failed) (List (Kernel F)) F (Symbol))) (SIGNATURE rootNormalize (F F (Kernel F))) (SIGNATURE tanQ (F (Fraction (Integer)) F)))
      [2] rtNormalize:  func has no value
      [3] tanQ: not known that (Ring) is of mode (CATEGORY package (SIGNATURE normalize (F F)) (SIGNATURE normalize (F F (Symbol))) (SIGNATURE rischNormalize ((Record (: func F) (: kers (List (Kernel F))) (: vals (List F))) F (Symbol))) (SIGNATURE realElementary (F F)) (SIGNATURE realElementary (F F (Symbol))) (SIGNATURE validExponential ((Union F failed) (List (Kernel F)) F (Symbol))) (SIGNATURE rootNormalize (F F (Kernel F))) (SIGNATURE tanQ (F (Fraction (Integer)) F)))
      [4] rootNormalize0: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE normalize (F F)) (SIGNATURE normalize (F F (Symbol))) (SIGNATURE rischNormalize ((Record (: func F) (: kers (List (Kernel F))) (: vals (List F))) F (Symbol))) (SIGNATURE realElementary (F F)) (SIGNATURE realElementary (F F (Symbol))) (SIGNATURE validExponential ((Union F failed) (List (Kernel F)) F (Symbol))) (SIGNATURE rootNormalize (F F (Kernel F))) (SIGNATURE tanQ (F (Fraction (Integer)) F)))
      [5] ktoY: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE normalize (F F)) (SIGNATURE normalize (F F (Symbol))) (SIGNATURE rischNormalize ((Record (: func F) (: kers (List (Kernel F))) (: vals (List F))) F (Symbol))) (SIGNATURE realElementary (F F)) (SIGNATURE realElementary (F F (Symbol))) (SIGNATURE validExponential ((Union F failed) (List (Kernel F)) F (Symbol))) (SIGNATURE rootNormalize (F F (Kernel F))) (SIGNATURE tanQ (F (Fraction (Integer)) F)))
      [6] k2Elem:  ez has no value
      [7] k2Elem:  iez has no value
      [8] k2Elem:  tz2 has no value
      [9] tannosimp:  den has no value
      [10] tannosimp:  num has no value
      [11] expnosimp:  den has no value
      [12] expnosimp:  num has no value
      [13] rischNormalize:  vec has no value
      [14] rootKernelNormalize:  vec has no value
      [15] validExponential:  IN has no value
      [16] validExponential:  g has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ESTOOLS 
   Warnings: 
      [1] isQuotient: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE f2df ((DoubleFloat) (Float))) (SIGNATURE ef2edf ((Expression (DoubleFloat)) (Expression (Float)))) (SIGNATURE ocf2ocdf ((OrderedCompletion (DoubleFloat)) (OrderedCompletion (Float)))) (SIGNATURE socf2socdf ((Segment (OrderedCompletion (DoubleFloat))) (Segment (OrderedCompletion (Float))))) (SIGNATURE convert ((List (Segment (OrderedCompletion (DoubleFloat)))) (List (Segment (OrderedCompletion (Float)))))) (SIGNATURE df2fi ((Fraction (Integer)) (DoubleFloat))) (SIGNATURE edf2fi ((Fraction (Integer)) (Expression (DoubleFloat)))) (SIGNATURE edf2df ((DoubleFloat) (Expression (DoubleFloat)))) (SIGNATURE isQuotient ((Union (Expression (DoubleFloat)) failed) (Expression (DoubleFloat)))) (SIGNATURE expenseOfEvaluation ((Float) (Vector (Expression (DoubleFloat))))) (SIGNATURE numberOfOperations ((Record (: additions (Integer)) (: multiplications (Integer)) (: exponentiations (Integer)) (: functionCalls (Integer))) (Vector (Expression (DoubleFloat))))) (SIGNATURE edf2efi ((Expression (Fraction (Integer))) (Expression (DoubleFloat)))) (SIGNATURE dfRange ((Segment (OrderedCompletion (DoubleFloat))) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE dflist ((List (DoubleFloat)) (List (Record (: left (Fraction (Integer))) (: right (Fraction (Integer))))))) (SIGNATURE df2mf ((MachineFloat) (DoubleFloat))) (SIGNATURE ldf2vmf ((Vector (MachineFloat)) (List (DoubleFloat)))) (SIGNATURE edf2ef ((Expression (Float)) (Expression (DoubleFloat)))) (SIGNATURE vedf2vef ((Vector (Expression (Float))) (Vector (Expression (DoubleFloat))))) (SIGNATURE in? ((Boolean) (DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE df2st ((String) (DoubleFloat))) (SIGNATURE f2st ((String) (Float))) (SIGNATURE ldf2lst ((List (String)) (List (DoubleFloat)))) (SIGNATURE sdf2lst ((List (String)) (Stream (DoubleFloat)))) (SIGNATURE getlo ((DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE gethi ((DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE concat ((Result) (Result) (Result))) (SIGNATURE concat ((Result) (List (Result)))) (SIGNATURE outputMeasure ((String) (Float))) (SIGNATURE measure2Result ((Result) (Record (: measure (Float)) (: name (String)) (: explanations (List (String)))))) (SIGNATURE measure2Result ((Result) (Record (: measure (Float)) (: name (String)) (: explanations (List (String))) (: extra (Result))))) (SIGNATURE att2Result ((Result) (Record (: endPointContinuity (Union (: continuous Continuous at the end points) (: lowerSingular There is a singularity at the lower end point) (: upperSingular There is a singularity at the upper end point) (: bothSingular There are singularities at both end points) (: notEvaluated End point continuity not yet evaluated))) (: singularitiesStream (Union (: str (Stream (DoubleFloat))) (: notEvaluated Internal singularities not yet evaluated))) (: range (Union (: finite The range is finite) (: lowerInfinite The bottom of range is infinite) (: upperInfinite The top of range is infinite) (: bothInfinite Both top and bottom points are infinite) (: notEvaluated Range not yet evaluated)))))) (SIGNATURE iflist2Result ((Result) (Record (: stiffness (Float)) (: stability (Float)) (: expense (Float)) (: accuracy (Float)) (: intermediateResults (Float))))) (SIGNATURE pdf2ef ((Expression (Float)) (Polynomial (DoubleFloat)))) (SIGNATURE pdf2df ((DoubleFloat) (Polynomial (DoubleFloat)))) (SIGNATURE df2ef ((Expression (Float)) (DoubleFloat))) (SIGNATURE fi2df ((DoubleFloat) (Fraction (Integer)))) (SIGNATURE mat ((Matrix (DoubleFloat)) (List (DoubleFloat)) (NonNegativeInteger))))
      [2] numberOfOperations1: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE f2df ((DoubleFloat) (Float))) (SIGNATURE ef2edf ((Expression (DoubleFloat)) (Expression (Float)))) (SIGNATURE ocf2ocdf ((OrderedCompletion (DoubleFloat)) (OrderedCompletion (Float)))) (SIGNATURE socf2socdf ((Segment (OrderedCompletion (DoubleFloat))) (Segment (OrderedCompletion (Float))))) (SIGNATURE convert ((List (Segment (OrderedCompletion (DoubleFloat)))) (List (Segment (OrderedCompletion (Float)))))) (SIGNATURE df2fi ((Fraction (Integer)) (DoubleFloat))) (SIGNATURE edf2fi ((Fraction (Integer)) (Expression (DoubleFloat)))) (SIGNATURE edf2df ((DoubleFloat) (Expression (DoubleFloat)))) (SIGNATURE isQuotient ((Union (Expression (DoubleFloat)) failed) (Expression (DoubleFloat)))) (SIGNATURE expenseOfEvaluation ((Float) (Vector (Expression (DoubleFloat))))) (SIGNATURE numberOfOperations ((Record (: additions (Integer)) (: multiplications (Integer)) (: exponentiations (Integer)) (: functionCalls (Integer))) (Vector (Expression (DoubleFloat))))) (SIGNATURE edf2efi ((Expression (Fraction (Integer))) (Expression (DoubleFloat)))) (SIGNATURE dfRange ((Segment (OrderedCompletion (DoubleFloat))) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE dflist ((List (DoubleFloat)) (List (Record (: left (Fraction (Integer))) (: right (Fraction (Integer))))))) (SIGNATURE df2mf ((MachineFloat) (DoubleFloat))) (SIGNATURE ldf2vmf ((Vector (MachineFloat)) (List (DoubleFloat)))) (SIGNATURE edf2ef ((Expression (Float)) (Expression (DoubleFloat)))) (SIGNATURE vedf2vef ((Vector (Expression (Float))) (Vector (Expression (DoubleFloat))))) (SIGNATURE in? ((Boolean) (DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE df2st ((String) (DoubleFloat))) (SIGNATURE f2st ((String) (Float))) (SIGNATURE ldf2lst ((List (String)) (List (DoubleFloat)))) (SIGNATURE sdf2lst ((List (String)) (Stream (DoubleFloat)))) (SIGNATURE getlo ((DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE gethi ((DoubleFloat) (Segment (OrderedCompletion (DoubleFloat))))) (SIGNATURE concat ((Result) (Result) (Result))) (SIGNATURE concat ((Result) (List (Result)))) (SIGNATURE outputMeasure ((String) (Float))) (SIGNATURE measure2Result ((Result) (Record (: measure (Float)) (: name (String)) (: explanations (List (String)))))) (SIGNATURE measure2Result ((Result) (Record (: measure (Float)) (: name (String)) (: explanations (List (String))) (: extra (Result))))) (SIGNATURE att2Result ((Result) (Record (: endPointContinuity (Union (: continuous Continuous at the end points) (: lowerSingular There is a singularity at the lower end point) (: upperSingular There is a singularity at the upper end point) (: bothSingular There are singularities at both end points) (: notEvaluated End point continuity not yet evaluated))) (: singularitiesStream (Union (: str (Stream (DoubleFloat))) (: notEvaluated Internal singularities not yet evaluated))) (: range (Union (: finite The range is finite) (: lowerInfinite The bottom of range is infinite) (: upperInfinite The top of range is infinite) (: bothInfinite Both top and bottom points are infinite) (: notEvaluated Range not yet evaluated)))))) (SIGNATURE iflist2Result ((Result) (Record (: stiffness (Float)) (: stability (Float)) (: expense (Float)) (: accuracy (Float)) (: intermediateResults (Float))))) (SIGNATURE pdf2ef ((Expression (Float)) (Polynomial (DoubleFloat)))) (SIGNATURE pdf2df ((DoubleFloat) (Polynomial (DoubleFloat)))) (SIGNATURE df2ef ((Expression (Float)) (DoubleFloat))) (SIGNATURE fi2df ((DoubleFloat) (Fraction (Integer)))) (SIGNATURE mat ((Matrix (DoubleFloat)) (List (DoubleFloat)) (NonNegativeInteger))))

--------------non extending category----------------------
.. ExponentialExpansion(#1,#2,#3,#4) of cat 
(|Join| (|QuotientFieldCategory| (|UnivariatePuiseuxSeriesWithExponentialSingularity| |#1| |#2| |#3| |#4|)) (|RetractableTo| (|UnivariatePuiseuxSeries| |#2| |#3| |#4|)) (CATEGORY |domain| (SIGNATURE |limitPlus| ((|Union| (|OrderedCompletion| |#2|) "failed") $)) (SIGNATURE |coerce| ($ (|UnivariatePuiseuxSeries| |#2| |#3| |#4|)))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(IF (|has| (|UnivariatePuiseuxSeriesWithExponentialSingularity| |#1| |#2| |#3| |#4|) (|IntegerNumberSystem|)) (IF (|has| (|UnivariatePuiseuxSeriesWithExponentialSingularity| |#1| |#2| |#3| |#4|) (|OpenMath|)) (ATTRIBUTE (|OpenMath|)) |noBranch|) |noBranch|)    finalizing nrlib EXPEXPAN 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib EXPRODE 
   Warnings: 
      [1] diffRhs: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (List F))))
      [2] k2exquo:  IN has no value
      [3] k2exquo:  f has no value
      [4] div2exquo: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (List F))))
      [5] diffRhsK: not known that (Ring) is of mode (CATEGORY package (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (List F))))
      [6] findEq: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (List (Equation F)) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List F))) (SIGNATURE seriesSolve ((Any) (List F) (List (BasicOperator)) (Equation F) (List (Equation F)))) (SIGNATURE seriesSolve ((Any) (Equation F) (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) F)) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (Equation F))) (SIGNATURE seriesSolve ((Any) F (BasicOperator) (Equation F) (List F))))
      [7] seriesSolve:  IN has no value
      [8] seriesSolve:  deq has no value
      [9] seriesSolve:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FC 
   Semantic Errors: 
      [1] common:  name is BOTH a variable and a literal
      [2] common:  contents is BOTH a variable and a literal
      [3] forLoop:  body is BOTH a variable and a literal
 
   Warnings: 
      [1] getElseIf:  conditionalBranch has no value
      [2] getCode:  assignmentBranch has no value
      [3] getCode:  arrayAssignmentBranch has no value
      [4] getCode:  conditionalBranch has no value
      [5] getCode:  returnBranch has no value
      [6] getCode:  blockBranch has no value
      [7] getCode:  commentBranch has no value
      [8] getCode:  callBranch has no value
      [9] getCode:  forBranch has no value
      [10] getCode:  labelBranch has no value
      [11] getCode:  loopBranch has no value
      [12] getCode:  printBranch has no value
      [13] getCode:  commonBranch has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FC 
; (DEFUN |FC;getContinue| ...) is being compiled.
;; The variable |$fortIndent| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FDIVCAT 
; (DEFUN |FiniteDivisorCategory| ...) is being compiled.
;; The variable |FiniteDivisorCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |FiniteDivisorCategory;| ...) is being compiled.
;; The variable |FiniteDivisorCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FSRED 
   Warnings: 
      [1] bringDown: not known that (Ring) is of mode (CATEGORY package (SIGNATURE bringDown ((Fraction (Integer)) F)) (SIGNATURE bringDown ((SparseUnivariatePolynomial (Fraction (Integer))) F (Kernel F))) (SIGNATURE newReduc ((Void))))
      [2] bringDown: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE bringDown ((Fraction (Integer)) F)) (SIGNATURE bringDown ((SparseUnivariatePolynomial (Fraction (Integer))) F (Kernel F))) (SIGNATURE newReduc ((Void))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FSUPFACT 
   Warnings: 
      [1] anfactor:  overq has no value
      [2] anfactor:  overan has no value
      [3] ffactor0: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE ffactor ((Factored UP) UP)) (SIGNATURE qfactor ((Union (Factored (SparseUnivariatePolynomial (Fraction (Integer)))) failed) UP)) (SIGNATURE UP2ifCan ((Union (: overq (SparseUnivariatePolynomial (Fraction (Integer)))) (: overan (SparseUnivariatePolynomial (AlgebraicNumber))) (: failed (Boolean))) UP)) (IF (has F (RetractableTo (AlgebraicNumber))) (SIGNATURE anfactor ((Union (Factored (SparseUnivariatePolynomial (AlgebraicNumber))) failed) UP)) noBranch))
      [4] ffactor0: not known that (Ring) is of mode (CATEGORY package (SIGNATURE ffactor ((Factored UP) UP)) (SIGNATURE qfactor ((Union (Factored (SparseUnivariatePolynomial (Fraction (Integer)))) failed) UP)) (SIGNATURE UP2ifCan ((Union (: overq (SparseUnivariatePolynomial (Fraction (Integer)))) (: overan (SparseUnivariatePolynomial (AlgebraicNumber))) (: failed (Boolean))) UP)) (IF (has F (RetractableTo (AlgebraicNumber))) (SIGNATURE anfactor ((Union (Factored (SparseUnivariatePolynomial (AlgebraicNumber))) failed) UP)) noBranch))
      [5] qfactor:  overq has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FSPECF 
   Warnings: 
      [1] iiabs: not known that (Ring) is of mode (CATEGORY R (SIGNATURE abs (R R)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FS2 
   Warnings: 
      [1] map: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE map (B (Mapping S R) A)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FS2UPS 
   Warnings: 
      [1] exprToUPS: not known that (Ring) is of mode (CATEGORY package (SIGNATURE exprToUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE exprToGenUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE localAbs (FE FE)))
      [2] listToUPS:  %series has no value
      [3] powerToUPS:  %series has no value
      [4] kernelToUPS: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exprToUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE exprToGenUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE localAbs (FE FE)))
      [5] nthRootToUPS:  %series has no value
      [6] logToUPS:  %series has no value
      [7] atancotToUPS:  %series has no value
      [8] applyIfCan:  %series has no value
      [9] powToUPS:  %series has no value
      [10] newElem: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exprToUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE exprToGenUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE localAbs (FE FE)))
      [11] opsInvolvingX: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE exprToUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE exprToGenUPS ((Union (: %series UPS) (: %problem (Record (: func (String)) (: prob (String))))) FE (Boolean) (String))) (SIGNATURE localAbs (FE FE)))
      [12] powerToGenUPS:  %series has no value
      [13] nthRootToGenUPS:  %series has no value
      [14] logToGenUPS:  %series has no value
      [15] expToGenUPS:  %series has no value
      [16] expGenUPS:  %series has no value
      [17] atancotToGenUPS:  %problem has no value
      [18] atancotToGenUPS:  %series has no value
      [19] genUPSApplyIfCan:  %series has no value
      [20] applyBddIfCan:  %problem has no value
      [21] applyBddIfCan:  %series has no value
      [22] powToGenUPS:  %series has no value
 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GAUSSFAC 
   Warnings: 
      [1] intfactor:  unity has no value
      [2] factor: :(NonNegativeInteger) -- should replace by pretend
      [3] factor:  result has no value
      [4] factor:  unity has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GCNAALG 
   Warnings: 
      [1] leftRankPolynomial: signature of lhs not unique: (SparseUnivariatePolynomial (Fraction (Polynomial R))) chosen
      [2] rightRankPolynomial: signature of lhs not unique: (SparseUnivariatePolynomial (Fraction (Polynomial R))) chosen
      [3] genericLeftNorm:  rf has no value
      [4] genericRightNorm:  rf has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GCNAALG 
(|Module| (|Fraction| (|Polynomial| |#1|)))    extends 
(|LeftModule| (|Fraction| (|Polynomial| |#1|)))    but not 
(|LeftModule| (|SquareMatrix| |#2| (|Fraction| (|Polynomial| |#1|))))    

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GENUFACT 
   Warnings: 
      [1] factor: not known that (UnivariatePolynomialCategory (Integer)) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) R $)))
      [2] factor: not known that (UnivariatePolynomialCategory (Fraction (Integer))) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) R $)))
      [3] factor: not known that (UnivariatePolynomialCategory (Complex (Integer))) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) R $)))
      [4] factor: not known that (UnivariatePolynomialCategory (Complex (Fraction (Integer)))) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) R $)))
      [5] factor: not known that (UnivariatePolynomialCategory (AlgebraicNumber)) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) R $)))
      [6] factor: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((Factored (SparseUnivariatePolynomial R)) (SparseUnivariatePolynomial R))))

--------------non extending category----------------------
.. InnerAlgebraicNumber of cat 
(|Join| (|ExpressionSpace|) (|AlgebraicallyClosedField|) (|RetractableTo| (|Integer|)) (|RetractableTo| (|Fraction| (|Integer|))) (|LinearlyExplicitRingOver| (|Integer|)) (|RealConstant|) (|LinearlyExplicitRingOver| (|Fraction| (|Integer|))) (|CharacteristicZero|) (|ConvertibleTo| (|Complex| (|Float|))) (|DifferentialRing|) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)))) (SIGNATURE |numer| ((|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)) $)) (SIGNATURE |denom| ((|SparseMultivariatePolynomial| (|Integer|) (|Kernel| $)) $)) (SIGNATURE |reduce| ($ $)) (SIGNATURE |trueEqual| ((|Boolean|) $ $)) (SIGNATURE |norm| ((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $) (|Kernel| $))) (SIGNATURE |norm| ((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $) (|List| (|Kernel| $)))) (SIGNATURE |norm| ($ $ (|Kernel| $))) (SIGNATURE |norm| ($ $ (|List| (|Kernel| $))))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|FunctionSpace| (|Integer|))    finalizing nrlib IAN 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INEP 
   Warnings: 
      [1] charpol: :(PositiveInteger) -- should replace by pretend
      [2] unknown Functor code (error unsupported matrix type)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INFSP 
   Warnings: 
      [1] evaluate: not known that (Ring) is of mode (CATEGORY package (SIGNATURE innerSolve1 ((List F) (SparseUnivariatePolynomial K) Par)) (SIGNATURE innerSolve1 ((List F) (Polynomial K) Par)) (SIGNATURE innerSolve ((List (List F)) (List (Polynomial K)) (List (Polynomial K)) (List (Symbol)) Par)) (SIGNATURE makeEq ((List (Equation (Polynomial F))) (List F) (List (Symbol)))))
      [2] innerSolve1: not known that (UnivariatePolynomialCategory (Complex (Integer))) is of mode (CATEGORY domain (SIGNATURE outputForm ((OutputForm) $ (OutputForm))) (SIGNATURE fmecg ($ $ (NonNegativeInteger) K $)))
      [3] innerSolve1: pretend(List F) -- should replace by @
      [4] innerSolve: pretenddmp -- should replace by @
      [5] innerSolve:  lq has no value
      [6] innerSolve: not known that (PolynomialCategory K (DirectProduct (# lv) (NonNegativeInteger)) OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [7] innerSolve: not known that (PolynomialCategory K (DirectProduct (call LENGTH lv) (NonNegativeInteger)) OV) is of mode (CATEGORY domain (SIGNATURE reorder ($ $ (List (Integer)))))
      [8] innerSolve: pretend(List dmp) -- should replace by @
      [9] innerSolve:  listGen has no value
      [10] innerSolve:  result has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INTAF 
   Warnings: 
      [1] rootintegrate: not known that (Ring) is of mode (CATEGORY package (SIGNATURE algint ((IntegrationResult F) F (Kernel F) (Kernel F) (Mapping (SparseUnivariatePolynomial F) (SparseUnivariatePolynomial F)))))
      [2] rootintegrate: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE algint ((IntegrationResult F) F (Kernel F) (Kernel F) (Mapping (SparseUnivariatePolynomial F) (SparseUnivariatePolynomial F)))))
      [3] UP2UPUP: not known that (Ring) is of mode (CATEGORY package (SIGNATURE algint ((IntegrationResult F) F (Kernel F) (Kernel F) (Mapping (SparseUnivariatePolynomial F) (SparseUnivariatePolynomial F)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INTALG 
   Warnings: 
      [1] R2UP: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE algintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palgintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palginfieldint ((Union R failed) R (Mapping UP UP))))
      [2] R2UP: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE algintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palgintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palginfieldint ((Union R failed) R (Mapping UP UP))))
      [3] R2UP: not known that (Ring) is of mode (CATEGORY package (SIGNATURE algintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palgintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palginfieldint ((Union R failed) R (Mapping UP UP))))
      [4] univ: not known that (Ring) is of mode (CATEGORY package (SIGNATURE algintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palgintegrate ((IntegrationResult R) R (Mapping UP UP))) (SIGNATURE palginfieldint ((Union R failed) R (Mapping UP UP))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INTEF 
   Warnings: 
      [1] tanint: not known that (Ring) is of mode (CATEGORY package (SIGNATURE lfextendedint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) F)) (SIGNATURE lflimitedint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Symbol) (List F))) (SIGNATURE lfinfieldint ((Union F failed) F (Symbol))) (SIGNATURE lfintegrate ((IntegrationResult F) F (Symbol))) (SIGNATURE lfextlimint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) (Kernel F) (List (Kernel F)))))
      [2] tanint: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE lfextendedint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) F)) (SIGNATURE lflimitedint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Symbol) (List F))) (SIGNATURE lfinfieldint ((Union F failed) F (Symbol))) (SIGNATURE lfintegrate ((IntegrationResult F) F (Symbol))) (SIGNATURE lfextlimint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) (Kernel F) (List (Kernel F)))))
      [3] unknownint: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE lfextendedint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) F)) (SIGNATURE lflimitedint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Symbol) (List F))) (SIGNATURE lfinfieldint ((Union F failed) F (Symbol))) (SIGNATURE lfintegrate ((IntegrationResult F) F (Symbol))) (SIGNATURE lfextlimint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) (Kernel F) (List (Kernel F)))))
      [4] droponex: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE lfextendedint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) F)) (SIGNATURE lflimitedint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Symbol) (List F))) (SIGNATURE lfinfieldint ((Union F failed) F (Symbol))) (SIGNATURE lfintegrate ((IntegrationResult F) F (Symbol))) (SIGNATURE lfextlimint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) (Kernel F) (List (Kernel F)))))
      [5] alglfint: not known that (Ring) is of mode (CATEGORY package (SIGNATURE lfextendedint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) F)) (SIGNATURE lflimitedint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Symbol) (List F))) (SIGNATURE lfinfieldint ((Union F failed) F (Symbol))) (SIGNATURE lfintegrate ((IntegrationResult F) F (Symbol))) (SIGNATURE lfextlimint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Symbol) (Kernel F) (List (Kernel F)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INTG0 
   Warnings: 
      [1] kerdiff: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F F (SparseUnivariatePolynomial F))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) F (SparseUnivariatePolynomial F))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) F (SparseUnivariatePolynomial F))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE univariate ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) F (Kernel F) (Kernel F) (SparseUnivariatePolynomial F))) (SIGNATURE multivariate (F (SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (Kernel F) F)) (SIGNATURE lift ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial F) (Kernel F))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (PROGN (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F))))) noBranch))
      [2] univ: not known that (Ring) is of mode (CATEGORY package (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F F (SparseUnivariatePolynomial F))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) F (SparseUnivariatePolynomial F))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) F (SparseUnivariatePolynomial F))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE univariate ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) F (Kernel F) (Kernel F) (SparseUnivariatePolynomial F))) (SIGNATURE multivariate (F (SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (Kernel F) F)) (SIGNATURE lift ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial F) (Kernel F))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (PROGN (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F))))) noBranch))
      [3] univ: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F F (SparseUnivariatePolynomial F))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) F (SparseUnivariatePolynomial F))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) F (SparseUnivariatePolynomial F))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE univariate ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) F (Kernel F) (Kernel F) (SparseUnivariatePolynomial F))) (SIGNATURE multivariate (F (SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (Kernel F) F)) (SIGNATURE lift ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial F) (Kernel F))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (PROGN (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F))))) noBranch))
      [4] palgint0: not known that (Ring) is of mode (CATEGORY package (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F F (SparseUnivariatePolynomial F))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) F (SparseUnivariatePolynomial F))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) F (SparseUnivariatePolynomial F))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE univariate ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) F (Kernel F) (Kernel F) (SparseUnivariatePolynomial F))) (SIGNATURE multivariate (F (SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (Kernel F) F)) (SIGNATURE lift ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial F) (Kernel F))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (PROGN (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F))))) noBranch))
      [5] palgint0: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgint0 ((IntegrationResult F) F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F F (SparseUnivariatePolynomial F))) (SIGNATURE palgextint0 ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) F (SparseUnivariatePolynomial F))) (SIGNATURE palglimint0 ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) F (SparseUnivariatePolynomial F))) (SIGNATURE palgRDE0 ((Union F failed) F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)) (Kernel F) F (Fraction (SparseUnivariatePolynomial F)))) (SIGNATURE univariate ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) F (Kernel F) (Kernel F) (SparseUnivariatePolynomial F))) (SIGNATURE multivariate (F (SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (Kernel F) F)) (SIGNATURE lift ((SparseUnivariatePolynomial (Fraction (SparseUnivariatePolynomial F))) (SparseUnivariatePolynomial F) (Kernel F))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (PROGN (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) F (SparseUnivariatePolynomial F))) (SIGNATURE palgLODE0 ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Kernel F) F (Fraction (SparseUnivariatePolynomial F))))) noBranch))
      [6] palgRDE0:  var has no value
      [7] palgRDE0:  coeff has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INTHERAL 
   Warnings: 
      [1] HermiteIntegrate: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE HermiteIntegrate ((Record (: answer R) (: logpart R)) R (Mapping UP UP))))
      [2] localsolve:  coef1 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INTPAF 
   Warnings: 
      [1] UPUP2F0: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE palgint ((IntegrationResult F) F (Kernel F) (Kernel F))) (SIGNATURE palgextint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F)) (SIGNATURE palglimint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F))) (SIGNATURE palgRDE ((Union F failed) F F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (SIGNATURE palgLODE ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Symbol))) noBranch))
      [2] chv: not known that (Ring) is of mode (CATEGORY package (SIGNATURE palgint ((IntegrationResult F) F (Kernel F) (Kernel F))) (SIGNATURE palgextint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F)) (SIGNATURE palglimint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F))) (SIGNATURE palgRDE ((Union F failed) F F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (SIGNATURE palgLODE ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Symbol))) noBranch))
      [3] linearInXIfCan: not known that (Ring) is of mode (CATEGORY package (SIGNATURE palgint ((IntegrationResult F) F (Kernel F) (Kernel F))) (SIGNATURE palgextint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F)) (SIGNATURE palglimint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F))) (SIGNATURE palgRDE ((Union F failed) F F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (SIGNATURE palgLODE ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Symbol))) noBranch))
      [4] linearInXIfCan: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE palgint ((IntegrationResult F) F (Kernel F) (Kernel F))) (SIGNATURE palgextint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F)) (SIGNATURE palglimint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F))) (SIGNATURE palgRDE ((Union F failed) F F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (SIGNATURE palgLODE ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Symbol))) noBranch))
      [5] prootintegrate1: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE palgint ((IntegrationResult F) F (Kernel F) (Kernel F))) (SIGNATURE palgextint ((Union (Record (: ratpart F) (: coeff F)) failed) F (Kernel F) (Kernel F) F)) (SIGNATURE palglimint ((Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (Kernel F) (Kernel F) (List F))) (SIGNATURE palgRDE ((Union F failed) F F F (Kernel F) (Kernel F) (Mapping (Union F failed) F F (Symbol)))) (IF (has L (LinearOrdinaryDifferentialOperatorCategory F)) (SIGNATURE palgLODE ((Record (: particular (Union F failed)) (: basis (List F))) L F (Kernel F) (Kernel F) (Symbol))) noBranch))
      [6] candidates:  l has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INTPM 
   Warnings: 
      [1] splitConstant: more than 1 modemap for: (One) with dc=F ===>(((F F) ((has R (SemiGroup)) (CONST F ($)))) ((F F) (T (CONST F ($)))))
      [2] matcherfei: not known that (SetCategory) is of mode (CATEGORY domain (SIGNATURE pmintegrate ((Union (Record (: special F) (: integrand F)) failed) F (Symbol))))
      [3] matchdilog: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE pmintegrate ((Union (Record (: special F) (: integrand F)) failed) F (Symbol))))
      [4] matchdilog0: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE pmintegrate ((Union (Record (: special F) (: integrand F)) failed) F (Symbol))))
      [5] matchdilog0: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE pmintegrate ((Union (Record (: special F) (: integrand F)) failed) F (Symbol))))
      [6] matchli0: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE pmintegrate ((Union (Record (: special F) (: integrand F)) failed) F (Symbol))))
      [7] matchsici:  ci0? has no value
      [8] pmintegrate:  const has no value
      [9] pmintegrate:  nconst has no value
      [10] pmComplexintegrate:  const has no value
      [11] pmComplexintegrate:  nconst has no value
      [12] formula1: not known that (OrderedSet) is of mode (CATEGORY $ (SIGNATURE pmintegrate ((Union F failed) F (Symbol) (OrderedCompletion F) (OrderedCompletion F))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INTTOOLS 
   Warnings: 
      [1] varselect: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE varselect ((List (Kernel F)) (List (Kernel F)) (Symbol))) (SIGNATURE kmax ((Kernel F) (List (Kernel F)))) (SIGNATURE ksec ((Kernel F) (Kernel F) (List (Kernel F)) (Symbol))) (SIGNATURE union ((List (Kernel F)) (List (Kernel F)) (List (Kernel F)))) (SIGNATURE vark ((List (Kernel F)) (List F) (Symbol))) (IF (has R (IntegralDomain)) (SIGNATURE removeConstantTerm (F F (Symbol))) noBranch) (IF (has R (GcdDomain)) (IF (has F (ElementaryFunctionCategory)) (PROGN (SIGNATURE mkPrim (F F (Symbol))) (IF (has R (ConvertibleTo (Pattern (Integer)))) (IF (has R (PatternMatchable (Integer))) (IF (has F (LiouvillianFunctionCategory)) (IF (has F (RetractableTo (Symbol))) (SIGNATURE intPatternMatch ((IntegrationResult F) F (Symbol) (Mapping (IntegrationResult F) F (Symbol)) (Mapping (Union (Record (: special F) (: integrand F)) failed) F (Symbol)))) noBranch) noBranch) noBranch) noBranch)) noBranch) noBranch))
      [2] vark: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE varselect ((List (Kernel F)) (List (Kernel F)) (Symbol))) (SIGNATURE kmax ((Kernel F) (List (Kernel F)))) (SIGNATURE ksec ((Kernel F) (Kernel F) (List (Kernel F)) (Symbol))) (SIGNATURE union ((List (Kernel F)) (List (Kernel F)) (List (Kernel F)))) (SIGNATURE vark ((List (Kernel F)) (List F) (Symbol))) (IF (has R (IntegralDomain)) (SIGNATURE removeConstantTerm (F F (Symbol))) noBranch) (IF (has R (GcdDomain)) (IF (has F (ElementaryFunctionCategory)) (PROGN (SIGNATURE mkPrim (F F (Symbol))) (IF (has R (ConvertibleTo (Pattern (Integer)))) (IF (has R (PatternMatchable (Integer))) (IF (has F (LiouvillianFunctionCategory)) (IF (has F (RetractableTo (Symbol))) (SIGNATURE intPatternMatch ((IntegrationResult F) F (Symbol) (Mapping (IntegrationResult F) F (Symbol)) (Mapping (Union (Record (: special F) (: integrand F)) failed) F (Symbol)))) noBranch) noBranch) noBranch) noBranch)) noBranch) noBranch))
      [3] removeConstantTerm: not known that (OrderedSet) is of mode (CATEGORY $ (SIGNATURE removeConstantTerm (F F (Symbol))))
      [4] removeConstantTerm:  ans has no value
      [5] cont: not known that (Ring) is of mode (CATEGORY $ (SIGNATURE mkPrim (F F (Symbol))))
      [6] cont:  unit has no value
      [7] linearLog?: not known that (Ring) is of mode (CATEGORY $ (SIGNATURE mkPrim (F F (Symbol))))
      [8] intPatternMatch:  nl has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ITRIGMNP 
   Warnings: 
      [1] FG2F: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE GF2FG (FG (Complex F))) (SIGNATURE FG2F (F FG)) (SIGNATURE F2FG (FG F)) (SIGNATURE explogs2trigs ((Complex F) FG)) (SIGNATURE trigs2explogs (FG FG (List (Kernel FG)) (List (Symbol)))))
      [2] ker2explogs:  IN has no value
      [3] ker2explogs:  v has no value
      [4] ker2explogs: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE GF2FG (FG (Complex F))) (SIGNATURE FG2F (F FG)) (SIGNATURE F2FG (FG F)) (SIGNATURE explogs2trigs ((Complex F) FG)) (SIGNATURE trigs2explogs (FG FG (List (Kernel FG)) (List (Symbol)))))
      [5] ker2explogs:  a has no value
      [6] ker2trigs:  IN has no value
      [7] explogs2trigs: not known that (Ring) is of mode (CATEGORY package (SIGNATURE GF2FG (FG (Complex F))) (SIGNATURE FG2F (F FG)) (SIGNATURE F2FG (FG F)) (SIGNATURE explogs2trigs ((Complex F) FG)) (SIGNATURE trigs2explogs (FG FG (List (Kernel FG)) (List (Symbol)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib KOVACIC 
   Warnings: 
      [1] kovacic: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE kovacic ((Union (SparseUnivariatePolynomial (Fraction UP)) failed) (Fraction UP) (Fraction UP) (Fraction UP))) (SIGNATURE kovacic ((Union (SparseUnivariatePolynomial (Fraction UP)) failed) (Fraction UP) (Fraction UP) (Fraction UP) (Mapping (Factored UP) UP))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LF 
   Warnings: 
      [1] integrand: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE Ei (F F)) (SIGNATURE Si (F F)) (SIGNATURE Ci (F F)) (SIGNATURE li (F F)) (SIGNATURE erf (F F)) (SIGNATURE dilog (F F)) (SIGNATURE integral (F F (Symbol))) (SIGNATURE integral (F F (SegmentBinding F))))
      [2] eqint: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE belong? ((Boolean) (BasicOperator))) (SIGNATURE operator ((BasicOperator) (BasicOperator))) (SIGNATURE Ei (F F)) (SIGNATURE Si (F F)) (SIGNATURE Ci (F F)) (SIGNATURE li (F F)) (SIGNATURE erf (F F)) (SIGNATURE dilog (F F)) (SIGNATURE integral (F F (Symbol))) (SIGNATURE integral (F F (SegmentBinding F))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LODOF 
   Warnings: 
      [1] factor: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE factor ((List (LinearOrdinaryDifferentialOperator1 (Fraction UP))) (LinearOrdinaryDifferentialOperator1 (Fraction UP)) (Mapping (List F) UP))) (IF (has F (AlgebraicallyClosedField)) (PROGN (SIGNATURE factor ((List (LinearOrdinaryDifferentialOperator1 (Fraction UP))) (LinearOrdinaryDifferentialOperator1 (Fraction UP)))) (SIGNATURE factor1 ((List (LinearOrdinaryDifferentialOperator1 (Fraction UP))) (LinearOrdinaryDifferentialOperator1 (Fraction UP))))) noBranch))
      [2] zro1: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE factor1 ((List (LinearOrdinaryDifferentialOperator1 (Fraction UP))) (LinearOrdinaryDifferentialOperator1 (Fraction UP)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LSQM 
   Warnings: 
      [1] not known that (NonAssociativeAlgebra R) is of mode (CATEGORY domain (SIGNATURE transpose ($ $)) (SIGNATURE squareMatrix ($ (Matrix R))) (SIGNATURE coerce ((Matrix R) $)) (IF (has R (ATTRIBUTE (commutative *))) (ATTRIBUTE central) noBranch) (IF (has R (ATTRIBUTE (commutative *))) (IF (has R (ATTRIBUTE unitsKnown)) (ATTRIBUTE unitsKnown) noBranch) noBranch) (IF (has R (ConvertibleTo (InputForm))) (ATTRIBUTE (ConvertibleTo (InputForm))) noBranch))

--------------non extending category----------------------
.. LieSquareMatrix(#1,#2) of cat 
(|Join| (|SquareMatrixCategory| |#1| |#2| (|DirectProduct| |#1| |#2|) (|DirectProduct| |#1| |#2|)) (|CoercibleTo| (|Matrix| |#2|)) (|FramedNonAssociativeAlgebra| |#2|))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|CoercibleTo| (|SquareMatrix| |#1| |#2|))    finalizing nrlib LSQM 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OMEXPR 
   Warnings: 
      [1] outputOMFunction:  %defint has no value
      [2] outputOMFunction:  %defsum has no value
      [3] outputOMFunction:  %defprod has no value
      [4] outputOMFunction:  %power has no value
      [5] outputOMExpr: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE OMwrite ((String) (Expression R))) (SIGNATURE OMwrite ((String) (Expression R) (Boolean))) (SIGNATURE OMwrite ((Void) (OpenMathDevice) (Expression R))) (SIGNATURE OMwrite ((Void) (OpenMathDevice) (Expression R) (Boolean))))
      [6] OMwrite: pretend(String) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OMEXPR 
--->/research2/test0819/mnt/fedora5/../../src/algebra/OMEXPR.spad-->ExpressionToOpenMath((OMwrite ((String) (Expression R)))): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/OMEXPR.spad-->ExpressionToOpenMath((OMwrite ((String) (Expression R) (Boolean)))): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/OMEXPR.spad-->ExpressionToOpenMath((OMwrite ((Void) (OpenMathDevice) (Expression R)))): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/OMEXPR.spad-->ExpressionToOpenMath((OMwrite ((Void) (OpenMathDevice) (Expression R) (Boolean)))): Not documented!!!!

--------------non extending category----------------------
.. MachineComplex of cat 
(|Join| (|FortranMachineTypeCategory|) (|ComplexCategory| (|MachineFloat|)) (CATEGORY |domain| (SIGNATURE |coerce| ($ (|Complex| (|Float|)))) (SIGNATURE |coerce| ($ (|Complex| (|Integer|)))) (SIGNATURE |coerce| ($ (|Complex| (|MachineFloat|)))) (SIGNATURE |coerce| ($ (|Complex| (|MachineInteger|)))) (SIGNATURE |coerce| ((|Complex| (|Float|)) $))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(IF (|has| (|MachineFloat|) (|OpenMath|)) (ATTRIBUTE (|OpenMath|)) |noBranch|)    finalizing nrlib MCMPLX 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MULTFACT 
   Warnings: 
      [1] factor: not known that (OrderedSet) is of mode (CATEGORY OV (SIGNATURE convert ((Symbol) $)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGD01 
   Warnings: 
      [1] d01ajf:  fn has no value
      [2] d01ajf:  fp has no value
      [3] d01ajf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] d01akf:  fn has no value
      [5] d01akf:  fp has no value
      [6] d01akf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] d01alf:  fn has no value
      [8] d01alf:  fp has no value
      [9] d01alf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] d01amf:  fn has no value
      [11] d01amf:  fp has no value
      [12] d01amf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [13] d01anf:  fn has no value
      [14] d01anf:  fp has no value
      [15] d01anf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [16] d01apf:  fn has no value
      [17] d01apf:  fp has no value
      [18] d01apf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [19] d01aqf:  fn has no value
      [20] d01aqf:  fp has no value
      [21] d01aqf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [22] d01asf:  fn has no value
      [23] d01asf:  fp has no value
      [24] d01asf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [25] d01bbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [26] d01fcf:  fn has no value
      [27] d01fcf:  fp has no value
      [28] d01fcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [29] d01gaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [30] d01gbf:  fn has no value
      [31] d01gbf:  fp has no value
      [32] d01gbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGD01 
--->/research2/test0819/mnt/fedora5/../../src/algebra/NAGD01.spad-->NagIntegrationPackage((d01asf ((Result) (DoubleFloat) (DoubleFloat) (Integer) (DoubleFloat) (Integer) (Integer) (Integer) (Integer) (Union (: fn (FileName)) (: fp (Asp1 G)))))): Mismatch: left bracket matches right pren
"\\spad{d01asf(a,{}omega,{}key,{}epsabs,{}limlst,{}lw,{}liw,{}ifail,{}g)} calculates an approximation to the sine or the cosine transform of a function \\spad{g} over [a,{}infty): See \\downlink{Manual Page}{manpageXXd01asf}."

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGD02 
   Warnings: 
      [1] d02bbf:  fn has no value
      [2] d02bbf:  fp has no value
      [3] d02bbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] d02bhf:  fn has no value
      [5] d02bhf:  fp has no value
      [6] d02bhf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] d02cjf:  fn has no value
      [8] d02cjf:  fp has no value
      [9] d02cjf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] d02ejf:  fn has no value
      [11] d02ejf:  fp has no value
      [12] d02ejf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [13] d02gaf:  fn has no value
      [14] d02gaf:  fp has no value
      [15] d02gaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [16] d02gbf:  fn has no value
      [17] d02gbf:  fp has no value
      [18] d02gbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [19] d02kef:  fn has no value
      [20] d02kef:  fp has no value
      [21] d02kef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [22] d02raf:  fn has no value
      [23] d02raf:  fp has no value
      [24] d02raf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGF01 
   Warnings: 
      [1] f01brf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] f01bsf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] f01maf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] f01mcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] f01qcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [6] f01qdf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] f01qef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [8] f01rcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [9] f01rdf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] f01ref: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGF02 
   Warnings: 
      [1] f02aaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] f02abf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] f02adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] f02aef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] f02aff: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [6] f02agf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] f02ajf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [8] f02akf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [9] f02awf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [10] f02axf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [11] f02bbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [12] f02bjf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [13] f02fjf:  fn has no value
      [14] f02fjf:  fp has no value
      [15] f02fjf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [16] f02wef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [17] f02xef: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NAGF04 
   Warnings: 
      [1] f04adf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [2] f04arf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [3] f04asf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [4] f04atf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [5] f04axf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [6] f04faf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [7] f04jgf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [8] f04maf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [9] f04mbf:  fn has no value
      [10] f04mbf:  fp has no value
      [11] f04mbf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [12] f04mcf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @
      [13] f04qaf:  fn has no value
      [14] f04qaf:  fp has no value
      [15] f04qaf: pretend(List (Record (: key (Symbol)) (: entry (Any)))) -- should replace by @

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NLINSOL 
   Warnings: 
      [1] allRoots: not known that (Ring) is of mode (CATEGORY package (SIGNATURE solveInField ((List (List (Equation (Fraction (Polynomial R))))) (List (Polynomial R)) (List (Symbol)))) (SIGNATURE solveInField ((List (List (Equation (Fraction (Polynomial R))))) (List (Polynomial R)))) (SIGNATURE solve ((List (List (Equation (Fraction (Polynomial R))))) (List (Polynomial R)) (List (Symbol)))) (SIGNATURE solve ((List (List (Equation (Fraction (Polynomial R))))) (List (Polynomial R)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NSMP 
   Warnings: 
      [1] monicModulo:  mM has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ODERTRIC 
   Semantic Errors: 
      [1]  RatODETools is not a known type
 
   Warnings: 
      [1] ricDsolve: not known that (IntegralDomain) is of mode (CATEGORY package (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator1 (Fraction UP)) (Mapping (List F) UP))) (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator1 (Fraction UP)) (Mapping (List F) UP) (Mapping (Factored UP) UP))) (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (Mapping (List F) UP))) (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (Mapping (List F) UP) (Mapping (Factored UP) UP))) (SIGNATURE singRicDE ((List (Record (: frac (Fraction UP)) (: eq (LinearOrdinaryDifferentialOperator2 UP (Fraction UP))))) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (Mapping (Factored UP) UP))) (SIGNATURE polyRicDE ((List (Record (: poly UP) (: eq (LinearOrdinaryDifferentialOperator2 UP (Fraction UP))))) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (Mapping (List F) UP))) (IF (has F (AlgebraicallyClosedField)) (PROGN (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator1 (Fraction UP)))) (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator1 (Fraction UP)) (Mapping (Factored UP) UP))) (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)))) (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (Mapping (Factored UP) UP)))) noBranch))
      [2] ratsln:  ls has no value
      [3] ratsln:  lv has no value
      [4] ratsol:  ans has no value
      [5] polyRicDE:  deg has no value
      [6] polyRicDE:  ans has no value
      [7] newtonSolution:  m has no value
      [8] zro1: not known that (Ring) is of mode (CATEGORY domain (SIGNATURE ricDsolve ((List (Fraction UP)) (LinearOrdinaryDifferentialOperator2 UP (Fraction UP)) (Mapping (Factored UP) UP))))
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PADE 
   Warnings: 
      [1] padeInner:  plist has no value
      [2] padeInner:  alist has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PDEPACK 
--->/research2/test0819/mnt/fedora5/../../src/algebra/PDEPACK.spad-->AnnaPartialDifferentialEquationPackage(constructor): Not documented!!!!
--->/research2/test0819/mnt/fedora5/../../src/algebra/PDEPACK.spad-->AnnaPartialDifferentialEquationPackage(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PFO 
   Warnings: 
      [1] klist: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE order ((Union (NonNegativeInteger) failed) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsion? ((Boolean) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsionIfCan ((Union (Record (: order (NonNegativeInteger)) (: function R)) failed) (FiniteDivisor F UP UPUP R))))
      [2] UPQ2F: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE order ((Union (NonNegativeInteger) failed) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsion? ((Boolean) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsionIfCan ((Union (Record (: order (NonNegativeInteger)) (: function R)) failed) (FiniteDivisor F UP UPUP R))))
      [3] commonDen: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE order ((Union (NonNegativeInteger) failed) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsion? ((Boolean) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsionIfCan ((Union (Record (: order (NonNegativeInteger)) (: function R)) failed) (FiniteDivisor F UP UPUP R))))
      [4] selectIntegers: not known that (Ring) is of mode (CATEGORY package (SIGNATURE order ((Union (NonNegativeInteger) failed) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsion? ((Boolean) (FiniteDivisor F UP UPUP R))) (SIGNATURE torsionIfCan ((Union (Record (: order (NonNegativeInteger)) (: function R)) failed) (FiniteDivisor F UP UPUP R))))

Warning: PFO;cmult has a duplicate definition in this file

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PMASSFS 
   Warnings: 
      [1] ass: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE assert (F F (String))) (SIGNATURE constant (F F)) (SIGNATURE optional (F F)) (SIGNATURE multiple (F F)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PMFS 
   Warnings: 
      [1] patternMatch: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE patternMatch ((PatternMatchResult S F) F (Pattern S) (PatternMatchResult S F))))
      [2] patternMatch:  var has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PMPREDFS 
   Warnings: 
      [1] suchThat: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE suchThat (F F (Mapping (Boolean) D))) (SIGNATURE suchThat (F F (List (Mapping (Boolean) D)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PSETPK 
   Warnings: 
      [1] selectPolynomials:  gps has no value
      [2] selectPolynomials:  bps has no value
      [3] selectOrPolynomials:  gps has no value
      [4] selectOrPolynomials:  bps has no value
      [5] selectAndPolynomials:  gps has no value
      [6] selectAndPolynomials:  bps has no value
      [7] certainlySubVariety?:  polnum has no value
      [8] autoRemainder:  newlp has no value
      [9] rewriteSetByReducingWithParticularGenerators:  rs has no value
      [10] squareFreeFactors: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE removeRedundantFactorsInPols ((List P) (List P) (List P))))
      [11] univariatePolynomialsGcds:  p has no value
      [12] univariatePolynomialsGcds:  pInV has no value
      [13] univariatePolynomialsGcds:  stop has no value
      [14] univariatePolynomialsGcds:  lg has no value
      [15] removeRoughlyRedundantFactorsInContents:  newcp has no value
      [16] removeRedundantFactorsInContents:  newcp has no value
      [17] removeRedundantFactorsInPols:  newcp has no value
      [18] removeRedundantFactorsInPols:  newp has no value
      [19] unprotectedRemoveRedundantFactors:  d has no value
      [20] removeRedundantFactors:  toSee has no value
      [21] removeRedundantFactors:  toSave has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RDEEF 
   Warnings: 
      [1] rischDEalg: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE rischDE ((Record (: ans F) (: right F) (: sol? (Boolean))) (Integer) F F (Symbol) (Mapping (Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (List F)) (Mapping (Union (Record (: ratpart F) (: coeff F)) failed) F F))))
      [2] rischDEalg: not known that (Ring) is of mode (CATEGORY package (SIGNATURE rischDE ((Record (: ans F) (: right F) (: sol? (Boolean))) (Integer) F F (Symbol) (Mapping (Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (List F)) (Mapping (Union (Record (: ratpart F) (: coeff F)) failed) F F))))
      [3] normalise0: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE rischDE ((Record (: ans F) (: right F) (: sol? (Boolean))) (Integer) F F (Symbol) (Mapping (Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (List F)) (Mapping (Union (Record (: ratpart F) (: coeff F)) failed) F F))))
      [4] normalise0: not known that (Ring) is of mode (CATEGORY package (SIGNATURE rischDE ((Record (: ans F) (: right F) (: sol? (Boolean))) (Integer) F F (Symbol) (Mapping (Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (List F)) (Mapping (Union (Record (: ratpart F) (: coeff F)) failed) F F))))
      [5] polyDElog:  limitedlogs has no value
      [6] polyDElog: more than 1 modemap for: (Zero) with dc=F ===>(((F F) ((has R (AbelianSemiGroup)) (CONST F ($)))) ((F F) (T (CONST F ($)))))
      [7] polyDElog:  eq has no value
      [8] polyDEexp:  eq has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RDEEFS 
   Warnings: 
      [1] basecase: not known that (Ring) is of mode (CATEGORY package (SIGNATURE rischDEsys ((Union (List F) failed) (Integer) F F F (Symbol) (Mapping (Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (List F)) (Mapping (Union (Record (: ratpart F) (: coeff F)) failed) F F))))
      [2] basecase: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE rischDEsys ((Union (List F) failed) (Integer) F F F (Symbol) (Mapping (Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (List F)) (Mapping (Union (Record (: ratpart F) (: coeff F)) failed) F F))))
      [3] rischDEsys: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE rischDEsys ((Union (List F) failed) (Integer) F F F (Symbol) (Mapping (Union (Record (: mainpart F) (: limitedlogs (List (Record (: coeff F) (: logand F))))) failed) F (List F)) (Mapping (Union (Record (: ratpart F) (: coeff F)) failed) F F))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RSETCAT- 
   Warnings: 
      [1] intersect:  toSave has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RSETCAT 
; (DEFUN |RegularTriangularSetCategory| ...) is being compiled.
;; The variable |RegularTriangularSetCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |RegularTriangularSetCategory;| ...) is being compiled.
;; The variable |RegularTriangularSetCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RULE 
   Warnings: 
      [1] F2Symbol: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE rule ($ F F)) (SIGNATURE rule ($ F F (List (Symbol)))) (SIGNATURE suchThat ($ $ (List (Symbol)) (Mapping (Boolean) (List F)))) (SIGNATURE pattern ((Pattern Base) $)) (SIGNATURE lhs (F $)) (SIGNATURE rhs (F $)) (SIGNATURE elt (F $ F (PositiveInteger))) (SIGNATURE quotedOperators ((List (Symbol)) $)))
      [2] retractIfCan: not known that (OrderedSet) is of mode (CATEGORY domain (SIGNATURE rule ($ F F)) (SIGNATURE rule ($ F F (List (Symbol)))) (SIGNATURE suchThat ($ $ (List (Symbol)) (Mapping (Boolean) (List F)))) (SIGNATURE pattern ((Pattern Base) $)) (SIGNATURE lhs (F $)) (SIGNATURE rhs (F $)) (SIGNATURE elt (F $ F (PositiveInteger))) (SIGNATURE quotedOperators ((List (Symbol)) $)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SIMPAN 
   Warnings: 
      [1] simplify: not known that (TranscendentalFunctionCategory) is of mode (CATEGORY domain (IF (has (Integer) (IntegralDomain)) (PROGN (ATTRIBUTE (AlgebraicallyClosedFunctionSpace (Integer))) (ATTRIBUTE (TranscendentalFunctionCategory)) (ATTRIBUTE (CombinatorialOpsCategory)) (ATTRIBUTE (LiouvillianFunctionCategory)) (ATTRIBUTE (SpecialFunctionCategory)) (SIGNATURE reduce ($ $)) (SIGNATURE number? ((Boolean) $)) (SIGNATURE simplifyPower ($ $ (Integer))) (IF (has (Integer) (GcdDomain)) (PROGN (SIGNATURE factorPolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $))) (SIGNATURE squareFreePolynomial ((Factored (SparseUnivariatePolynomial $)) (SparseUnivariatePolynomial $)))) noBranch) (IF (has (Integer) (RetractableTo (Integer))) (ATTRIBUTE (RetractableTo (AlgebraicNumber))) noBranch)) noBranch))

   SFORT abbreviates domain SimpleFortranProgram 
(SPADLET |$noSubsumption| (QUOTE T))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SOLVESER 
   Warnings: 
      [1] unvectorise: not known that (OrderedSet) is of mode (CATEGORY package (SIGNATURE decomposeFunc ((Fraction (SparseUnivariatePolynomial (Expression R))) (Fraction (SparseUnivariatePolynomial (Expression R))) (Fraction (SparseUnivariatePolynomial (Expression R))) (Fraction (SparseUnivariatePolynomial (Expression R))))) (SIGNATURE unvectorise ((Fraction (SparseUnivariatePolynomial (Expression R))) (Vector (Expression R)) (Fraction (SparseUnivariatePolynomial (Expression R))) (Integer))))
      [2] unvectorise: not known that (Ring) is of mode (CATEGORY package (SIGNATURE decomposeFunc ((Fraction (SparseUnivariatePolynomial (Expression R))) (Fraction (SparseUnivariatePolynomial (Expression R))) (Fraction (SparseUnivariatePolynomial (Expression R))) (Fraction (SparseUnivariatePolynomial (Expression R))))) (SIGNATURE unvectorise ((Fraction (SparseUnivariatePolynomial (Expression R))) (Vector (Expression R)) (Fraction (SparseUnivariatePolynomial (Expression R))) (Integer))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SUMFS 
   Warnings: 
      [1] sum: not known that (OrderedSet) is of mode (CATEGORY package 
      [2] notRF?: not known that (OrderedSet) is of mode (CATEGORY package 

(|UnivariateTaylorSeriesCategory| |#1|)    extends 
(|UnivariatePowerSeriesCategory| |#1| (|NonNegativeInteger|))    but not 
(|UnivariatePowerSeriesCategory| |#1| (|Integer|)) --------------non 
extending category----------------------
.. SparseUnivariateTaylorSeries(#1,#2,#3) of cat 
(|Join| (|UnivariateTaylorSeriesCategory| |#1|) (CATEGORY |domain| 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|UnivariatePowerSeriesCategory| |#1| (|Integer|))    finalizing nrlib SUTS 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib TOOLSIGN 
   Warnings: 
      [1] nonQsign: pretend(AlgebraicNumber) -- should replace by @
      [2] nonQsign: not known that (AlgebraicallyClosedField) is of mode 
      [3] nonQsign: not known that (TranscendentalFunctionCategory) is of 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib TRIGMNIP 
   Warnings: 
      [1] K2KG: not known that (RadicalCategory) is of mode (CATEGORY domain
      [2] K2KG: not known that (TranscendentalFunctionCategory) is of mode
      [3] K2KG: not known that (OrderedSet) is of mode (CATEGORY package 
      [4] real?:  ker has no value
      [5] complexKernels: not known that (OrderedSet) is of mode (CATEGORY 
      [6] complexKernels:  lk has no value
      [7] complexKernels:  lv has no value
      [8] complexNormalize: not known that (AlgebraicallyClosedField) is of
      [9] complexNormalize: not known that (TranscendentalFunctionCategory)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib TRMANIP 
   Warnings: 
      [1] logArgs: not known that (OrderedSet) is of mode (CATEGORY package
      [2] logArgs:  sum has no value
      [3] logArgs:  arg has no value
      [4] simplifyLog1:  exprs has no value
      [5] simplifyLog1:  terms has no value
      [6] simplifyLog1: not known that (OrderedSet) is of mode (CATEGORY
      [7] expandpow: not known that (OrderedSet) is of mode (CATEGORY 
      [8] termexp:  exponent has no value
      [9] htrigs: not known that (Ring) is of mode (CATEGORY package 
      [10] exlog: not known that (IntegralDomain) is of mode 
      [11] logexpand:  IN has no value
      [12] logexpand:  x has no value
      [13] kerexpand:  IN has no value
      [14] kerexpand:  x has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ULSCCAT 
; (DEFUN |UnivariateLaurentSeriesConstructorCategory| ...) is being compiled.
;; The variable |UnivariateLaurentSeriesConstructorCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |UnivariateLaurentSeriesConstructorCategory;| ...) is being compiled.
;; The variable |UnivariateLaurentSeriesConstructorCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib UPXSSING 
   Warnings: 
      [1] retractIfCan: signature of lhs not unique: (Union 
(UnivariatePuiseuxSeries FE var cen) failed)$ chosen
      [2] sortAndDiscardTerms:  zeroTerms has no value
      [3] sortAndDiscardTerms:  infiniteTerms has no value
      [4] sortAndDiscardTerms:  failedTerms has no value
      [5] dominantTermOnList:  %list has no value
      [6] dominantTermOnList:  %order has no value

--------------non extending category----------------------
.. UnivariatePuiseuxSeriesWithExponentialSingularity(#1,#2,#3,#4) of cat 
(|Join| (|FiniteAbelianMonoidRing| (|UnivariatePuiseuxSeries| |#2| |#3| |#4|)
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(IF (|has| (|UnivariatePuiseuxSeries| |#2| |#3| |#4|) (|IntegralDomain|))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib WUTSET 
   Warnings: 
      [1] medialSetWithTrace:  rs has no value
      [2] medialSetWithTrace:  contradiction has no value
      [3] medialSetWithTrace:  bs has no value
      [4] characteristicSetUsingTrace:  contradiction has no value
      [5] characteristicSetUsingTrace:  rs has no value
      [6] characteristicSetUsingTrace:  ms has no value
      [7] zeroSetSplit:  newlts has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DEFINTEF 
   Warnings: 
      [1] checkForPole: not known that (OrderedSet) is of mode (CATEGORY
      [2] polyIfCan: not known that (Ring) is of mode (CATEGORY package
      [3] polyIfCan: not known that (OrderedSet) is of mode (CATEGORY package

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DFINTTLS 
   Warnings: 
      [1] findLimit: not known that (OrderedSet) is of mode (CATEGORY package
      [2] mkLogPos: not known that (OrderedSet) is of mode (CATEGORY package
      [3] checkForZero: not known that (Ring) is of mode (CATEGORY package 
      [4] findRealZero:  fin has no value
      [5] findRealZero:  halfinf has no value
      [6] var:  i has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DEFINTRF 
   Warnings: 
      [1] nopole: not known that (TranscendentalFunctionCategory) is of mode
      [2] nopole: not known that (AlgebraicallyClosedFunctionSpace R) is of 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib D01TRNS 
   Warnings: 
      [1] transformFunction: not known that (TranscendentalFunctionCategory)

--------------non extending category----------------------
.. d01TransformFunctionType of cat 
(|NumericalIntegrationCategory|)   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|TableAggregate| (|Symbol|) (|Any|))    finalizing nrlib D01TRNS 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib D01TRNS 
--->/research2/test0819/mnt/fedora5/../../src/algebra/D01TRNS.spad
-->d01TransformFunctionType(): Missing Description

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib EFULS 
   Warnings: 
      [1] tanIfCan: not known that (Algebra (Fraction (Integer))) is

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ESCONT 
   Warnings: 
      [1] zerosOf: not known that (OrderedSet) is of mode (CATEGORY

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ESCONT 
--------------non extending category----------------------
.. ExpertSystemContinuityPackage of cat 
(CATEGORY |package| (SIGNATURE |getlo| ((|DoubleFloat|) (|Segment| 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib EXPR 
   Warnings: 
      [1] not known that (OrderedSet) is of mode (CATEGORY domain
      [2] simplifyPower: not known that (OrderedSet) is of mode 
      [3] **: pretend(Integer) -- should replace by @
      [4] **: not known that (OrderedSet) is of mode (CATEGORY domain
      [5] <: not known that (OrderedSet) is of mode (CATEGORY domain 
      [6] numer: not known that (OrderedSet) is of mode (CATEGORY domain
      [7] toprat: not known that (Field) is of mode (CATEGORY domain
      [8] toprat: not known that (ExpressionSpace) is of mode
      [9] toprat: not known that (SIGNATURE numer 
      [10] toprat: not known that (SIGNATURE denom 
      [11] toprat: not known that (SIGNATURE coerce ($ 
      [12] reducedSystem: not known that (Ring) is of mode (CATEGORY domain 
      [13] commonk0: not known that (OrderedSet) is of mode (CATEGORY domain
      [14] rootOf: not known that (FunctionSpace R) is of mode (CATEGORY
      [15] rootOf: not known that (Ring) is of mode (CATEGORY domain 
      [16] pi: not known that (FunctionSpace R) is of mode (CATEGORY domain 
      [17] pi: not known that (RadicalCategory) is of mode (CATEGORY domain 
      [18] abs: not known that (FunctionSpace R) is of mode (CATEGORY domain
      [19] **: not known that (FunctionSpace R) is of mode (CATEGORY domain 
      [20] erf: not known that (FunctionSpace R) is of mode (CATEGORY domain
      [21] erf: not known that (RadicalCategory) is of mode (CATEGORY domain
      [22] erf: not known that (TranscendentalFunctionCategory) is of mode
      [23] operator: not known that (FunctionSpace R) is of mode (CATEGORY
      [24] operator: not known that (ExpressionSpace) is of mode (CATEGORY
      [25] evl0: not known that (OrderedSet) is of mode (CATEGORY domain 
      [26] gcdPolynomial: not known that (GcdDomain) is of mode (CATEGORY
      [27] factorPolynomial: not known that (OrderedSet) is of mode 
      [28] factorPolynomial: not known that (Ring) is of mode (CATEGORY 
      [29] coerce: not known that (OrderedSet) is of mode (CATEGORY domain 
      [30] retract: not known that (OrderedSet) is of mode (CATEGORY domain
      [31] retractIfCan: not known that (OrderedSet) is of mode (CATEGORY
      [32] k2expr: not known that (ExpressionSpace) is of mode (CATEGORY
      [33] smp2expr: not known that (SetCategory) is of mode (CATEGORY
      [34] smp2expr: not known that (SIGNATURE + ($ $ $)) is of mode 
      [35] smp2expr: not known that (SIGNATURE * ($ $ $)) is of mode 
      [36] smp2expr: not known that (SIGNATURE ** ($ $ (NonNegativeInteger)))
      [37] smp2an: not known that (OrderedSet) is of mode (CATEGORY domain
      [38] convert: not known that (OrderedSet) is of mode (CATEGORY domain
      [39] eval: not known that (ConvertibleTo (InputForm)) is of mode 
      [40] patternMatch: not known that (FunctionSpace R) is of mode 
      [41] patternMatch: not known that (ConvertibleTo (Pattern (Integer))) 
      [42] patternMatch: not known that (PatternMatchable (Integer)) is of
      [43] patternMatch: not known that (RetractableTo (Kernel $)) is of 
      [44] patternMatch: not known that (SetCategory) is of mode (CATEGORY
      [45] patternMatch: not known that (ConvertibleTo (Pattern (Float))) 
      [46] patternMatch: not known that (PatternMatchable (Float)) is of
      [47] isPlus:  gen has no value
      [48] not known that (Ring) is of mode (CATEGORY domain (SIGNATURE
      [49] not known that (IntegralDomain) is of mode (CATEGORY domain 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib EXPR 
; (DEFUN |Expression;| ...) is being compiled.
;; The variable IDENTITY is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib EXPR2UPS 
   Warnings: 
      [1] iTaylor:  %problem has no value
      [2] iTaylor:  %series has no value
      [3] taylor: more than 1 modemap for: (Zero) with dc=FE ===>
(((FE FE) ((has R (AbelianSemiGroup)) (CONST FE ($)))) ((FE FE) 
(T (CONST FE ($)))))
      [4] iLaurent:  %problem has no value
      [5] iLaurent:  %series has no value
      [6] laurent: more than 1 modemap for: (Zero) with dc=FE ===>
(((FE FE) ((has R (AbelianSemiGroup)) (CONST FE ($)))) ((FE FE) 
(T (CONST FE ($)))))
      [7] iPuiseux:  %problem has no value
      [8] iPuiseux:  %series has no value
      [9] puiseux: more than 1 modemap for: (Zero) with dc=FE ===>
(((FE FE) ((has R (AbelianSemiGroup)) (CONST FE ($)))) ((FE FE) 
(T (CONST FE ($)))))
      [10] iSeries:  %problem has no value
      [11] iSeries:  %series has no value
      [12] series: more than 1 modemap for: (Zero) with dc=FE ===>
(((FE FE) ((has R (AbelianSemiGroup)) (CONST FE ($)))) ((FE FE) 
(T (CONST FE ($)))))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FDIV 
   Warnings: 
      [1] *: signature of lhs not unique: $(Integer)$ chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FDIV 
; (DEFUN |FiniteDivisor;| ...) is being compiled.
;; The variable IDENTITY is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FSCINT 
   Warnings: 
      [1] K2KG: not known that (RadicalCategory) is of mode (CATEGORY domain
      [2] K2KG: not known that (TranscendentalFunctionCategory) is of mode
      [3] K2KG: not known that (OrderedSet) is of mode (CATEGORY package 
      [4] internalIntegrate: not known that (OrderedSet) is of mode (CATEGORY
      [5] internalIntegrate: not known that (AlgebraicallyClosedField) is of
      [6] internalIntegrate: not known that (TranscendentalFunctionCategory)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FSINT 
   Warnings: 
      [1] K2KG: not known that (RadicalCategory) is of mode (CATEGORY domain
      [2] K2KG: not known that (TranscendentalFunctionCategory) is of mode
      [3] K2KG: not known that (OrderedSet) is of mode (CATEGORY package
      [4] postSubst: not known that (Ring) is of mode (CATEGORY package
      [5] postSubst: not known that (OrderedSet) is of mode (CATEGORY 
      [6] integrate: not known that (AlgebraicallyClosedField) is of mode 
      [7] integrate: not known that (TranscendentalFunctionCategory) is of 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FS2EXPXP 
   Warnings: 
      [1] newElem: not known that (OrderedSet) is of mode
      [2] k2Elem: not known that (OrderedSet) is of mode 
      [3] iExprToXXP:  %series has no value
      [4] listToXXP:  %expansion has no value
      [5] powerToXXP:  %expansion has no value
      [6] nthRootXXPIfCan:  %problem has no value
      [7] nthRootXXPIfCan:  %series has no value
      [8] nthRootToXXP:  %problem has no value
      [9] nthRootToXXP:  %expansion has no value
      [10] genPowerToXXP:  %expansion has no value
      [11] genExp:  %series has no value
      [12] exponential:  %problem has no value
      [13] exponential:  %series has no value
      [14] expToXXP:  %expansion has no value
      [15] logToXXP:  %expansion has no value
      [16] logToXXP:  %problem has no value
      [17] logToXXP:  %series has no value
      [18] applyIfCan:  %expansion has no value
      [19] applyBddIfCan:  %problem has no value
      [20] applyBddIfCan:  %expansion has no value
      [21] opsInvolvingX: not known that (OrderedSet) is of mode 
      [22] atancotToXXP:  %problem has no value
      [23] atancotToXXP:  %series has no value

--------------non extending category----------------------
.. GeneralUnivariatePowerSeries(#1,#2,#3) of cat 
(|Join| (|UnivariatePuiseuxSeriesCategory| |#1|) (CATEGORY |domain| 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|UnivariatePuiseuxSeriesConstructorCategory| |#1| 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib HELLFDIV 
   Warnings: 
      [1] unknown Functor code (error HyperellipticFiniteDivisor: 
curve must be hyperelliptic)

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INVLAPLA 
   Warnings: 
      [1] ilt: not known that (Ring) is of mode (CATEGORY package 
      [2] ilt: not known that (OrderedSet) is of mode (CATEGORY package
      [3] iltsqfr: not known that (IntegralDomain) is of mode (CATEGORY
      [4] iltirred: not known that (Ring) is of mode (CATEGORY package 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IR2F 
   Warnings: 
      [1] evenRoots: not known that (OrderedSet) is of mode 
      [2] ilog: not known that (OrderedSet) is of mode (CATEGORY package 
      [3] ilog: not known that (Ring) is of mode (CATEGORY package 
      [4] lg2func: not known that (Ring) is of mode (CATEGORY package 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IRRF2F 
   Warnings: 
      [1] expand: not known that (AlgebraicallyClosedFunctionSpace R) 
      [2] expand: not known that (TranscendentalFunctionCategory) is of 
      [3] integrate: not known that (AlgebraicallyClosedField) is of 
      [4] integrate: not known that (TranscendentalFunctionCategory) 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LAPLACE 
   Warnings: 
      [1] algebraic?: not known that (OrderedSet) is of mode 
      [2] isLinear: not known that (Ring) is of mode 
      [3] isLinear: not known that (OrderedSet) is of mode 
      [4] atn:  d has no value
      [5] mkPlus: not known that (OrderedSet) is of mode 
      [6] locallaplace:  const has no value
      [7] locallaplace:  nconst has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LIMITPS 
   Warnings: 
      [1] firstNonLogPtr: not known that (OrderedSet) is of mode 
      [2] complLimit:  %series has no value
      [3] realLimit:  %problem has no value
      [4] realLimit:  %series has no value
      [5] realLimit:  func has no value
      [6] realLimit:  prob has no value
      [7] xxpLimit:  %expansion has no value
      [8] limitPlus:  %problem has no value
      [9] limitPlus:  %series has no value
      [10] limitPlus:  func has no value
      [11] limitPlus:  prob has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LODEEF 
   Warnings: 
      [1] algSolve: not known that (OrderedSet) is of mode (CATEGORY 
      [2] algSolve: not known that (Ring) is of mode (CATEGORY package 
      [3] xpart: not known that (OrderedSet) is of mode (CATEGORY 
      [4] ulodo: not known that (Ring) is of mode (CATEGORY package 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NODE1 
   Warnings: 
      [1] solve: not known that (OrderedSet) is of mode (CATEGORY package 
      [2] checkBernoulli: not known that (Ring) is of mode (CATEGORY package 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ODECONST 
   Warnings: 
      [1] basisSqfr: not known that (Ring) is of mode 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ODEINT 
   Warnings: 
      [1] expint: not known that (OrderedSet) is of mode 
      [2] expint:  lrec has no value
      [3] expint:  exponent has no value
      [4] isQlog: not known that (OrderedSet) is of mode 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib REP 
   Warnings: 
      [1] evalvect: not known that (OrderedSet) is of mode (CATEGORY 
      [2] gramschmidt: :(PositiveInteger) -- should replace by pretend
      [3] gramschmidt: :RMR -- should replace by pretend
      [4] gramschmidt: :(Matrix (Expression (Integer))) -- 
should replace by pretend

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ULSCONS 
   Warnings: 
      [1] termsToOutputForm:  l has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib UPXS 
   Warnings: 
      [1] termsToOutputForm:  l has no value

--------------non extending category----------------------
.. UnivariateTaylorSeries(#1,#2,#3) of cat 
(|Join| (|UnivariateTaylorSeriesCategory| |#1|) (CATEGORY |domain| 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib UTS 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ASP29 
   Warnings: 
      [1]  ISTATE has no value
      [2]  NEXTIT has no value
      [3]  NEVALS has no value
      [4]  NVECS has no value
      [5]  K has no value
      [6]  F has no value
      [7]  D has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib COMBF 
   Warnings: 
      [1] **: not known that (OrderedSet) is of mode (CATEGORY package 
      [2] facts: not known that (OrderedSet) is of mode (CATEGORY package 
      [3] summand: not known that (OrderedSet) is of mode (CATEGORY package
      [4] ipow:  n has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib D01AGNT 
   Warnings: 
      [1] continuousAtPoint?: not known that (AlgebraicallyClosedField) 
      [2] continuousAtPoint?: not known that (TranscendentalFunctionCategory)
      [3] functionIsOscillatory: not known that (OrderedSet) is of mode 
      [4] singularitiesOf:  str has no value

--------------non extending category----------------------
.. d01AgentsPackage of cat 
(CATEGORY |package| (SIGNATURE |rangeIsFinite| 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib D01AGNT 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FSPRMELT 
   Warnings: 
      [1] F2P: not known that (OrderedSet) is of mode 
      [2] K2P: not known that (OrderedSet) is of mode 
      [3] primitiveElement: not known that (Ring) is of mode 
      [4] primitiveElement: not known that (OrderedSet) is of mode 
      [5] F2UP: not known that (Ring) is of mode (CATEGORY $ 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NTSCAT 
; (DEFUN |NormalizedTriangularSetCategory| ...) is being compiled.
;; The variable |NormalizedTriangularSetCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |NormalizedTriangularSetCategory;| ...) is being compiled.
;; The variable |NormalizedTriangularSetCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib REGSET 
   Warnings: 
      [1] construct:  ts has no value
      [2] preprocess:  lp1 has no value
      [3] preprocess:  lp2 has no value
      [4] preprocess:  lts has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib REGSET 
Warning: REGSET;decompose has a duplicate definition in this file

--------------non extending category----------------------
.. RegularChain(#1,#2) of cat 
(|Join| (|RegularTriangularSetCategory| |#1| (|IndexedExponents| 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RGCHAIN 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RSETGCD 
   Warnings: 
      [1] toseInvertibleSet:  toSave has no value
      [2] prepareSubResAlgo:  toSave has no value
      [3] internalLastSubResultant:  toReturn has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RSDCMPK 
   Warnings: 
      [1] algebraicDecompose:  llpwt has no value
      [2] internalDecompose:  llpwt has no value
      [3] internalDecompose:  lts has no value
      [4] decompose:  toSave has no value
      [5] upDateBranches:  branches1 has no value
      [6] upDateBranches:  branches2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RSDCMPK 

--->/research2/test0819/mnt/fedora5/../../src/algebra/RSDCMPK.spad
-->RegularSetDecompositionPackage((KrullNumber (N LP Split))): 
Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/RSDCMPK.spad
-->RegularSetDecompositionPackage((numberOfVariables (N LP Split))): 
Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/RSDCMPK.spad
-->RegularSetDecompositionPackage((algebraicDecompose ((Record 
(: done Split) (: todo (List LpWT))) P TS B))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/RSDCMPK.spad
-->RegularSetDecompositionPackage((transcendentalDecompose ((Record 
(: done Split) (: todo (List LpWT))) P TS N))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/RSDCMPK.spad
-->RegularSetDecompositionPackage((transcendentalDecompose ((Record 
(: done Split) (: todo (List LpWT))) P TS))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/RSDCMPK.spad
-->RegularSetDecompositionPackage((internalDecompose ((Record 
(: done Split) (: todo (List LpWT))) P TS N B))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/RSDCMPK.spad
-->RegularSetDecompositionPackage((internalDecompose ((Record 
(: done Split) (: todo (List LpWT))) P TS N))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/RSDCMPK.spad
-->RegularSetDecompositionPackage((internalDecompose ((Record 
(: done Split) (: todo (List LpWT))) P TS))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/RSDCMPK.spad
-->RegularSetDecompositionPackage((decompose (Split LP Split B B))): 
Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/RSDCMPK.spad
-->RegularSetDecompositionPackage((decompose (Split LP Split B B B B B))): 
Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/RSDCMPK.spad
-->RegularSetDecompositionPackage((upDateBranches ((List LpWT) LP Split 
(List LpWT) Wip N))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/RSDCMPK.spad
-->RegularSetDecompositionPackage((convert ((String) (Record (: val 
(List P)) (: tower TS))))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/RSDCMPK.spad
-->RegularSetDecompositionPackage((printInfo ((Void) (List (Record 
(: val (List P)) (: tower TS))) N))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SFRTCAT 
; (DEFUN |SquareFreeRegularTriangularSetCategory| ...) is being compiled.
;; The variable |SquareFreeRegularTriangularSetCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |SquareFreeRegularTriangularSetCategory;| ...) is being compiled.
;; The variable |SquareFreeRegularTriangularSetCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SIGNEF 
   Warnings: 
      [1] sign: not known that (OrderedSet) is of mode 
      [2] smpsign: not known that (IntegralDomain) is of mode 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SNTSCAT 
; (DEFUN |SquareFreeNormalizedTriangularSetCategory| ...) is being compiled.
;; The variable |SquareFreeNormalizedTriangularSetCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |SquareFreeNormalizedTriangularSetCategory;| ...) is being compiled.
;; The variable |SquareFreeNormalizedTriangularSetCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SOLVETRA 
   Warnings: 
      [1] solveInner: not known that (OrderedSet) is of mode 
      [2] solveInner: not known that (Ring) is of mode 
      [3] tryToTrans: not known that (TranscendentalFunctionCategory) is of 
      [4] tryToTrans: not known that (AlgebraicallyClosedField) is of mode 
      [5] subsTan: not known that (IntegralDomain) is of mode 
      [6] buildnexpr:  anscoeff has no value
      [7] buildnexpr:  ansmant has no value
      [8] combineLog:  ans has no value
      [9] funcinv: not known that (OrderedSet) is of mode 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SRDCMPK 
   Warnings: 
      [1] algebraicDecompose:  lts has no value
      [2] internalDecompose:  llpwt has no value
      [3] internalDecompose:  lts has no value
      [4] decompose:  toSave has no value
      [5] upDateBranches:  branches1 has no value
      [6] upDateBranches:  branches2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SRDCMPK 
   Processing SquareFreeRegularSetDecompositionPackage for Browser database:

-->/research2/test0819/mnt/fedora5/../../src/algebra/SRDCMPK.spad
-->SquareFreeRegularSetDecompositionPackage((KrullNumber (N LP
-->Split))): Not documented!!!!

-->/research2/test0819/mnt/fedora5/../../src/algebra/SRDCMPK.spad
-->SquareFreeRegularSetDecompositionPackage((numberOfVariables (N LP
-->Split))): Not documented!!!!

-->/research2/test0819/mnt/fedora5/../../src/algebra/SRDCMPK.spad
-->SquareFreeRegularSetDecompositionPackage((algebraicDecompose
-->((Record (: done Split) (: todo (List LpWT))) P TS))): Not
-->documented!!!!

-->/research2/test0819/mnt/fedora5/../../src/algebra/SRDCMPK.spad
-->SquareFreeRegularSetDecompositionPackage((transcendentalDecompose
-->((Record (: done Split) (: todo (List LpWT))) P TS N))): Not
-->documented!!!!

-->/research2/test0819/mnt/fedora5/../../src/algebra/SRDCMPK.spad
-->SquareFreeRegularSetDecompositionPackage((transcendentalDecompose
-->((Record (: done Split) (: todo (List LpWT))) P TS))): Not
-->documented!!!!

-->/research2/test0819/mnt/fedora5/../../src/algebra/SRDCMPK.spad
-->SquareFreeRegularSetDecompositionPackage((internalDecompose
-->((Record (: done Split) (: todo (List LpWT))) P TS N B))): Not
-->documented!!!!

-->/research2/test0819/mnt/fedora5/../../src/algebra/SRDCMPK.spad
-->SquareFreeRegularSetDecompositionPackage((internalDecompose
-->((Record (: done Split) (: todo (List LpWT))) P TS N))): Not
-->documented!!!!

-->/research2/test0819/mnt/fedora5/../../src/algebra/SRDCMPK.spad
-->SquareFreeRegularSetDecompositionPackage((internalDecompose
-->((Record (: done Split) (: todo (List LpWT))) P TS))): Not
-->documented!!!!

-->/research2/test0819/mnt/fedora5/../../src/algebra/SRDCMPK.spad
-->SquareFreeRegularSetDecompositionPackage((decompose (Split LP Split
-->B B))): Not documented!!!!

-->/research2/test0819/mnt/fedora5/../../src/algebra/SRDCMPK.spad
-->SquareFreeRegularSetDecompositionPackage((decompose (Split LP Split
-->B B B B B))): Not documented!!!!

-->/research2/test0819/mnt/fedora5/../../src/algebra/SRDCMPK.spad
-->SquareFreeRegularSetDecompositionPackage((upDateBranches ((List
-->LpWT) LP Split (List LpWT) Wip N))): Not documented!!!!

-->/research2/test0819/mnt/fedora5/../../src/algebra/SRDCMPK.spad
-->SquareFreeRegularSetDecompositionPackage((convert ((String) (Record
-->(: val (List P)) (: tower TS))))): Not documented!!!!

-->/research2/test0819/mnt/fedora5/../../src/algebra/SRDCMPK.spad
-->SquareFreeRegularSetDecompositionPackage((printInfo ((Void) (List
-->(Record (: val (List P)) (: tower TS))) N))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SREGSET 
   Warnings: 
      [1] construct:  ts has no value
      [2] internalAugment:  lts has no value
      [3] preprocess:  lp1 has no value
      [4] preprocess:  lp2 has no value
      [5] preprocess:  lts has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ZDSOLVE 
   Warnings: 
      [1] squareFree:  toSave has no value
      [2] realSolve: not known that (Ring) is of mode 
      [3] realSolve:  toSave has no value
      [4] positiveSolve:  toSave has no value
      [5] univariateSolve:  lq2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib IRURPK 
   Warnings: 
      [1] makeLinearAndMonic:  toSave has no value
      [2] rur:  toSave has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LEXTRIPK 
   Warnings: 
      [1] trueVariables:  truels has no value
      [2] lexTriangular:  polnum has no value
      [3] lexTriangular:  toSave has no value
      [4] squareFreeLexTriangular:  polnum has no value
      [5] squareFreeLexTriangular:  toSave has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib NORMPK 
   Semantic Errors: 
      [1] recip:  hesrg has two modes: 
 
   Warnings: 
      [1] normalizedAssociate:  mp has no value
      [2] normalizedAssociate:  tp has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib QCMPACK 
   Warnings: 
      [1] removeSuperfluousCases:  maxcases has no value
      [2] removeSuperfluousCases:  lpwt1 has no value
      [3] removeSuperfluousCases:  headmaxcases has no value
      [4] removeSuperfluousCases:  toSave has no value
      [5] removeSuperfluousQuasiComponents:  maxlts has no value
      [6] removeSuperfluousQuasiComponents:  headmaxlts has no value
      [7] removeSuperfluousQuasiComponents:  toSave has no value
      [8] branchIfCan:  polnum has no value
      [9] prepareDecompose:  branches has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RURPK 
   Warnings: 
      [1] rur:  lq has no value
      [2] rur:  q has no value
      [3] rur:  toSave has no value
      [4] rur:  toReturn has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SFRGCD 
   Warnings: 
      [1] stosePrepareSubResAlgo:  toSave has no value
      [2] stoseInternalLastSubResultant:  toReturn has no value
      [3] stoseInvertibleSetsqfreg:  toSave has no value
      [4] stoseInvertibleSetreg:  toSave has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SFRGCD 
   Processing SquareFreeRegularTriangularSetGcdPackage for Browser database:

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad-->
SquareFreeRegularTriangularSetGcdPackage((startTableGcd! ((Void) S S
S))): Not documented!!!!


--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((stopTableGcd!
    ((Void)))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((startTableInvSet!
    ((Void) S S S))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((stopTableInvSet!
    ((Void)))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((stosePrepareSubResAlgo
    ((List LpWT) P P TS))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((stoseInternalLastSubResultant
    ((List PWT) P P TS B B))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((stoseInternalLastSubResultant
    ((List PWT) (List LpWT) V B))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((stoseIntegralLastSubResultant
    ((List PWT) P P TS))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((stoseLastSubResultant
    ((List PWT) P P TS))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((stoseInvertible?
    (B P TS))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((stoseInvertible?sqfreg
    ((List BWT) P TS))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((stoseInvertibleSetsqfreg
    (Split P TS))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((stoseInvertible?reg
    ((List BWT) P TS))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((stoseInvertibleSetreg
    (Split P TS))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((stoseInvertible?
    ((List BWT) P TS))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((stoseInvertibleSet
    (Split P TS))): Not documented!!!!

--->/research2/test0819/mnt/fedora5/../../src/algebra/SFRGCD.spad
-->SquareFreeRegularTriangularSetGcdPackage((stoseSquareFreePart
    ((List PWT) P TS))): Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SFQCMPK 
   Warnings: 
      [1] removeSuperfluousCases:  maxcases has no value
      [2] removeSuperfluousCases:  lpwt1 has no value
      [3] removeSuperfluousCases:  headmaxcases has no value
      [4] removeSuperfluousCases:  toSave has no value
      [5] removeSuperfluousQuasiComponents:  maxlts has no value
      [6] removeSuperfluousQuasiComponents:  headmaxlts has no value
      [7] removeSuperfluousQuasiComponents:  toSave has no value
      [8] branchIfCan:  polnum has no value
      [9] prepareDecompose:  branches has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ODEEF 
   Warnings: 
      [1] solve: not known that (OrderedSet) is of mode 
      [2] parseODE:  n has no value
      [3] parseODE:  c has no value
      [4] parseODE:  k has no value
      [5] getcoeff: not known that (OrderedSet) is of mode 
      [6] getcoeff: not known that (Ring) is of mode 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RINTERP 
   Processing RationalInterpolation for Browser database:
--->-->RationalInterpolation((interpolate ((Fraction (Polynomial F))
      (List F) (List F) (NonNegativeInteger) (NonNegativeInteger)))): 
       Not documented!!!!

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ABELGRP 
; (DEFUN |AbelianGroup| ...) is being compiled.
;; The variable |AbelianGroup;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ABELMON 
; (DEFUN |AbelianMonoid| ...) is being compiled.
;; The variable |AbelianMonoid;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ABELSG 
; (DEFUN |AbelianSemiGroup| ...) is being compiled.
;; The variable |AbelianSemiGroup;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ALAGG 
; (DEFUN |AssociationListAggregate| ...) is being compiled.
;; The variable |AssociationListAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |AssociationListAggregate;| ...) is being compiled.
;; The variable |AssociationListAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib CABMON 
; (DEFUN |CancellationAbelianMonoid| ...) is being compiled.
;; The variable |CancellationAbelianMonoid;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib COMRING 
; (DEFUN |CommutativeRing| ...) is being compiled.
;; The variable |CommutativeRing;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DIFRING 
; (DEFUN |DifferentialRing| ...) is being compiled.
;; The variable |DifferentialRing;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib DIVRING 
; (DEFUN |DivisionRing| ...) is being compiled.
;; The variable |DivisionRing;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ENTIRER 
; (DEFUN |EntireRing| ...) is being compiled.
;; The variable |EntireRing;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ES- 
   Warnings: 
      [1] tower: not known that (OrderedSet) is of mode 
      [2] freeOf?: not known that (OrderedSet) is of mode 
      [3] eval:  IN has no value
      [4] eval:  f has no value
      [5] eval:  s has no value
      [6] map:  IN has no value
      [7] map:  x has no value
 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ES 
; (DEFUN |ExpressionSpace| ...) is being compiled.
;; The variable |ExpressionSpace;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib EUCDOM- 
   Warnings: 
      [1] principalIdeal:  coef1 has no value
      [2] principalIdeal:  coef2 has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib EUCDOM 
; (DEFUN |EuclideanDomain| ...) is being compiled.
;; The variable |EuclideanDomain;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FFIELDC- 
   Warnings: 
      [1] conditionP: not known that (Ring) is of mode 
      [2] order: signature of lhs not unique: (PositiveInteger)S chosen
      [3] order:  ord has no value
      [4] discreteLog:  disc1 has no value
      [5] discreteLog:  disclog has no value
      [6] discreteLog: not known that (IntegralDomain) is of mode 
      [7] gcdPolynomial: not known that (Ring) is of mode 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FFIELDC 
; (DEFUN |FiniteFieldCategory| ...) is being compiled.
;; The variable |FiniteFieldCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib FPS 
; (DEFUN |FloatingPointSystem| ...) is being compiled.
;; The variable |FloatingPointSystem;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GCDDOM- 
   Warnings: 
      [1] gcdPolynomial: not known that (Ring) is of mode 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib GCDDOM 
; (DEFUN |GcdDomain| ...) is being compiled.
;; The variable |GcdDomain;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib HOAGG 
; (DEFUN |HomogeneousAggregate| ...) is being compiled.
;; The variable |HomogeneousAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |HomogeneousAggregate;| ...) is being compiled.
;; The variable |HomogeneousAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ILIST 
   Warnings: 
      [1] latex:  s has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INS- 
   Warnings: 
      [1] factor: not known that (IntegralDomain) is of mode 
      [2] patternMatch: not known that (SetCategory) is of mode 
      [3] powmod:  y has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INS 
; (DEFUN |IntegerNumberSystem| ...) is being compiled.
;; The variable |IntegerNumberSystem;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INT 
   Warnings: 
      [1] OMwrite: pretend(String) -- should replace by @
      [2] hash: signature of lhs not unique: $$ chosen
      [3] factorPolynomial: not known that (UnivariatePolynomialCategory 
      [4] gcdPolynomial: not known that (UnivariatePolynomialCategory 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib INTDOM 
; (DEFUN |IntegralDomain| ...) is being compiled.
;; The variable |IntegralDomain;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ISTRING 
   Warnings: 
      [1] split:  j has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LNAGG 
; (DEFUN |LinearAggregate| ...) is being compiled.
;; The variable |LinearAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |LinearAggregate;| ...) is being compiled.
;; The variable |LinearAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib LSAGG 
; (DEFUN |ListAggregate| ...) is being compiled.
;; The variable |ListAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |ListAggregate;| ...) is being compiled.
;; The variable |ListAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MONOID 
; (DEFUN |Monoid| ...) is being compiled.
;; The variable |Monoid;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib MTSCAT 
; (DEFUN |MultivariateTaylorSeriesCategory| ...) is being compiled.
;; The variable |MultivariateTaylorSeriesCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |MultivariateTaylorSeriesCategory;| ...) is being compiled.
;; The variable |MultivariateTaylorSeriesCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. NonNegativeInteger of cat 
(|Join| (|OrderedAbelianMonoidSup|) (|Monoid|) (CATEGORY |domain| `
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|IntegerNumberSystem|)    finalizing nrlib NNI 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib OINTDOM 
; (DEFUN |OrderedIntegralDomain| ...) is being compiled.
;; The variable |OrderedIntegralDomain;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib ORDRING 
; (DEFUN |OrderedRing| ...) is being compiled.
;; The variable |OrderedRing;AL| is undefined.
;; The compiler will assume this variable is a global.

--------------non extending category----------------------
.. PositiveInteger of cat 
(|Join| (|AbelianSemiGroup|) (|OrderedSet|) (|Monoid|) (CATEGORY |domain| (SIGNATURE |gcd| ($ $ $)) (ATTRIBUTE (|commutative| "*"))))   has no 
\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


(|OrderedAbelianMonoidSup|)    finalizing nrlib PI 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib POLYCAT- 
   Warnings: 
      [1] eval:  IN has no value
      [2] coefficient: not known that (Ring) is of mode 
      [3] totalDegree:  w has no value
      [4] reducedSystem:  IN has no value
      [5] reducedSystem:  r has no value
      [6] reducedSystem: not known that (Ring) is of mode 
      [7] solveLinearPolynomialEquation: not known that (Ring) is of mode 
      [8] factorPolynomial: not known that (Ring) is of mode 
      [9] factor: not known that (IntegralDomain) is of mode 
      [10] conditionP: :(Integer) --should replace by pretend
      [11] patternMatch: not known that (SetCategory) is of mode 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib POLYCAT 
; (DEFUN |PolynomialCategory| ...) is being compiled.
;; The variable |PolynomialCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |PolynomialCategory;| ...) is being compiled.
;; The variable |PolynomialCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PSETCAT- 
   Warnings: 
      [1] collectUnder:  lq has no value
      [2] collectUpper:  lq has no value
      [3] collect:  lq has no value
      [4] sort:  us has no value
      [5] sort:  vs has no value
      [6] sort:  ws has no value
      [7] localTriangular?:  q has no value
      [8] headRemainder:  r has no value
      [9] rewriteIdealWithHeadRemainder:  rs has no value
      [10] rewriteIdealWithRemainder:  rs has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PSETCAT- 
Warning: PSETCAT-;exactQuo has a duplicate definition in this file

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib PSETCAT 
; (DEFUN |PolynomialSetCategory| ...) is being compiled.
;; The variable |PolynomialSetCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |PolynomialSetCategory;| ...) is being compiled.
;; The variable |PolynomialSetCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib QFCAT- 
   Warnings: 
      [1] reducedSystem: not known that (Ring) is of mode 
      [2] patternMatch: not known that (SetCategory) is of mode 

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib QFCAT 
; (DEFUN |QuotientFieldCategory| ...) is being compiled.
;; The variable |QuotientFieldCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |QuotientFieldCategory;| ...) is being compiled.
;; The variable |QuotientFieldCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RCAGG 
; (DEFUN |RecursiveAggregate| ...) is being compiled.
;; The variable |RecursiveAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |RecursiveAggregate;| ...) is being compiled.
;; The variable |RecursiveAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RING 
; (DEFUN |Ring| ...) is being compiled.
;; The variable |Ring;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RNG 
; (DEFUN |Rng| ...) is being compiled.
;; The variable |Rng;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RNS- 
   Warnings: 
      [1] patternMatch: not known that (SetCategory) is of mode (CATEGORY domain (SIGNATURE round (S S)) (SIGNATURE truncate (S S)) (SIGNATURE fractionPart (S S)) (SIGNATURE floor (S S)) (SIGNATURE ceiling (S S)) (SIGNATURE norm (S S)) (SIGNATURE patternMatch ((PatternMatchResult (Float) S) S (Pattern (Float)) (PatternMatchResult (Float) S))) (SIGNATURE convert ((Pattern (Float)) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE coerce (S (Integer))) (SIGNATURE convert ((DoubleFloat) S)) (SIGNATURE convert ((Float) S)) (SIGNATURE coerce (S (Fraction (Integer)))) (SIGNATURE coerce (S S)) (SIGNATURE coerce (S (Integer))) (SIGNATURE characteristic ((NonNegativeInteger))) (SIGNATURE coerce ((OutputForm) S)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib RNS 
; (DEFUN |RealNumberSystem| ...) is being compiled.
;; The variable |RealNumberSystem;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SETAGG 
; (DEFUN |SetAggregate| ...) is being compiled.
;; The variable |SetAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |SetAggregate;| ...) is being compiled.
;; The variable |SetAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SETCAT 
; (DEFUN |SetCategory| ...) is being compiled.
;; The variable |SetCategory;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SINT 
   Warnings: 
      [1] hash: signature of lhs not unique: $$ chosen

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SINT 
(SPADLET |$noSubsets| NIL)
Value = NIL

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib STAGG 
; (DEFUN |StreamAggregate| ...) is being compiled.
;; The variable |StreamAggregate;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |StreamAggregate;| ...) is being compiled.
;; The variable |StreamAggregate;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib SYMBOL 
   Warnings: 
      [1] latex:  s has no value
      [2] latex:  sc has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib TSETCAT- 
   Warnings: 
      [1] basicSet:  p has no value
      [2] basicSet:  gps has no value
      [3] basicSet:  bps has no value
      [4] initials:  lip has no value
      [5] initiallyReduced?:  red has no value
      [6] reduce: signature of lhs not unique: PPS(Mapping P P P)(Mapping (Boolean) P P) chosen
      [7] rewriteSetWithReduction:  rs has no value
      [8] select: signature of lhs not unique: (Union P failed)SV chosen
      [9] collectQuasiMonic:  newlp has no value

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib TSETCAT 
; (DEFUN |TriangularSetCategory| ...) is being compiled.
;; The variable |TriangularSetCategory;AL| is undefined.
;; The compiler will assume this variable is a global.
; (DEFUN |TriangularSetCategory;| ...) is being compiled.
;; The variable |TriangularSetCategory;CAT| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib UFD- 
   Warnings: 
      [1] squareFreePart: not known that (IntegralDomain) is of mode (CATEGORY domain (SIGNATURE squareFreePart (S S)) (SIGNATURE prime? ((Boolean) S)))

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{section}
\begin{verbatim}


   finalizing nrlib UFD 
; (DEFUN |UniqueFactorizationDomain| ...) is being compiled.
;; The variable |UniqueFactorizationDomain;AL| is undefined.
;; The compiler will assume this variable is a global.

\end{verbatim}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cleardoublepage
\phantomsection
\addcontentsline{toc}{chapter}{Index}
\printindex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end{document}

