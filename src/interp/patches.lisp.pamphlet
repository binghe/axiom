\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/interp patches.lisp}
\author{Timothy Daly}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\subsection{toplevel}
The function top-level is the very root of the normal invocation
history stack. Control will pass to the restart function which is 
also in this file.

For some unknown reason toplevel was redefined to incorrectly
call lisp::unwind whereas it is defined (in this file) to be
interned in the boot package. We've returned toplevel to its
previous definition.
\begin{chunk}{toplevel}
(defun toplevel (&rest foo) (throw '|top_level| '|restart|))
;;(defun toplevel (&rest foo) (lisp::unwind))

\end{chunk}
\section{License}
\begin{verbatim}
;; Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are
;; met:
;;
;;     - Redistributions of source code must retain the above copyright
;;       notice, this list of conditions and the following disclaimer.
;;
;;     - Redistributions in binary form must reproduce the above copyright
;;       notice, this list of conditions and the following disclaimer in
;;       the documentation and/or other materials provided with the
;;       distribution.
;;
;;     - Neither the name of The Numerical ALgorithms Group Ltd. nor the
;;       names of its contributors may be used to endorse or promote products
;;       derived from this software without specific prior written permission.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
;; IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
;; TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;; PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
;; OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;; PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;; NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

\end{verbatim}
\begin{chunk}{*}


(in-package "BOOT")
;;patches for now

(defun CATCHALL (a &rest b) a) ;; not correct but ok for now
(defvar |$demoFlag| nil)

(define-function '|construct| #'list) ;; NEEDED , SPAD-COMPILER generated Lisp code
(define-function '|COMP,TRAN| #'comp-tran) ;called by |compWithMappingMode|

(defvar |Undef| (function |Undef|)) ;needed in NewbFVectorCopy
(define-function '|spadHash| #'sxhash)

(defun |mkAutoLoad| (fn cname)
   (function (lambda (&rest args)
                 (|autoLoad| fn cname)
                 (apply cname args))))

(setq |$printTimeIfTrue| nil)


(defmacro dribinit (streamvar)
  `(if (is-console ,streamvar)
       (setq ,streamvar *terminal-io*)))

(defun clear-highlight ()
  (let ((|$displaySetValue| nil))
    (declare (special |$displaySetValue| |$saveHighlight| |$saveSpecialchars|))
    (setq |$saveHighlight| |$highlightAllowed|
          |$highlightAllowed| nil)
    (setq |$saveSpecialchars| |$specialCharacters|)
    (|setOutputCharacters| '(|plain|))))

(defun reset-highlight ()
  (setq |$highlightAllowed| |$saveHighlight|)
  (setq |$specialCharacters| |$saveSpecialchars|))

(defun |spool| (filename)
  (cond ((null filename)
         (dribble) (TERPRI)
         (reset-highlight))
        ((probe-file (string (car filename)))
         (error (format nil "file ~a already exists" (car filename))))
        (t (dribble (string (car filename)))
           (TERPRI)
           (clear-highlight))
    ))

\end{chunk}
We need to repatch this for GCL-2.6.8pre2. There appears to be an issue
about the proper handling of directory names. The pathname returned by
truename does not appear to be a string so we need to call namestring.
It used to read:
\begin{verbatim}
(defun |cd| (args)
  (cond ((null args)
#+(and :lucid :ibm/370)
         (setq $current-directory "")
#-(and :lucid :ibm/370)
         (setq $current-directory 
           (namestring (truename (user-homedir-pathname)))) )
        ((eql (|directoryp| (interp-make-directory (car args))) 1)
         (setq $current-directory 
           (namestring (truename (interp-make-directory (car args)))))))
#+(or :kcl :ibcl :CCL) (system::chdir $current-directory)
#+(and :lucid :ibm/370)
  (setq *default-pathname-defaults* "")
#-(and :lucid :ibm/370)
  (setq *default-pathname-defaults* (pathname $current-directory))
  (|sayKeyedMsg| "The current AXIOM default directory is %1"
   (list (namestring $current-directory))))
\end{verbatim}
\begin{chunk}{*}
(defun |cd| (args)
  (cond
    ((null args)
#+(and :lucid :ibm/370)
     (setq $current-directory "")
#-(and :lucid :ibm/370)
     (setq $current-directory 
       (namestring (truename (user-homedir-pathname)))) )
    ((eql (|directoryp| (interp-make-directory (car args))) 1)
     (setq $current-directory 
       (namestring (truename (interp-make-directory (car args)))))))
#+(or :kcl :ibcl :CCL) (system::chdir $current-directory)
#+(and :lucid :ibm/370)
  (setq *default-pathname-defaults* "")
#-(and :lucid :ibm/370)
  (setq *default-pathname-defaults* (pathname $current-directory))
  (|sayKeyedMsg| "The current AXIOM default directory is %1"
    (list (namestring $current-directory))))

\getchunk{toplevel}
(define-function 'top-level #'toplevel)
(define-function 'unwind #'|spadThrow|)
(define-function 'resume #'|spadThrow|)

(DEFUN BUMPCOMPERRORCOUNT () )

(define-function '|isBpiOrLambda| #'FBOUNDP)
;;(defun |isSharpVar| (x) (and (identp x) (char= (elt (pname x) 0) #\#)))

(setq |$useInternalHistoryTable| T)
(defvar |$internalHistoryTable| ())
(setq |$inputPromptType| '|step|)
(setq |nullstream| '|nullstream|)
(setq |nonnullstream| '|nonnullstream|)
(defun |cpCms| (prefix &optional (string (|getSystemCommandLine|)))
  (setq string (concat prefix string))
  (if (equal string "") (obey "sh")
    (obey string))
   (|terminateSystemCommand|))
(setq *print-escape* nil) 
#+(or :IEEE-FLOATING-POINT)
 (setq system:*print-nans* T)

(defun /EF (&rest foo)
  (obey (concat "vi " (namestring (vmlisp::makeInputFilename /EDITFILE)))))
#-:CCL
  (defun user::start () (in-package "BOOT") (boot::|start|))
#+:CCL
  (defun user::start () (setq *package* (find-package "BOOT")) (boot::|start|))

(setq |$algebraOutputStream|
   (setq |$fortranOutputStream|
      (setq |$texOutputStream|
          (setq |$formulaOutputStream|
             (setq |conOutStream| (make-synonym-stream '*terminal-io*))))))

(defun AKCL-VERSION () system::*akcl-version*)
(defun SHAREDITEMS (x) T) ;;checked in history code
(defun whocalled (n) nil) ;; no way to look n frames up the stack
(defun setletprintflag (x) x)
(defun |normalizeTimeAndStringify| (time)
  (if (= time 0.0) "0" (format nil "~,1F" time)))

(define-function '|eval| #'eval)

(defun |libraryFileLists| () '((SPAD SPADLIBS J)))

(defun GETZEROVEC (n) (MAKE-ARRAY n :initial-element 0))

(proclaim '(ftype (function (t) t) identity))
(defun identity (x) x)
(defvar identity #'identity) ; make LispVM code for handling constants to work


(defun readSpadExpr ()
  (let* ((line (cdar (preparse in-stream))))
    (cond ((or (not (stringp line)) (zerop (SIZE line)))
       (SAY "   Scratchpad -- input")
       (READSPADEXPR))
      (t (|parseTransform| (postTransform (|string2SpadTree| line)))))))

(setq |$sourceFiles| ()) ;; set in readSpad2Cmd


(setq |$highlightFontOn| (concat " " $BOLDSTRING))
(setq |$highlightFontOff| (concat $NORMALSTRING " "))
(define-function 'SUBSTQ #'SUBSTEQ) ;; needed for substNames (always copy)
(setq |$specialCharacters| |$plainRTspecialCharacters|)

;; following code is to mimic def of MAP in NEWSPAD LISP
;; i.e. MAP in boot package is a self evaluating form
;; #-:CCL (eval-when (eval load compile) (shadow 'map))
;; #-:CCL (defmacro map (&rest args) `'(map ,@args))
(eval-when (eval load compile) (shadow 'map))
(defmacro map (&rest args) `'(map ,@args))

(setq vmlisp::$current-directory (make-directory *default-pathname-defaults*))

(|initializeTimedNames| |$interpreterTimedNames| |$interpreterTimedClasses|)

(defun boot::|printCopyright| ()
 (format t "there is no such thing as a simple job -- ((iHy))~%"))

(defun |setViewportProcess| ()
  (setq |$ViewportProcessToWatch|
     (princ-to-string (CDR
          (|processInteractive|         '(|key| (|%%| -2)) NIL) ))))

(defun |waitForViewport| ()
  (progn
   (do ()
       ((not (zerop (obey
         (concat
          "ps "
          |$ViewportProcessToWatch|
          " > /dev/null")))))
       ())
   (|sockSendInt| |$MenuServer| 1)
   (|setIOindex| (- |$IOindex| 3))
  )
)

(defun |makeVector| (els type)
 (make-array (length els) :element-type (or type t) :initial-contents els))

(defun |makeList| (size el)
 (make-list size :initial-element el) )

(defun print-xdr-stream (x y z)
 (format y "XDR:~A" (xdr-stream-name x)))

(defstruct (xdr-stream
                (:print-function  print-xdr-stream))
           "A structure to hold XDR streams. The stream is printed out."
           (handle ) ;; this is what is used for xdr-open xdr-read xdr-write
           (name ))  ;; this is used for printing

(defun |xdrOpen| (str dir)
 (make-xdr-stream :handle (system:xdr-open str) :name str))

(defun |xdrOpen| (str dir)
 (format t "xdrOpen called"))

(defun |xdrRead| (xstr r)
 (system:xdr-read (xdr-stream-handle xstr) r) )

(defun |xdrWrite| (xstr d)
 (system:xdr-write (xdr-stream-handle xstr) d) )

;; here is a test for XDR
;; (setq *print-array* T)
;; (setq foo (open "xdrtest" :direction :output))
;; (setq xfoo (|xdrOpen| foo))
;; (|xdrWrite| xfoo "hello: This contains an integer, a float and a float array")
;; (|xdrWrite| xfoo 42)
;; (|xdrWrite| xfoo 3.14159)
;; (|xdrWrite| xfoo (make-array 10 :element-type 'long-float :initial-element 2.78111D12))
;; (close foo)
;; (setq foo (open "xdrtest" :direction :input))
;; (setq xfoo (|xdrOpen| foo))
;; (|xdrRead| xfoo "")
;; (|xdrRead| xfoo 0)
;; (|xdrRead| xfoo 0.0)
;; (|xdrRead| xfoo (make-array 10 :element-type 'long-float ))
;; (setq *print-array* NIL)

(setq /MAJOR-VERSION 2)
(setq echo-meta nil)
(defun /versioncheck (n) (unless (= n /MAJOR-VERSION) (throw 'versioncheck -1)))

\end{chunk}
\eject
\begin{thebibliography}{99}
\bibitem{1} CMUCL {\bf src/interp/util.lisp.pamphlet}
\end{thebibliography}
\end{document}
