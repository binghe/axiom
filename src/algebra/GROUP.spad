)abbrev category GROUP Group
++ Description:
++ The class of multiplicative groups, that is, monoids with
++ multiplicative inverses.
++
++ Axioms\br
++ \tab{5}\spad{leftInverse("*":(%,%)->%,inv)}\tab{5}\spad{inv(x)*x = 1}\br
++ \tab{5}\spad{rightInverse("*":(%,%)->%,inv)}\tab{4}\spad{x*inv(x) = 1}

Group() : Category == SIG where

  SIG ==> Monoid with

    inv : % -> %               
      ++ inv(x) returns the inverse of x.

    "/" : (%,%) -> %           
      ++ x/y is the same as x times the inverse of y.

    "**" : (%,Integer) -> %    
      ++ x**n returns x raised to the integer power n.

    "^" : (%,Integer) -> %     
      ++ x^n returns x raised to the integer power n.

    unitsKnown                
      ++ unitsKnown asserts that recip only returns
      ++ "failed" for non-units.

    conjugate : (%,%) -> %
      ++ conjugate(p,q) computes \spad{inv(q) * p * q}; this is 
      ++ 'right action by conjugation'.

    commutator : (%,%) -> %
      ++ commutator(p,q) computes \spad{inv(p) * inv(q) * p * q}.

   add

     import RepeatedSquaring(%)

     x:% / y:% == x*inv(y)

     recip(x:%) == inv(x)

     _^(x:%, n:Integer):% == x ** n

     x:% ** n:Integer ==
       zero? n => 1
       n<0 => expt(inv(x),(-n) pretend PositiveInteger)
       expt(x,n pretend PositiveInteger)

     conjugate(p,q) == inv(q) * p * q

     commutator(p,q) == inv(p) * inv(q) * p * q

