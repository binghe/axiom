)abbrev domain U16MAT U16Matrix
++ Author: Waldek Hebisch
++ Description:
++ This is a low-level domain which implements matrices
++ (two dimensional arrays) of 16-bit integers.
++ Indexing is 0 based, there is no bound checking (unless
++ provided by lower level).

U16Matrix() : SIG == CODE where

  SIG ==> MatrixCategory(Integer, U16Vector, U16Vector) with

    qnew : (Integer, Integer) -> %
      ++ qnew(n, m) creates a new n by m matrix of zeros.
      ++
      ++X qnew(3,4)$U16Matrix()

  CODE ==> add

    R ==> Integer

    Qelt2    ==> AREF2U16$Lisp
    Qsetelt2 ==> SETAREF2U16$Lisp
    Qnrows   ==> ANROWSU16$Lisp
    Qncols   ==> ANCOLSU16$Lisp
    Qnew     ==> MAKEMATRIXU16$Lisp
    Qnew1    ==> MAKEMATRIX1U16$Lisp

    minRowIndex x == 0

    minColIndex x == 0

    nrows x == Qnrows(x)

    ncols x == Qncols(x)

    maxRowIndex x == Qnrows(x) - 1

    maxColIndex x == Qncols(x) - 1

    qelt(m, i, j) == Qelt2(m, i, j)

    elt(m : %, i : Integer, j : Integer) : R == Qelt2(m, i, j)

    qsetelt!(m, i, j, r) == Qsetelt2(m, i, j, r)

    setelt(m : %, i : Integer, j : Integer, r : R) == Qsetelt2(m, i, j, r)

    empty() == Qnew(0$Integer, 0$Integer)

    qnew(rows, cols) == Qnew(rows, cols)

    new(rows, cols, a) == Qnew1(rows, cols, a)

