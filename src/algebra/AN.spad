)abbrev domain AN AlgebraicNumber
++ Author: James Davenport
++ Date Created: 9 October 1995
++ Date Last Updated: 10 October 1995 (JHD)
++ Description:
++ Algebraic closure of the rational numbers, with mathematical =

AlgebraicNumber(): SIG == CODE where

  Z   ==> Integer
  P   ==> SparseMultivariatePolynomial(Z, Kernel %)
  SUP ==>  SparseUnivariatePolynomial

  SIG ==> Join(ExpressionSpace, AlgebraicallyClosedField,
               RetractableTo Z, RetractableTo Fraction Z,
               LinearlyExplicitRingOver Z, RealConstant,
               LinearlyExplicitRingOver Fraction Z,
               CharacteristicZero,
               ConvertibleTo Complex Float, DifferentialRing) with

    coerce : P -> %
      ++ coerce(p) returns p viewed as an algebraic number.

    numer : % -> P
      ++ numer(f) returns the numerator of f viewed as a
      ++ polynomial in the kernels over Z.
      ++
      ++X t1:=sqrt(3)/sqrt(5)
      ++X numer t1

    denom : % -> P
      ++ denom(f) returns the denominator of f viewed as a
      ++ polynomial in the kernels over Z.
      ++
      ++X t1:=sqrt(3)/sqrt(5)
      ++X denom t1

    reduce : % -> %
      ++ reduce(f) simplifies all the unreduced algebraic numbers
      ++ present in f by applying their defining relations.

    norm : (SUP(%),Kernel %) -> SUP(%)
      ++ norm(p,k) computes the norm of the polynomial p
      ++ with respect to the extension generated by kernel k

    norm : (SUP(%),List Kernel %) -> SUP(%)
      ++ norm(p,l) computes the norm of the polynomial p
      ++ with respect to the extension generated by kernels l

    norm : (%,Kernel %) -> %
      ++ norm(f,k) computes the norm of the algebraic number f
      ++ with respect to the extension generated by kernel k

    norm : (%,List Kernel %) -> %
      ++ norm(f,l) computes the norm of the algebraic number f
      ++ with respect to the extension generated by kernels l

  CODE ==> InnerAlgebraicNumber add

    Rep:=InnerAlgebraicNumber
    a,b:%

    zero? a == 
      trueEqual(a::Rep,0::Rep)

    one? a == 
      trueEqual(a::Rep,1::Rep)

    a=b == 
      trueEqual((a-b)::Rep,0::Rep)

