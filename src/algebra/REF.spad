)abbrev domain REF Reference
++ Author: Stephen M. Watt
++ Description:  
++ \spadtype{Reference} is for making a changeable instance
++ of something.

Reference(S) : SIG == CODE where
  S : Type

  SIG ==> Type with

    ref : S -> %
      ++  ref(n) creates a pointer (reference) to the object n.

    elt : % -> S
      ++ elt(n) returns the object n.

    setelt : (%, S) -> S
      ++ setelt(n,m) changes the value of the object n to m.

    deref : % -> S
      ++ deref(n) is equivalent to \spad{elt(n)}.

    setref : (%, S) -> S
      ++ setref(n,m) same as \spad{setelt(n,m)}.

    _=  : (%, %) -> Boolean
      ++ a=b tests if \spad{a} and b are equal.

    if S has SetCategory then SetCategory

  CODE ==> add

        Rep := Record(value: S)

        p = q        == EQ(p, q)$Lisp

        ref v        == [v]

        elt p        == p.value

        setelt(p, v) == p.value := v

        deref p      == p.value

        setref(p, v) == p.value := v

        if S has SetCategory then

          coerce p ==
            prefix(message("ref"@String), [p.value::OutputForm])

