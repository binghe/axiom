)abbrev domain IDPAM IndexedDirectProductAbelianMonoid
++ Author: Mark Botch
++ Description:
++ Indexed direct products of abelian monoids over an abelian monoid 
++ \spad{A} of generators indexed by the ordered set S. All items have 
++ finite support. Only non-zero terms are stored.

IndexedDirectProductAbelianMonoid(A,S) : SIG == CODE where
  A : AbelianMonoid
  S : OrderedSet

  SIG ==> Join(AbelianMonoid,IndexedDirectProductCategory(A,S))

  CODE ==> IndexedDirectProductObject(A,S) add

    --representations
       Term:=  Record(k:S,c:A)
       Rep:=  List Term
       x,y: %
       r: A
       n: NonNegativeInteger
       f: A -> A
       s: S

       0  == []

       zero? x ==  null x

        -- PERFORMANCE CRITICAL; Should build list up
        --  by merging 2 sorted lists.   Doing this will
        -- avoid the recursive calls (very useful if there is a
        -- large number of vars in a polynomial.
       qsetrest!: (Rep, Rep) -> Rep
       qsetrest!(l: Rep, e: Rep): Rep == RPLACD(l, e)$Lisp

       x + y == 
        null x => y
        null y => x
        endcell: Rep := empty()
        res:  Rep := empty()
        while not empty? x and not empty? y repeat 
            newcell := empty()
            if x.first.k = y.first.k then
                r:= x.first.c + y.first.c
                if not zero? r then 
                    newcell := cons([x.first.k, r], empty())
                x := rest x
                y := rest y
            else if x.first.k > y.first.k then
                newcell := cons(x.first, empty())
                x := rest x
            else
                newcell := cons(y.first, empty())
                y := rest y
            if not empty? newcell then 
                if not empty? endcell then
                    qsetrest!(endcell, newcell)
                    endcell := newcell
                else
                    res     := newcell;
                    endcell := res
        if empty? x then end := y
        else end := x
        if empty? res then res := end
        else qsetrest!(endcell, end)
        res

       n * x  ==
             n = 0 => 0
             n = 1 => x
             [[u.k,a] for u in x | (a:=n*u.c) ^= 0$A]

       monomial(r,s) == (r = 0 => 0; [[s,r]])

       map(f,x) == [[tm.k,a] for tm in x | (a:=f(tm.c)) ^= 0$A]

       reductum x     == (null x => 0; rest x)

       leadingCoefficient x  == (null x => 0; x.first.c)

