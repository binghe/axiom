)abbrev category AFSPCAT AffineSpaceCategory
++ Author: Gaetan Hache
++ Date Created: 17 nov 1992
++ Date Last Updated: May 2010 by Tim Daly
++ Description:  
++ The following is all the categories and domains related to projective
++ space and part of the PAFF package

AffineSpaceCategory(K) : Category == SIG where
  K : Field

  LIST ==> List
  INT  ==> Integer
  NNI  ==> NonNegativeInteger

  SIG ==> SetCategoryWithDegree with

    origin : () -> %
    
    affinePoint : LIST(K) -> %
      ++ affinePoint creates a affine point from a list
   
    definingField : % -> K
    
    coerce : % -> List(K)

    coerce : LIST(K) -> %
      ++ coerce a list of K to a affine point.
      
    orbit : % -> LIST %
      ++ orbit(p) returns the orbit of the point p according to the 
      ++ characteristic of K, that is, for q= char K, 
      ++ orbit(p) = \{ p, p**q, p**(q**2), p**(q**3), ..... \}

    orbit : (%,NNI) -> LIST %
      ++ orbit(p,n) returns the orbit of the point p according to n, that is
      ++ orbit(p,n) = \{ p, p**n, p**(n**2), p**(n**3), ..... \}

    conjugate : (%,NNI) -> %
      ++ conjugate(p,n) returns p**n, that is all the coordinates of p 
      ++ to the power of n

    conjugate : % -> %
      ++ conjugate(p) returns conjugate(p,n) where n is the characteristic 
      ++ of the ground field.

    removeConjugate : (LIST(%),NNI) -> LIST(%)
      ++ removeConjugate(lp,n) returns a list of points such that no points
      ++ in the list is the conjugate (according to n) of another point.

    removeConjugate : LIST(%)  -> LIST(%)
      ++ removeConjugate(lp) returns removeConjugate(lp,n)
      ++ where n is the characteristic of the ground field.

    rational? : (%,NNI) -> Boolean
      ++ rational?(p,n) test if the point is rational according to n.

    rational? : % -> Boolean
      ++ rational?(p) test if the point is rational according to the
      ++ characteristic of the ground field.

    list  : % -> LIST(K)
      ++ list returns the list of the coordinates

    elt : (%,INT) -> K
      ++ elt returns the value of a specified coordinates

    setelt : (%,INT,K) -> K
      ++ setelt sets the value of a specified coordinates

    pointValue : % -> LIST(K)
      ++ pointValue returns the coordinates of the point or of the point 
      ++ of origin that represent an infinitly close point

