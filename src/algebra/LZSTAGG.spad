)abbrev category LZSTAGG LazyStreamAggregate
++ Author: Clifton J. Williamson
++ Date Created: 22 November 1989
++ Date Last Updated: 20 July 1990
++ Description:
++ LazyStreamAggregate is the category of streams with lazy
++ evaluation.  It is understood that the function 'empty?' will
++ cause lazy evaluation if necessary to determine if there are
++ entries.  Functions which call 'empty?', for example 'first' and 'rest',
++ will also cause lazy evaluation if necessary.

LazyStreamAggregate(S) : Category == SIG where
  S : Type

  SIG ==> StreamAggregate(S) with

    remove : (S -> Boolean,%) -> %
      ++remove(f,st) returns a stream consisting of those elements of stream
      ++ st which do not satisfy the predicate f.
      ++ Note that \spad{remove(f,st) = [x for x in st | not f(x)]}.
      ++
      ++X m:=[i for i in 1..]
      ++X f(i:PositiveInteger):Boolean == even? i
      ++X remove(f,m)
  
    select : (S -> Boolean,%) -> %
      ++select(f,st) returns a stream consisting of those elements of stream
      ++ st satisfying the predicate f.
      ++ Note that \spad{select(f,st) = [x for x in st | f(x)]}.
      ++
      ++X m:=[i for i in 0..]
      ++X select(x+->prime? x,m)
  
    explicitEntries? : % -> Boolean
      ++explicitEntries?(s) returns true if the stream s has
      ++ explicitly computed entries, and false otherwise.
      ++
      ++X m:=[i for i in 0..]
      ++X explicitEntries? m
  
    explicitlyEmpty? : % -> Boolean
      ++explicitlyEmpty?(s) returns true if the stream is an
      ++ (explicitly) empty stream.
      ++ Note that this is a null test which will not cause lazy evaluation.
      ++
      ++X m:=[i for i in 0..]
      ++X explicitlyEmpty? m
  
    lazy? : % -> Boolean
      ++lazy?(s) returns true if the first node of the stream s
      ++ is a lazy evaluation mechanism which could produce an
      ++ additional entry to s.
      ++
      ++X m:=[i for i in 0..]
      ++X lazy? m
  
    lazyEvaluate : % -> %
      ++lazyEvaluate(s) causes one lazy evaluation of stream s.
      ++ Caution: the first node must be a lazy evaluation mechanism
      ++ (satisfies \spad{lazy?(s) = true}) as there is no error check.
      ++ Note that a call to this function may
      ++ or may not produce an explicit first entry
  
    frst : % -> S
      ++frst(s) returns the first element of stream s.
      ++ Caution: this function should only be called after a \spad{empty?} 
      ++ test has been made since there no error check.
      ++
      ++X m:=[i for i in 0..]
      ++X frst m
  
    rst : % -> %
      ++rst(s) returns a pointer to the next node of stream s.
      ++ Cautrion: this function should only be called after a \spad{empty?} 
      ++ test has been made since there no error check.
      ++
      ++X m:=[i for i in 0..]
      ++X rst m
  
    numberOfComputedEntries : % -> NonNegativeInteger
      ++numberOfComputedEntries(st) returns the number of explicitly
      ++ computed entries of stream st which exist immediately prior to the 
      ++ time this function is called.
      ++
      ++X m:=[i for i in 0..]
      ++X numberOfComputedEntries m
  
    extend : (%,Integer) -> %
      ++extend(st,n) causes entries to be computed, if necessary,
      ++ so that 'st' will have at least 'n' explicit entries or so
      ++ that all entries of 'st' will be computed if 'st' is finite
      ++ with length <= n.
      ++
      ++X m:=[i for i in 0..]
      ++X numberOfComputedEntries m
      ++X extend(m,20)
      ++X numberOfComputedEntries m
  
    complete : % -> %
      ++complete(st) causes all entries of 'st' to be computed.
      ++ this function should only be called on streams which are
      ++ known to be finite.
      ++
      ++X m:=[i for i in 1..]
      ++X n:=filterUntil(i+->i>100,m)
      ++X numberOfComputedEntries n
      ++X complete n
      ++X numberOfComputedEntries n
  
   add
  
     MIN ==> 1  -- minimal stream index
  
     I   ==> Integer
     NNI ==> NonNegativeInteger
     L   ==> List
     U   ==> UniversalSegment Integer
  
     indexx? : (Integer,%) -> Boolean

     cycleElt : % -> Union(%,"failed")

     computeCycleLength : % -> NNI

     computeCycleEntry : (%,%) -> %
  
     --% SETCAT functions
  
     if S has SetCategory then
  
       x = y ==
         eq?(x,y) => true
         explicitlyFinite? x and explicitlyFinite? y =>
           entries x = entries y
         explicitEntries? x and explicitEntries? y =>
           frst x = frst y and EQ(rst x, rst y)$Lisp
         -- treat cyclic streams
         false
  
     --% HOAGG functions
  
     less?(x,n) ==
       n = 0    => false
       empty? x => true
       less?(rst x,(n-1) :: NNI)
  
     more?(x,n) ==
       empty? x => false
       n = 0    => true
       more?(rst x,(n-1) :: NNI)
  
     size?(x,n) ==
       empty? x => n = 0
       size?(rst x,(n-1) :: NNI)
  
     # x ==
       -- error if stream is not finite
       y := x
       for i in 0.. repeat
         explicitlyEmpty? y  => return i
         lazy? y => error "#: infinite stream"
         y := rst y
         if odd? i then x := rst x
         eq?(x,y) => error "#: infinite stream"
  
     --% CLAGG functions
  
     any?(f,x) ==
       -- error message only when x is a stream with lazy
       -- evaluation and f(s) = false for all stream elements
       -- 's' which have been computed when the function is
       -- called
       y := x
       for i in 0.. repeat
         explicitlyEmpty? y  => return false
         lazy? y => error "any?: infinite stream"
         f frst y => return true
         y := rst y
         if odd? i then x := rst x
         eq?(x,y) => return false
  
     every?(f,x) ==
       -- error message only when x is a stream with lazy
       -- evaluation and f(s) = true for all stream elements
       -- 's' which have been computed when the function is
       -- called
       y := x
       for i in 0.. repeat
         explicitlyEmpty? y => return true
         lazy? y => error "every?: infinite stream"
         not f frst y => return false
         y := rst y
         if odd? i then x := rst x
         eq?(x,y) => return true
  
     -- following ops count and member? are only exported 
     -- if $ has finiteAggregate

     entries x ==
       -- returns a list of elements which have been computed
       -- error if infinite
       y := x
       l : L S := empty()
       for i in 0.. repeat
         explicitlyEmpty? y  => return reverse_! l
         lazy? y => error "infinite stream"
         l := concat(frst y,l)
         y := rst y
         if odd? i then x := rst x
         eq?(x,y) => error "infinite stream"
  
      --% CNAGG functions
  
     construct l ==
       empty? l => empty()
       concat(first l, construct rest l)
  
      --% ELTAGG functions
  
     elt(x:%,n:I) ==
       n < MIN or empty? x => error "elt: no such element"
       n = MIN => frst x
       elt(rst x,n - 1)
  
     elt(x:%,n:I,s:S) ==
       n < MIN or empty? x => s
       n = MIN => frst x
       elt(rst x,n - 1)
  
      --% IXAGG functions
  
     indexx?(n,x) ==
       empty? x => false
       n = MIN => true
       indexx?(n-1,rst x)
  
     index?(n,x) ==
       -- returns 'true' iff 'n' is the index of an entry which
       -- may or may not have been computed when the function is
       -- called
       -- additional entries are computed if necessary
       n < MIN => false
       indexx?(n,x)
  
     indices x ==
       -- error if stream is not finite
       y := x
       l : L I := empty()
       for i in MIN.. repeat
         explicitlyEmpty? y  => return reverse_! l
         lazy? y => error "indices: infinite stream"
         l := concat(i,l)
         y := rst y
         if odd? i then x := rst x
         eq?(x,y) => error "indices: infinite stream"
  
     maxIndex x ==
       -- error if stream is not finite
       empty? x =>
         error "maxIndex: no maximal index for empty stream"
       y := rst x
       for i in MIN.. repeat
         explicitlyEmpty? y  => return i
         lazy? y => error "maxIndex: infinite stream"
         y := rst y
         if odd? i then x := rst x
         eq?(x,y) => error "maxIndex: infinite stream"
  
     minIndex x ==
       empty? x => error "minIndex: no minimal index for empty stream"
       MIN
  
      --% LNAGG functions
  
     delete(x:%,n:I) ==
     -- non-destructive
       not index?(n,x) => error "delete: index out of range"
       concat(first(x,(n - MIN) :: NNI), rest(x,(n - MIN + 1) :: NNI))
  
     delete(x:%,seg:U) ==
       low := lo seg
       hasHi seg =>
         high := hi seg
         high < low => copy x
         (not index?(low,x)) or (not index?(high,x)) =>
           error "delete: index out of range"
         concat(first(x,(low - MIN) :: NNI),rest(x,(high - MIN + 1) :: NNI))
       not index?(low,x) => error "delete: index out of range"
       first(x,(low - MIN) :: NNI)
  
     elt(x:%,seg:U) ==
       low := lo seg
       hasHi seg =>
         high := hi seg
         high < low => empty()
         (not index?(low,x)) or (not index?(high,x)) =>
           error "elt: index out of range"
         first(rest(x,(low - MIN) :: NNI),(high - low + 1) :: NNI)
       not index?(low,x) => error "elt: index out of range"
       rest(x,(low - MIN) :: NNI)
  
     insert(s:S,x:%,n:I) ==
       not index?(n,x) => error "insert: index out of range"
       nn := (n - MIN) :: NNI
       concat([first(x,nn), concat(s, empty()), rest(x,nn)])
  
     insert(y:%,x:%,n:I) ==
       not index?(n,x) => error "insert: index out of range"
       nn := (n - MIN) :: NNI
       concat([first(x,nn), y, rest(x,nn)])
  
      --% RCAGG functions
  
     cycleElt x == cycleElt(x)$CyclicStreamTools(S,%)
  
     cyclic? x ==
       cycleElt(x) case "failed" => false
       true
  
     if S has SetCategory then

       child?(x,y) ==
         empty? y => error "child: no children"
         x = rst y
  
     children x ==
       empty? x => error "children: no children"
       [rst x]
  
     distance(x,z) ==
       y := x
       for i in 0.. repeat
         eq?(y,z) => return i
         (explicitlyEmpty? y) or (lazy? y) =>
           error "distance: 2nd arg not a descendent of the 1st"
         y := rst y
         if odd? i then x := rst x
         eq?(x,y) =>
           error "distance: 2nd arg not a descendent of the 1st"
  
     if S has SetCategory then

       node?(z,x) ==
         -- error message only when x is a stream with lazy
         -- evaluation and 'y' is not a node of 'x'
         -- which has been computed when the function is called
         y := x
         for i in 0.. repeat
           z = y => return true
           explicitlyEmpty? y => return false
           lazy? y => error "node?: infinite stream"
           y := rst y
           if odd? i then x := rst x
           eq?(x,y) => return false
  
     nodes x ==
       y := x
       l : L % := []
       for i in 0.. repeat
         explicitlyEmpty? y => return reverse_! l
         lazy? y => error "nodes: infinite stream"
         l := concat(y,l)
         y := rst y
         if odd? i then x := rst x
         eq?(x,y) => error "nodes: infinite stream"
       l
  
     leaf? x == empty? rest x
  
     value x == first x
  
      --% URAGG functions
  
     computeCycleLength cycElt ==
       computeCycleLength(cycElt)$CyclicStreamTools(S,%)
  
     computeCycleEntry(x,cycElt) ==
       computeCycleEntry(x,cycElt)$CyclicStreamTools(S,%)
  
     cycleEntry x ==
       cycElt := cycleElt x
       cycElt case "failed" =>
         error "cycleEntry: non-cyclic stream"
       computeCycleEntry(x,cycElt::%)
  
     cycleLength x ==
       cycElt := cycleElt x
       cycElt case "failed" =>
         error "cycleLength: non-cyclic stream"
       computeCycleLength(cycElt::%)
  
     cycleTail x ==
       cycElt := cycleElt x
       cycElt case "failed" =>
         error "cycleTail: non-cyclic stream"
       y := x := computeCycleEntry(x,cycElt::%)
       z := rst x
       repeat
         eq?(x,z) => return y
         y := z ; z := rst z
  
     elt(x,"first") == first x
  
     first(x,n) ==
     -- former name: take
       n = 0 or empty? x => empty()
       concat(frst x, first(rst x,(n-1) :: NNI))
  
     rest x ==
       empty? x => error "Can't take the rest of an empty stream."
       rst x
  
     elt(x,"rest") == rest x
  
     rest(x,n) ==
     -- former name: drop
       n = 0 or empty? x => x
       rest(rst x,(n-1) :: NNI)
  
     last x ==
       -- error if stream is not finite
       empty? x => error "last: empty stream"
       y1 := x
       y2 := rst x
       for i in 0.. repeat
         explicitlyEmpty? y2 => return frst y1
         lazy? y2 => error "last: infinite stream"
         y1 := y2
         y2 := rst y2
         if odd? i then x := rst x
         eq?(x,y2) => error "last: infinite stream"
  
     if % has finiteAggregate then -- # is only defined for finiteAggregates

       last(x,n) ==
         possiblyInfinite? x => error "last: infinite stream"
         m := # x
         m < n => error "last: index out of range"
         copy rest(x,(m-n)::NNI)
  
     elt(x,"last") == last x
  
     tail x ==
       -- error if stream is not finite
       empty? x => error "tail: empty stream"
       y1 := x
       y2 := rst x
       for i in 0.. repeat
         explicitlyEmpty? y2 => return y1
         lazy? y2 => error "tail: infinite stream"
         y1 := y2
         y2 := rst y2
         if odd? i then x := rst x
         eq?(x,y2) => error "tail: infinite stream"
  
      --% STAGG functions
  
     possiblyInfinite? x ==
       y := x
       for i in 0.. repeat
         explicitlyEmpty? y  => return false
         lazy? y => return true
         if odd? i then x := rst x
         y := rst y
         eq?(x,y) => return true
  
     explicitlyFinite? x == not possiblyInfinite? x
  
      --% LZSTAGG functions
  
     extend(x,n) ==
       y := x
       for i in 1..n while not empty? y repeat y := rst y
       x
  
     complete x ==
       y := x
       while not empty? y repeat y := rst y
       x

