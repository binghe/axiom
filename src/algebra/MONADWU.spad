)abbrev category MONADWU MonadWithUnit
++ Authors: J. Grabmeier, R. Wisbauer
++ Date Created: 01 March 1991
++ Date Last Updated: 11 June 1991
++ Reference:
++ Jaco68 Structure and Representations of Jordan Algebras
++ Description:
++ MonadWithUnit is the class of multiplicative monads with unit,
++ that is, sets with a binary operation and a unit element.
++
++ Axioms\br
++ \tab{5}leftIdentity("*":(%,%)->%,1) for example, 1*x=x\br
++ \tab{5}rightIdentity("*":(%,%)->%,1) for example, x*1=x
++
++ Common Additional Axioms\br
++ \tab{5}unitsKnown - if "recip" says "failed", it PROVES input wasn't a unit

MonadWithUnit() : Category == SIG where

  SIG ==> Monad with

    1 : constant ->  %
      ++ \spad{1} returns the unit element, denoted by 1.

    one? : % -> Boolean
      ++ one?(a) tests whether \spad{a} is the unit 1.

    rightPower : (%,NonNegativeInteger) -> %
      ++ rightPower(a,n) returns the \spad{n}-th right power of \spad{a},
      ++ that is, \spad{rightPower(a,n) := rightPower(a,n-1) * a} and
      ++ \spad{rightPower(a,0) := 1}.

    leftPower : (%,NonNegativeInteger) -> %
      ++ leftPower(a,n) returns the \spad{n}-th left power of \spad{a},
      ++ that is, \spad{leftPower(a,n) := a * leftPower(a,n-1)} and
      ++ \spad{leftPower(a,0) := 1}.

    "**" : (%,NonNegativeInteger) -> %
      ++ \spad{a**n} returns the \spad{n}-th power of \spad{a},
      ++ defined by repeated squaring.

    recip : % -> Union(%,"failed")
      ++ recip(a) returns an element, which is both a left and a right
      ++ inverse of \spad{a},
      ++ or \spad{"failed"} if such an element doesn't exist or cannot
      ++ be determined (see unitsKnown).

    leftRecip : % -> Union(%,"failed")
      ++ leftRecip(a) returns an element, which is a left inverse of 
      ++ \spad{a}, or \spad{"failed"} if such an element doesn't exist 
      ++ or cannot be determined (see unitsKnown).

    rightRecip : % -> Union(%,"failed")
      ++ rightRecip(a) returns an element, which is a right inverse of
      ++ \spad{a}, or \spad{"failed"} if such an element doesn't exist
      ++ or cannot be determined (see unitsKnown).

   add

      import RepeatedSquaring(%)

      one? x == x = 1

      x:% ** n:NonNegativeInteger ==
         zero? n => 1
         expt(x,n pretend PositiveInteger)

      rightPower(a,n) ==
        zero? n => 1
        res := 1
        for i in 1..n repeat res := res * a
        res

      leftPower(a,n) ==
        zero? n => 1
        res := 1
        for i in 1..n repeat res := a * res
        res

