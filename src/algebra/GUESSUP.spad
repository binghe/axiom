)abbrev package GUESSUP GuessUnivariatePolynomial
++ References: 
++ Rube06 Extended rate, more GFUN
++ Hebi10 Extended Rate, more GFUN
++ Description:
++ This package exports guessing of sequences of univariate rational functions

GuessUnivariatePolynomial(q) : SIG == CODE where
  q : Symbol

  UP ==> MyUnivariatePolynomial(q, Integer)
  EXPRR ==> MyExpression(q, Integer)
  F ==> Fraction UP
  S ==> UP
  NNI ==> NonNegativeInteger
  LGOPT ==> List GuessOption
  GUESSRESULT ==> List Record(function: EXPRR, order: NNI)
  GUESSER ==> (List F, LGOPT) -> GUESSRESULT

  SIG ==> with

    guess : List F -> GUESSRESULT
      ++ \spad{guess l} applies recursively \spadfun{guessRec} and
      ++ \spadfun{guessADE} to the successive differences and quotients of
      ++ the list. Default options as described in
      ++ \spadtype{GuessOptionFunctions0} are used.

    guess : (List F, LGOPT) -> GUESSRESULT
      ++ \spad{guess(l, options)} applies recursively \spadfun{guessRec}
      ++ and \spadfun{guessADE} to the successive differences and quotients
      ++ of the list. The given options are used.

    guess : (List F, List GUESSER, List Symbol) -> GUESSRESULT
      ++ \spad{guess(l, guessers, ops)} applies recursively the given
      ++ guessers to the successive differences if ops contains the symbol
      ++ guessSum and quotients if ops contains the symbol guessProduct to
      ++ the list. Default options as described in
      ++ \spadtype{GuessOptionFunctions0} are used.

    guess : (List F, List GUESSER, List Symbol, LGOPT) -> GUESSRESULT
      ++ \spad{guess(l, guessers, ops)} applies recursively the given
      ++ guessers to the successive differences if ops contains the symbol
      ++ \spad{guessSum} and quotients if ops contains the symbol
      ++ \spad{guessProduct} to the list. The given options are used.

    guessExpRat : List F -> GUESSRESULT
      ++ \spad{guessExpRat l} tries to find a function of the form 
      ++ n+->(a+b n)^n r(n), where r(n) is a rational function, that fits
      ++ l. 

    guessExpRat : (List F, LGOPT) -> GUESSRESULT
      ++ \spad{guessExpRat(l, options)} tries to find a function of the
      ++ form n+->(a+b n)^n r(n), where r(n) is a rational function, that
      ++ fits l. 

    guessBinRat : List F -> GUESSRESULT
      ++ \spad{guessBinRat(l, options)} tries to find a function of the
      ++ form n+->binomial(a+b n, n) r(n), where r(n) is a rational 
      ++ function, that fits l. 

    guessBinRat : (List F, LGOPT) -> GUESSRESULT
      ++ \spad{guessBinRat(l, options)} tries to find a function of the
      ++ form n+->binomial(a+b n, n) r(n), where r(n) is a rational 
      ++ function, that fits l. 

--        if F has RetractableTo Symbol and S has RetractableTo Symbol then

    guessExpRat : Symbol -> GUESSER
      ++ \spad{guessExpRat q} returns a guesser that tries to find a
      ++ function of the form n+->(a+b q^n)^n r(q^n), where r(q^n) is a
      ++ q-rational function, that fits l.

    guessBinRat : Symbol -> GUESSER
      ++ \spad{guessBinRat q} returns a guesser that tries to find a
      ++ function of the form n+->qbinomial(a+b n, n) r(n), where r(q^n) is a
      ++ q-rational function, that fits l.

-------------------------------------------------------------------------------

    guessHP : (LGOPT -> HPSPEC) -> GUESSER
      ++ \spad{guessHP f} constructs an operation that applies Hermite-Pade
      ++ approximation to the series generated by the given function f.

    guessADE : List F -> GUESSRESULT
      ++ \spad{guessADE l} tries to find an algebraic differential equation
      ++ for a generating function whose first Taylor coefficients are
      ++ given by l, using the default options described in
      ++ \spadtype{GuessOptionFunctions0}.

    guessADE : (List F, LGOPT) -> GUESSRESULT
      ++ \spad{guessADE(l, options)} tries to find an algebraic
      ++ differential equation for a generating function whose first Taylor
      ++ coefficients are given by l, using the given options.

    guessAlg : List F -> GUESSRESULT
      ++ \spad{guessAlg l} tries to find an algebraic equation for a
      ++ generating function whose first Taylor coefficients are given by
      ++ l, using the default options described in
      ++ \spadtype{GuessOptionFunctions0}. It is equivalent to
      ++ \spadfun{guessADE}(l, maxDerivative == 0).

    guessAlg : (List F, LGOPT) -> GUESSRESULT
      ++ \spad{guessAlg(l, options)} tries to find an algebraic equation
      ++ for a generating function whose first Taylor coefficients are
      ++ given by l, using the given options. It is equivalent to
      ++ \spadfun{guessADE}(l, options) with \spad{maxDerivative == 0}.

    guessHolo : List F -> GUESSRESULT
      ++ \spad{guessHolo l} tries to find an ordinary linear differential
      ++ equation for a generating function whose first Taylor coefficients
      ++ are given by l, using the default options described in
      ++ \spadtype{GuessOptionFunctions0}. It is equivalent to
      ++ \spadfun{guessADE}\spad{(l, maxPower == 1)}.

    guessHolo : (List F, LGOPT) -> GUESSRESULT
      ++ \spad{guessHolo(l, options)} tries to find an ordinary linear
      ++ differential equation for a generating function whose first Taylor
      ++ coefficients are given by l, using the given options. It is
      ++ equivalent to \spadfun{guessADE}\spad{(l, options)} with
      ++ \spad{maxPower == 1}.

    guessPade : (List F, LGOPT) -> GUESSRESULT
      ++ \spad{guessPade(l, options)} tries to find a rational function
      ++ whose first Taylor coefficients are given by l, using the given
      ++ options. It is equivalent to \spadfun{guessADE}\spad{(l,
      ++ maxDerivative == 0, maxPower == 1, allDegrees == true)}.

    guessPade : List F -> GUESSRESULT
      ++ \spad{guessPade(l, options)} tries to find a rational function
      ++ whose first Taylor coefficients are given by l, using the default
      ++ options described in \spadtype{GuessOptionFunctions0}. It is
      ++ equivalent to \spadfun{guessADE}\spad{(l, options)} with
      ++ \spad{maxDerivative == 0, maxPower == 1, allDegrees == true}.

    guessRec : List F -> GUESSRESULT
      ++ \spad{guessRec l} tries to find an ordinary difference equation
      ++ whose first values are given by l, using the default options
      ++ described in \spadtype{GuessOptionFunctions0}.

    guessRec : (List F, LGOPT) -> GUESSRESULT
      ++ \spad{guessRec(l, options)} tries to find an ordinary difference
      ++ equation whose first values are given by l, using the given
      ++ options. 

    guessPRec : (List F, LGOPT) -> GUESSRESULT
      ++ \spad{guessPRec(l, options)} tries to find a linear recurrence
      ++ with polynomial coefficients whose first values are given by l,
      ++ using the given options. It is equivalent to
      ++ \spadfun{guessRec}\spad{(l, options)} with \spad{maxPower == 1}.

    guessPRec : List F -> GUESSRESULT
      ++ \spad{guessPRec l} tries to find a linear recurrence with
      ++ polynomial coefficients whose first values are given by l, using
      ++ the default options described in
      ++ \spadtype{GuessOptionFunctions0}. It is equivalent to
      ++ \spadfun{guessRec}\spad{(l, maxPower == 1)}. 

    guessRat : (List F, LGOPT) -> GUESSRESULT
      ++ \spad{guessRat(l, options)} tries to find a rational function
      ++ whose first values are given by l, using the given options. It is
      ++ equivalent to \spadfun{guessRec}\spad{(l, maxShift == 0, maxPower
      ++ == 1, allDegrees == true)}.

    guessRat : List F -> GUESSRESULT
      ++ \spad{guessRat l} tries to find a rational function whose first
      ++ values are given by l, using the default options described in
      ++ \spadtype{GuessOptionFunctions0}. It is equivalent to
      ++ \spadfun{guessRec}\spad{(l, maxShift == 0, maxPower == 1,
      ++ allDegrees == true)}.

    diffHP : LGOPT -> HPSPEC
      ++ \spad{diffHP options} returns a specification for Hermite-Pade
      ++ approximation with the differential operator

    shiftHP : LGOPT -> HPSPEC
      ++ \spad{shiftHP options} returns a specification for Hermite-Pade
      ++ approximation with the shift operator

--        if F has RetractableTo Symbol and S has RetractableTo Symbol then

    shiftHP : Symbol -> (LGOPT -> HPSPEC)
      ++ \spad{shiftHP options} returns a specification for
      ++ Hermite-Pade approximation with the $q$-shift operator

    diffHP : Symbol -> (LGOPT -> HPSPEC)
      ++ \spad{diffHP options} returns a specification for Hermite-Pade
      ++ approximation with the  $q$-dilation operator

    guessRec : Symbol -> GUESSER
      ++ \spad{guessRec q} returns a guesser that finds an ordinary
      ++ q-difference equation whose first values are given by l, using
      ++ the given options.

    guessPRec : Symbol -> GUESSER
      ++ \spad{guessPRec q} returns a guesser that tries to find
      ++ a linear q-recurrence with polynomial coefficients whose first
      ++ values are given by l, using the given options. It is
      ++ equivalent to \spadfun{guessRec}\spad{(q)} with 
      ++ \spad{maxPower == 1}.

    guessRat : Symbol -> GUESSER
      ++ \spad{guessRat q} returns a guesser that tries to find a
      ++ q-rational function whose first values are given by l, using
      ++ the given options. It is equivalent to \spadfun{guessRec} with
      ++ \spad{(l, maxShift == 0, maxPower == 1, allDegrees == true)}.

    guessADE : Symbol -> GUESSER
      ++ \spad{guessADE q} returns a guesser that tries to find an
      ++ algebraic differential equation for a generating function whose
      ++ first Taylor coefficients are given by l, using the given
      ++ options.

-------------------------------------------------------------------------------

  CODE ==> Guess(Fraction UP, UP, MyExpression(q, Integer), Fraction UP,
                 id$MappingPackage1(Fraction UP),
                 coerce$MyExpression(q, Integer))

