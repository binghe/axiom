)abbrev package NEWTON NewtonInterpolation
++ Description:
++ This package exports Newton interpolation for the special case where the
++ result is known to be in the original integral domain
++ The packages defined in this file provide fast fraction free rational
++ interpolation algorithms. (see FAMR2, FFFG, FFFGF, NEWTON)

NewtonInterpolation(F) : SIG == CODE where
  F : IntegralDomain

  SIG ==> with

    newton : List F -> SparseUnivariatePolynomial F
      ++ \spad{newton}(l) returns the interpolating polynomial for the values
      ++ l, where the x-coordinates are assumed to be [1,2,3,...,n] and the
      ++ coefficients of the interpolating polynomial are known to be in the
      ++ domain F., it is a very streamlined version for a special case of
      ++ interpolation. 

  CODE ==> add

    differences(yl: List F): List F == 
      [y2-y1 for y1 in yl for y2 in rest yl]

    z: SparseUnivariatePolynomial(F) := monomial(1,1)

    -- we assume x=[1,2,3,...,n]
    newtonAux(k: F, fact: F, yl: List F): SparseUnivariatePolynomial(F) ==
      if empty? rest yl 
      then ((yl.1) exquo fact)::F::SparseUnivariatePolynomial(F)
      else ((yl.1) exquo fact)::F::SparseUnivariatePolynomial(F) 
           + (z-k::SparseUnivariatePolynomial(F)) _
             * newtonAux(k+1$F, fact*k, differences yl)

    newton yl == newtonAux(1$F, 1$F, yl)

