)abbrev domain AUTOMOR Automorphism
++ Author: Manuel Bronstein
++ Date Created: 31 January 1994
++ Date Last Updated: 31 January 1994
++ References:
++ Bron95 On radical solutions of linear ordinary differential equations
++ Abra01 On Solutions of Linear Functional Systems
++ Muld95 Primitives: Orepoly and Lodo
++ Description:
++ Automorphism R is the multiplicative group of automorphisms of R.
-- In fact, non-invertible endomorphism are allowed as partial functions.
-- This domain is noncanonical in that f*f^{-1} will be the identity
-- function but won't be equal to 1.

Automorphism(R) : SIG == CODE where
  R : Ring

  SIG ==> Join(Group, Eltable(R, R)) with

      morphism : (R -> R) -> %
        ++ morphism(f) returns the non-invertible morphism given by f.

      morphism : (R -> R, R -> R) -> %
        ++ morphism(f, g) returns the invertible morphism given by f, where
        ++ g is the inverse of f..

      morphism : ((R, Integer) -> R) -> %
        ++ morphism(f) returns the morphism given by \spad{f^n(x) = f(x,n)}.

  CODE ==> add

      err:   R -> R
      ident: (R, Integer) -> R
      iter:  (R -> R, NonNegativeInteger, R) -> R
      iterat: (R -> R, R -> R, Integer, R) -> R
      apply: (%, R, Integer) -> R
 
      Rep := ((R, Integer) -> R)
 
      1 == ident

      err r == error "Morphism is not invertible"

      ident(r, n) == r

      f = g == EQ(f, g)$Lisp

      elt(f, r) == apply(f, r, 1)

      inv f  == (r1:R, i2:Integer):R +-> apply(f, r1, - i2)

      f ** n == (r1:R, i2:Integer):R +-> apply(f, r1, n * i2)

      coerce(f:%):OutputForm == message("R -> R")

      morphism(f:(R, Integer) -> R):% == f

      morphism(f:R -> R):% == morphism(f, err)

      morphism(f, g) == (r1:R, i2:Integer):R +-> iterat(f, g, i2, r1)

      apply(f, r, n) == (g := f pretend ((R, Integer) -> R); g(r, n))
 
      iterat(f, g, n, r) ==
          n < 0 => iter(g, (-n)::NonNegativeInteger, r)
          iter(f, n::NonNegativeInteger, r)
 
      iter(f, n, r) ==
          for i in 1..n repeat r := f r
          r
 
      f * g ==
        f = g => f**2
        (r1:R, i2:Integer):R +-> 
          iterat((u1:R):R +-> f g u1, 
                 (v1:R):R +-> (inv g)(inv f) v1, 
                 i2, r1)

