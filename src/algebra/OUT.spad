)abbrev package OUT OutputPackage
++ Author: Stephen M. Watt
++ Date Created: February 1986
++ Date Last Updated: October 27 1995 (MCD)
++ Description: 
++ OutPackage allows pretty-printing from programs.

OutputPackage() : SIG == CODE where

  SIG ==> with

    output : String -> Void
      ++ output(s) displays the string s on the ``algebra output''
      ++ stream, as defined by \spadsyscom{set output algebra}.

    output : OutputForm -> Void
      ++ output(x) displays the output form x on the
      ++ ``algebra output'' stream, as defined by
      ++ \spadsyscom{set output algebra}.

    output : (String, OutputForm) -> Void
      ++ output(s,x) displays the string s followed by the form x
      ++ on the ``algebra output'' stream, as defined by
      ++ \spadsyscom{set output algebra}.

    outputList : (List Any) -> Void
      ++ outputList(l) displays the concatenated components of the
      ++ list l on the ``algebra output'' stream, as defined by
      ++ \spadsyscom{set output algebra}; quotes are stripped
      ++ from strings.

  CODE ==> add

    --ExpressionPackage()
    E      ==> OutputForm
    putout ==> mathprint$Lisp

    s: String
    e: OutputForm
    l: List Any

    output e ==
      mathprint(e)$Lisp
      void()

    -- Note that we have to do the pretend here because otherwise we will
    -- try to load STRING which is not yet compiled during build.

    output s ==
      output(s pretend OutputForm)

    output(s,e) ==
      output blankSeparate [s pretend OutputForm, e]

    outputList(l) ==                                -- MGR
      output hconcat
        [if retractable?(x)$AnyFunctions1(String) then
            message(retract(x)$AnyFunctions1(String))$OutputForm
          else
            x::OutputForm
         for x in l]

